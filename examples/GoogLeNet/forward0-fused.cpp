// <file: forward0.cpp>
#include <immintrin.h>
#include <mkl.h>
#include <stdio.h>
#include <cmath>
#include <omp.h>
#include <unistd.h>
#if 1
#include "/data/nfs_home/avenkat/latte/latte/runtime/runtime.h"
#endif
#define SIMDWIDTH 8
#define MIN(x, y) (((x) < (y)) ? (x) : (y))
#define MAX(x, y) (((x) > (y)) ? (x) : (y))

#if 0
#ifdef APPLE
#include <OpenCL/opencl.h>
#else
#include <CL/cl.h>
#endif
#endif

#if 0
#include <libxsmm.h>
#include <libxsmm_dnn.h>
#endif

inline void __mm_prefetch_t0(float const *a) {
  _mm_prefetch((char const *)a, _MM_HINT_T0);
}

inline void __mm_prefetch_t1(float const *a) {
  _mm_prefetch((char const *)a, _MM_HINT_T1);
}

template<int in_width, int out_width>
void transpose(float *in, float *out)
{
    __m256i r0, r1, r2, r3, r4, r5, r6, r7;
    __m256i t0, t1, t2, t3, t4, t5, t6, t7;
    if((in_width & 0x7 != 0)  || (out_width & 0x7 != 0)) {printf("Transpose8x8: Invalid in or out width\\n"); return;}

    r0 = _mm256_load_si256((const __m256i *)(in + 0*in_width));
    r1 = _mm256_load_si256((const __m256i *)(in + 1*in_width));
    r2 = _mm256_load_si256((const __m256i *)(in + 2*in_width));
    r3 = _mm256_load_si256((const __m256i *)(in + 3*in_width));
    r4 = _mm256_load_si256((const __m256i *)(in + 4*in_width));
    r5 = _mm256_load_si256((const __m256i *)(in + 5*in_width));
    r6 = _mm256_load_si256((const __m256i *)(in + 6*in_width));
    r7 = _mm256_load_si256((const __m256i *)(in + 7*in_width));

    t0 = _mm256_unpacklo_epi32(r0,r1); 
    t1 = _mm256_unpackhi_epi32(r0,r1); 
    t2 = _mm256_unpacklo_epi32(r2,r3); 
    t3 = _mm256_unpackhi_epi32(r2,r3); 
    t4 = _mm256_unpacklo_epi32(r4,r5); 
    t5 = _mm256_unpackhi_epi32(r4,r5); 
    t6 = _mm256_unpacklo_epi32(r6,r7); 
    t7 = _mm256_unpackhi_epi32(r6,r7); 

    r0 = _mm256_unpacklo_epi64(t0,t2); 
    r1 = _mm256_unpackhi_epi64(t0,t2); 
    r2 = _mm256_unpacklo_epi64(t1,t3); 
    r3 = _mm256_unpackhi_epi64(t1,t3); 
    r4 = _mm256_unpacklo_epi64(t4,t6); 
    r5 = _mm256_unpackhi_epi64(t4,t6); 
    r6 = _mm256_unpacklo_epi64(t5,t7); 
    r7 = _mm256_unpackhi_epi64(t5,t7); 

    t0 = _mm256_permute2f128_si256(r0, r4, 0x20); 
    t1 = _mm256_permute2f128_si256(r1, r5, 0x20); 
    t2 = _mm256_permute2f128_si256(r2, r6, 0x20); 
    t3 = _mm256_permute2f128_si256(r3, r7, 0x20); 
    t4 = _mm256_permute2f128_si256(r0, r4, 0x31); 
    t5 = _mm256_permute2f128_si256(r1, r5, 0x31); 
    t6 = _mm256_permute2f128_si256(r2, r6, 0x31); 
    t7 = _mm256_permute2f128_si256(r3, r7, 0x31); 

    _mm256_store_si256((__m256i *)(out + 0*out_width), t0);
    _mm256_store_si256((__m256i *)(out + 1*out_width), t1);
    _mm256_store_si256((__m256i *)(out + 2*out_width), t2);
    _mm256_store_si256((__m256i *)(out + 3*out_width), t3);
    _mm256_store_si256((__m256i *)(out + 4*out_width), t4);
    _mm256_store_si256((__m256i *)(out + 5*out_width), t5);
    _mm256_store_si256((__m256i *)(out + 6*out_width), t6);
    _mm256_store_si256((__m256i *)(out + 7*out_width), t7);
}

extern "C"
void forward0(float* _ensemble100inputs, long* _ensemble100mask_j, long* _ensemble100mask_k, float* _ensemble100value, float* _ensemble101inputs, float* _ensemble101value, float* _ensemble101weights, float* _ensemble101weights_transposed, float* _ensemble102bias, float* _ensemble102inputs, float* _ensemble102value, float* _ensemble103inputs, float* _ensemble103value, float* _ensemble104inputs, float* _ensemble104inputs1, float* _ensemble104inputs2, float* _ensemble104inputs3, float* _ensemble104value, float* _ensemble105inputs, float* _ensemble105value, float* _ensemble105weights, float* _ensemble105weights_transposed, float* _ensemble106bias, float* _ensemble106inputs, float* _ensemble106value, float* _ensemble107inputs, float* _ensemble107value, float* _ensemble108inputs, float* _ensemble108value, float* _ensemble108weights, float* _ensemble108weights_transposed, float* _ensemble109bias, float* _ensemble109inputs, float* _ensemble109value, float* _ensemble10inputs, float* _ensemble10value, float* _ensemble10weights, float* _ensemble10weights_transposed, float* _ensemble110inputs, float* _ensemble110value, float* _ensemble111inputs, float* _ensemble111value, float* _ensemble111weights, float* _ensemble111weights_transposed, float* _ensemble112bias, float* _ensemble112inputs, float* _ensemble112value, float* _ensemble113inputs, float* _ensemble113value, float* _ensemble114inputs, float* _ensemble114value, float* _ensemble114weights, float* _ensemble114weights_transposed, float* _ensemble115bias, float* _ensemble115inputs, float* _ensemble115value, float* _ensemble116inputs, float* _ensemble116value, float* _ensemble117inputs, float* _ensemble117value, float* _ensemble117weights, float* _ensemble117weights_transposed, float* _ensemble118bias, float* _ensemble118inputs, float* _ensemble118value, float* _ensemble119inputs, float* _ensemble119value, float* _ensemble11bias, float* _ensemble11inputs, float* _ensemble11value, float* _ensemble120inputs, long* _ensemble120mask_j, long* _ensemble120mask_k, float* _ensemble120value, float* _ensemble121inputs, float* _ensemble121value, float* _ensemble121weights, float* _ensemble121weights_transposed, float* _ensemble122bias, float* _ensemble122inputs, float* _ensemble122value, float* _ensemble123inputs, float* _ensemble123value, float* _ensemble124inputs, float* _ensemble124inputs1, float* _ensemble124inputs2, float* _ensemble124inputs3, float* _ensemble124value, float* _ensemble125inputs, float* _ensemble125value, float* _ensemble125weights, float* _ensemble125weights_transposed, float* _ensemble126bias, float* _ensemble126inputs, float* _ensemble126value, float* _ensemble127inputs, float* _ensemble127value, float* _ensemble128inputs, float* _ensemble128value, float* _ensemble128weights, float* _ensemble128weights_transposed, float* _ensemble129bias, float* _ensemble129inputs, float* _ensemble129value, float* _ensemble12inputs, float* _ensemble12value, float* _ensemble130inputs, float* _ensemble130value, float* _ensemble131inputs, float* _ensemble131value, float* _ensemble131weights, float* _ensemble131weights_transposed, float* _ensemble132bias, float* _ensemble132inputs, float* _ensemble132value, float* _ensemble133inputs, float* _ensemble133value, float* _ensemble134inputs, float* _ensemble134value, float* _ensemble134weights, float* _ensemble134weights_transposed, float* _ensemble135bias, float* _ensemble135inputs, float* _ensemble135value, float* _ensemble136inputs, float* _ensemble136value, float* _ensemble137inputs, float* _ensemble137value, float* _ensemble137weights, float* _ensemble137weights_transposed, float* _ensemble138bias, float* _ensemble138inputs, float* _ensemble138value, float* _ensemble139inputs, float* _ensemble139value, double* _ensemble13alpha, double* _ensemble13beta, float* _ensemble13inputs, double* _ensemble13k, long* _ensemble13n, double* _ensemble13sum_value, float* _ensemble13value, float* _ensemble140inputs, long* _ensemble140mask_j, long* _ensemble140mask_k, float* _ensemble140value, float* _ensemble141inputs, float* _ensemble141value, float* _ensemble141weights, float* _ensemble141weights_transposed, float* _ensemble142bias, float* _ensemble142inputs, float* _ensemble142value, float* _ensemble143inputs, float* _ensemble143value, float* _ensemble144inputs, float* _ensemble144inputs1, float* _ensemble144inputs2, float* _ensemble144inputs3, float* _ensemble144value, float* _ensemble145inputs, long* _ensemble145kernel, float* _ensemble145value, float* _ensemble146inputs, float* _ensemble146value, float* _ensemble146weights, float* _ensemble146weights_transposed, float* _ensemble147bias, float* _ensemble147inputs, float* _ensemble147value, float* _ensemble148inputs, float* _ensemble148value, float* _ensemble149inputs, float* _ensemble149value, float* _ensemble149weights, float* _ensemble149weights_transposed, float* _ensemble14inputs, long* _ensemble14mask_j, long* _ensemble14mask_k, float* _ensemble14value, float* _ensemble150bias, float* _ensemble150inputs, float* _ensemble150value, float* _ensemble151inputs, float* _ensemble151value, float* _ensemble152inputs, float* _ensemble152value, float* _ensemble152weights, float* _ensemble152weights_transposed, float* _ensemble153bias, float* _ensemble153inputs, float* _ensemble153value, float* _ensemble154inputs, float* _ensemble154value, float* _ensemble154weights, float* _ensemble154weights_transposed, float* _ensemble155bias, float* _ensemble155inputs, float* _ensemble155value, float* _ensemble156inputs, float* _ensemble156value, float* _ensemble157inputs, float* _ensemble157value, float* _ensemble157weights, float* _ensemble157weights_transposed, float* _ensemble158bias, float* _ensemble158inputs, float* _ensemble158value, float* _ensemble159inputs, float* _ensemble159value, float* _ensemble15inputs, float* _ensemble15value, float* _ensemble15weights, float* _ensemble15weights_transposed, float* _ensemble160inputs, float* _ensemble160value, float* _ensemble160weights, float* _ensemble160weights_transposed, float* _ensemble161bias, float* _ensemble161inputs, float* _ensemble161value, float* _ensemble162inputs, float* _ensemble162value, float* _ensemble163inputs, float* _ensemble163value, float* _ensemble163weights, float* _ensemble163weights_transposed, float* _ensemble164bias, float* _ensemble164inputs, float* _ensemble164value, float* _ensemble165inputs, float* _ensemble165value, float* _ensemble166inputs, float* _ensemble166value, float* _ensemble166weights, float* _ensemble166weights_transposed, float* _ensemble167bias, float* _ensemble167inputs, float* _ensemble167value, float* _ensemble168inputs, float* _ensemble168value, float* _ensemble169inputs, long* _ensemble169mask_j, long* _ensemble169mask_k, float* _ensemble169value, float* _ensemble16bias, float* _ensemble16inputs, float* _ensemble16value, float* _ensemble170inputs, float* _ensemble170value, float* _ensemble170weights, float* _ensemble170weights_transposed, float* _ensemble171bias, float* _ensemble171inputs, float* _ensemble171value, float* _ensemble172inputs, float* _ensemble172value, float* _ensemble173inputs, float* _ensemble173inputs1, float* _ensemble173inputs2, float* _ensemble173inputs3, float* _ensemble173value, float* _ensemble174inputs, long* _ensemble174mask_j, long* _ensemble174mask_k, float* _ensemble174value, float* _ensemble175inputs, float* _ensemble175value, float* _ensemble175weights, float* _ensemble175weights_transposed, float* _ensemble176bias, float* _ensemble176inputs, float* _ensemble176value, float* _ensemble177inputs, float* _ensemble177value, float* _ensemble178inputs, float* _ensemble178value, float* _ensemble178weights, float* _ensemble178weights_transposed, float* _ensemble179bias, float* _ensemble179inputs, float* _ensemble179value, float* _ensemble17inputs, float* _ensemble17value, float* _ensemble180inputs, float* _ensemble180value, float* _ensemble181inputs, float* _ensemble181value, float* _ensemble181weights, float* _ensemble181weights_transposed, float* _ensemble182bias, float* _ensemble182inputs, float* _ensemble182value, float* _ensemble183inputs, float* _ensemble183value, float* _ensemble184inputs, float* _ensemble184value, float* _ensemble184weights, float* _ensemble184weights_transposed, float* _ensemble185bias, float* _ensemble185inputs, float* _ensemble185value, float* _ensemble186inputs, float* _ensemble186value, float* _ensemble187inputs, float* _ensemble187value, float* _ensemble187weights, float* _ensemble187weights_transposed, float* _ensemble188bias, float* _ensemble188inputs, float* _ensemble188value, float* _ensemble189inputs, float* _ensemble189value, float* _ensemble18inputs, float* _ensemble18value, float* _ensemble18weights, float* _ensemble18weights_transposed, float* _ensemble190inputs, long* _ensemble190mask_j, long* _ensemble190mask_k, float* _ensemble190value, float* _ensemble191inputs, float* _ensemble191value, float* _ensemble191weights, float* _ensemble191weights_transposed, float* _ensemble192bias, float* _ensemble192inputs, float* _ensemble192value, float* _ensemble193inputs, float* _ensemble193value, float* _ensemble194inputs, float* _ensemble194inputs1, float* _ensemble194inputs2, float* _ensemble194inputs3, float* _ensemble194value, float* _ensemble195inputs, float* _ensemble195value, float* _ensemble195weights, float* _ensemble195weights_transposed, float* _ensemble196bias, float* _ensemble196inputs, float* _ensemble196value, float* _ensemble197inputs, float* _ensemble197value, float* _ensemble198inputs, float* _ensemble198value, float* _ensemble198weights, float* _ensemble198weights_transposed, float* _ensemble199bias, float* _ensemble199inputs, float* _ensemble199value, float* _ensemble19bias, float* _ensemble19inputs, float* _ensemble19value, float* _ensemble200inputs, float* _ensemble200value, float* _ensemble201inputs, float* _ensemble201value, float* _ensemble201weights, float* _ensemble201weights_transposed, float* _ensemble202bias, float* _ensemble202inputs, float* _ensemble202value, float* _ensemble203inputs, float* _ensemble203value, float* _ensemble204inputs, float* _ensemble204value, float* _ensemble204weights, float* _ensemble204weights_transposed, float* _ensemble205bias, float* _ensemble205inputs, float* _ensemble205value, float* _ensemble206inputs, float* _ensemble206value, float* _ensemble207inputs, float* _ensemble207value, float* _ensemble207weights, float* _ensemble207weights_transposed, float* _ensemble208bias, float* _ensemble208inputs, float* _ensemble208value, float* _ensemble209inputs, float* _ensemble209value, float* _ensemble20inputs, float* _ensemble20value, float* _ensemble210inputs, long* _ensemble210mask_j, long* _ensemble210mask_k, float* _ensemble210value, float* _ensemble211inputs, float* _ensemble211value, float* _ensemble211weights, float* _ensemble211weights_transposed, float* _ensemble212bias, float* _ensemble212inputs, float* _ensemble212value, float* _ensemble213inputs, float* _ensemble213value, float* _ensemble214inputs, float* _ensemble214inputs1, float* _ensemble214inputs2, float* _ensemble214inputs3, float* _ensemble214value, float* _ensemble215inputs, long* _ensemble215kernel, float* _ensemble215value, float* _ensemble216inputs, float* _ensemble216value, float* _ensemble216weights, float* _ensemble216weights_transposed, float* _ensemble217bias, float* _ensemble217inputs, float* _ensemble217value, float* _ensemble21inputs, float* _ensemble21value, float* _ensemble21weights, float* _ensemble21weights_transposed, float* _ensemble22bias, float* _ensemble22inputs, float* _ensemble22value, float* _ensemble23inputs, float* _ensemble23value, float* _ensemble24inputs, float* _ensemble24value, float* _ensemble24weights, float* _ensemble24weights_transposed, float* _ensemble25bias, float* _ensemble25inputs, float* _ensemble25value, float* _ensemble26inputs, float* _ensemble26value, float* _ensemble27inputs, float* _ensemble27value, float* _ensemble27weights, float* _ensemble27weights_transposed, float* _ensemble28bias, float* _ensemble28inputs, float* _ensemble28value, float* _ensemble29inputs, float* _ensemble29value, float* _ensemble2inputs, float* _ensemble2value, float* _ensemble2weights, float* _ensemble2weights_transposed, float* _ensemble30inputs, long* _ensemble30mask_j, long* _ensemble30mask_k, float* _ensemble30value, float* _ensemble31inputs, float* _ensemble31value, float* _ensemble31weights, float* _ensemble31weights_transposed, float* _ensemble32bias, float* _ensemble32inputs, float* _ensemble32value, float* _ensemble33inputs, float* _ensemble33value, float* _ensemble34inputs, float* _ensemble34inputs1, float* _ensemble34inputs2, float* _ensemble34inputs3, float* _ensemble34value, float* _ensemble35inputs, float* _ensemble35value, float* _ensemble35weights, float* _ensemble35weights_transposed, float* _ensemble36bias, float* _ensemble36inputs, float* _ensemble36value, float* _ensemble37inputs, float* _ensemble37value, float* _ensemble38inputs, float* _ensemble38value, float* _ensemble38weights, float* _ensemble38weights_transposed, float* _ensemble39bias, float* _ensemble39inputs, float* _ensemble39value, float* _ensemble3bias, float* _ensemble3inputs, float* _ensemble3value, float* _ensemble40inputs, float* _ensemble40value, float* _ensemble41inputs, float* _ensemble41value, float* _ensemble41weights, float* _ensemble41weights_transposed, float* _ensemble42bias, float* _ensemble42inputs, float* _ensemble42value, float* _ensemble43inputs, float* _ensemble43value, float* _ensemble44inputs, float* _ensemble44value, float* _ensemble44weights, float* _ensemble44weights_transposed, float* _ensemble45bias, float* _ensemble45inputs, float* _ensemble45value, float* _ensemble46inputs, float* _ensemble46value, float* _ensemble47inputs, float* _ensemble47value, float* _ensemble47weights, float* _ensemble47weights_transposed, float* _ensemble48bias, float* _ensemble48inputs, float* _ensemble48value, float* _ensemble49inputs, float* _ensemble49value, float* _ensemble4inputs, float* _ensemble4value, float* _ensemble50inputs, long* _ensemble50mask_j, long* _ensemble50mask_k, float* _ensemble50value, float* _ensemble51inputs, float* _ensemble51value, float* _ensemble51weights, float* _ensemble51weights_transposed, float* _ensemble52bias, float* _ensemble52inputs, float* _ensemble52value, float* _ensemble53inputs, float* _ensemble53value, float* _ensemble54inputs, float* _ensemble54inputs1, float* _ensemble54inputs2, float* _ensemble54inputs3, float* _ensemble54value, float* _ensemble55inputs, long* _ensemble55mask_j, long* _ensemble55mask_k, float* _ensemble55value, float* _ensemble56inputs, float* _ensemble56value, float* _ensemble56weights, float* _ensemble56weights_transposed, float* _ensemble57bias, float* _ensemble57inputs, float* _ensemble57value, float* _ensemble58inputs, float* _ensemble58value, float* _ensemble59inputs, float* _ensemble59value, float* _ensemble59weights, float* _ensemble59weights_transposed, float* _ensemble5inputs, long* _ensemble5mask_j, long* _ensemble5mask_k, float* _ensemble5value, float* _ensemble60bias, float* _ensemble60inputs, float* _ensemble60value, float* _ensemble61inputs, float* _ensemble61value, float* _ensemble62inputs, float* _ensemble62value, float* _ensemble62weights, float* _ensemble62weights_transposed, float* _ensemble63bias, float* _ensemble63inputs, float* _ensemble63value, float* _ensemble64inputs, float* _ensemble64value, float* _ensemble65inputs, float* _ensemble65value, float* _ensemble65weights, float* _ensemble65weights_transposed, float* _ensemble66bias, float* _ensemble66inputs, float* _ensemble66value, float* _ensemble67inputs, float* _ensemble67value, float* _ensemble68inputs, float* _ensemble68value, float* _ensemble68weights, float* _ensemble68weights_transposed, float* _ensemble69bias, float* _ensemble69inputs, float* _ensemble69value, double* _ensemble6alpha, double* _ensemble6beta, float* _ensemble6inputs, double* _ensemble6k, long* _ensemble6n, double* _ensemble6sum_value, float* _ensemble6value, float* _ensemble70inputs, float* _ensemble70value, float* _ensemble71inputs, long* _ensemble71mask_j, long* _ensemble71mask_k, float* _ensemble71value, float* _ensemble72inputs, float* _ensemble72value, float* _ensemble72weights, float* _ensemble72weights_transposed, float* _ensemble73bias, float* _ensemble73inputs, float* _ensemble73value, float* _ensemble74inputs, float* _ensemble74value, float* _ensemble75inputs, float* _ensemble75inputs1, float* _ensemble75inputs2, float* _ensemble75inputs3, float* _ensemble75value, float* _ensemble76inputs, long* _ensemble76kernel, float* _ensemble76value, float* _ensemble77inputs, float* _ensemble77value, float* _ensemble77weights, float* _ensemble77weights_transposed, float* _ensemble78bias, float* _ensemble78inputs, float* _ensemble78value, float* _ensemble79inputs, float* _ensemble79value, float* _ensemble7inputs, float* _ensemble7value, float* _ensemble7weights, float* _ensemble7weights_transposed, float* _ensemble80inputs, float* _ensemble80value, float* _ensemble80weights, float* _ensemble80weights_transposed, float* _ensemble81bias, float* _ensemble81inputs, float* _ensemble81value, float* _ensemble82inputs, float* _ensemble82value, float* _ensemble83inputs, float* _ensemble83value, float* _ensemble83weights, float* _ensemble83weights_transposed, float* _ensemble84bias, float* _ensemble84inputs, float* _ensemble84value, float* _ensemble85inputs, float* _ensemble85value, float* _ensemble85weights, float* _ensemble85weights_transposed, float* _ensemble86bias, float* _ensemble86inputs, float* _ensemble86value, float* _ensemble87inputs, float* _ensemble87value, float* _ensemble88inputs, float* _ensemble88value, float* _ensemble88weights, float* _ensemble88weights_transposed, float* _ensemble89bias, float* _ensemble89inputs, float* _ensemble89value, float* _ensemble8bias, float* _ensemble8inputs, float* _ensemble8value, float* _ensemble90inputs, float* _ensemble90value, float* _ensemble91inputs, float* _ensemble91value, float* _ensemble91weights, float* _ensemble91weights_transposed, float* _ensemble92bias, float* _ensemble92inputs, float* _ensemble92value, float* _ensemble93inputs, float* _ensemble93value, float* _ensemble94inputs, float* _ensemble94value, float* _ensemble94weights, float* _ensemble94weights_transposed, float* _ensemble95bias, float* _ensemble95inputs, float* _ensemble95value, float* _ensemble96inputs, float* _ensemble96value, float* _ensemble97inputs, float* _ensemble97value, float* _ensemble97weights, float* _ensemble97weights_transposed, float* _ensemble98bias, float* _ensemble98inputs, float* _ensemble98value, float* _ensemble99inputs, float* _ensemble99value, float* _ensemble9inputs, float* _ensemble9value) {
    float (* ensemble9value)[8][58][58][8] = (float (*)[8][58][58][8]) _ensemble9value;
    __assume_aligned(ensemble9value, 64);
    float (* ensemble9inputs)[8][58][58][8] = (float (*)[8][58][58][8]) _ensemble9inputs;
    __assume_aligned(ensemble9inputs, 64);
    float (* ensemble99value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble99value;
    __assume_aligned(ensemble99value, 64);
    float (* ensemble99inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble99inputs;
    __assume_aligned(ensemble99inputs, 64);
    float (* ensemble98value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble98value;
    __assume_aligned(ensemble98value, 64);
    float (* ensemble98inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble98inputs;
    __assume_aligned(ensemble98inputs, 64);
    float (* ensemble98bias)[1][8] = (float (*)[1][8]) _ensemble98bias;
    __assume_aligned(ensemble98bias, 64);
    float (* ensemble97weights_transposed)[3][5][5][8][8] = (float (*)[3][5][5][8][8]) _ensemble97weights_transposed;
    __assume_aligned(ensemble97weights_transposed, 64);
    float (* ensemble97weights)[3][5][5][8][8] = (float (*)[3][5][5][8][8]) _ensemble97weights;
    __assume_aligned(ensemble97weights, 64);
    float (* ensemble97value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble97value;
    __assume_aligned(ensemble97value, 64);
    float (* ensemble97inputs)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble97inputs;
    __assume_aligned(ensemble97inputs, 64);
    float (* ensemble96value)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble96value;
    __assume_aligned(ensemble96value, 64);
    float (* ensemble96inputs)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble96inputs;
    __assume_aligned(ensemble96inputs, 64);
    float (* ensemble95value)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble95value;
    __assume_aligned(ensemble95value, 64);
    float (* ensemble95inputs)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble95inputs;
    __assume_aligned(ensemble95inputs, 64);
    float (* ensemble95bias)[1][8] = (float (*)[1][8]) _ensemble95bias;
    __assume_aligned(ensemble95bias, 64);
    float (* ensemble94weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble94weights_transposed;
    __assume_aligned(ensemble94weights_transposed, 64);
    float (* ensemble94weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble94weights;
    __assume_aligned(ensemble94weights, 64);
    float (* ensemble94value)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble94value;
    __assume_aligned(ensemble94value, 64);
    float (* ensemble94inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble94inputs;
    __assume_aligned(ensemble94inputs, 64);
    float (* ensemble93value)[28][14][14][8] = (float (*)[28][14][14][8]) _ensemble93value;
    __assume_aligned(ensemble93value, 64);
    float (* ensemble93inputs)[28][14][14][8] = (float (*)[28][14][14][8]) _ensemble93inputs;
    __assume_aligned(ensemble93inputs, 64);
    float (* ensemble92value)[28][14][14][8] = (float (*)[28][14][14][8]) _ensemble92value;
    __assume_aligned(ensemble92value, 64);
    float (* ensemble92inputs)[28][14][14][8] = (float (*)[28][14][14][8]) _ensemble92inputs;
    __assume_aligned(ensemble92inputs, 64);
    float (* ensemble92bias)[1][8] = (float (*)[1][8]) _ensemble92bias;
    __assume_aligned(ensemble92bias, 64);
    float (* ensemble91weights_transposed)[14][3][3][8][8] = (float (*)[14][3][3][8][8]) _ensemble91weights_transposed;
    __assume_aligned(ensemble91weights_transposed, 64);
    float (* ensemble91weights)[14][3][3][8][8] = (float (*)[14][3][3][8][8]) _ensemble91weights;
    __assume_aligned(ensemble91weights, 64);
    float (* ensemble91value)[28][14][14][8] = (float (*)[28][14][14][8]) _ensemble91value;
    __assume_aligned(ensemble91value, 64);
    float (* ensemble91inputs)[14][16][16][8] = (float (*)[14][16][16][8]) _ensemble91inputs;
    __assume_aligned(ensemble91inputs, 64);
    float (* ensemble90value)[14][16][16][8] = (float (*)[14][16][16][8]) _ensemble90value;
    __assume_aligned(ensemble90value, 64);
    float (* ensemble90inputs)[14][16][16][8] = (float (*)[14][16][16][8]) _ensemble90inputs;
    __assume_aligned(ensemble90inputs, 64);
    float (* ensemble8value)[8][58][58][8] = (float (*)[8][58][58][8]) _ensemble8value;
    __assume_aligned(ensemble8value, 64);
    float (* ensemble8inputs)[8][58][58][8] = (float (*)[8][58][58][8]) _ensemble8inputs;
    __assume_aligned(ensemble8inputs, 64);
    float (* ensemble8bias)[1][8] = (float (*)[1][8]) _ensemble8bias;
    __assume_aligned(ensemble8bias, 64);
    float (* ensemble89value)[14][16][16][8] = (float (*)[14][16][16][8]) _ensemble89value;
    __assume_aligned(ensemble89value, 64);
    float (* ensemble89inputs)[14][16][16][8] = (float (*)[14][16][16][8]) _ensemble89inputs;
    __assume_aligned(ensemble89inputs, 64);
    float (* ensemble89bias)[1][8] = (float (*)[1][8]) _ensemble89bias;
    __assume_aligned(ensemble89bias, 64);
    float (* ensemble88weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble88weights_transposed;
    __assume_aligned(ensemble88weights_transposed, 64);
    float (* ensemble88weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble88weights;
    __assume_aligned(ensemble88weights, 64);
    float (* ensemble88value)[14][16][16][8] = (float (*)[14][16][16][8]) _ensemble88value;
    __assume_aligned(ensemble88value, 64);
    float (* ensemble88inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble88inputs;
    __assume_aligned(ensemble88inputs, 64);
    float (* ensemble87value)[20][14][14][8] = (float (*)[20][14][14][8]) _ensemble87value;
    __assume_aligned(ensemble87value, 64);
    float (* ensemble87inputs)[20][14][14][8] = (float (*)[20][14][14][8]) _ensemble87inputs;
    __assume_aligned(ensemble87inputs, 64);
    float (* ensemble86value)[20][14][14][8] = (float (*)[20][14][14][8]) _ensemble86value;
    __assume_aligned(ensemble86value, 64);
    float (* ensemble86inputs)[20][14][14][8] = (float (*)[20][14][14][8]) _ensemble86inputs;
    __assume_aligned(ensemble86inputs, 64);
    float (* ensemble86bias)[1][8] = (float (*)[1][8]) _ensemble86bias;
    __assume_aligned(ensemble86bias, 64);
    float (* ensemble85weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble85weights_transposed;
    __assume_aligned(ensemble85weights_transposed, 64);
    float (* ensemble85weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble85weights;
    __assume_aligned(ensemble85weights, 64);
    float (* ensemble85value)[20][14][14][8] = (float (*)[20][14][14][8]) _ensemble85value;
    __assume_aligned(ensemble85value, 64);
    float (* ensemble85inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble85inputs;
    __assume_aligned(ensemble85inputs, 64);
    float (* ensemble84value)[126][8] = (float (*)[126][8]) _ensemble84value;
    __assume_aligned(ensemble84value, 64);
    float (* ensemble84inputs)[126][8] = (float (*)[126][8]) _ensemble84inputs;
    __assume_aligned(ensemble84inputs, 64);
    float (* ensemble84bias)[1][8] = (float (*)[1][8]) _ensemble84bias;
    __assume_aligned(ensemble84bias, 64);
    float (* ensemble83weights_transposed)[128][8][8] = (float (*)[128][8][8]) _ensemble83weights_transposed;
    __assume_aligned(ensemble83weights_transposed, 64);
    float (* ensemble83weights)[128][8][8] = (float (*)[128][8][8]) _ensemble83weights;
    __assume_aligned(ensemble83weights, 64);
    float (* ensemble83value)[126][8] = (float (*)[126][8]) _ensemble83value;
    __assume_aligned(ensemble83value, 64);
    float (* ensemble83inputs)[128][8] = (float (*)[128][8]) _ensemble83inputs;
    __assume_aligned(ensemble83inputs, 64);
    float (* ensemble82value)[128][8] = (float (*)[128][8]) _ensemble82value;
    __assume_aligned(ensemble82value, 64);
    float (* ensemble82inputs)[128][8] = (float (*)[128][8]) _ensemble82inputs;
    __assume_aligned(ensemble82inputs, 64);
    float (* ensemble81value)[128][8] = (float (*)[128][8]) _ensemble81value;
    __assume_aligned(ensemble81value, 64);
    float (* ensemble81inputs)[128][8] = (float (*)[128][8]) _ensemble81inputs;
    __assume_aligned(ensemble81inputs, 64);
    float (* ensemble81bias)[1][8] = (float (*)[1][8]) _ensemble81bias;
    __assume_aligned(ensemble81bias, 64);
    float (* ensemble80weights_transposed)[16][4][4][8][8] = (float (*)[16][4][4][8][8]) _ensemble80weights_transposed;
    __assume_aligned(ensemble80weights_transposed, 64);
    float (* ensemble80weights)[16][4][4][8][8] = (float (*)[16][4][4][8][8]) _ensemble80weights;
    __assume_aligned(ensemble80weights, 64);
    float (* ensemble80value)[128][8] = (float (*)[128][8]) _ensemble80value;
    __assume_aligned(ensemble80value, 64);
    float (* ensemble80inputs)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble80inputs;
    __assume_aligned(ensemble80inputs, 64);
    float (* ensemble7weights_transposed)[8][1][1][8][8] = (float (*)[8][1][1][8][8]) _ensemble7weights_transposed;
    __assume_aligned(ensemble7weights_transposed, 64);
    float (* ensemble7weights)[8][1][1][8][8] = (float (*)[8][1][1][8][8]) _ensemble7weights;
    __assume_aligned(ensemble7weights, 64);
    float (* ensemble7value)[8][58][58][8] = (float (*)[8][58][58][8]) _ensemble7value;
    __assume_aligned(ensemble7value, 64);
    float (* ensemble7inputs)[8][56][56][8] = (float (*)[8][56][56][8]) _ensemble7inputs;
    __assume_aligned(ensemble7inputs, 64);
    float (* ensemble79value)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble79value;
    __assume_aligned(ensemble79value, 64);
    float (* ensemble79inputs)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble79inputs;
    __assume_aligned(ensemble79inputs, 64);
    float (* ensemble78value)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble78value;
    __assume_aligned(ensemble78value, 64);
    float (* ensemble78inputs)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble78inputs;
    __assume_aligned(ensemble78inputs, 64);
    float (* ensemble78bias)[1][8] = (float (*)[1][8]) _ensemble78bias;
    __assume_aligned(ensemble78bias, 64);
    float (* ensemble77weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble77weights_transposed;
    __assume_aligned(ensemble77weights_transposed, 64);
    float (* ensemble77weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble77weights;
    __assume_aligned(ensemble77weights, 64);
    float (* ensemble77value)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble77value;
    __assume_aligned(ensemble77value, 64);
    float (* ensemble77inputs)[64][4][4][8] = (float (*)[64][4][4][8]) _ensemble77inputs;
    __assume_aligned(ensemble77inputs, 64);
    float (* ensemble76value)[64][4][4][8] = (float (*)[64][4][4][8]) _ensemble76value;
    __assume_aligned(ensemble76value, 64);
    long (* ensemble76kernel)[64][4][4][8] = (long (*)[64][4][4][8]) _ensemble76kernel;
    __assume_aligned(ensemble76kernel, 64);
    float (* ensemble76inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble76inputs;
    __assume_aligned(ensemble76inputs, 64);
    float (* ensemble75value)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble75value;
    __assume_aligned(ensemble75value, 64);
    float (* ensemble75inputs3)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble75inputs3;
    __assume_aligned(ensemble75inputs3, 64);
    float (* ensemble75inputs2)[6][14][14][8] = (float (*)[6][14][14][8]) _ensemble75inputs2;
    __assume_aligned(ensemble75inputs2, 64);
    float (* ensemble75inputs1)[26][14][14][8] = (float (*)[26][14][14][8]) _ensemble75inputs1;
    __assume_aligned(ensemble75inputs1, 64);
    float (* ensemble75inputs)[24][14][14][8] = (float (*)[24][14][14][8]) _ensemble75inputs;
    __assume_aligned(ensemble75inputs, 64);
    float (* ensemble74value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble74value;
    __assume_aligned(ensemble74value, 64);
    float (* ensemble74inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble74inputs;
    __assume_aligned(ensemble74inputs, 64);
    float (* ensemble73value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble73value;
    __assume_aligned(ensemble73value, 64);
    float (* ensemble73inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble73inputs;
    __assume_aligned(ensemble73inputs, 64);
    float (* ensemble73bias)[1][8] = (float (*)[1][8]) _ensemble73bias;
    __assume_aligned(ensemble73bias, 64);
    float (* ensemble72weights_transposed)[60][1][1][8][8] = (float (*)[60][1][1][8][8]) _ensemble72weights_transposed;
    __assume_aligned(ensemble72weights_transposed, 64);
    float (* ensemble72weights)[60][1][1][8][8] = (float (*)[60][1][1][8][8]) _ensemble72weights;
    __assume_aligned(ensemble72weights, 64);
    float (* ensemble72value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble72value;
    __assume_aligned(ensemble72value, 64);
    float (* ensemble72inputs)[60][14][14][8] = (float (*)[60][14][14][8]) _ensemble72inputs;
    __assume_aligned(ensemble72inputs, 64);
    float (* ensemble71value)[60][14][14][8] = (float (*)[60][14][14][8]) _ensemble71value;
    __assume_aligned(ensemble71value, 64);
    long (* ensemble71mask_k)[60][14][14][8] = (long (*)[60][14][14][8]) _ensemble71mask_k;
    __assume_aligned(ensemble71mask_k, 64);
    long (* ensemble71mask_j)[60][14][14][8] = (long (*)[60][14][14][8]) _ensemble71mask_j;
    __assume_aligned(ensemble71mask_j, 64);
    float (* ensemble71inputs)[60][14][14][8] = (float (*)[60][14][14][8]) _ensemble71inputs;
    __assume_aligned(ensemble71inputs, 64);
    float (* ensemble70value)[6][14][14][8] = (float (*)[6][14][14][8]) _ensemble70value;
    __assume_aligned(ensemble70value, 64);
    float (* ensemble70inputs)[6][14][14][8] = (float (*)[6][14][14][8]) _ensemble70inputs;
    __assume_aligned(ensemble70inputs, 64);
    float (* ensemble6value)[8][56][56][8] = (float (*)[8][56][56][8]) _ensemble6value;
    __assume_aligned(ensemble6value, 64);
    double (* ensemble6sum_value)[8][56][56][8] = (double (*)[8][56][56][8]) _ensemble6sum_value;
    __assume_aligned(ensemble6sum_value, 64);
    long (* ensemble6n)[8][56][56][8] = (long (*)[8][56][56][8]) _ensemble6n;
    __assume_aligned(ensemble6n, 64);
    double (* ensemble6k)[56][56][8] = (double (*)[56][56][8]) _ensemble6k;
    __assume_aligned(ensemble6k, 64);
    float (* ensemble6inputs)[10][56][56][8] = (float (*)[10][56][56][8]) _ensemble6inputs;
    __assume_aligned(ensemble6inputs, 64);
    double (* ensemble6beta)[8][56][56][8] = (double (*)[8][56][56][8]) _ensemble6beta;
    __assume_aligned(ensemble6beta, 64);
    double (* ensemble6alpha)[8][56][56][8] = (double (*)[8][56][56][8]) _ensemble6alpha;
    __assume_aligned(ensemble6alpha, 64);
    float (* ensemble69value)[6][14][14][8] = (float (*)[6][14][14][8]) _ensemble69value;
    __assume_aligned(ensemble69value, 64);
    float (* ensemble69inputs)[6][14][14][8] = (float (*)[6][14][14][8]) _ensemble69inputs;
    __assume_aligned(ensemble69inputs, 64);
    float (* ensemble69bias)[1][8] = (float (*)[1][8]) _ensemble69bias;
    __assume_aligned(ensemble69bias, 64);
    float (* ensemble68weights_transposed)[2][5][5][8][8] = (float (*)[2][5][5][8][8]) _ensemble68weights_transposed;
    __assume_aligned(ensemble68weights_transposed, 64);
    float (* ensemble68weights)[2][5][5][8][8] = (float (*)[2][5][5][8][8]) _ensemble68weights;
    __assume_aligned(ensemble68weights, 64);
    float (* ensemble68value)[6][14][14][8] = (float (*)[6][14][14][8]) _ensemble68value;
    __assume_aligned(ensemble68value, 64);
    float (* ensemble68inputs)[2][18][18][8] = (float (*)[2][18][18][8]) _ensemble68inputs;
    __assume_aligned(ensemble68inputs, 64);
    float (* ensemble67value)[2][18][18][8] = (float (*)[2][18][18][8]) _ensemble67value;
    __assume_aligned(ensemble67value, 64);
    float (* ensemble67inputs)[2][18][18][8] = (float (*)[2][18][18][8]) _ensemble67inputs;
    __assume_aligned(ensemble67inputs, 64);
    float (* ensemble66value)[2][18][18][8] = (float (*)[2][18][18][8]) _ensemble66value;
    __assume_aligned(ensemble66value, 64);
    float (* ensemble66inputs)[2][18][18][8] = (float (*)[2][18][18][8]) _ensemble66inputs;
    __assume_aligned(ensemble66inputs, 64);
    float (* ensemble66bias)[1][8] = (float (*)[1][8]) _ensemble66bias;
    __assume_aligned(ensemble66bias, 64);
    float (* ensemble65weights_transposed)[60][1][1][8][8] = (float (*)[60][1][1][8][8]) _ensemble65weights_transposed;
    __assume_aligned(ensemble65weights_transposed, 64);
    float (* ensemble65weights)[60][1][1][8][8] = (float (*)[60][1][1][8][8]) _ensemble65weights;
    __assume_aligned(ensemble65weights, 64);
    float (* ensemble65value)[2][18][18][8] = (float (*)[2][18][18][8]) _ensemble65value;
    __assume_aligned(ensemble65value, 64);
    float (* ensemble65inputs)[60][14][14][8] = (float (*)[60][14][14][8]) _ensemble65inputs;
    __assume_aligned(ensemble65inputs, 64);
    float (* ensemble64value)[26][14][14][8] = (float (*)[26][14][14][8]) _ensemble64value;
    __assume_aligned(ensemble64value, 64);
    float (* ensemble64inputs)[26][14][14][8] = (float (*)[26][14][14][8]) _ensemble64inputs;
    __assume_aligned(ensemble64inputs, 64);
    float (* ensemble63value)[26][14][14][8] = (float (*)[26][14][14][8]) _ensemble63value;
    __assume_aligned(ensemble63value, 64);
    float (* ensemble63inputs)[26][14][14][8] = (float (*)[26][14][14][8]) _ensemble63inputs;
    __assume_aligned(ensemble63inputs, 64);
    float (* ensemble63bias)[1][8] = (float (*)[1][8]) _ensemble63bias;
    __assume_aligned(ensemble63bias, 64);
    float (* ensemble62weights_transposed)[12][3][3][8][8] = (float (*)[12][3][3][8][8]) _ensemble62weights_transposed;
    __assume_aligned(ensemble62weights_transposed, 64);
    float (* ensemble62weights)[12][3][3][8][8] = (float (*)[12][3][3][8][8]) _ensemble62weights;
    __assume_aligned(ensemble62weights, 64);
    float (* ensemble62value)[26][14][14][8] = (float (*)[26][14][14][8]) _ensemble62value;
    __assume_aligned(ensemble62value, 64);
    float (* ensemble62inputs)[12][16][16][8] = (float (*)[12][16][16][8]) _ensemble62inputs;
    __assume_aligned(ensemble62inputs, 64);
    float (* ensemble61value)[12][16][16][8] = (float (*)[12][16][16][8]) _ensemble61value;
    __assume_aligned(ensemble61value, 64);
    float (* ensemble61inputs)[12][16][16][8] = (float (*)[12][16][16][8]) _ensemble61inputs;
    __assume_aligned(ensemble61inputs, 64);
    float (* ensemble60value)[12][16][16][8] = (float (*)[12][16][16][8]) _ensemble60value;
    __assume_aligned(ensemble60value, 64);
    float (* ensemble60inputs)[12][16][16][8] = (float (*)[12][16][16][8]) _ensemble60inputs;
    __assume_aligned(ensemble60inputs, 64);
    float (* ensemble60bias)[1][8] = (float (*)[1][8]) _ensemble60bias;
    __assume_aligned(ensemble60bias, 64);
    float (* ensemble5value)[10][56][56][8] = (float (*)[10][56][56][8]) _ensemble5value;
    __assume_aligned(ensemble5value, 64);
    long (* ensemble5mask_k)[8][56][56][8] = (long (*)[8][56][56][8]) _ensemble5mask_k;
    __assume_aligned(ensemble5mask_k, 64);
    long (* ensemble5mask_j)[8][56][56][8] = (long (*)[8][56][56][8]) _ensemble5mask_j;
    __assume_aligned(ensemble5mask_j, 64);
    float (* ensemble5inputs)[8][112][112][8] = (float (*)[8][112][112][8]) _ensemble5inputs;
    __assume_aligned(ensemble5inputs, 64);
    float (* ensemble59weights_transposed)[60][1][1][8][8] = (float (*)[60][1][1][8][8]) _ensemble59weights_transposed;
    __assume_aligned(ensemble59weights_transposed, 64);
    float (* ensemble59weights)[60][1][1][8][8] = (float (*)[60][1][1][8][8]) _ensemble59weights;
    __assume_aligned(ensemble59weights, 64);
    float (* ensemble59value)[12][16][16][8] = (float (*)[12][16][16][8]) _ensemble59value;
    __assume_aligned(ensemble59value, 64);
    float (* ensemble59inputs)[60][14][14][8] = (float (*)[60][14][14][8]) _ensemble59inputs;
    __assume_aligned(ensemble59inputs, 64);
    float (* ensemble58value)[24][14][14][8] = (float (*)[24][14][14][8]) _ensemble58value;
    __assume_aligned(ensemble58value, 64);
    float (* ensemble58inputs)[24][14][14][8] = (float (*)[24][14][14][8]) _ensemble58inputs;
    __assume_aligned(ensemble58inputs, 64);
    float (* ensemble57value)[24][14][14][8] = (float (*)[24][14][14][8]) _ensemble57value;
    __assume_aligned(ensemble57value, 64);
    float (* ensemble57inputs)[24][14][14][8] = (float (*)[24][14][14][8]) _ensemble57inputs;
    __assume_aligned(ensemble57inputs, 64);
    float (* ensemble57bias)[1][8] = (float (*)[1][8]) _ensemble57bias;
    __assume_aligned(ensemble57bias, 64);
    float (* ensemble56weights_transposed)[60][1][1][8][8] = (float (*)[60][1][1][8][8]) _ensemble56weights_transposed;
    __assume_aligned(ensemble56weights_transposed, 64);
    float (* ensemble56weights)[60][1][1][8][8] = (float (*)[60][1][1][8][8]) _ensemble56weights;
    __assume_aligned(ensemble56weights, 64);
    float (* ensemble56value)[24][14][14][8] = (float (*)[24][14][14][8]) _ensemble56value;
    __assume_aligned(ensemble56value, 64);
    float (* ensemble56inputs)[60][14][14][8] = (float (*)[60][14][14][8]) _ensemble56inputs;
    __assume_aligned(ensemble56inputs, 64);
    float (* ensemble55value)[60][14][14][8] = (float (*)[60][14][14][8]) _ensemble55value;
    __assume_aligned(ensemble55value, 64);
    long (* ensemble55mask_k)[60][14][14][8] = (long (*)[60][14][14][8]) _ensemble55mask_k;
    __assume_aligned(ensemble55mask_k, 64);
    long (* ensemble55mask_j)[60][14][14][8] = (long (*)[60][14][14][8]) _ensemble55mask_j;
    __assume_aligned(ensemble55mask_j, 64);
    float (* ensemble55inputs)[60][28][28][8] = (float (*)[60][28][28][8]) _ensemble55inputs;
    __assume_aligned(ensemble55inputs, 64);
    float (* ensemble54value)[60][28][28][8] = (float (*)[60][28][28][8]) _ensemble54value;
    __assume_aligned(ensemble54value, 64);
    float (* ensemble54inputs3)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble54inputs3;
    __assume_aligned(ensemble54inputs3, 64);
    float (* ensemble54inputs2)[12][28][28][8] = (float (*)[12][28][28][8]) _ensemble54inputs2;
    __assume_aligned(ensemble54inputs2, 64);
    float (* ensemble54inputs1)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble54inputs1;
    __assume_aligned(ensemble54inputs1, 64);
    float (* ensemble54inputs)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble54inputs;
    __assume_aligned(ensemble54inputs, 64);
    float (* ensemble53value)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble53value;
    __assume_aligned(ensemble53value, 64);
    float (* ensemble53inputs)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble53inputs;
    __assume_aligned(ensemble53inputs, 64);
    float (* ensemble52value)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble52value;
    __assume_aligned(ensemble52value, 64);
    float (* ensemble52inputs)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble52inputs;
    __assume_aligned(ensemble52inputs, 64);
    float (* ensemble52bias)[1][8] = (float (*)[1][8]) _ensemble52bias;
    __assume_aligned(ensemble52bias, 64);
    float (* ensemble51weights_transposed)[32][1][1][8][8] = (float (*)[32][1][1][8][8]) _ensemble51weights_transposed;
    __assume_aligned(ensemble51weights_transposed, 64);
    float (* ensemble51weights)[32][1][1][8][8] = (float (*)[32][1][1][8][8]) _ensemble51weights;
    __assume_aligned(ensemble51weights, 64);
    float (* ensemble51value)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble51value;
    __assume_aligned(ensemble51value, 64);
    float (* ensemble51inputs)[32][28][28][8] = (float (*)[32][28][28][8]) _ensemble51inputs;
    __assume_aligned(ensemble51inputs, 64);
    float (* ensemble50value)[32][28][28][8] = (float (*)[32][28][28][8]) _ensemble50value;
    __assume_aligned(ensemble50value, 64);
    long (* ensemble50mask_k)[32][28][28][8] = (long (*)[32][28][28][8]) _ensemble50mask_k;
    __assume_aligned(ensemble50mask_k, 64);
    long (* ensemble50mask_j)[32][28][28][8] = (long (*)[32][28][28][8]) _ensemble50mask_j;
    __assume_aligned(ensemble50mask_j, 64);
    float (* ensemble50inputs)[32][28][28][8] = (float (*)[32][28][28][8]) _ensemble50inputs;
    __assume_aligned(ensemble50inputs, 64);
    float (* ensemble4value)[8][112][112][8] = (float (*)[8][112][112][8]) _ensemble4value;
    __assume_aligned(ensemble4value, 64);
    float (* ensemble4inputs)[8][112][112][8] = (float (*)[8][112][112][8]) _ensemble4inputs;
    __assume_aligned(ensemble4inputs, 64);
    float (* ensemble49value)[12][28][28][8] = (float (*)[12][28][28][8]) _ensemble49value;
    __assume_aligned(ensemble49value, 64);
    float (* ensemble49inputs)[12][28][28][8] = (float (*)[12][28][28][8]) _ensemble49inputs;
    __assume_aligned(ensemble49inputs, 64);
    float (* ensemble48value)[12][28][28][8] = (float (*)[12][28][28][8]) _ensemble48value;
    __assume_aligned(ensemble48value, 64);
    float (* ensemble48inputs)[12][28][28][8] = (float (*)[12][28][28][8]) _ensemble48inputs;
    __assume_aligned(ensemble48inputs, 64);
    float (* ensemble48bias)[1][8] = (float (*)[1][8]) _ensemble48bias;
    __assume_aligned(ensemble48bias, 64);
    float (* ensemble47weights_transposed)[4][5][5][8][8] = (float (*)[4][5][5][8][8]) _ensemble47weights_transposed;
    __assume_aligned(ensemble47weights_transposed, 64);
    float (* ensemble47weights)[4][5][5][8][8] = (float (*)[4][5][5][8][8]) _ensemble47weights;
    __assume_aligned(ensemble47weights, 64);
    float (* ensemble47value)[12][28][28][8] = (float (*)[12][28][28][8]) _ensemble47value;
    __assume_aligned(ensemble47value, 64);
    float (* ensemble47inputs)[4][32][32][8] = (float (*)[4][32][32][8]) _ensemble47inputs;
    __assume_aligned(ensemble47inputs, 64);
    float (* ensemble46value)[4][32][32][8] = (float (*)[4][32][32][8]) _ensemble46value;
    __assume_aligned(ensemble46value, 64);
    float (* ensemble46inputs)[4][32][32][8] = (float (*)[4][32][32][8]) _ensemble46inputs;
    __assume_aligned(ensemble46inputs, 64);
    float (* ensemble45value)[4][32][32][8] = (float (*)[4][32][32][8]) _ensemble45value;
    __assume_aligned(ensemble45value, 64);
    float (* ensemble45inputs)[4][32][32][8] = (float (*)[4][32][32][8]) _ensemble45inputs;
    __assume_aligned(ensemble45inputs, 64);
    float (* ensemble45bias)[1][8] = (float (*)[1][8]) _ensemble45bias;
    __assume_aligned(ensemble45bias, 64);
    float (* ensemble44weights_transposed)[32][1][1][8][8] = (float (*)[32][1][1][8][8]) _ensemble44weights_transposed;
    __assume_aligned(ensemble44weights_transposed, 64);
    float (* ensemble44weights)[32][1][1][8][8] = (float (*)[32][1][1][8][8]) _ensemble44weights;
    __assume_aligned(ensemble44weights, 64);
    float (* ensemble44value)[4][32][32][8] = (float (*)[4][32][32][8]) _ensemble44value;
    __assume_aligned(ensemble44value, 64);
    float (* ensemble44inputs)[32][28][28][8] = (float (*)[32][28][28][8]) _ensemble44inputs;
    __assume_aligned(ensemble44inputs, 64);
    float (* ensemble43value)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble43value;
    __assume_aligned(ensemble43value, 64);
    float (* ensemble43inputs)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble43inputs;
    __assume_aligned(ensemble43inputs, 64);
    float (* ensemble42value)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble42value;
    __assume_aligned(ensemble42value, 64);
    float (* ensemble42inputs)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble42inputs;
    __assume_aligned(ensemble42inputs, 64);
    float (* ensemble42bias)[1][8] = (float (*)[1][8]) _ensemble42bias;
    __assume_aligned(ensemble42bias, 64);
    float (* ensemble41weights_transposed)[16][3][3][8][8] = (float (*)[16][3][3][8][8]) _ensemble41weights_transposed;
    __assume_aligned(ensemble41weights_transposed, 64);
    float (* ensemble41weights)[16][3][3][8][8] = (float (*)[16][3][3][8][8]) _ensemble41weights;
    __assume_aligned(ensemble41weights, 64);
    float (* ensemble41value)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble41value;
    __assume_aligned(ensemble41value, 64);
    float (* ensemble41inputs)[16][30][30][8] = (float (*)[16][30][30][8]) _ensemble41inputs;
    __assume_aligned(ensemble41inputs, 64);
    float (* ensemble40value)[16][30][30][8] = (float (*)[16][30][30][8]) _ensemble40value;
    __assume_aligned(ensemble40value, 64);
    float (* ensemble40inputs)[16][30][30][8] = (float (*)[16][30][30][8]) _ensemble40inputs;
    __assume_aligned(ensemble40inputs, 64);
    float (* ensemble3value)[8][112][112][8] = (float (*)[8][112][112][8]) _ensemble3value;
    __assume_aligned(ensemble3value, 64);
    float (* ensemble3inputs)[8][112][112][8] = (float (*)[8][112][112][8]) _ensemble3inputs;
    __assume_aligned(ensemble3inputs, 64);
    float (* ensemble3bias)[1][8] = (float (*)[1][8]) _ensemble3bias;
    __assume_aligned(ensemble3bias, 64);
    float (* ensemble39value)[16][30][30][8] = (float (*)[16][30][30][8]) _ensemble39value;
    __assume_aligned(ensemble39value, 64);
    float (* ensemble39inputs)[16][30][30][8] = (float (*)[16][30][30][8]) _ensemble39inputs;
    __assume_aligned(ensemble39inputs, 64);
    float (* ensemble39bias)[1][8] = (float (*)[1][8]) _ensemble39bias;
    __assume_aligned(ensemble39bias, 64);
    float (* ensemble38weights_transposed)[32][1][1][8][8] = (float (*)[32][1][1][8][8]) _ensemble38weights_transposed;
    __assume_aligned(ensemble38weights_transposed, 64);
    float (* ensemble38weights)[32][1][1][8][8] = (float (*)[32][1][1][8][8]) _ensemble38weights;
    __assume_aligned(ensemble38weights, 64);
    float (* ensemble38value)[16][30][30][8] = (float (*)[16][30][30][8]) _ensemble38value;
    __assume_aligned(ensemble38value, 64);
    float (* ensemble38inputs)[32][28][28][8] = (float (*)[32][28][28][8]) _ensemble38inputs;
    __assume_aligned(ensemble38inputs, 64);
    float (* ensemble37value)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble37value;
    __assume_aligned(ensemble37value, 64);
    float (* ensemble37inputs)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble37inputs;
    __assume_aligned(ensemble37inputs, 64);
    float (* ensemble36value)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble36value;
    __assume_aligned(ensemble36value, 64);
    float (* ensemble36inputs)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble36inputs;
    __assume_aligned(ensemble36inputs, 64);
    float (* ensemble36bias)[1][8] = (float (*)[1][8]) _ensemble36bias;
    __assume_aligned(ensemble36bias, 64);
    float (* ensemble35weights_transposed)[32][1][1][8][8] = (float (*)[32][1][1][8][8]) _ensemble35weights_transposed;
    __assume_aligned(ensemble35weights_transposed, 64);
    float (* ensemble35weights)[32][1][1][8][8] = (float (*)[32][1][1][8][8]) _ensemble35weights;
    __assume_aligned(ensemble35weights, 64);
    float (* ensemble35value)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble35value;
    __assume_aligned(ensemble35value, 64);
    float (* ensemble35inputs)[32][28][28][8] = (float (*)[32][28][28][8]) _ensemble35inputs;
    __assume_aligned(ensemble35inputs, 64);
    float (* ensemble34value)[32][28][28][8] = (float (*)[32][28][28][8]) _ensemble34value;
    __assume_aligned(ensemble34value, 64);
    float (* ensemble34inputs3)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble34inputs3;
    __assume_aligned(ensemble34inputs3, 64);
    float (* ensemble34inputs2)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble34inputs2;
    __assume_aligned(ensemble34inputs2, 64);
    float (* ensemble34inputs1)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble34inputs1;
    __assume_aligned(ensemble34inputs1, 64);
    float (* ensemble34inputs)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble34inputs;
    __assume_aligned(ensemble34inputs, 64);
    float (* ensemble33value)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble33value;
    __assume_aligned(ensemble33value, 64);
    float (* ensemble33inputs)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble33inputs;
    __assume_aligned(ensemble33inputs, 64);
    float (* ensemble32value)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble32value;
    __assume_aligned(ensemble32value, 64);
    float (* ensemble32inputs)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble32inputs;
    __assume_aligned(ensemble32inputs, 64);
    float (* ensemble32bias)[1][8] = (float (*)[1][8]) _ensemble32bias;
    __assume_aligned(ensemble32bias, 64);
    float (* ensemble31weights_transposed)[24][1][1][8][8] = (float (*)[24][1][1][8][8]) _ensemble31weights_transposed;
    __assume_aligned(ensemble31weights_transposed, 64);
    float (* ensemble31weights)[24][1][1][8][8] = (float (*)[24][1][1][8][8]) _ensemble31weights;
    __assume_aligned(ensemble31weights, 64);
    float (* ensemble31value)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble31value;
    __assume_aligned(ensemble31value, 64);
    float (* ensemble31inputs)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble31inputs;
    __assume_aligned(ensemble31inputs, 64);
    float (* ensemble30value)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble30value;
    __assume_aligned(ensemble30value, 64);
    long (* ensemble30mask_k)[24][28][28][8] = (long (*)[24][28][28][8]) _ensemble30mask_k;
    __assume_aligned(ensemble30mask_k, 64);
    long (* ensemble30mask_j)[24][28][28][8] = (long (*)[24][28][28][8]) _ensemble30mask_j;
    __assume_aligned(ensemble30mask_j, 64);
    float (* ensemble30inputs)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble30inputs;
    __assume_aligned(ensemble30inputs, 64);
    float (* ensemble2weights_transposed)[1][7][7][8][8] = (float (*)[1][7][7][8][8]) _ensemble2weights_transposed;
    __assume_aligned(ensemble2weights_transposed, 64);
    float (* ensemble2weights)[1][7][7][8][8] = (float (*)[1][7][7][8][8]) _ensemble2weights;
    __assume_aligned(ensemble2weights, 64);
    float (* ensemble2value)[8][112][112][8] = (float (*)[8][112][112][8]) _ensemble2value;
    __assume_aligned(ensemble2value, 64);
    float (* ensemble2inputs)[1][230][230][8] = (float (*)[1][230][230][8]) _ensemble2inputs;
    __assume_aligned(ensemble2inputs, 64);
    float (* ensemble29value)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble29value;
    __assume_aligned(ensemble29value, 64);
    float (* ensemble29inputs)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble29inputs;
    __assume_aligned(ensemble29inputs, 64);
    float (* ensemble28value)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble28value;
    __assume_aligned(ensemble28value, 64);
    float (* ensemble28inputs)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble28inputs;
    __assume_aligned(ensemble28inputs, 64);
    float (* ensemble28bias)[1][8] = (float (*)[1][8]) _ensemble28bias;
    __assume_aligned(ensemble28bias, 64);
    float (* ensemble27weights_transposed)[2][5][5][8][8] = (float (*)[2][5][5][8][8]) _ensemble27weights_transposed;
    __assume_aligned(ensemble27weights_transposed, 64);
    float (* ensemble27weights)[2][5][5][8][8] = (float (*)[2][5][5][8][8]) _ensemble27weights;
    __assume_aligned(ensemble27weights, 64);
    float (* ensemble27value)[4][28][28][8] = (float (*)[4][28][28][8]) _ensemble27value;
    __assume_aligned(ensemble27value, 64);
    float (* ensemble27inputs)[2][32][32][8] = (float (*)[2][32][32][8]) _ensemble27inputs;
    __assume_aligned(ensemble27inputs, 64);
    float (* ensemble26value)[2][32][32][8] = (float (*)[2][32][32][8]) _ensemble26value;
    __assume_aligned(ensemble26value, 64);
    float (* ensemble26inputs)[2][32][32][8] = (float (*)[2][32][32][8]) _ensemble26inputs;
    __assume_aligned(ensemble26inputs, 64);
    float (* ensemble25value)[2][32][32][8] = (float (*)[2][32][32][8]) _ensemble25value;
    __assume_aligned(ensemble25value, 64);
    float (* ensemble25inputs)[2][32][32][8] = (float (*)[2][32][32][8]) _ensemble25inputs;
    __assume_aligned(ensemble25inputs, 64);
    float (* ensemble25bias)[1][8] = (float (*)[1][8]) _ensemble25bias;
    __assume_aligned(ensemble25bias, 64);
    float (* ensemble24weights_transposed)[24][1][1][8][8] = (float (*)[24][1][1][8][8]) _ensemble24weights_transposed;
    __assume_aligned(ensemble24weights_transposed, 64);
    float (* ensemble24weights)[24][1][1][8][8] = (float (*)[24][1][1][8][8]) _ensemble24weights;
    __assume_aligned(ensemble24weights, 64);
    float (* ensemble24value)[2][32][32][8] = (float (*)[2][32][32][8]) _ensemble24value;
    __assume_aligned(ensemble24value, 64);
    float (* ensemble24inputs)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble24inputs;
    __assume_aligned(ensemble24inputs, 64);
    float (* ensemble23value)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble23value;
    __assume_aligned(ensemble23value, 64);
    float (* ensemble23inputs)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble23inputs;
    __assume_aligned(ensemble23inputs, 64);
    float (* ensemble22value)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble22value;
    __assume_aligned(ensemble22value, 64);
    float (* ensemble22inputs)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble22inputs;
    __assume_aligned(ensemble22inputs, 64);
    float (* ensemble22bias)[1][8] = (float (*)[1][8]) _ensemble22bias;
    __assume_aligned(ensemble22bias, 64);
    float (* ensemble21weights_transposed)[12][3][3][8][8] = (float (*)[12][3][3][8][8]) _ensemble21weights_transposed;
    __assume_aligned(ensemble21weights_transposed, 64);
    float (* ensemble21weights)[12][3][3][8][8] = (float (*)[12][3][3][8][8]) _ensemble21weights;
    __assume_aligned(ensemble21weights, 64);
    float (* ensemble21value)[16][28][28][8] = (float (*)[16][28][28][8]) _ensemble21value;
    __assume_aligned(ensemble21value, 64);
    float (* ensemble21inputs)[12][30][30][8] = (float (*)[12][30][30][8]) _ensemble21inputs;
    __assume_aligned(ensemble21inputs, 64);
    float (* ensemble217value)[126][8] = (float (*)[126][8]) _ensemble217value;
    __assume_aligned(ensemble217value, 64);
    float (* ensemble217inputs)[126][8] = (float (*)[126][8]) _ensemble217inputs;
    __assume_aligned(ensemble217inputs, 64);
    float (* ensemble217bias)[1][8] = (float (*)[1][8]) _ensemble217bias;
    __assume_aligned(ensemble217bias, 64);
    float (* ensemble216weights_transposed)[128][1][1][8][8] = (float (*)[128][1][1][8][8]) _ensemble216weights_transposed;
    __assume_aligned(ensemble216weights_transposed, 64);
    float (* ensemble216weights)[128][1][1][8][8] = (float (*)[128][1][1][8][8]) _ensemble216weights;
    __assume_aligned(ensemble216weights, 64);
    float (* ensemble216value)[126][8] = (float (*)[126][8]) _ensemble216value;
    __assume_aligned(ensemble216value, 64);
    float (* ensemble216inputs)[128][1][1][8] = (float (*)[128][1][1][8]) _ensemble216inputs;
    __assume_aligned(ensemble216inputs, 64);
    float (* ensemble215value)[128][1][1][8] = (float (*)[128][1][1][8]) _ensemble215value;
    __assume_aligned(ensemble215value, 64);
    long (* ensemble215kernel)[128][1][1][8] = (long (*)[128][1][1][8]) _ensemble215kernel;
    __assume_aligned(ensemble215kernel, 64);
    float (* ensemble215inputs)[128][7][7][8] = (float (*)[128][7][7][8]) _ensemble215inputs;
    __assume_aligned(ensemble215inputs, 64);
    float (* ensemble214value)[128][7][7][8] = (float (*)[128][7][7][8]) _ensemble214value;
    __assume_aligned(ensemble214value, 64);
    float (* ensemble214inputs3)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble214inputs3;
    __assume_aligned(ensemble214inputs3, 64);
    float (* ensemble214inputs2)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble214inputs2;
    __assume_aligned(ensemble214inputs2, 64);
    float (* ensemble214inputs1)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble214inputs1;
    __assume_aligned(ensemble214inputs1, 64);
    float (* ensemble214inputs)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble214inputs;
    __assume_aligned(ensemble214inputs, 64);
    float (* ensemble213value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble213value;
    __assume_aligned(ensemble213value, 64);
    float (* ensemble213inputs)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble213inputs;
    __assume_aligned(ensemble213inputs, 64);
    float (* ensemble212value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble212value;
    __assume_aligned(ensemble212value, 64);
    float (* ensemble212inputs)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble212inputs;
    __assume_aligned(ensemble212inputs, 64);
    float (* ensemble212bias)[1][8] = (float (*)[1][8]) _ensemble212bias;
    __assume_aligned(ensemble212bias, 64);
    float (* ensemble211weights_transposed)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble211weights_transposed;
    __assume_aligned(ensemble211weights_transposed, 64);
    float (* ensemble211weights)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble211weights;
    __assume_aligned(ensemble211weights, 64);
    float (* ensemble211value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble211value;
    __assume_aligned(ensemble211value, 64);
    float (* ensemble211inputs)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble211inputs;
    __assume_aligned(ensemble211inputs, 64);
    float (* ensemble210value)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble210value;
    __assume_aligned(ensemble210value, 64);
    long (* ensemble210mask_k)[104][7][7][8] = (long (*)[104][7][7][8]) _ensemble210mask_k;
    __assume_aligned(ensemble210mask_k, 64);
    long (* ensemble210mask_j)[104][7][7][8] = (long (*)[104][7][7][8]) _ensemble210mask_j;
    __assume_aligned(ensemble210mask_j, 64);
    float (* ensemble210inputs)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble210inputs;
    __assume_aligned(ensemble210inputs, 64);
    float (* ensemble20value)[12][30][30][8] = (float (*)[12][30][30][8]) _ensemble20value;
    __assume_aligned(ensemble20value, 64);
    float (* ensemble20inputs)[12][30][30][8] = (float (*)[12][30][30][8]) _ensemble20inputs;
    __assume_aligned(ensemble20inputs, 64);
    float (* ensemble209value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble209value;
    __assume_aligned(ensemble209value, 64);
    float (* ensemble209inputs)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble209inputs;
    __assume_aligned(ensemble209inputs, 64);
    float (* ensemble208value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble208value;
    __assume_aligned(ensemble208value, 64);
    float (* ensemble208inputs)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble208inputs;
    __assume_aligned(ensemble208inputs, 64);
    float (* ensemble208bias)[1][8] = (float (*)[1][8]) _ensemble208bias;
    __assume_aligned(ensemble208bias, 64);
    float (* ensemble207weights_transposed)[6][5][5][8][8] = (float (*)[6][5][5][8][8]) _ensemble207weights_transposed;
    __assume_aligned(ensemble207weights_transposed, 64);
    float (* ensemble207weights)[6][5][5][8][8] = (float (*)[6][5][5][8][8]) _ensemble207weights;
    __assume_aligned(ensemble207weights, 64);
    float (* ensemble207value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble207value;
    __assume_aligned(ensemble207value, 64);
    float (* ensemble207inputs)[6][11][11][8] = (float (*)[6][11][11][8]) _ensemble207inputs;
    __assume_aligned(ensemble207inputs, 64);
    float (* ensemble206value)[6][11][11][8] = (float (*)[6][11][11][8]) _ensemble206value;
    __assume_aligned(ensemble206value, 64);
    float (* ensemble206inputs)[6][11][11][8] = (float (*)[6][11][11][8]) _ensemble206inputs;
    __assume_aligned(ensemble206inputs, 64);
    float (* ensemble205value)[6][11][11][8] = (float (*)[6][11][11][8]) _ensemble205value;
    __assume_aligned(ensemble205value, 64);
    float (* ensemble205inputs)[6][11][11][8] = (float (*)[6][11][11][8]) _ensemble205inputs;
    __assume_aligned(ensemble205inputs, 64);
    float (* ensemble205bias)[1][8] = (float (*)[1][8]) _ensemble205bias;
    __assume_aligned(ensemble205bias, 64);
    float (* ensemble204weights_transposed)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble204weights_transposed;
    __assume_aligned(ensemble204weights_transposed, 64);
    float (* ensemble204weights)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble204weights;
    __assume_aligned(ensemble204weights, 64);
    float (* ensemble204value)[6][11][11][8] = (float (*)[6][11][11][8]) _ensemble204value;
    __assume_aligned(ensemble204value, 64);
    float (* ensemble204inputs)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble204inputs;
    __assume_aligned(ensemble204inputs, 64);
    float (* ensemble203value)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble203value;
    __assume_aligned(ensemble203value, 64);
    float (* ensemble203inputs)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble203inputs;
    __assume_aligned(ensemble203inputs, 64);
    float (* ensemble202value)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble202value;
    __assume_aligned(ensemble202value, 64);
    float (* ensemble202inputs)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble202inputs;
    __assume_aligned(ensemble202inputs, 64);
    float (* ensemble202bias)[1][8] = (float (*)[1][8]) _ensemble202bias;
    __assume_aligned(ensemble202bias, 64);
    float (* ensemble201weights_transposed)[24][3][3][8][8] = (float (*)[24][3][3][8][8]) _ensemble201weights_transposed;
    __assume_aligned(ensemble201weights_transposed, 64);
    float (* ensemble201weights)[24][3][3][8][8] = (float (*)[24][3][3][8][8]) _ensemble201weights;
    __assume_aligned(ensemble201weights, 64);
    float (* ensemble201value)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble201value;
    __assume_aligned(ensemble201value, 64);
    float (* ensemble201inputs)[24][9][9][8] = (float (*)[24][9][9][8]) _ensemble201inputs;
    __assume_aligned(ensemble201inputs, 64);
    float (* ensemble200value)[24][9][9][8] = (float (*)[24][9][9][8]) _ensemble200value;
    __assume_aligned(ensemble200value, 64);
    float (* ensemble200inputs)[24][9][9][8] = (float (*)[24][9][9][8]) _ensemble200inputs;
    __assume_aligned(ensemble200inputs, 64);
    float (* ensemble19value)[12][30][30][8] = (float (*)[12][30][30][8]) _ensemble19value;
    __assume_aligned(ensemble19value, 64);
    float (* ensemble19inputs)[12][30][30][8] = (float (*)[12][30][30][8]) _ensemble19inputs;
    __assume_aligned(ensemble19inputs, 64);
    float (* ensemble19bias)[1][8] = (float (*)[1][8]) _ensemble19bias;
    __assume_aligned(ensemble19bias, 64);
    float (* ensemble199value)[24][9][9][8] = (float (*)[24][9][9][8]) _ensemble199value;
    __assume_aligned(ensemble199value, 64);
    float (* ensemble199inputs)[24][9][9][8] = (float (*)[24][9][9][8]) _ensemble199inputs;
    __assume_aligned(ensemble199inputs, 64);
    float (* ensemble199bias)[1][8] = (float (*)[1][8]) _ensemble199bias;
    __assume_aligned(ensemble199bias, 64);
    float (* ensemble198weights_transposed)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble198weights_transposed;
    __assume_aligned(ensemble198weights_transposed, 64);
    float (* ensemble198weights)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble198weights;
    __assume_aligned(ensemble198weights, 64);
    float (* ensemble198value)[24][9][9][8] = (float (*)[24][9][9][8]) _ensemble198value;
    __assume_aligned(ensemble198value, 64);
    float (* ensemble198inputs)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble198inputs;
    __assume_aligned(ensemble198inputs, 64);
    float (* ensemble197value)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble197value;
    __assume_aligned(ensemble197value, 64);
    float (* ensemble197inputs)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble197inputs;
    __assume_aligned(ensemble197inputs, 64);
    float (* ensemble196value)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble196value;
    __assume_aligned(ensemble196value, 64);
    float (* ensemble196inputs)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble196inputs;
    __assume_aligned(ensemble196inputs, 64);
    float (* ensemble196bias)[1][8] = (float (*)[1][8]) _ensemble196bias;
    __assume_aligned(ensemble196bias, 64);
    float (* ensemble195weights_transposed)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble195weights_transposed;
    __assume_aligned(ensemble195weights_transposed, 64);
    float (* ensemble195weights)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble195weights;
    __assume_aligned(ensemble195weights, 64);
    float (* ensemble195value)[48][7][7][8] = (float (*)[48][7][7][8]) _ensemble195value;
    __assume_aligned(ensemble195value, 64);
    float (* ensemble195inputs)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble195inputs;
    __assume_aligned(ensemble195inputs, 64);
    float (* ensemble194value)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble194value;
    __assume_aligned(ensemble194value, 64);
    float (* ensemble194inputs3)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble194inputs3;
    __assume_aligned(ensemble194inputs3, 64);
    float (* ensemble194inputs2)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble194inputs2;
    __assume_aligned(ensemble194inputs2, 64);
    float (* ensemble194inputs1)[40][7][7][8] = (float (*)[40][7][7][8]) _ensemble194inputs1;
    __assume_aligned(ensemble194inputs1, 64);
    float (* ensemble194inputs)[32][7][7][8] = (float (*)[32][7][7][8]) _ensemble194inputs;
    __assume_aligned(ensemble194inputs, 64);
    float (* ensemble193value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble193value;
    __assume_aligned(ensemble193value, 64);
    float (* ensemble193inputs)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble193inputs;
    __assume_aligned(ensemble193inputs, 64);
    float (* ensemble192value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble192value;
    __assume_aligned(ensemble192value, 64);
    float (* ensemble192inputs)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble192inputs;
    __assume_aligned(ensemble192inputs, 64);
    float (* ensemble192bias)[1][8] = (float (*)[1][8]) _ensemble192bias;
    __assume_aligned(ensemble192bias, 64);
    float (* ensemble191weights_transposed)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble191weights_transposed;
    __assume_aligned(ensemble191weights_transposed, 64);
    float (* ensemble191weights)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble191weights;
    __assume_aligned(ensemble191weights, 64);
    float (* ensemble191value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble191value;
    __assume_aligned(ensemble191value, 64);
    float (* ensemble191inputs)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble191inputs;
    __assume_aligned(ensemble191inputs, 64);
    float (* ensemble190value)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble190value;
    __assume_aligned(ensemble190value, 64);
    long (* ensemble190mask_k)[104][7][7][8] = (long (*)[104][7][7][8]) _ensemble190mask_k;
    __assume_aligned(ensemble190mask_k, 64);
    long (* ensemble190mask_j)[104][7][7][8] = (long (*)[104][7][7][8]) _ensemble190mask_j;
    __assume_aligned(ensemble190mask_j, 64);
    float (* ensemble190inputs)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble190inputs;
    __assume_aligned(ensemble190inputs, 64);
    float (* ensemble18weights_transposed)[24][1][1][8][8] = (float (*)[24][1][1][8][8]) _ensemble18weights_transposed;
    __assume_aligned(ensemble18weights_transposed, 64);
    float (* ensemble18weights)[24][1][1][8][8] = (float (*)[24][1][1][8][8]) _ensemble18weights;
    __assume_aligned(ensemble18weights, 64);
    float (* ensemble18value)[12][30][30][8] = (float (*)[12][30][30][8]) _ensemble18value;
    __assume_aligned(ensemble18value, 64);
    float (* ensemble18inputs)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble18inputs;
    __assume_aligned(ensemble18inputs, 64);
    float (* ensemble189value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble189value;
    __assume_aligned(ensemble189value, 64);
    float (* ensemble189inputs)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble189inputs;
    __assume_aligned(ensemble189inputs, 64);
    float (* ensemble188value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble188value;
    __assume_aligned(ensemble188value, 64);
    float (* ensemble188inputs)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble188inputs;
    __assume_aligned(ensemble188inputs, 64);
    float (* ensemble188bias)[1][8] = (float (*)[1][8]) _ensemble188bias;
    __assume_aligned(ensemble188bias, 64);
    float (* ensemble187weights_transposed)[4][5][5][8][8] = (float (*)[4][5][5][8][8]) _ensemble187weights_transposed;
    __assume_aligned(ensemble187weights_transposed, 64);
    float (* ensemble187weights)[4][5][5][8][8] = (float (*)[4][5][5][8][8]) _ensemble187weights;
    __assume_aligned(ensemble187weights, 64);
    float (* ensemble187value)[16][7][7][8] = (float (*)[16][7][7][8]) _ensemble187value;
    __assume_aligned(ensemble187value, 64);
    float (* ensemble187inputs)[4][11][11][8] = (float (*)[4][11][11][8]) _ensemble187inputs;
    __assume_aligned(ensemble187inputs, 64);
    float (* ensemble186value)[4][11][11][8] = (float (*)[4][11][11][8]) _ensemble186value;
    __assume_aligned(ensemble186value, 64);
    float (* ensemble186inputs)[4][11][11][8] = (float (*)[4][11][11][8]) _ensemble186inputs;
    __assume_aligned(ensemble186inputs, 64);
    float (* ensemble185value)[4][11][11][8] = (float (*)[4][11][11][8]) _ensemble185value;
    __assume_aligned(ensemble185value, 64);
    float (* ensemble185inputs)[4][11][11][8] = (float (*)[4][11][11][8]) _ensemble185inputs;
    __assume_aligned(ensemble185inputs, 64);
    float (* ensemble185bias)[1][8] = (float (*)[1][8]) _ensemble185bias;
    __assume_aligned(ensemble185bias, 64);
    float (* ensemble184weights_transposed)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble184weights_transposed;
    __assume_aligned(ensemble184weights_transposed, 64);
    float (* ensemble184weights)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble184weights;
    __assume_aligned(ensemble184weights, 64);
    float (* ensemble184value)[4][11][11][8] = (float (*)[4][11][11][8]) _ensemble184value;
    __assume_aligned(ensemble184value, 64);
    float (* ensemble184inputs)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble184inputs;
    __assume_aligned(ensemble184inputs, 64);
    float (* ensemble183value)[40][7][7][8] = (float (*)[40][7][7][8]) _ensemble183value;
    __assume_aligned(ensemble183value, 64);
    float (* ensemble183inputs)[40][7][7][8] = (float (*)[40][7][7][8]) _ensemble183inputs;
    __assume_aligned(ensemble183inputs, 64);
    float (* ensemble182value)[40][7][7][8] = (float (*)[40][7][7][8]) _ensemble182value;
    __assume_aligned(ensemble182value, 64);
    float (* ensemble182inputs)[40][7][7][8] = (float (*)[40][7][7][8]) _ensemble182inputs;
    __assume_aligned(ensemble182inputs, 64);
    float (* ensemble182bias)[1][8] = (float (*)[1][8]) _ensemble182bias;
    __assume_aligned(ensemble182bias, 64);
    float (* ensemble181weights_transposed)[20][3][3][8][8] = (float (*)[20][3][3][8][8]) _ensemble181weights_transposed;
    __assume_aligned(ensemble181weights_transposed, 64);
    float (* ensemble181weights)[20][3][3][8][8] = (float (*)[20][3][3][8][8]) _ensemble181weights;
    __assume_aligned(ensemble181weights, 64);
    float (* ensemble181value)[40][7][7][8] = (float (*)[40][7][7][8]) _ensemble181value;
    __assume_aligned(ensemble181value, 64);
    float (* ensemble181inputs)[20][9][9][8] = (float (*)[20][9][9][8]) _ensemble181inputs;
    __assume_aligned(ensemble181inputs, 64);
    float (* ensemble180value)[20][9][9][8] = (float (*)[20][9][9][8]) _ensemble180value;
    __assume_aligned(ensemble180value, 64);
    float (* ensemble180inputs)[20][9][9][8] = (float (*)[20][9][9][8]) _ensemble180inputs;
    __assume_aligned(ensemble180inputs, 64);
    float (* ensemble17value)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble17value;
    __assume_aligned(ensemble17value, 64);
    float (* ensemble17inputs)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble17inputs;
    __assume_aligned(ensemble17inputs, 64);
    float (* ensemble179value)[20][9][9][8] = (float (*)[20][9][9][8]) _ensemble179value;
    __assume_aligned(ensemble179value, 64);
    float (* ensemble179inputs)[20][9][9][8] = (float (*)[20][9][9][8]) _ensemble179inputs;
    __assume_aligned(ensemble179inputs, 64);
    float (* ensemble179bias)[1][8] = (float (*)[1][8]) _ensemble179bias;
    __assume_aligned(ensemble179bias, 64);
    float (* ensemble178weights_transposed)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble178weights_transposed;
    __assume_aligned(ensemble178weights_transposed, 64);
    float (* ensemble178weights)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble178weights;
    __assume_aligned(ensemble178weights, 64);
    float (* ensemble178value)[20][9][9][8] = (float (*)[20][9][9][8]) _ensemble178value;
    __assume_aligned(ensemble178value, 64);
    float (* ensemble178inputs)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble178inputs;
    __assume_aligned(ensemble178inputs, 64);
    float (* ensemble177value)[32][7][7][8] = (float (*)[32][7][7][8]) _ensemble177value;
    __assume_aligned(ensemble177value, 64);
    float (* ensemble177inputs)[32][7][7][8] = (float (*)[32][7][7][8]) _ensemble177inputs;
    __assume_aligned(ensemble177inputs, 64);
    float (* ensemble176value)[32][7][7][8] = (float (*)[32][7][7][8]) _ensemble176value;
    __assume_aligned(ensemble176value, 64);
    float (* ensemble176inputs)[32][7][7][8] = (float (*)[32][7][7][8]) _ensemble176inputs;
    __assume_aligned(ensemble176inputs, 64);
    float (* ensemble176bias)[1][8] = (float (*)[1][8]) _ensemble176bias;
    __assume_aligned(ensemble176bias, 64);
    float (* ensemble175weights_transposed)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble175weights_transposed;
    __assume_aligned(ensemble175weights_transposed, 64);
    float (* ensemble175weights)[104][1][1][8][8] = (float (*)[104][1][1][8][8]) _ensemble175weights;
    __assume_aligned(ensemble175weights, 64);
    float (* ensemble175value)[32][7][7][8] = (float (*)[32][7][7][8]) _ensemble175value;
    __assume_aligned(ensemble175value, 64);
    float (* ensemble175inputs)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble175inputs;
    __assume_aligned(ensemble175inputs, 64);
    float (* ensemble174value)[104][7][7][8] = (float (*)[104][7][7][8]) _ensemble174value;
    __assume_aligned(ensemble174value, 64);
    long (* ensemble174mask_k)[104][7][7][8] = (long (*)[104][7][7][8]) _ensemble174mask_k;
    __assume_aligned(ensemble174mask_k, 64);
    long (* ensemble174mask_j)[104][7][7][8] = (long (*)[104][7][7][8]) _ensemble174mask_j;
    __assume_aligned(ensemble174mask_j, 64);
    float (* ensemble174inputs)[104][14][14][8] = (float (*)[104][14][14][8]) _ensemble174inputs;
    __assume_aligned(ensemble174inputs, 64);
    float (* ensemble173value)[104][14][14][8] = (float (*)[104][14][14][8]) _ensemble173value;
    __assume_aligned(ensemble173value, 64);
    float (* ensemble173inputs3)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble173inputs3;
    __assume_aligned(ensemble173inputs3, 64);
    float (* ensemble173inputs2)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble173inputs2;
    __assume_aligned(ensemble173inputs2, 64);
    float (* ensemble173inputs1)[40][14][14][8] = (float (*)[40][14][14][8]) _ensemble173inputs1;
    __assume_aligned(ensemble173inputs1, 64);
    float (* ensemble173inputs)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble173inputs;
    __assume_aligned(ensemble173inputs, 64);
    float (* ensemble172value)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble172value;
    __assume_aligned(ensemble172value, 64);
    float (* ensemble172inputs)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble172inputs;
    __assume_aligned(ensemble172inputs, 64);
    float (* ensemble171value)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble171value;
    __assume_aligned(ensemble171value, 64);
    float (* ensemble171inputs)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble171inputs;
    __assume_aligned(ensemble171inputs, 64);
    float (* ensemble171bias)[1][8] = (float (*)[1][8]) _ensemble171bias;
    __assume_aligned(ensemble171bias, 64);
    float (* ensemble170weights_transposed)[66][1][1][8][8] = (float (*)[66][1][1][8][8]) _ensemble170weights_transposed;
    __assume_aligned(ensemble170weights_transposed, 64);
    float (* ensemble170weights)[66][1][1][8][8] = (float (*)[66][1][1][8][8]) _ensemble170weights;
    __assume_aligned(ensemble170weights, 64);
    float (* ensemble170value)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble170value;
    __assume_aligned(ensemble170value, 64);
    float (* ensemble170inputs)[66][14][14][8] = (float (*)[66][14][14][8]) _ensemble170inputs;
    __assume_aligned(ensemble170inputs, 64);
    float (* ensemble16value)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble16value;
    __assume_aligned(ensemble16value, 64);
    float (* ensemble16inputs)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble16inputs;
    __assume_aligned(ensemble16inputs, 64);
    float (* ensemble16bias)[1][8] = (float (*)[1][8]) _ensemble16bias;
    __assume_aligned(ensemble16bias, 64);
    float (* ensemble169value)[66][14][14][8] = (float (*)[66][14][14][8]) _ensemble169value;
    __assume_aligned(ensemble169value, 64);
    long (* ensemble169mask_k)[66][14][14][8] = (long (*)[66][14][14][8]) _ensemble169mask_k;
    __assume_aligned(ensemble169mask_k, 64);
    long (* ensemble169mask_j)[66][14][14][8] = (long (*)[66][14][14][8]) _ensemble169mask_j;
    __assume_aligned(ensemble169mask_j, 64);
    float (* ensemble169inputs)[66][14][14][8] = (float (*)[66][14][14][8]) _ensemble169inputs;
    __assume_aligned(ensemble169inputs, 64);
    float (* ensemble168value)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble168value;
    __assume_aligned(ensemble168value, 64);
    float (* ensemble168inputs)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble168inputs;
    __assume_aligned(ensemble168inputs, 64);
    float (* ensemble167value)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble167value;
    __assume_aligned(ensemble167value, 64);
    float (* ensemble167inputs)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble167inputs;
    __assume_aligned(ensemble167inputs, 64);
    float (* ensemble167bias)[1][8] = (float (*)[1][8]) _ensemble167bias;
    __assume_aligned(ensemble167bias, 64);
    float (* ensemble166weights_transposed)[4][5][5][8][8] = (float (*)[4][5][5][8][8]) _ensemble166weights_transposed;
    __assume_aligned(ensemble166weights_transposed, 64);
    float (* ensemble166weights)[4][5][5][8][8] = (float (*)[4][5][5][8][8]) _ensemble166weights;
    __assume_aligned(ensemble166weights, 64);
    float (* ensemble166value)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble166value;
    __assume_aligned(ensemble166value, 64);
    float (* ensemble166inputs)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble166inputs;
    __assume_aligned(ensemble166inputs, 64);
    float (* ensemble165value)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble165value;
    __assume_aligned(ensemble165value, 64);
    float (* ensemble165inputs)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble165inputs;
    __assume_aligned(ensemble165inputs, 64);
    float (* ensemble164value)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble164value;
    __assume_aligned(ensemble164value, 64);
    float (* ensemble164inputs)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble164inputs;
    __assume_aligned(ensemble164inputs, 64);
    float (* ensemble164bias)[1][8] = (float (*)[1][8]) _ensemble164bias;
    __assume_aligned(ensemble164bias, 64);
    float (* ensemble163weights_transposed)[66][1][1][8][8] = (float (*)[66][1][1][8][8]) _ensemble163weights_transposed;
    __assume_aligned(ensemble163weights_transposed, 64);
    float (* ensemble163weights)[66][1][1][8][8] = (float (*)[66][1][1][8][8]) _ensemble163weights;
    __assume_aligned(ensemble163weights, 64);
    float (* ensemble163value)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble163value;
    __assume_aligned(ensemble163value, 64);
    float (* ensemble163inputs)[66][14][14][8] = (float (*)[66][14][14][8]) _ensemble163inputs;
    __assume_aligned(ensemble163inputs, 64);
    float (* ensemble162value)[40][14][14][8] = (float (*)[40][14][14][8]) _ensemble162value;
    __assume_aligned(ensemble162value, 64);
    float (* ensemble162inputs)[40][14][14][8] = (float (*)[40][14][14][8]) _ensemble162inputs;
    __assume_aligned(ensemble162inputs, 64);
    float (* ensemble161value)[40][14][14][8] = (float (*)[40][14][14][8]) _ensemble161value;
    __assume_aligned(ensemble161value, 64);
    float (* ensemble161inputs)[40][14][14][8] = (float (*)[40][14][14][8]) _ensemble161inputs;
    __assume_aligned(ensemble161inputs, 64);
    float (* ensemble161bias)[1][8] = (float (*)[1][8]) _ensemble161bias;
    __assume_aligned(ensemble161bias, 64);
    float (* ensemble160weights_transposed)[20][3][3][8][8] = (float (*)[20][3][3][8][8]) _ensemble160weights_transposed;
    __assume_aligned(ensemble160weights_transposed, 64);
    float (* ensemble160weights)[20][3][3][8][8] = (float (*)[20][3][3][8][8]) _ensemble160weights;
    __assume_aligned(ensemble160weights, 64);
    float (* ensemble160value)[40][14][14][8] = (float (*)[40][14][14][8]) _ensemble160value;
    __assume_aligned(ensemble160value, 64);
    float (* ensemble160inputs)[20][16][16][8] = (float (*)[20][16][16][8]) _ensemble160inputs;
    __assume_aligned(ensemble160inputs, 64);
    float (* ensemble15weights_transposed)[24][1][1][8][8] = (float (*)[24][1][1][8][8]) _ensemble15weights_transposed;
    __assume_aligned(ensemble15weights_transposed, 64);
    float (* ensemble15weights)[24][1][1][8][8] = (float (*)[24][1][1][8][8]) _ensemble15weights;
    __assume_aligned(ensemble15weights, 64);
    float (* ensemble15value)[8][28][28][8] = (float (*)[8][28][28][8]) _ensemble15value;
    __assume_aligned(ensemble15value, 64);
    float (* ensemble15inputs)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble15inputs;
    __assume_aligned(ensemble15inputs, 64);
    float (* ensemble159value)[20][16][16][8] = (float (*)[20][16][16][8]) _ensemble159value;
    __assume_aligned(ensemble159value, 64);
    float (* ensemble159inputs)[20][16][16][8] = (float (*)[20][16][16][8]) _ensemble159inputs;
    __assume_aligned(ensemble159inputs, 64);
    float (* ensemble158value)[20][16][16][8] = (float (*)[20][16][16][8]) _ensemble158value;
    __assume_aligned(ensemble158value, 64);
    float (* ensemble158inputs)[20][16][16][8] = (float (*)[20][16][16][8]) _ensemble158inputs;
    __assume_aligned(ensemble158inputs, 64);
    float (* ensemble158bias)[1][8] = (float (*)[1][8]) _ensemble158bias;
    __assume_aligned(ensemble158bias, 64);
    float (* ensemble157weights_transposed)[66][1][1][8][8] = (float (*)[66][1][1][8][8]) _ensemble157weights_transposed;
    __assume_aligned(ensemble157weights_transposed, 64);
    float (* ensemble157weights)[66][1][1][8][8] = (float (*)[66][1][1][8][8]) _ensemble157weights;
    __assume_aligned(ensemble157weights, 64);
    float (* ensemble157value)[20][16][16][8] = (float (*)[20][16][16][8]) _ensemble157value;
    __assume_aligned(ensemble157value, 64);
    float (* ensemble157inputs)[66][14][14][8] = (float (*)[66][14][14][8]) _ensemble157inputs;
    __assume_aligned(ensemble157inputs, 64);
    float (* ensemble156value)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble156value;
    __assume_aligned(ensemble156value, 64);
    float (* ensemble156inputs)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble156inputs;
    __assume_aligned(ensemble156inputs, 64);
    float (* ensemble155value)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble155value;
    __assume_aligned(ensemble155value, 64);
    float (* ensemble155inputs)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble155inputs;
    __assume_aligned(ensemble155inputs, 64);
    float (* ensemble155bias)[1][8] = (float (*)[1][8]) _ensemble155bias;
    __assume_aligned(ensemble155bias, 64);
    float (* ensemble154weights_transposed)[66][1][1][8][8] = (float (*)[66][1][1][8][8]) _ensemble154weights_transposed;
    __assume_aligned(ensemble154weights_transposed, 64);
    float (* ensemble154weights)[66][1][1][8][8] = (float (*)[66][1][1][8][8]) _ensemble154weights;
    __assume_aligned(ensemble154weights, 64);
    float (* ensemble154value)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble154value;
    __assume_aligned(ensemble154value, 64);
    float (* ensemble154inputs)[66][14][14][8] = (float (*)[66][14][14][8]) _ensemble154inputs;
    __assume_aligned(ensemble154inputs, 64);
    float (* ensemble153value)[126][8] = (float (*)[126][8]) _ensemble153value;
    __assume_aligned(ensemble153value, 64);
    float (* ensemble153inputs)[126][8] = (float (*)[126][8]) _ensemble153inputs;
    __assume_aligned(ensemble153inputs, 64);
    float (* ensemble153bias)[1][8] = (float (*)[1][8]) _ensemble153bias;
    __assume_aligned(ensemble153bias, 64);
    float (* ensemble152weights_transposed)[128][8][8] = (float (*)[128][8][8]) _ensemble152weights_transposed;
    __assume_aligned(ensemble152weights_transposed, 64);
    float (* ensemble152weights)[128][8][8] = (float (*)[128][8][8]) _ensemble152weights;
    __assume_aligned(ensemble152weights, 64);
    float (* ensemble152value)[126][8] = (float (*)[126][8]) _ensemble152value;
    __assume_aligned(ensemble152value, 64);
    float (* ensemble152inputs)[128][8] = (float (*)[128][8]) _ensemble152inputs;
    __assume_aligned(ensemble152inputs, 64);
    float (* ensemble151value)[128][8] = (float (*)[128][8]) _ensemble151value;
    __assume_aligned(ensemble151value, 64);
    float (* ensemble151inputs)[128][8] = (float (*)[128][8]) _ensemble151inputs;
    __assume_aligned(ensemble151inputs, 64);
    float (* ensemble150value)[128][8] = (float (*)[128][8]) _ensemble150value;
    __assume_aligned(ensemble150value, 64);
    float (* ensemble150inputs)[128][8] = (float (*)[128][8]) _ensemble150inputs;
    __assume_aligned(ensemble150inputs, 64);
    float (* ensemble150bias)[1][8] = (float (*)[1][8]) _ensemble150bias;
    __assume_aligned(ensemble150bias, 64);
    float (* ensemble14value)[24][28][28][8] = (float (*)[24][28][28][8]) _ensemble14value;
    __assume_aligned(ensemble14value, 64);
    long (* ensemble14mask_k)[24][28][28][8] = (long (*)[24][28][28][8]) _ensemble14mask_k;
    __assume_aligned(ensemble14mask_k, 64);
    long (* ensemble14mask_j)[24][28][28][8] = (long (*)[24][28][28][8]) _ensemble14mask_j;
    __assume_aligned(ensemble14mask_j, 64);
    float (* ensemble14inputs)[24][56][56][8] = (float (*)[24][56][56][8]) _ensemble14inputs;
    __assume_aligned(ensemble14inputs, 64);
    float (* ensemble149weights_transposed)[16][4][4][8][8] = (float (*)[16][4][4][8][8]) _ensemble149weights_transposed;
    __assume_aligned(ensemble149weights_transposed, 64);
    float (* ensemble149weights)[16][4][4][8][8] = (float (*)[16][4][4][8][8]) _ensemble149weights;
    __assume_aligned(ensemble149weights, 64);
    float (* ensemble149value)[128][8] = (float (*)[128][8]) _ensemble149value;
    __assume_aligned(ensemble149value, 64);
    float (* ensemble149inputs)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble149inputs;
    __assume_aligned(ensemble149inputs, 64);
    float (* ensemble148value)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble148value;
    __assume_aligned(ensemble148value, 64);
    float (* ensemble148inputs)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble148inputs;
    __assume_aligned(ensemble148inputs, 64);
    float (* ensemble147value)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble147value;
    __assume_aligned(ensemble147value, 64);
    float (* ensemble147inputs)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble147inputs;
    __assume_aligned(ensemble147inputs, 64);
    float (* ensemble147bias)[1][8] = (float (*)[1][8]) _ensemble147bias;
    __assume_aligned(ensemble147bias, 64);
    float (* ensemble146weights_transposed)[66][1][1][8][8] = (float (*)[66][1][1][8][8]) _ensemble146weights_transposed;
    __assume_aligned(ensemble146weights_transposed, 64);
    float (* ensemble146weights)[66][1][1][8][8] = (float (*)[66][1][1][8][8]) _ensemble146weights;
    __assume_aligned(ensemble146weights, 64);
    float (* ensemble146value)[16][4][4][8] = (float (*)[16][4][4][8]) _ensemble146value;
    __assume_aligned(ensemble146value, 64);
    float (* ensemble146inputs)[66][4][4][8] = (float (*)[66][4][4][8]) _ensemble146inputs;
    __assume_aligned(ensemble146inputs, 64);
    float (* ensemble145value)[66][4][4][8] = (float (*)[66][4][4][8]) _ensemble145value;
    __assume_aligned(ensemble145value, 64);
    long (* ensemble145kernel)[66][4][4][8] = (long (*)[66][4][4][8]) _ensemble145kernel;
    __assume_aligned(ensemble145kernel, 64);
    float (* ensemble145inputs)[66][14][14][8] = (float (*)[66][14][14][8]) _ensemble145inputs;
    __assume_aligned(ensemble145inputs, 64);
    float (* ensemble144value)[66][14][14][8] = (float (*)[66][14][14][8]) _ensemble144value;
    __assume_aligned(ensemble144value, 64);
    float (* ensemble144inputs3)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble144inputs3;
    __assume_aligned(ensemble144inputs3, 64);
    float (* ensemble144inputs2)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble144inputs2;
    __assume_aligned(ensemble144inputs2, 64);
    float (* ensemble144inputs1)[36][14][14][8] = (float (*)[36][14][14][8]) _ensemble144inputs1;
    __assume_aligned(ensemble144inputs1, 64);
    float (* ensemble144inputs)[14][14][14][8] = (float (*)[14][14][14][8]) _ensemble144inputs;
    __assume_aligned(ensemble144inputs, 64);
    float (* ensemble143value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble143value;
    __assume_aligned(ensemble143value, 64);
    float (* ensemble143inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble143inputs;
    __assume_aligned(ensemble143inputs, 64);
    float (* ensemble142value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble142value;
    __assume_aligned(ensemble142value, 64);
    float (* ensemble142inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble142inputs;
    __assume_aligned(ensemble142inputs, 64);
    float (* ensemble142bias)[1][8] = (float (*)[1][8]) _ensemble142bias;
    __assume_aligned(ensemble142bias, 64);
    float (* ensemble141weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble141weights_transposed;
    __assume_aligned(ensemble141weights_transposed, 64);
    float (* ensemble141weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble141weights;
    __assume_aligned(ensemble141weights, 64);
    float (* ensemble141value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble141value;
    __assume_aligned(ensemble141value, 64);
    float (* ensemble141inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble141inputs;
    __assume_aligned(ensemble141inputs, 64);
    float (* ensemble140value)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble140value;
    __assume_aligned(ensemble140value, 64);
    long (* ensemble140mask_k)[64][14][14][8] = (long (*)[64][14][14][8]) _ensemble140mask_k;
    __assume_aligned(ensemble140mask_k, 64);
    long (* ensemble140mask_j)[64][14][14][8] = (long (*)[64][14][14][8]) _ensemble140mask_j;
    __assume_aligned(ensemble140mask_j, 64);
    float (* ensemble140inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble140inputs;
    __assume_aligned(ensemble140inputs, 64);
    float (* ensemble13value)[24][56][56][8] = (float (*)[24][56][56][8]) _ensemble13value;
    __assume_aligned(ensemble13value, 64);
    double (* ensemble13sum_value)[24][56][56][8] = (double (*)[24][56][56][8]) _ensemble13sum_value;
    __assume_aligned(ensemble13sum_value, 64);
    long (* ensemble13n)[24][56][56][8] = (long (*)[24][56][56][8]) _ensemble13n;
    __assume_aligned(ensemble13n, 64);
    double (* ensemble13k)[56][56][8] = (double (*)[56][56][8]) _ensemble13k;
    __assume_aligned(ensemble13k, 64);
    float (* ensemble13inputs)[26][56][56][8] = (float (*)[26][56][56][8]) _ensemble13inputs;
    __assume_aligned(ensemble13inputs, 64);
    double (* ensemble13beta)[24][56][56][8] = (double (*)[24][56][56][8]) _ensemble13beta;
    __assume_aligned(ensemble13beta, 64);
    double (* ensemble13alpha)[24][56][56][8] = (double (*)[24][56][56][8]) _ensemble13alpha;
    __assume_aligned(ensemble13alpha, 64);
    float (* ensemble139value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble139value;
    __assume_aligned(ensemble139value, 64);
    float (* ensemble139inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble139inputs;
    __assume_aligned(ensemble139inputs, 64);
    float (* ensemble138value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble138value;
    __assume_aligned(ensemble138value, 64);
    float (* ensemble138inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble138inputs;
    __assume_aligned(ensemble138inputs, 64);
    float (* ensemble138bias)[1][8] = (float (*)[1][8]) _ensemble138bias;
    __assume_aligned(ensemble138bias, 64);
    float (* ensemble137weights_transposed)[4][5][5][8][8] = (float (*)[4][5][5][8][8]) _ensemble137weights_transposed;
    __assume_aligned(ensemble137weights_transposed, 64);
    float (* ensemble137weights)[4][5][5][8][8] = (float (*)[4][5][5][8][8]) _ensemble137weights;
    __assume_aligned(ensemble137weights, 64);
    float (* ensemble137value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble137value;
    __assume_aligned(ensemble137value, 64);
    float (* ensemble137inputs)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble137inputs;
    __assume_aligned(ensemble137inputs, 64);
    float (* ensemble136value)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble136value;
    __assume_aligned(ensemble136value, 64);
    float (* ensemble136inputs)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble136inputs;
    __assume_aligned(ensemble136inputs, 64);
    float (* ensemble135value)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble135value;
    __assume_aligned(ensemble135value, 64);
    float (* ensemble135inputs)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble135inputs;
    __assume_aligned(ensemble135inputs, 64);
    float (* ensemble135bias)[1][8] = (float (*)[1][8]) _ensemble135bias;
    __assume_aligned(ensemble135bias, 64);
    float (* ensemble134weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble134weights_transposed;
    __assume_aligned(ensemble134weights_transposed, 64);
    float (* ensemble134weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble134weights;
    __assume_aligned(ensemble134weights, 64);
    float (* ensemble134value)[4][18][18][8] = (float (*)[4][18][18][8]) _ensemble134value;
    __assume_aligned(ensemble134value, 64);
    float (* ensemble134inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble134inputs;
    __assume_aligned(ensemble134inputs, 64);
    float (* ensemble133value)[36][14][14][8] = (float (*)[36][14][14][8]) _ensemble133value;
    __assume_aligned(ensemble133value, 64);
    float (* ensemble133inputs)[36][14][14][8] = (float (*)[36][14][14][8]) _ensemble133inputs;
    __assume_aligned(ensemble133inputs, 64);
    float (* ensemble132value)[36][14][14][8] = (float (*)[36][14][14][8]) _ensemble132value;
    __assume_aligned(ensemble132value, 64);
    float (* ensemble132inputs)[36][14][14][8] = (float (*)[36][14][14][8]) _ensemble132inputs;
    __assume_aligned(ensemble132inputs, 64);
    float (* ensemble132bias)[1][8] = (float (*)[1][8]) _ensemble132bias;
    __assume_aligned(ensemble132bias, 64);
    float (* ensemble131weights_transposed)[18][3][3][8][8] = (float (*)[18][3][3][8][8]) _ensemble131weights_transposed;
    __assume_aligned(ensemble131weights_transposed, 64);
    float (* ensemble131weights)[18][3][3][8][8] = (float (*)[18][3][3][8][8]) _ensemble131weights;
    __assume_aligned(ensemble131weights, 64);
    float (* ensemble131value)[36][14][14][8] = (float (*)[36][14][14][8]) _ensemble131value;
    __assume_aligned(ensemble131value, 64);
    float (* ensemble131inputs)[18][16][16][8] = (float (*)[18][16][16][8]) _ensemble131inputs;
    __assume_aligned(ensemble131inputs, 64);
    float (* ensemble130value)[18][16][16][8] = (float (*)[18][16][16][8]) _ensemble130value;
    __assume_aligned(ensemble130value, 64);
    float (* ensemble130inputs)[18][16][16][8] = (float (*)[18][16][16][8]) _ensemble130inputs;
    __assume_aligned(ensemble130inputs, 64);
    float (* ensemble12value)[26][56][56][8] = (float (*)[26][56][56][8]) _ensemble12value;
    __assume_aligned(ensemble12value, 64);
    float (* ensemble12inputs)[26][56][56][8] = (float (*)[26][56][56][8]) _ensemble12inputs;
    __assume_aligned(ensemble12inputs, 64);
    float (* ensemble129value)[18][16][16][8] = (float (*)[18][16][16][8]) _ensemble129value;
    __assume_aligned(ensemble129value, 64);
    float (* ensemble129inputs)[18][16][16][8] = (float (*)[18][16][16][8]) _ensemble129inputs;
    __assume_aligned(ensemble129inputs, 64);
    float (* ensemble129bias)[1][8] = (float (*)[1][8]) _ensemble129bias;
    __assume_aligned(ensemble129bias, 64);
    float (* ensemble128weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble128weights_transposed;
    __assume_aligned(ensemble128weights_transposed, 64);
    float (* ensemble128weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble128weights;
    __assume_aligned(ensemble128weights, 64);
    float (* ensemble128value)[18][16][16][8] = (float (*)[18][16][16][8]) _ensemble128value;
    __assume_aligned(ensemble128value, 64);
    float (* ensemble128inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble128inputs;
    __assume_aligned(ensemble128inputs, 64);
    float (* ensemble127value)[14][14][14][8] = (float (*)[14][14][14][8]) _ensemble127value;
    __assume_aligned(ensemble127value, 64);
    float (* ensemble127inputs)[14][14][14][8] = (float (*)[14][14][14][8]) _ensemble127inputs;
    __assume_aligned(ensemble127inputs, 64);
    float (* ensemble126value)[14][14][14][8] = (float (*)[14][14][14][8]) _ensemble126value;
    __assume_aligned(ensemble126value, 64);
    float (* ensemble126inputs)[14][14][14][8] = (float (*)[14][14][14][8]) _ensemble126inputs;
    __assume_aligned(ensemble126inputs, 64);
    float (* ensemble126bias)[1][8] = (float (*)[1][8]) _ensemble126bias;
    __assume_aligned(ensemble126bias, 64);
    float (* ensemble125weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble125weights_transposed;
    __assume_aligned(ensemble125weights_transposed, 64);
    float (* ensemble125weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble125weights;
    __assume_aligned(ensemble125weights, 64);
    float (* ensemble125value)[14][14][14][8] = (float (*)[14][14][14][8]) _ensemble125value;
    __assume_aligned(ensemble125value, 64);
    float (* ensemble125inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble125inputs;
    __assume_aligned(ensemble125inputs, 64);
    float (* ensemble124value)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble124value;
    __assume_aligned(ensemble124value, 64);
    float (* ensemble124inputs3)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble124inputs3;
    __assume_aligned(ensemble124inputs3, 64);
    float (* ensemble124inputs2)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble124inputs2;
    __assume_aligned(ensemble124inputs2, 64);
    float (* ensemble124inputs1)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble124inputs1;
    __assume_aligned(ensemble124inputs1, 64);
    float (* ensemble124inputs)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble124inputs;
    __assume_aligned(ensemble124inputs, 64);
    float (* ensemble123value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble123value;
    __assume_aligned(ensemble123value, 64);
    float (* ensemble123inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble123inputs;
    __assume_aligned(ensemble123inputs, 64);
    float (* ensemble122value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble122value;
    __assume_aligned(ensemble122value, 64);
    float (* ensemble122inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble122inputs;
    __assume_aligned(ensemble122inputs, 64);
    float (* ensemble122bias)[1][8] = (float (*)[1][8]) _ensemble122bias;
    __assume_aligned(ensemble122bias, 64);
    float (* ensemble121weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble121weights_transposed;
    __assume_aligned(ensemble121weights_transposed, 64);
    float (* ensemble121weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble121weights;
    __assume_aligned(ensemble121weights, 64);
    float (* ensemble121value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble121value;
    __assume_aligned(ensemble121value, 64);
    float (* ensemble121inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble121inputs;
    __assume_aligned(ensemble121inputs, 64);
    float (* ensemble120value)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble120value;
    __assume_aligned(ensemble120value, 64);
    long (* ensemble120mask_k)[64][14][14][8] = (long (*)[64][14][14][8]) _ensemble120mask_k;
    __assume_aligned(ensemble120mask_k, 64);
    long (* ensemble120mask_j)[64][14][14][8] = (long (*)[64][14][14][8]) _ensemble120mask_j;
    __assume_aligned(ensemble120mask_j, 64);
    float (* ensemble120inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble120inputs;
    __assume_aligned(ensemble120inputs, 64);
    float (* ensemble11value)[26][56][56][8] = (float (*)[26][56][56][8]) _ensemble11value;
    __assume_aligned(ensemble11value, 64);
    float (* ensemble11inputs)[26][56][56][8] = (float (*)[26][56][56][8]) _ensemble11inputs;
    __assume_aligned(ensemble11inputs, 64);
    float (* ensemble11bias)[1][8] = (float (*)[1][8]) _ensemble11bias;
    __assume_aligned(ensemble11bias, 64);
    float (* ensemble119value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble119value;
    __assume_aligned(ensemble119value, 64);
    float (* ensemble119inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble119inputs;
    __assume_aligned(ensemble119inputs, 64);
    float (* ensemble118value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble118value;
    __assume_aligned(ensemble118value, 64);
    float (* ensemble118inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble118inputs;
    __assume_aligned(ensemble118inputs, 64);
    float (* ensemble118bias)[1][8] = (float (*)[1][8]) _ensemble118bias;
    __assume_aligned(ensemble118bias, 64);
    float (* ensemble117weights_transposed)[3][5][5][8][8] = (float (*)[3][5][5][8][8]) _ensemble117weights_transposed;
    __assume_aligned(ensemble117weights_transposed, 64);
    float (* ensemble117weights)[3][5][5][8][8] = (float (*)[3][5][5][8][8]) _ensemble117weights;
    __assume_aligned(ensemble117weights, 64);
    float (* ensemble117value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble117value;
    __assume_aligned(ensemble117value, 64);
    float (* ensemble117inputs)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble117inputs;
    __assume_aligned(ensemble117inputs, 64);
    float (* ensemble116value)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble116value;
    __assume_aligned(ensemble116value, 64);
    float (* ensemble116inputs)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble116inputs;
    __assume_aligned(ensemble116inputs, 64);
    float (* ensemble115value)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble115value;
    __assume_aligned(ensemble115value, 64);
    float (* ensemble115inputs)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble115inputs;
    __assume_aligned(ensemble115inputs, 64);
    float (* ensemble115bias)[1][8] = (float (*)[1][8]) _ensemble115bias;
    __assume_aligned(ensemble115bias, 64);
    float (* ensemble114weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble114weights_transposed;
    __assume_aligned(ensemble114weights_transposed, 64);
    float (* ensemble114weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble114weights;
    __assume_aligned(ensemble114weights, 64);
    float (* ensemble114value)[3][18][18][8] = (float (*)[3][18][18][8]) _ensemble114value;
    __assume_aligned(ensemble114value, 64);
    float (* ensemble114inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble114inputs;
    __assume_aligned(ensemble114inputs, 64);
    float (* ensemble113value)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble113value;
    __assume_aligned(ensemble113value, 64);
    float (* ensemble113inputs)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble113inputs;
    __assume_aligned(ensemble113inputs, 64);
    float (* ensemble112value)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble112value;
    __assume_aligned(ensemble112value, 64);
    float (* ensemble112inputs)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble112inputs;
    __assume_aligned(ensemble112inputs, 64);
    float (* ensemble112bias)[1][8] = (float (*)[1][8]) _ensemble112bias;
    __assume_aligned(ensemble112bias, 64);
    float (* ensemble111weights_transposed)[16][3][3][8][8] = (float (*)[16][3][3][8][8]) _ensemble111weights_transposed;
    __assume_aligned(ensemble111weights_transposed, 64);
    float (* ensemble111weights)[16][3][3][8][8] = (float (*)[16][3][3][8][8]) _ensemble111weights;
    __assume_aligned(ensemble111weights, 64);
    float (* ensemble111value)[32][14][14][8] = (float (*)[32][14][14][8]) _ensemble111value;
    __assume_aligned(ensemble111value, 64);
    float (* ensemble111inputs)[16][16][16][8] = (float (*)[16][16][16][8]) _ensemble111inputs;
    __assume_aligned(ensemble111inputs, 64);
    float (* ensemble110value)[16][16][16][8] = (float (*)[16][16][16][8]) _ensemble110value;
    __assume_aligned(ensemble110value, 64);
    float (* ensemble110inputs)[16][16][16][8] = (float (*)[16][16][16][8]) _ensemble110inputs;
    __assume_aligned(ensemble110inputs, 64);
    float (* ensemble10weights_transposed)[8][3][3][8][8] = (float (*)[8][3][3][8][8]) _ensemble10weights_transposed;
    __assume_aligned(ensemble10weights_transposed, 64);
    float (* ensemble10weights)[8][3][3][8][8] = (float (*)[8][3][3][8][8]) _ensemble10weights;
    __assume_aligned(ensemble10weights, 64);
    float (* ensemble10value)[26][56][56][8] = (float (*)[26][56][56][8]) _ensemble10value;
    __assume_aligned(ensemble10value, 64);
    float (* ensemble10inputs)[8][58][58][8] = (float (*)[8][58][58][8]) _ensemble10inputs;
    __assume_aligned(ensemble10inputs, 64);
    float (* ensemble109value)[16][16][16][8] = (float (*)[16][16][16][8]) _ensemble109value;
    __assume_aligned(ensemble109value, 64);
    float (* ensemble109inputs)[16][16][16][8] = (float (*)[16][16][16][8]) _ensemble109inputs;
    __assume_aligned(ensemble109inputs, 64);
    float (* ensemble109bias)[1][8] = (float (*)[1][8]) _ensemble109bias;
    __assume_aligned(ensemble109bias, 64);
    float (* ensemble108weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble108weights_transposed;
    __assume_aligned(ensemble108weights_transposed, 64);
    float (* ensemble108weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble108weights;
    __assume_aligned(ensemble108weights, 64);
    float (* ensemble108value)[16][16][16][8] = (float (*)[16][16][16][8]) _ensemble108value;
    __assume_aligned(ensemble108value, 64);
    float (* ensemble108inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble108inputs;
    __assume_aligned(ensemble108inputs, 64);
    float (* ensemble107value)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble107value;
    __assume_aligned(ensemble107value, 64);
    float (* ensemble107inputs)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble107inputs;
    __assume_aligned(ensemble107inputs, 64);
    float (* ensemble106value)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble106value;
    __assume_aligned(ensemble106value, 64);
    float (* ensemble106inputs)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble106inputs;
    __assume_aligned(ensemble106inputs, 64);
    float (* ensemble106bias)[1][8] = (float (*)[1][8]) _ensemble106bias;
    __assume_aligned(ensemble106bias, 64);
    float (* ensemble105weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble105weights_transposed;
    __assume_aligned(ensemble105weights_transposed, 64);
    float (* ensemble105weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble105weights;
    __assume_aligned(ensemble105weights, 64);
    float (* ensemble105value)[16][14][14][8] = (float (*)[16][14][14][8]) _ensemble105value;
    __assume_aligned(ensemble105value, 64);
    float (* ensemble105inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble105inputs;
    __assume_aligned(ensemble105inputs, 64);
    float (* ensemble104value)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble104value;
    __assume_aligned(ensemble104value, 64);
    float (* ensemble104inputs3)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble104inputs3;
    __assume_aligned(ensemble104inputs3, 64);
    float (* ensemble104inputs2)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble104inputs2;
    __assume_aligned(ensemble104inputs2, 64);
    float (* ensemble104inputs1)[28][14][14][8] = (float (*)[28][14][14][8]) _ensemble104inputs1;
    __assume_aligned(ensemble104inputs1, 64);
    float (* ensemble104inputs)[20][14][14][8] = (float (*)[20][14][14][8]) _ensemble104inputs;
    __assume_aligned(ensemble104inputs, 64);
    float (* ensemble103value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble103value;
    __assume_aligned(ensemble103value, 64);
    float (* ensemble103inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble103inputs;
    __assume_aligned(ensemble103inputs, 64);
    float (* ensemble102value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble102value;
    __assume_aligned(ensemble102value, 64);
    float (* ensemble102inputs)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble102inputs;
    __assume_aligned(ensemble102inputs, 64);
    float (* ensemble102bias)[1][8] = (float (*)[1][8]) _ensemble102bias;
    __assume_aligned(ensemble102bias, 64);
    float (* ensemble101weights_transposed)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble101weights_transposed;
    __assume_aligned(ensemble101weights_transposed, 64);
    float (* ensemble101weights)[64][1][1][8][8] = (float (*)[64][1][1][8][8]) _ensemble101weights;
    __assume_aligned(ensemble101weights, 64);
    float (* ensemble101value)[8][14][14][8] = (float (*)[8][14][14][8]) _ensemble101value;
    __assume_aligned(ensemble101value, 64);
    float (* ensemble101inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble101inputs;
    __assume_aligned(ensemble101inputs, 64);
    float (* ensemble100value)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble100value;
    __assume_aligned(ensemble100value, 64);
    long (* ensemble100mask_k)[64][14][14][8] = (long (*)[64][14][14][8]) _ensemble100mask_k;
    __assume_aligned(ensemble100mask_k, 64);
    long (* ensemble100mask_j)[64][14][14][8] = (long (*)[64][14][14][8]) _ensemble100mask_j;
    __assume_aligned(ensemble100mask_j, 64);
    float (* ensemble100inputs)[64][14][14][8] = (float (*)[64][14][14][8]) _ensemble100inputs;
    __assume_aligned(ensemble100inputs, 64);
    
    parallel_for(0, 8,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 1; x1 ++) {
        for (int x2 = 0; x2 < 7; x2 ++) {
            for (int x3 = 0; x3 < 7; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble2weights[x0][x1][x2][x3][0][0], & ensemble2weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,8 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 1; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 112; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 2;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 112; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 2;
                int in_x_1 = (_neuron_index_3 + 1) * 2;
                int in_x_2 = (_neuron_index_3 + 2) * 2;
                int in_x_3 = (_neuron_index_3 + 3) * 2;
                int in_x_4 = (_neuron_index_3 + 4) * 2;
                int in_x_5 = (_neuron_index_3 + 5) * 2;
                int in_x_6 = (_neuron_index_3 + 6) * 2;
                int in_x_7 = (_neuron_index_3 + 7) * 2;
                int in_x_8 = (_neuron_index_3 + 8) * 2;
                int in_x_9 = (_neuron_index_3 + 9) * 2;
                int in_x_10 = (_neuron_index_3 + 10) * 2;
                int in_x_11 = (_neuron_index_3 + 11) * 2;
                int in_x_12 = (_neuron_index_3 + 12) * 2;
                int in_x_13 = (_neuron_index_3 + 13) * 2;
                int in_x_14 = (_neuron_index_3 + 14) * 2;
                int in_x_15 = (_neuron_index_3 + 15) * 2;
                int in_x_16 = (_neuron_index_3 + 16) * 2;
                int in_x_17 = (_neuron_index_3 + 17) * 2;
                int in_x_18 = (_neuron_index_3 + 18) * 2;
                int in_x_19 = (_neuron_index_3 + 19) * 2;
                int in_x_20 = (_neuron_index_3 + 20) * 2;
                int in_x_21 = (_neuron_index_3 + 21) * 2;
                int in_x_22 = (_neuron_index_3 + 22) * 2;
                int in_x_23 = (_neuron_index_3 + 23) * 2;
                int in_x_24 = (_neuron_index_3 + 24) * 2;
                int in_x_25 = (_neuron_index_3 + 25) * 2;
                int in_x_26 = (_neuron_index_3 + 26) * 2;
                int in_x_27 = (_neuron_index_3 + 27) * 2;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x0_0 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x0_1 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x0_2 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x0_3 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x0_4 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x0_5 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x0_6 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x0_7 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x0_8 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x0_9 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x0_10 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x0_11 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x0_12 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x0_13 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                __m256 ___x0_14 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0]);
                __m256 ___x0_15 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0]);
                __m256 ___x0_16 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0]);
                __m256 ___x0_17 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0]);
                __m256 ___x0_18 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0]);
                __m256 ___x0_19 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0]);
                __m256 ___x0_20 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0]);
                __m256 ___x0_21 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0]);
                __m256 ___x0_22 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0]);
                __m256 ___x0_23 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0]);
                __m256 ___x0_24 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0]);
                __m256 ___x0_25 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0]);
                __m256 ___x0_26 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0]);
                __m256 ___x0_27 = _mm256_load_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0]);
                for (int j = 0; j < 7; j += 1) {
                    for (int k = 0; k < 7; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x1_0 = _mm256_load_ps(& ensemble2weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x1_1 = _mm256_load_ps(& ensemble2weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x1_2 = _mm256_load_ps(& ensemble2weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x1_3 = _mm256_load_ps(& ensemble2weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x2_0_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x2_0_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x2_0_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x2_0_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x2_1_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x2_1_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x2_1_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x2_1_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x2_2_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x2_2_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x2_2_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x2_2_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x2_3_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x2_3_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x2_3_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x2_3_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x2_4_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x2_4_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x2_4_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x2_4_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x2_5_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x2_5_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x2_5_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x2_5_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x2_6_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x2_6_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x2_6_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x2_6_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x2_7_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x2_7_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x2_7_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x2_7_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x2_8_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x2_8_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x2_8_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x2_8_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x2_9_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x2_9_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x2_9_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x2_9_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x2_10_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x2_10_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x2_10_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x2_10_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x2_11_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x2_11_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x2_11_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x2_11_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x2_12_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x2_12_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x2_12_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x2_12_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x2_13_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x2_13_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x2_13_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x2_13_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x2_14_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x2_14_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x2_14_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x2_14_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x2_15_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x2_15_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x2_15_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x2_15_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x2_16_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x2_16_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x2_16_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x2_16_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x2_17_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x2_17_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x2_17_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x2_17_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x2_18_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x2_18_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x2_18_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x2_18_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x2_19_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x2_19_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x2_19_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x2_19_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x2_20_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x2_20_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x2_20_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x2_20_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x2_21_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x2_21_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x2_21_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x2_21_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x2_22_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x2_22_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x2_22_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x2_22_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x2_23_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x2_23_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x2_23_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x2_23_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x2_24_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x2_24_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x2_24_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x2_24_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x2_25_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x2_25_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x2_25_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x2_25_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x2_26_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x2_26_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x2_26_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x2_26_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x2_27_0 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x2_27_1 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x2_27_2 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x2_27_3 = _mm256_broadcast_ss(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            ___x0_0 = _mm256_fmadd_ps(___x2_0_0, ___x1_0, ___x0_0);
                            ___x0_0 = _mm256_fmadd_ps(___x2_0_1, ___x1_1, ___x0_0);
                            ___x0_0 = _mm256_fmadd_ps(___x2_0_2, ___x1_2, ___x0_0);
                            ___x0_0 = _mm256_fmadd_ps(___x2_0_3, ___x1_3, ___x0_0);
                            ___x0_1 = _mm256_fmadd_ps(___x2_1_0, ___x1_0, ___x0_1);
                            ___x0_1 = _mm256_fmadd_ps(___x2_1_1, ___x1_1, ___x0_1);
                            ___x0_1 = _mm256_fmadd_ps(___x2_1_2, ___x1_2, ___x0_1);
                            ___x0_1 = _mm256_fmadd_ps(___x2_1_3, ___x1_3, ___x0_1);
                            ___x0_2 = _mm256_fmadd_ps(___x2_2_0, ___x1_0, ___x0_2);
                            ___x0_2 = _mm256_fmadd_ps(___x2_2_1, ___x1_1, ___x0_2);
                            ___x0_2 = _mm256_fmadd_ps(___x2_2_2, ___x1_2, ___x0_2);
                            ___x0_2 = _mm256_fmadd_ps(___x2_2_3, ___x1_3, ___x0_2);
                            ___x0_3 = _mm256_fmadd_ps(___x2_3_0, ___x1_0, ___x0_3);
                            ___x0_3 = _mm256_fmadd_ps(___x2_3_1, ___x1_1, ___x0_3);
                            ___x0_3 = _mm256_fmadd_ps(___x2_3_2, ___x1_2, ___x0_3);
                            ___x0_3 = _mm256_fmadd_ps(___x2_3_3, ___x1_3, ___x0_3);
                            ___x0_4 = _mm256_fmadd_ps(___x2_4_0, ___x1_0, ___x0_4);
                            ___x0_4 = _mm256_fmadd_ps(___x2_4_1, ___x1_1, ___x0_4);
                            ___x0_4 = _mm256_fmadd_ps(___x2_4_2, ___x1_2, ___x0_4);
                            ___x0_4 = _mm256_fmadd_ps(___x2_4_3, ___x1_3, ___x0_4);
                            ___x0_5 = _mm256_fmadd_ps(___x2_5_0, ___x1_0, ___x0_5);
                            ___x0_5 = _mm256_fmadd_ps(___x2_5_1, ___x1_1, ___x0_5);
                            ___x0_5 = _mm256_fmadd_ps(___x2_5_2, ___x1_2, ___x0_5);
                            ___x0_5 = _mm256_fmadd_ps(___x2_5_3, ___x1_3, ___x0_5);
                            ___x0_6 = _mm256_fmadd_ps(___x2_6_0, ___x1_0, ___x0_6);
                            ___x0_6 = _mm256_fmadd_ps(___x2_6_1, ___x1_1, ___x0_6);
                            ___x0_6 = _mm256_fmadd_ps(___x2_6_2, ___x1_2, ___x0_6);
                            ___x0_6 = _mm256_fmadd_ps(___x2_6_3, ___x1_3, ___x0_6);
                            ___x0_7 = _mm256_fmadd_ps(___x2_7_0, ___x1_0, ___x0_7);
                            ___x0_7 = _mm256_fmadd_ps(___x2_7_1, ___x1_1, ___x0_7);
                            ___x0_7 = _mm256_fmadd_ps(___x2_7_2, ___x1_2, ___x0_7);
                            ___x0_7 = _mm256_fmadd_ps(___x2_7_3, ___x1_3, ___x0_7);
                            ___x0_8 = _mm256_fmadd_ps(___x2_8_0, ___x1_0, ___x0_8);
                            ___x0_8 = _mm256_fmadd_ps(___x2_8_1, ___x1_1, ___x0_8);
                            ___x0_8 = _mm256_fmadd_ps(___x2_8_2, ___x1_2, ___x0_8);
                            ___x0_8 = _mm256_fmadd_ps(___x2_8_3, ___x1_3, ___x0_8);
                            ___x0_9 = _mm256_fmadd_ps(___x2_9_0, ___x1_0, ___x0_9);
                            ___x0_9 = _mm256_fmadd_ps(___x2_9_1, ___x1_1, ___x0_9);
                            ___x0_9 = _mm256_fmadd_ps(___x2_9_2, ___x1_2, ___x0_9);
                            ___x0_9 = _mm256_fmadd_ps(___x2_9_3, ___x1_3, ___x0_9);
                            ___x0_10 = _mm256_fmadd_ps(___x2_10_0, ___x1_0, ___x0_10);
                            ___x0_10 = _mm256_fmadd_ps(___x2_10_1, ___x1_1, ___x0_10);
                            ___x0_10 = _mm256_fmadd_ps(___x2_10_2, ___x1_2, ___x0_10);
                            ___x0_10 = _mm256_fmadd_ps(___x2_10_3, ___x1_3, ___x0_10);
                            ___x0_11 = _mm256_fmadd_ps(___x2_11_0, ___x1_0, ___x0_11);
                            ___x0_11 = _mm256_fmadd_ps(___x2_11_1, ___x1_1, ___x0_11);
                            ___x0_11 = _mm256_fmadd_ps(___x2_11_2, ___x1_2, ___x0_11);
                            ___x0_11 = _mm256_fmadd_ps(___x2_11_3, ___x1_3, ___x0_11);
                            ___x0_12 = _mm256_fmadd_ps(___x2_12_0, ___x1_0, ___x0_12);
                            ___x0_12 = _mm256_fmadd_ps(___x2_12_1, ___x1_1, ___x0_12);
                            ___x0_12 = _mm256_fmadd_ps(___x2_12_2, ___x1_2, ___x0_12);
                            ___x0_12 = _mm256_fmadd_ps(___x2_12_3, ___x1_3, ___x0_12);
                            ___x0_13 = _mm256_fmadd_ps(___x2_13_0, ___x1_0, ___x0_13);
                            ___x0_13 = _mm256_fmadd_ps(___x2_13_1, ___x1_1, ___x0_13);
                            ___x0_13 = _mm256_fmadd_ps(___x2_13_2, ___x1_2, ___x0_13);
                            ___x0_13 = _mm256_fmadd_ps(___x2_13_3, ___x1_3, ___x0_13);
                            ___x0_14 = _mm256_fmadd_ps(___x2_14_0, ___x1_0, ___x0_14);
                            ___x0_14 = _mm256_fmadd_ps(___x2_14_1, ___x1_1, ___x0_14);
                            ___x0_14 = _mm256_fmadd_ps(___x2_14_2, ___x1_2, ___x0_14);
                            ___x0_14 = _mm256_fmadd_ps(___x2_14_3, ___x1_3, ___x0_14);
                            ___x0_15 = _mm256_fmadd_ps(___x2_15_0, ___x1_0, ___x0_15);
                            ___x0_15 = _mm256_fmadd_ps(___x2_15_1, ___x1_1, ___x0_15);
                            ___x0_15 = _mm256_fmadd_ps(___x2_15_2, ___x1_2, ___x0_15);
                            ___x0_15 = _mm256_fmadd_ps(___x2_15_3, ___x1_3, ___x0_15);
                            ___x0_16 = _mm256_fmadd_ps(___x2_16_0, ___x1_0, ___x0_16);
                            ___x0_16 = _mm256_fmadd_ps(___x2_16_1, ___x1_1, ___x0_16);
                            ___x0_16 = _mm256_fmadd_ps(___x2_16_2, ___x1_2, ___x0_16);
                            ___x0_16 = _mm256_fmadd_ps(___x2_16_3, ___x1_3, ___x0_16);
                            ___x0_17 = _mm256_fmadd_ps(___x2_17_0, ___x1_0, ___x0_17);
                            ___x0_17 = _mm256_fmadd_ps(___x2_17_1, ___x1_1, ___x0_17);
                            ___x0_17 = _mm256_fmadd_ps(___x2_17_2, ___x1_2, ___x0_17);
                            ___x0_17 = _mm256_fmadd_ps(___x2_17_3, ___x1_3, ___x0_17);
                            ___x0_18 = _mm256_fmadd_ps(___x2_18_0, ___x1_0, ___x0_18);
                            ___x0_18 = _mm256_fmadd_ps(___x2_18_1, ___x1_1, ___x0_18);
                            ___x0_18 = _mm256_fmadd_ps(___x2_18_2, ___x1_2, ___x0_18);
                            ___x0_18 = _mm256_fmadd_ps(___x2_18_3, ___x1_3, ___x0_18);
                            ___x0_19 = _mm256_fmadd_ps(___x2_19_0, ___x1_0, ___x0_19);
                            ___x0_19 = _mm256_fmadd_ps(___x2_19_1, ___x1_1, ___x0_19);
                            ___x0_19 = _mm256_fmadd_ps(___x2_19_2, ___x1_2, ___x0_19);
                            ___x0_19 = _mm256_fmadd_ps(___x2_19_3, ___x1_3, ___x0_19);
                            ___x0_20 = _mm256_fmadd_ps(___x2_20_0, ___x1_0, ___x0_20);
                            ___x0_20 = _mm256_fmadd_ps(___x2_20_1, ___x1_1, ___x0_20);
                            ___x0_20 = _mm256_fmadd_ps(___x2_20_2, ___x1_2, ___x0_20);
                            ___x0_20 = _mm256_fmadd_ps(___x2_20_3, ___x1_3, ___x0_20);
                            ___x0_21 = _mm256_fmadd_ps(___x2_21_0, ___x1_0, ___x0_21);
                            ___x0_21 = _mm256_fmadd_ps(___x2_21_1, ___x1_1, ___x0_21);
                            ___x0_21 = _mm256_fmadd_ps(___x2_21_2, ___x1_2, ___x0_21);
                            ___x0_21 = _mm256_fmadd_ps(___x2_21_3, ___x1_3, ___x0_21);
                            ___x0_22 = _mm256_fmadd_ps(___x2_22_0, ___x1_0, ___x0_22);
                            ___x0_22 = _mm256_fmadd_ps(___x2_22_1, ___x1_1, ___x0_22);
                            ___x0_22 = _mm256_fmadd_ps(___x2_22_2, ___x1_2, ___x0_22);
                            ___x0_22 = _mm256_fmadd_ps(___x2_22_3, ___x1_3, ___x0_22);
                            ___x0_23 = _mm256_fmadd_ps(___x2_23_0, ___x1_0, ___x0_23);
                            ___x0_23 = _mm256_fmadd_ps(___x2_23_1, ___x1_1, ___x0_23);
                            ___x0_23 = _mm256_fmadd_ps(___x2_23_2, ___x1_2, ___x0_23);
                            ___x0_23 = _mm256_fmadd_ps(___x2_23_3, ___x1_3, ___x0_23);
                            ___x0_24 = _mm256_fmadd_ps(___x2_24_0, ___x1_0, ___x0_24);
                            ___x0_24 = _mm256_fmadd_ps(___x2_24_1, ___x1_1, ___x0_24);
                            ___x0_24 = _mm256_fmadd_ps(___x2_24_2, ___x1_2, ___x0_24);
                            ___x0_24 = _mm256_fmadd_ps(___x2_24_3, ___x1_3, ___x0_24);
                            ___x0_25 = _mm256_fmadd_ps(___x2_25_0, ___x1_0, ___x0_25);
                            ___x0_25 = _mm256_fmadd_ps(___x2_25_1, ___x1_1, ___x0_25);
                            ___x0_25 = _mm256_fmadd_ps(___x2_25_2, ___x1_2, ___x0_25);
                            ___x0_25 = _mm256_fmadd_ps(___x2_25_3, ___x1_3, ___x0_25);
                            ___x0_26 = _mm256_fmadd_ps(___x2_26_0, ___x1_0, ___x0_26);
                            ___x0_26 = _mm256_fmadd_ps(___x2_26_1, ___x1_1, ___x0_26);
                            ___x0_26 = _mm256_fmadd_ps(___x2_26_2, ___x1_2, ___x0_26);
                            ___x0_26 = _mm256_fmadd_ps(___x2_26_3, ___x1_3, ___x0_26);
                            ___x0_27 = _mm256_fmadd_ps(___x2_27_0, ___x1_0, ___x0_27);
                            ___x0_27 = _mm256_fmadd_ps(___x2_27_1, ___x1_1, ___x0_27);
                            ___x0_27 = _mm256_fmadd_ps(___x2_27_2, ___x1_2, ___x0_27);
                            ___x0_27 = _mm256_fmadd_ps(___x2_27_3, ___x1_3, ___x0_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x0_0);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x0_1);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x0_2);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x0_3);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x0_4);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x0_5);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x0_6);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x0_7);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x0_8);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x0_9);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x0_10);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x0_11);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x0_12);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x0_13);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0], ___x0_14);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0], ___x0_15);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0], ___x0_16);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0], ___x0_17);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0], ___x0_18);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0], ___x0_19);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0], ___x0_20);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0], ___x0_21);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0], ___x0_22);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0], ___x0_23);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0], ___x0_24);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0], ___x0_25);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0], ___x0_26);
                _mm256_store_ps(& ensemble2value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0], ___x0_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 112; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 112; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble3value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble3inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble3bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble4value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble4inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 2 - 0;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 2 - 0;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble5inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 111)][MIN(MAX(k * 1 + _input_offset_3, 0), 111)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble5inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 111)][MIN(MAX(k * 1 + _input_offset_3, 0), 111)][_input_offset_1_inner];
                            ensemble5mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble5mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble5value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
                _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner - 2 + 8) / 8;
                _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner - 2 + 8) % 8;
                in_y = _neuron_index_2;
                in_x = _neuron_index_3;
                long index = ensemble6n[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / 2;
                for (int i = 0; i < 5; i += 1) {
                    ensemble6sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble6sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble6inputs[_neuron_index_0][((i + _input_offset_1_inner) / 8 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((i + _input_offset_1_inner) % 8)] * ensemble6inputs[_neuron_index_0][((i + _input_offset_1_inner) / 8 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((i + _input_offset_1_inner) % 8)];
                }
                ensemble6sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble6sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] * (ensemble6alpha[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / ensemble6n[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner]);
                ensemble6sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] += ensemble6k[_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                index = ensemble6n[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / 2;
                ensemble6value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble6inputs[_neuron_index_0][((index + _input_offset_1_inner) / 8 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((index + _input_offset_1_inner) % 8)] / pow(ensemble6sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], ensemble6beta[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner]);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 8,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 8; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble7weights[x0][x1][x2][x3][0][0], & ensemble7weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,8 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 8; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x7_0 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0]);
                __m256 ___x7_1 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0]);
                __m256 ___x7_2 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0]);
                __m256 ___x7_3 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0]);
                __m256 ___x7_4 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0]);
                __m256 ___x7_5 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0]);
                __m256 ___x7_6 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0]);
                __m256 ___x7_7 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0]);
                __m256 ___x7_8 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0]);
                __m256 ___x7_9 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0]);
                __m256 ___x7_10 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0]);
                __m256 ___x7_11 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0]);
                __m256 ___x7_12 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0]);
                __m256 ___x7_13 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0]);
                __m256 ___x7_14 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][0]);
                __m256 ___x7_15 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][0]);
                __m256 ___x7_16 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][0]);
                __m256 ___x7_17 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][0]);
                __m256 ___x7_18 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][0]);
                __m256 ___x7_19 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][0]);
                __m256 ___x7_20 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][0]);
                __m256 ___x7_21 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][0]);
                __m256 ___x7_22 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][0]);
                __m256 ___x7_23 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][0]);
                __m256 ___x7_24 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][0]);
                __m256 ___x7_25 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][0]);
                __m256 ___x7_26 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][0]);
                __m256 ___x7_27 = _mm256_load_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x6_0_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x6_0_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x6_0_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x6_0_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x6_1_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x6_1_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x6_1_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x6_1_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x6_2_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x6_2_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x6_2_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x6_2_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x6_3_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x6_3_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x6_3_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x6_3_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x6_4_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x6_4_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x6_4_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x6_4_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x6_5_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x6_5_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x6_5_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x6_5_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x6_6_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x6_6_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x6_6_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x6_6_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x6_7_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x6_7_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x6_7_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x6_7_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x6_8_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x6_8_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x6_8_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x6_8_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x6_9_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x6_9_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x6_9_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x6_9_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x6_10_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x6_10_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x6_10_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x6_10_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x6_11_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x6_11_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x6_11_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x6_11_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x6_12_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x6_12_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x6_12_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x6_12_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x6_13_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x6_13_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x6_13_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x6_13_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x6_14_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x6_14_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x6_14_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x6_14_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x6_15_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x6_15_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x6_15_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x6_15_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x6_16_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x6_16_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x6_16_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x6_16_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x6_17_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x6_17_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x6_17_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x6_17_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x6_18_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x6_18_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x6_18_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x6_18_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x6_19_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x6_19_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x6_19_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x6_19_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x6_20_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x6_20_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x6_20_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x6_20_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x6_21_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x6_21_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x6_21_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x6_21_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x6_22_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x6_22_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x6_22_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x6_22_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x6_23_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x6_23_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x6_23_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x6_23_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x6_24_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x6_24_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x6_24_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x6_24_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x6_25_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x6_25_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x6_25_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x6_25_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x6_26_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x6_26_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x6_26_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x6_26_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x6_27_0 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x6_27_1 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x6_27_2 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x6_27_3 = _mm256_broadcast_ss(& ensemble7inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            __m256 ___x8_0 = _mm256_load_ps(& ensemble7weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x8_1 = _mm256_load_ps(& ensemble7weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x8_2 = _mm256_load_ps(& ensemble7weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x8_3 = _mm256_load_ps(& ensemble7weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x7_0 = _mm256_fmadd_ps(___x6_0_0, ___x8_0, ___x7_0);
                            ___x7_0 = _mm256_fmadd_ps(___x6_0_1, ___x8_1, ___x7_0);
                            ___x7_0 = _mm256_fmadd_ps(___x6_0_2, ___x8_2, ___x7_0);
                            ___x7_0 = _mm256_fmadd_ps(___x6_0_3, ___x8_3, ___x7_0);
                            ___x7_1 = _mm256_fmadd_ps(___x6_1_0, ___x8_0, ___x7_1);
                            ___x7_1 = _mm256_fmadd_ps(___x6_1_1, ___x8_1, ___x7_1);
                            ___x7_1 = _mm256_fmadd_ps(___x6_1_2, ___x8_2, ___x7_1);
                            ___x7_1 = _mm256_fmadd_ps(___x6_1_3, ___x8_3, ___x7_1);
                            ___x7_2 = _mm256_fmadd_ps(___x6_2_0, ___x8_0, ___x7_2);
                            ___x7_2 = _mm256_fmadd_ps(___x6_2_1, ___x8_1, ___x7_2);
                            ___x7_2 = _mm256_fmadd_ps(___x6_2_2, ___x8_2, ___x7_2);
                            ___x7_2 = _mm256_fmadd_ps(___x6_2_3, ___x8_3, ___x7_2);
                            ___x7_3 = _mm256_fmadd_ps(___x6_3_0, ___x8_0, ___x7_3);
                            ___x7_3 = _mm256_fmadd_ps(___x6_3_1, ___x8_1, ___x7_3);
                            ___x7_3 = _mm256_fmadd_ps(___x6_3_2, ___x8_2, ___x7_3);
                            ___x7_3 = _mm256_fmadd_ps(___x6_3_3, ___x8_3, ___x7_3);
                            ___x7_4 = _mm256_fmadd_ps(___x6_4_0, ___x8_0, ___x7_4);
                            ___x7_4 = _mm256_fmadd_ps(___x6_4_1, ___x8_1, ___x7_4);
                            ___x7_4 = _mm256_fmadd_ps(___x6_4_2, ___x8_2, ___x7_4);
                            ___x7_4 = _mm256_fmadd_ps(___x6_4_3, ___x8_3, ___x7_4);
                            ___x7_5 = _mm256_fmadd_ps(___x6_5_0, ___x8_0, ___x7_5);
                            ___x7_5 = _mm256_fmadd_ps(___x6_5_1, ___x8_1, ___x7_5);
                            ___x7_5 = _mm256_fmadd_ps(___x6_5_2, ___x8_2, ___x7_5);
                            ___x7_5 = _mm256_fmadd_ps(___x6_5_3, ___x8_3, ___x7_5);
                            ___x7_6 = _mm256_fmadd_ps(___x6_6_0, ___x8_0, ___x7_6);
                            ___x7_6 = _mm256_fmadd_ps(___x6_6_1, ___x8_1, ___x7_6);
                            ___x7_6 = _mm256_fmadd_ps(___x6_6_2, ___x8_2, ___x7_6);
                            ___x7_6 = _mm256_fmadd_ps(___x6_6_3, ___x8_3, ___x7_6);
                            ___x7_7 = _mm256_fmadd_ps(___x6_7_0, ___x8_0, ___x7_7);
                            ___x7_7 = _mm256_fmadd_ps(___x6_7_1, ___x8_1, ___x7_7);
                            ___x7_7 = _mm256_fmadd_ps(___x6_7_2, ___x8_2, ___x7_7);
                            ___x7_7 = _mm256_fmadd_ps(___x6_7_3, ___x8_3, ___x7_7);
                            ___x7_8 = _mm256_fmadd_ps(___x6_8_0, ___x8_0, ___x7_8);
                            ___x7_8 = _mm256_fmadd_ps(___x6_8_1, ___x8_1, ___x7_8);
                            ___x7_8 = _mm256_fmadd_ps(___x6_8_2, ___x8_2, ___x7_8);
                            ___x7_8 = _mm256_fmadd_ps(___x6_8_3, ___x8_3, ___x7_8);
                            ___x7_9 = _mm256_fmadd_ps(___x6_9_0, ___x8_0, ___x7_9);
                            ___x7_9 = _mm256_fmadd_ps(___x6_9_1, ___x8_1, ___x7_9);
                            ___x7_9 = _mm256_fmadd_ps(___x6_9_2, ___x8_2, ___x7_9);
                            ___x7_9 = _mm256_fmadd_ps(___x6_9_3, ___x8_3, ___x7_9);
                            ___x7_10 = _mm256_fmadd_ps(___x6_10_0, ___x8_0, ___x7_10);
                            ___x7_10 = _mm256_fmadd_ps(___x6_10_1, ___x8_1, ___x7_10);
                            ___x7_10 = _mm256_fmadd_ps(___x6_10_2, ___x8_2, ___x7_10);
                            ___x7_10 = _mm256_fmadd_ps(___x6_10_3, ___x8_3, ___x7_10);
                            ___x7_11 = _mm256_fmadd_ps(___x6_11_0, ___x8_0, ___x7_11);
                            ___x7_11 = _mm256_fmadd_ps(___x6_11_1, ___x8_1, ___x7_11);
                            ___x7_11 = _mm256_fmadd_ps(___x6_11_2, ___x8_2, ___x7_11);
                            ___x7_11 = _mm256_fmadd_ps(___x6_11_3, ___x8_3, ___x7_11);
                            ___x7_12 = _mm256_fmadd_ps(___x6_12_0, ___x8_0, ___x7_12);
                            ___x7_12 = _mm256_fmadd_ps(___x6_12_1, ___x8_1, ___x7_12);
                            ___x7_12 = _mm256_fmadd_ps(___x6_12_2, ___x8_2, ___x7_12);
                            ___x7_12 = _mm256_fmadd_ps(___x6_12_3, ___x8_3, ___x7_12);
                            ___x7_13 = _mm256_fmadd_ps(___x6_13_0, ___x8_0, ___x7_13);
                            ___x7_13 = _mm256_fmadd_ps(___x6_13_1, ___x8_1, ___x7_13);
                            ___x7_13 = _mm256_fmadd_ps(___x6_13_2, ___x8_2, ___x7_13);
                            ___x7_13 = _mm256_fmadd_ps(___x6_13_3, ___x8_3, ___x7_13);
                            ___x7_14 = _mm256_fmadd_ps(___x6_14_0, ___x8_0, ___x7_14);
                            ___x7_14 = _mm256_fmadd_ps(___x6_14_1, ___x8_1, ___x7_14);
                            ___x7_14 = _mm256_fmadd_ps(___x6_14_2, ___x8_2, ___x7_14);
                            ___x7_14 = _mm256_fmadd_ps(___x6_14_3, ___x8_3, ___x7_14);
                            ___x7_15 = _mm256_fmadd_ps(___x6_15_0, ___x8_0, ___x7_15);
                            ___x7_15 = _mm256_fmadd_ps(___x6_15_1, ___x8_1, ___x7_15);
                            ___x7_15 = _mm256_fmadd_ps(___x6_15_2, ___x8_2, ___x7_15);
                            ___x7_15 = _mm256_fmadd_ps(___x6_15_3, ___x8_3, ___x7_15);
                            ___x7_16 = _mm256_fmadd_ps(___x6_16_0, ___x8_0, ___x7_16);
                            ___x7_16 = _mm256_fmadd_ps(___x6_16_1, ___x8_1, ___x7_16);
                            ___x7_16 = _mm256_fmadd_ps(___x6_16_2, ___x8_2, ___x7_16);
                            ___x7_16 = _mm256_fmadd_ps(___x6_16_3, ___x8_3, ___x7_16);
                            ___x7_17 = _mm256_fmadd_ps(___x6_17_0, ___x8_0, ___x7_17);
                            ___x7_17 = _mm256_fmadd_ps(___x6_17_1, ___x8_1, ___x7_17);
                            ___x7_17 = _mm256_fmadd_ps(___x6_17_2, ___x8_2, ___x7_17);
                            ___x7_17 = _mm256_fmadd_ps(___x6_17_3, ___x8_3, ___x7_17);
                            ___x7_18 = _mm256_fmadd_ps(___x6_18_0, ___x8_0, ___x7_18);
                            ___x7_18 = _mm256_fmadd_ps(___x6_18_1, ___x8_1, ___x7_18);
                            ___x7_18 = _mm256_fmadd_ps(___x6_18_2, ___x8_2, ___x7_18);
                            ___x7_18 = _mm256_fmadd_ps(___x6_18_3, ___x8_3, ___x7_18);
                            ___x7_19 = _mm256_fmadd_ps(___x6_19_0, ___x8_0, ___x7_19);
                            ___x7_19 = _mm256_fmadd_ps(___x6_19_1, ___x8_1, ___x7_19);
                            ___x7_19 = _mm256_fmadd_ps(___x6_19_2, ___x8_2, ___x7_19);
                            ___x7_19 = _mm256_fmadd_ps(___x6_19_3, ___x8_3, ___x7_19);
                            ___x7_20 = _mm256_fmadd_ps(___x6_20_0, ___x8_0, ___x7_20);
                            ___x7_20 = _mm256_fmadd_ps(___x6_20_1, ___x8_1, ___x7_20);
                            ___x7_20 = _mm256_fmadd_ps(___x6_20_2, ___x8_2, ___x7_20);
                            ___x7_20 = _mm256_fmadd_ps(___x6_20_3, ___x8_3, ___x7_20);
                            ___x7_21 = _mm256_fmadd_ps(___x6_21_0, ___x8_0, ___x7_21);
                            ___x7_21 = _mm256_fmadd_ps(___x6_21_1, ___x8_1, ___x7_21);
                            ___x7_21 = _mm256_fmadd_ps(___x6_21_2, ___x8_2, ___x7_21);
                            ___x7_21 = _mm256_fmadd_ps(___x6_21_3, ___x8_3, ___x7_21);
                            ___x7_22 = _mm256_fmadd_ps(___x6_22_0, ___x8_0, ___x7_22);
                            ___x7_22 = _mm256_fmadd_ps(___x6_22_1, ___x8_1, ___x7_22);
                            ___x7_22 = _mm256_fmadd_ps(___x6_22_2, ___x8_2, ___x7_22);
                            ___x7_22 = _mm256_fmadd_ps(___x6_22_3, ___x8_3, ___x7_22);
                            ___x7_23 = _mm256_fmadd_ps(___x6_23_0, ___x8_0, ___x7_23);
                            ___x7_23 = _mm256_fmadd_ps(___x6_23_1, ___x8_1, ___x7_23);
                            ___x7_23 = _mm256_fmadd_ps(___x6_23_2, ___x8_2, ___x7_23);
                            ___x7_23 = _mm256_fmadd_ps(___x6_23_3, ___x8_3, ___x7_23);
                            ___x7_24 = _mm256_fmadd_ps(___x6_24_0, ___x8_0, ___x7_24);
                            ___x7_24 = _mm256_fmadd_ps(___x6_24_1, ___x8_1, ___x7_24);
                            ___x7_24 = _mm256_fmadd_ps(___x6_24_2, ___x8_2, ___x7_24);
                            ___x7_24 = _mm256_fmadd_ps(___x6_24_3, ___x8_3, ___x7_24);
                            ___x7_25 = _mm256_fmadd_ps(___x6_25_0, ___x8_0, ___x7_25);
                            ___x7_25 = _mm256_fmadd_ps(___x6_25_1, ___x8_1, ___x7_25);
                            ___x7_25 = _mm256_fmadd_ps(___x6_25_2, ___x8_2, ___x7_25);
                            ___x7_25 = _mm256_fmadd_ps(___x6_25_3, ___x8_3, ___x7_25);
                            ___x7_26 = _mm256_fmadd_ps(___x6_26_0, ___x8_0, ___x7_26);
                            ___x7_26 = _mm256_fmadd_ps(___x6_26_1, ___x8_1, ___x7_26);
                            ___x7_26 = _mm256_fmadd_ps(___x6_26_2, ___x8_2, ___x7_26);
                            ___x7_26 = _mm256_fmadd_ps(___x6_26_3, ___x8_3, ___x7_26);
                            ___x7_27 = _mm256_fmadd_ps(___x6_27_0, ___x8_0, ___x7_27);
                            ___x7_27 = _mm256_fmadd_ps(___x6_27_1, ___x8_1, ___x7_27);
                            ___x7_27 = _mm256_fmadd_ps(___x6_27_2, ___x8_2, ___x7_27);
                            ___x7_27 = _mm256_fmadd_ps(___x6_27_3, ___x8_3, ___x7_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0], ___x7_0);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0], ___x7_1);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0], ___x7_2);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0], ___x7_3);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0], ___x7_4);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0], ___x7_5);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0], ___x7_6);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0], ___x7_7);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0], ___x7_8);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0], ___x7_9);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0], ___x7_10);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0], ___x7_11);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0], ___x7_12);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0], ___x7_13);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][0], ___x7_14);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][0], ___x7_15);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][0], ___x7_16);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][0], ___x7_17);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][0], ___x7_18);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][0], ___x7_19);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][0], ___x7_20);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][0], ___x7_21);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][0], ___x7_22);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][0], ___x7_23);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][0], ___x7_24);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][0], ___x7_25);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][0], ___x7_26);
                _mm256_store_ps(& ensemble7value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][0], ___x7_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble8value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble8inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] + ensemble8bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble9value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble9inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 24,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 8; x1 ++) {
        for (int x2 = 0; x2 < 3; x2 ++) {
            for (int x3 = 0; x3 < 3; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble10weights[x0][x1][x2][x3][0][0], & ensemble10weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,24 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 8; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x15_0 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x15_1 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x15_2 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x15_3 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x15_4 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x15_5 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x15_6 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x15_7 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x15_8 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x15_9 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x15_10 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x15_11 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x15_12 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x15_13 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                __m256 ___x15_14 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 14)][0]);
                __m256 ___x15_15 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 15)][0]);
                __m256 ___x15_16 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 16)][0]);
                __m256 ___x15_17 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 17)][0]);
                __m256 ___x15_18 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 18)][0]);
                __m256 ___x15_19 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 19)][0]);
                __m256 ___x15_20 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 20)][0]);
                __m256 ___x15_21 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 21)][0]);
                __m256 ___x15_22 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 22)][0]);
                __m256 ___x15_23 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 23)][0]);
                __m256 ___x15_24 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 24)][0]);
                __m256 ___x15_25 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 25)][0]);
                __m256 ___x15_26 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 26)][0]);
                __m256 ___x15_27 = _mm256_load_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 27)][0]);
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x16_0 = _mm256_load_ps(& ensemble10weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x16_1 = _mm256_load_ps(& ensemble10weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x16_2 = _mm256_load_ps(& ensemble10weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x16_3 = _mm256_load_ps(& ensemble10weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x17_0_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x17_0_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x17_0_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x17_0_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x17_1_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x17_1_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x17_1_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x17_1_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x17_2_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x17_2_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x17_2_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x17_2_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x17_3_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x17_3_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x17_3_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x17_3_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x17_4_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x17_4_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x17_4_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x17_4_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x17_5_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x17_5_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x17_5_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x17_5_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x17_6_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x17_6_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x17_6_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x17_6_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x17_7_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x17_7_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x17_7_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x17_7_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x17_8_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x17_8_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x17_8_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x17_8_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x17_9_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x17_9_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x17_9_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x17_9_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x17_10_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x17_10_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x17_10_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x17_10_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x17_11_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x17_11_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x17_11_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x17_11_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x17_12_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x17_12_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x17_12_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x17_12_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x17_13_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x17_13_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x17_13_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x17_13_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x17_14_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x17_14_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x17_14_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x17_14_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x17_15_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x17_15_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x17_15_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x17_15_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x17_16_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x17_16_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x17_16_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x17_16_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x17_17_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x17_17_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x17_17_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x17_17_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x17_18_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x17_18_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x17_18_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x17_18_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x17_19_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x17_19_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x17_19_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x17_19_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x17_20_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x17_20_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x17_20_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x17_20_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x17_21_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x17_21_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x17_21_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x17_21_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x17_22_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x17_22_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x17_22_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x17_22_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x17_23_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x17_23_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x17_23_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x17_23_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x17_24_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x17_24_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x17_24_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x17_24_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x17_25_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x17_25_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x17_25_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x17_25_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x17_26_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x17_26_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x17_26_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x17_26_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x17_27_0 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x17_27_1 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x17_27_2 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x17_27_3 = _mm256_broadcast_ss(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            ___x15_0 = _mm256_fmadd_ps(___x17_0_0, ___x16_0, ___x15_0);
                            ___x15_0 = _mm256_fmadd_ps(___x17_0_1, ___x16_1, ___x15_0);
                            ___x15_0 = _mm256_fmadd_ps(___x17_0_2, ___x16_2, ___x15_0);
                            ___x15_0 = _mm256_fmadd_ps(___x17_0_3, ___x16_3, ___x15_0);
                            ___x15_1 = _mm256_fmadd_ps(___x17_1_0, ___x16_0, ___x15_1);
                            ___x15_1 = _mm256_fmadd_ps(___x17_1_1, ___x16_1, ___x15_1);
                            ___x15_1 = _mm256_fmadd_ps(___x17_1_2, ___x16_2, ___x15_1);
                            ___x15_1 = _mm256_fmadd_ps(___x17_1_3, ___x16_3, ___x15_1);
                            ___x15_2 = _mm256_fmadd_ps(___x17_2_0, ___x16_0, ___x15_2);
                            ___x15_2 = _mm256_fmadd_ps(___x17_2_1, ___x16_1, ___x15_2);
                            ___x15_2 = _mm256_fmadd_ps(___x17_2_2, ___x16_2, ___x15_2);
                            ___x15_2 = _mm256_fmadd_ps(___x17_2_3, ___x16_3, ___x15_2);
                            ___x15_3 = _mm256_fmadd_ps(___x17_3_0, ___x16_0, ___x15_3);
                            ___x15_3 = _mm256_fmadd_ps(___x17_3_1, ___x16_1, ___x15_3);
                            ___x15_3 = _mm256_fmadd_ps(___x17_3_2, ___x16_2, ___x15_3);
                            ___x15_3 = _mm256_fmadd_ps(___x17_3_3, ___x16_3, ___x15_3);
                            ___x15_4 = _mm256_fmadd_ps(___x17_4_0, ___x16_0, ___x15_4);
                            ___x15_4 = _mm256_fmadd_ps(___x17_4_1, ___x16_1, ___x15_4);
                            ___x15_4 = _mm256_fmadd_ps(___x17_4_2, ___x16_2, ___x15_4);
                            ___x15_4 = _mm256_fmadd_ps(___x17_4_3, ___x16_3, ___x15_4);
                            ___x15_5 = _mm256_fmadd_ps(___x17_5_0, ___x16_0, ___x15_5);
                            ___x15_5 = _mm256_fmadd_ps(___x17_5_1, ___x16_1, ___x15_5);
                            ___x15_5 = _mm256_fmadd_ps(___x17_5_2, ___x16_2, ___x15_5);
                            ___x15_5 = _mm256_fmadd_ps(___x17_5_3, ___x16_3, ___x15_5);
                            ___x15_6 = _mm256_fmadd_ps(___x17_6_0, ___x16_0, ___x15_6);
                            ___x15_6 = _mm256_fmadd_ps(___x17_6_1, ___x16_1, ___x15_6);
                            ___x15_6 = _mm256_fmadd_ps(___x17_6_2, ___x16_2, ___x15_6);
                            ___x15_6 = _mm256_fmadd_ps(___x17_6_3, ___x16_3, ___x15_6);
                            ___x15_7 = _mm256_fmadd_ps(___x17_7_0, ___x16_0, ___x15_7);
                            ___x15_7 = _mm256_fmadd_ps(___x17_7_1, ___x16_1, ___x15_7);
                            ___x15_7 = _mm256_fmadd_ps(___x17_7_2, ___x16_2, ___x15_7);
                            ___x15_7 = _mm256_fmadd_ps(___x17_7_3, ___x16_3, ___x15_7);
                            ___x15_8 = _mm256_fmadd_ps(___x17_8_0, ___x16_0, ___x15_8);
                            ___x15_8 = _mm256_fmadd_ps(___x17_8_1, ___x16_1, ___x15_8);
                            ___x15_8 = _mm256_fmadd_ps(___x17_8_2, ___x16_2, ___x15_8);
                            ___x15_8 = _mm256_fmadd_ps(___x17_8_3, ___x16_3, ___x15_8);
                            ___x15_9 = _mm256_fmadd_ps(___x17_9_0, ___x16_0, ___x15_9);
                            ___x15_9 = _mm256_fmadd_ps(___x17_9_1, ___x16_1, ___x15_9);
                            ___x15_9 = _mm256_fmadd_ps(___x17_9_2, ___x16_2, ___x15_9);
                            ___x15_9 = _mm256_fmadd_ps(___x17_9_3, ___x16_3, ___x15_9);
                            ___x15_10 = _mm256_fmadd_ps(___x17_10_0, ___x16_0, ___x15_10);
                            ___x15_10 = _mm256_fmadd_ps(___x17_10_1, ___x16_1, ___x15_10);
                            ___x15_10 = _mm256_fmadd_ps(___x17_10_2, ___x16_2, ___x15_10);
                            ___x15_10 = _mm256_fmadd_ps(___x17_10_3, ___x16_3, ___x15_10);
                            ___x15_11 = _mm256_fmadd_ps(___x17_11_0, ___x16_0, ___x15_11);
                            ___x15_11 = _mm256_fmadd_ps(___x17_11_1, ___x16_1, ___x15_11);
                            ___x15_11 = _mm256_fmadd_ps(___x17_11_2, ___x16_2, ___x15_11);
                            ___x15_11 = _mm256_fmadd_ps(___x17_11_3, ___x16_3, ___x15_11);
                            ___x15_12 = _mm256_fmadd_ps(___x17_12_0, ___x16_0, ___x15_12);
                            ___x15_12 = _mm256_fmadd_ps(___x17_12_1, ___x16_1, ___x15_12);
                            ___x15_12 = _mm256_fmadd_ps(___x17_12_2, ___x16_2, ___x15_12);
                            ___x15_12 = _mm256_fmadd_ps(___x17_12_3, ___x16_3, ___x15_12);
                            ___x15_13 = _mm256_fmadd_ps(___x17_13_0, ___x16_0, ___x15_13);
                            ___x15_13 = _mm256_fmadd_ps(___x17_13_1, ___x16_1, ___x15_13);
                            ___x15_13 = _mm256_fmadd_ps(___x17_13_2, ___x16_2, ___x15_13);
                            ___x15_13 = _mm256_fmadd_ps(___x17_13_3, ___x16_3, ___x15_13);
                            ___x15_14 = _mm256_fmadd_ps(___x17_14_0, ___x16_0, ___x15_14);
                            ___x15_14 = _mm256_fmadd_ps(___x17_14_1, ___x16_1, ___x15_14);
                            ___x15_14 = _mm256_fmadd_ps(___x17_14_2, ___x16_2, ___x15_14);
                            ___x15_14 = _mm256_fmadd_ps(___x17_14_3, ___x16_3, ___x15_14);
                            ___x15_15 = _mm256_fmadd_ps(___x17_15_0, ___x16_0, ___x15_15);
                            ___x15_15 = _mm256_fmadd_ps(___x17_15_1, ___x16_1, ___x15_15);
                            ___x15_15 = _mm256_fmadd_ps(___x17_15_2, ___x16_2, ___x15_15);
                            ___x15_15 = _mm256_fmadd_ps(___x17_15_3, ___x16_3, ___x15_15);
                            ___x15_16 = _mm256_fmadd_ps(___x17_16_0, ___x16_0, ___x15_16);
                            ___x15_16 = _mm256_fmadd_ps(___x17_16_1, ___x16_1, ___x15_16);
                            ___x15_16 = _mm256_fmadd_ps(___x17_16_2, ___x16_2, ___x15_16);
                            ___x15_16 = _mm256_fmadd_ps(___x17_16_3, ___x16_3, ___x15_16);
                            ___x15_17 = _mm256_fmadd_ps(___x17_17_0, ___x16_0, ___x15_17);
                            ___x15_17 = _mm256_fmadd_ps(___x17_17_1, ___x16_1, ___x15_17);
                            ___x15_17 = _mm256_fmadd_ps(___x17_17_2, ___x16_2, ___x15_17);
                            ___x15_17 = _mm256_fmadd_ps(___x17_17_3, ___x16_3, ___x15_17);
                            ___x15_18 = _mm256_fmadd_ps(___x17_18_0, ___x16_0, ___x15_18);
                            ___x15_18 = _mm256_fmadd_ps(___x17_18_1, ___x16_1, ___x15_18);
                            ___x15_18 = _mm256_fmadd_ps(___x17_18_2, ___x16_2, ___x15_18);
                            ___x15_18 = _mm256_fmadd_ps(___x17_18_3, ___x16_3, ___x15_18);
                            ___x15_19 = _mm256_fmadd_ps(___x17_19_0, ___x16_0, ___x15_19);
                            ___x15_19 = _mm256_fmadd_ps(___x17_19_1, ___x16_1, ___x15_19);
                            ___x15_19 = _mm256_fmadd_ps(___x17_19_2, ___x16_2, ___x15_19);
                            ___x15_19 = _mm256_fmadd_ps(___x17_19_3, ___x16_3, ___x15_19);
                            ___x15_20 = _mm256_fmadd_ps(___x17_20_0, ___x16_0, ___x15_20);
                            ___x15_20 = _mm256_fmadd_ps(___x17_20_1, ___x16_1, ___x15_20);
                            ___x15_20 = _mm256_fmadd_ps(___x17_20_2, ___x16_2, ___x15_20);
                            ___x15_20 = _mm256_fmadd_ps(___x17_20_3, ___x16_3, ___x15_20);
                            ___x15_21 = _mm256_fmadd_ps(___x17_21_0, ___x16_0, ___x15_21);
                            ___x15_21 = _mm256_fmadd_ps(___x17_21_1, ___x16_1, ___x15_21);
                            ___x15_21 = _mm256_fmadd_ps(___x17_21_2, ___x16_2, ___x15_21);
                            ___x15_21 = _mm256_fmadd_ps(___x17_21_3, ___x16_3, ___x15_21);
                            ___x15_22 = _mm256_fmadd_ps(___x17_22_0, ___x16_0, ___x15_22);
                            ___x15_22 = _mm256_fmadd_ps(___x17_22_1, ___x16_1, ___x15_22);
                            ___x15_22 = _mm256_fmadd_ps(___x17_22_2, ___x16_2, ___x15_22);
                            ___x15_22 = _mm256_fmadd_ps(___x17_22_3, ___x16_3, ___x15_22);
                            ___x15_23 = _mm256_fmadd_ps(___x17_23_0, ___x16_0, ___x15_23);
                            ___x15_23 = _mm256_fmadd_ps(___x17_23_1, ___x16_1, ___x15_23);
                            ___x15_23 = _mm256_fmadd_ps(___x17_23_2, ___x16_2, ___x15_23);
                            ___x15_23 = _mm256_fmadd_ps(___x17_23_3, ___x16_3, ___x15_23);
                            ___x15_24 = _mm256_fmadd_ps(___x17_24_0, ___x16_0, ___x15_24);
                            ___x15_24 = _mm256_fmadd_ps(___x17_24_1, ___x16_1, ___x15_24);
                            ___x15_24 = _mm256_fmadd_ps(___x17_24_2, ___x16_2, ___x15_24);
                            ___x15_24 = _mm256_fmadd_ps(___x17_24_3, ___x16_3, ___x15_24);
                            ___x15_25 = _mm256_fmadd_ps(___x17_25_0, ___x16_0, ___x15_25);
                            ___x15_25 = _mm256_fmadd_ps(___x17_25_1, ___x16_1, ___x15_25);
                            ___x15_25 = _mm256_fmadd_ps(___x17_25_2, ___x16_2, ___x15_25);
                            ___x15_25 = _mm256_fmadd_ps(___x17_25_3, ___x16_3, ___x15_25);
                            ___x15_26 = _mm256_fmadd_ps(___x17_26_0, ___x16_0, ___x15_26);
                            ___x15_26 = _mm256_fmadd_ps(___x17_26_1, ___x16_1, ___x15_26);
                            ___x15_26 = _mm256_fmadd_ps(___x17_26_2, ___x16_2, ___x15_26);
                            ___x15_26 = _mm256_fmadd_ps(___x17_26_3, ___x16_3, ___x15_26);
                            ___x15_27 = _mm256_fmadd_ps(___x17_27_0, ___x16_0, ___x15_27);
                            ___x15_27 = _mm256_fmadd_ps(___x17_27_1, ___x16_1, ___x15_27);
                            ___x15_27 = _mm256_fmadd_ps(___x17_27_2, ___x16_2, ___x15_27);
                            ___x15_27 = _mm256_fmadd_ps(___x17_27_3, ___x16_3, ___x15_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x15_0);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x15_1);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x15_2);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x15_3);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x15_4);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x15_5);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x15_6);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x15_7);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x15_8);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x15_9);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x15_10);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x15_11);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x15_12);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x15_13);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 14)][0], ___x15_14);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 15)][0], ___x15_15);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 16)][0], ___x15_16);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 17)][0], ___x15_17);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 18)][0], ___x15_18);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 19)][0], ___x15_19);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 20)][0], ___x15_20);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 21)][0], ___x15_21);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 22)][0], ___x15_22);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 23)][0], ___x15_23);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 24)][0], ___x15_24);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 25)][0], ___x15_25);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 26)][0], ___x15_26);
                _mm256_store_ps(& ensemble10value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 27)][0], ___x15_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble11value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble11inputs[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble11bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble12value[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble12inputs[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner - 2 + 8) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner - 2 + 8) % 8;
                int in_y = _neuron_index_2;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3;
                int _input_offset_3 = in_x;
                long index = ensemble13n[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / 2;
                for (int i = 0; i < 5; i += 1) {
                    ensemble13sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble13sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble13inputs[_neuron_index_0][((i + _input_offset_1_inner) / 8 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((i + _input_offset_1_inner) % 8)] * ensemble13inputs[_neuron_index_0][((i + _input_offset_1_inner) / 8 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((i + _input_offset_1_inner) % 8)];
                }
                ensemble13sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble13sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] * (ensemble13alpha[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / ensemble13n[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner]);
                ensemble13sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] += ensemble13k[_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                index = ensemble13n[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / 2;
                ensemble13value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble13inputs[_neuron_index_0][((index + _input_offset_1_inner) / 8 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((index + _input_offset_1_inner) % 8)] / pow(ensemble13sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], ensemble13beta[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner]);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 2 - 0;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 2 - 0;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble14inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 55)][MIN(MAX(k * 1 + _input_offset_3, 0), 55)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble14inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 55)][MIN(MAX(k * 1 + _input_offset_3, 0), 55)][_input_offset_1_inner];
                            ensemble14mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble14mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble14value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 8,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 24; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble15weights[x0][x1][x2][x3][0][0], & ensemble15weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,8 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 24; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x26_0 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x26_1 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x26_2 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x26_3 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x26_4 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x26_5 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x26_6 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x26_7 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x26_8 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x26_9 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x26_10 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x26_11 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x26_12 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x26_13 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                __m256 ___x26_14 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0]);
                __m256 ___x26_15 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0]);
                __m256 ___x26_16 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0]);
                __m256 ___x26_17 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0]);
                __m256 ___x26_18 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0]);
                __m256 ___x26_19 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0]);
                __m256 ___x26_20 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0]);
                __m256 ___x26_21 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0]);
                __m256 ___x26_22 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0]);
                __m256 ___x26_23 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0]);
                __m256 ___x26_24 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0]);
                __m256 ___x26_25 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0]);
                __m256 ___x26_26 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0]);
                __m256 ___x26_27 = _mm256_load_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x24_0 = _mm256_load_ps(& ensemble15weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x24_1 = _mm256_load_ps(& ensemble15weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x24_2 = _mm256_load_ps(& ensemble15weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x24_3 = _mm256_load_ps(& ensemble15weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x25_0_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x25_0_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x25_0_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x25_0_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x25_1_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x25_1_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x25_1_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x25_1_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x25_2_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x25_2_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x25_2_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x25_2_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x25_3_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x25_3_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x25_3_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x25_3_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x25_4_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x25_4_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x25_4_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x25_4_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x25_5_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x25_5_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x25_5_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x25_5_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x25_6_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x25_6_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x25_6_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x25_6_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x25_7_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x25_7_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x25_7_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x25_7_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x25_8_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x25_8_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x25_8_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x25_8_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x25_9_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x25_9_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x25_9_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x25_9_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x25_10_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x25_10_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x25_10_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x25_10_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x25_11_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x25_11_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x25_11_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x25_11_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x25_12_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x25_12_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x25_12_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x25_12_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x25_13_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x25_13_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x25_13_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x25_13_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x25_14_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x25_14_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x25_14_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x25_14_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x25_15_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x25_15_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x25_15_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x25_15_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x25_16_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x25_16_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x25_16_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x25_16_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x25_17_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x25_17_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x25_17_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x25_17_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x25_18_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x25_18_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x25_18_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x25_18_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x25_19_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x25_19_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x25_19_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x25_19_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x25_20_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x25_20_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x25_20_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x25_20_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x25_21_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x25_21_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x25_21_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x25_21_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x25_22_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x25_22_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x25_22_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x25_22_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x25_23_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x25_23_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x25_23_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x25_23_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x25_24_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x25_24_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x25_24_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x25_24_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x25_25_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x25_25_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x25_25_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x25_25_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x25_26_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x25_26_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x25_26_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x25_26_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x25_27_0 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x25_27_1 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x25_27_2 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x25_27_3 = _mm256_broadcast_ss(& ensemble15inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            ___x26_0 = _mm256_fmadd_ps(___x25_0_0, ___x24_0, ___x26_0);
                            ___x26_0 = _mm256_fmadd_ps(___x25_0_1, ___x24_1, ___x26_0);
                            ___x26_0 = _mm256_fmadd_ps(___x25_0_2, ___x24_2, ___x26_0);
                            ___x26_0 = _mm256_fmadd_ps(___x25_0_3, ___x24_3, ___x26_0);
                            ___x26_1 = _mm256_fmadd_ps(___x25_1_0, ___x24_0, ___x26_1);
                            ___x26_1 = _mm256_fmadd_ps(___x25_1_1, ___x24_1, ___x26_1);
                            ___x26_1 = _mm256_fmadd_ps(___x25_1_2, ___x24_2, ___x26_1);
                            ___x26_1 = _mm256_fmadd_ps(___x25_1_3, ___x24_3, ___x26_1);
                            ___x26_2 = _mm256_fmadd_ps(___x25_2_0, ___x24_0, ___x26_2);
                            ___x26_2 = _mm256_fmadd_ps(___x25_2_1, ___x24_1, ___x26_2);
                            ___x26_2 = _mm256_fmadd_ps(___x25_2_2, ___x24_2, ___x26_2);
                            ___x26_2 = _mm256_fmadd_ps(___x25_2_3, ___x24_3, ___x26_2);
                            ___x26_3 = _mm256_fmadd_ps(___x25_3_0, ___x24_0, ___x26_3);
                            ___x26_3 = _mm256_fmadd_ps(___x25_3_1, ___x24_1, ___x26_3);
                            ___x26_3 = _mm256_fmadd_ps(___x25_3_2, ___x24_2, ___x26_3);
                            ___x26_3 = _mm256_fmadd_ps(___x25_3_3, ___x24_3, ___x26_3);
                            ___x26_4 = _mm256_fmadd_ps(___x25_4_0, ___x24_0, ___x26_4);
                            ___x26_4 = _mm256_fmadd_ps(___x25_4_1, ___x24_1, ___x26_4);
                            ___x26_4 = _mm256_fmadd_ps(___x25_4_2, ___x24_2, ___x26_4);
                            ___x26_4 = _mm256_fmadd_ps(___x25_4_3, ___x24_3, ___x26_4);
                            ___x26_5 = _mm256_fmadd_ps(___x25_5_0, ___x24_0, ___x26_5);
                            ___x26_5 = _mm256_fmadd_ps(___x25_5_1, ___x24_1, ___x26_5);
                            ___x26_5 = _mm256_fmadd_ps(___x25_5_2, ___x24_2, ___x26_5);
                            ___x26_5 = _mm256_fmadd_ps(___x25_5_3, ___x24_3, ___x26_5);
                            ___x26_6 = _mm256_fmadd_ps(___x25_6_0, ___x24_0, ___x26_6);
                            ___x26_6 = _mm256_fmadd_ps(___x25_6_1, ___x24_1, ___x26_6);
                            ___x26_6 = _mm256_fmadd_ps(___x25_6_2, ___x24_2, ___x26_6);
                            ___x26_6 = _mm256_fmadd_ps(___x25_6_3, ___x24_3, ___x26_6);
                            ___x26_7 = _mm256_fmadd_ps(___x25_7_0, ___x24_0, ___x26_7);
                            ___x26_7 = _mm256_fmadd_ps(___x25_7_1, ___x24_1, ___x26_7);
                            ___x26_7 = _mm256_fmadd_ps(___x25_7_2, ___x24_2, ___x26_7);
                            ___x26_7 = _mm256_fmadd_ps(___x25_7_3, ___x24_3, ___x26_7);
                            ___x26_8 = _mm256_fmadd_ps(___x25_8_0, ___x24_0, ___x26_8);
                            ___x26_8 = _mm256_fmadd_ps(___x25_8_1, ___x24_1, ___x26_8);
                            ___x26_8 = _mm256_fmadd_ps(___x25_8_2, ___x24_2, ___x26_8);
                            ___x26_8 = _mm256_fmadd_ps(___x25_8_3, ___x24_3, ___x26_8);
                            ___x26_9 = _mm256_fmadd_ps(___x25_9_0, ___x24_0, ___x26_9);
                            ___x26_9 = _mm256_fmadd_ps(___x25_9_1, ___x24_1, ___x26_9);
                            ___x26_9 = _mm256_fmadd_ps(___x25_9_2, ___x24_2, ___x26_9);
                            ___x26_9 = _mm256_fmadd_ps(___x25_9_3, ___x24_3, ___x26_9);
                            ___x26_10 = _mm256_fmadd_ps(___x25_10_0, ___x24_0, ___x26_10);
                            ___x26_10 = _mm256_fmadd_ps(___x25_10_1, ___x24_1, ___x26_10);
                            ___x26_10 = _mm256_fmadd_ps(___x25_10_2, ___x24_2, ___x26_10);
                            ___x26_10 = _mm256_fmadd_ps(___x25_10_3, ___x24_3, ___x26_10);
                            ___x26_11 = _mm256_fmadd_ps(___x25_11_0, ___x24_0, ___x26_11);
                            ___x26_11 = _mm256_fmadd_ps(___x25_11_1, ___x24_1, ___x26_11);
                            ___x26_11 = _mm256_fmadd_ps(___x25_11_2, ___x24_2, ___x26_11);
                            ___x26_11 = _mm256_fmadd_ps(___x25_11_3, ___x24_3, ___x26_11);
                            ___x26_12 = _mm256_fmadd_ps(___x25_12_0, ___x24_0, ___x26_12);
                            ___x26_12 = _mm256_fmadd_ps(___x25_12_1, ___x24_1, ___x26_12);
                            ___x26_12 = _mm256_fmadd_ps(___x25_12_2, ___x24_2, ___x26_12);
                            ___x26_12 = _mm256_fmadd_ps(___x25_12_3, ___x24_3, ___x26_12);
                            ___x26_13 = _mm256_fmadd_ps(___x25_13_0, ___x24_0, ___x26_13);
                            ___x26_13 = _mm256_fmadd_ps(___x25_13_1, ___x24_1, ___x26_13);
                            ___x26_13 = _mm256_fmadd_ps(___x25_13_2, ___x24_2, ___x26_13);
                            ___x26_13 = _mm256_fmadd_ps(___x25_13_3, ___x24_3, ___x26_13);
                            ___x26_14 = _mm256_fmadd_ps(___x25_14_0, ___x24_0, ___x26_14);
                            ___x26_14 = _mm256_fmadd_ps(___x25_14_1, ___x24_1, ___x26_14);
                            ___x26_14 = _mm256_fmadd_ps(___x25_14_2, ___x24_2, ___x26_14);
                            ___x26_14 = _mm256_fmadd_ps(___x25_14_3, ___x24_3, ___x26_14);
                            ___x26_15 = _mm256_fmadd_ps(___x25_15_0, ___x24_0, ___x26_15);
                            ___x26_15 = _mm256_fmadd_ps(___x25_15_1, ___x24_1, ___x26_15);
                            ___x26_15 = _mm256_fmadd_ps(___x25_15_2, ___x24_2, ___x26_15);
                            ___x26_15 = _mm256_fmadd_ps(___x25_15_3, ___x24_3, ___x26_15);
                            ___x26_16 = _mm256_fmadd_ps(___x25_16_0, ___x24_0, ___x26_16);
                            ___x26_16 = _mm256_fmadd_ps(___x25_16_1, ___x24_1, ___x26_16);
                            ___x26_16 = _mm256_fmadd_ps(___x25_16_2, ___x24_2, ___x26_16);
                            ___x26_16 = _mm256_fmadd_ps(___x25_16_3, ___x24_3, ___x26_16);
                            ___x26_17 = _mm256_fmadd_ps(___x25_17_0, ___x24_0, ___x26_17);
                            ___x26_17 = _mm256_fmadd_ps(___x25_17_1, ___x24_1, ___x26_17);
                            ___x26_17 = _mm256_fmadd_ps(___x25_17_2, ___x24_2, ___x26_17);
                            ___x26_17 = _mm256_fmadd_ps(___x25_17_3, ___x24_3, ___x26_17);
                            ___x26_18 = _mm256_fmadd_ps(___x25_18_0, ___x24_0, ___x26_18);
                            ___x26_18 = _mm256_fmadd_ps(___x25_18_1, ___x24_1, ___x26_18);
                            ___x26_18 = _mm256_fmadd_ps(___x25_18_2, ___x24_2, ___x26_18);
                            ___x26_18 = _mm256_fmadd_ps(___x25_18_3, ___x24_3, ___x26_18);
                            ___x26_19 = _mm256_fmadd_ps(___x25_19_0, ___x24_0, ___x26_19);
                            ___x26_19 = _mm256_fmadd_ps(___x25_19_1, ___x24_1, ___x26_19);
                            ___x26_19 = _mm256_fmadd_ps(___x25_19_2, ___x24_2, ___x26_19);
                            ___x26_19 = _mm256_fmadd_ps(___x25_19_3, ___x24_3, ___x26_19);
                            ___x26_20 = _mm256_fmadd_ps(___x25_20_0, ___x24_0, ___x26_20);
                            ___x26_20 = _mm256_fmadd_ps(___x25_20_1, ___x24_1, ___x26_20);
                            ___x26_20 = _mm256_fmadd_ps(___x25_20_2, ___x24_2, ___x26_20);
                            ___x26_20 = _mm256_fmadd_ps(___x25_20_3, ___x24_3, ___x26_20);
                            ___x26_21 = _mm256_fmadd_ps(___x25_21_0, ___x24_0, ___x26_21);
                            ___x26_21 = _mm256_fmadd_ps(___x25_21_1, ___x24_1, ___x26_21);
                            ___x26_21 = _mm256_fmadd_ps(___x25_21_2, ___x24_2, ___x26_21);
                            ___x26_21 = _mm256_fmadd_ps(___x25_21_3, ___x24_3, ___x26_21);
                            ___x26_22 = _mm256_fmadd_ps(___x25_22_0, ___x24_0, ___x26_22);
                            ___x26_22 = _mm256_fmadd_ps(___x25_22_1, ___x24_1, ___x26_22);
                            ___x26_22 = _mm256_fmadd_ps(___x25_22_2, ___x24_2, ___x26_22);
                            ___x26_22 = _mm256_fmadd_ps(___x25_22_3, ___x24_3, ___x26_22);
                            ___x26_23 = _mm256_fmadd_ps(___x25_23_0, ___x24_0, ___x26_23);
                            ___x26_23 = _mm256_fmadd_ps(___x25_23_1, ___x24_1, ___x26_23);
                            ___x26_23 = _mm256_fmadd_ps(___x25_23_2, ___x24_2, ___x26_23);
                            ___x26_23 = _mm256_fmadd_ps(___x25_23_3, ___x24_3, ___x26_23);
                            ___x26_24 = _mm256_fmadd_ps(___x25_24_0, ___x24_0, ___x26_24);
                            ___x26_24 = _mm256_fmadd_ps(___x25_24_1, ___x24_1, ___x26_24);
                            ___x26_24 = _mm256_fmadd_ps(___x25_24_2, ___x24_2, ___x26_24);
                            ___x26_24 = _mm256_fmadd_ps(___x25_24_3, ___x24_3, ___x26_24);
                            ___x26_25 = _mm256_fmadd_ps(___x25_25_0, ___x24_0, ___x26_25);
                            ___x26_25 = _mm256_fmadd_ps(___x25_25_1, ___x24_1, ___x26_25);
                            ___x26_25 = _mm256_fmadd_ps(___x25_25_2, ___x24_2, ___x26_25);
                            ___x26_25 = _mm256_fmadd_ps(___x25_25_3, ___x24_3, ___x26_25);
                            ___x26_26 = _mm256_fmadd_ps(___x25_26_0, ___x24_0, ___x26_26);
                            ___x26_26 = _mm256_fmadd_ps(___x25_26_1, ___x24_1, ___x26_26);
                            ___x26_26 = _mm256_fmadd_ps(___x25_26_2, ___x24_2, ___x26_26);
                            ___x26_26 = _mm256_fmadd_ps(___x25_26_3, ___x24_3, ___x26_26);
                            ___x26_27 = _mm256_fmadd_ps(___x25_27_0, ___x24_0, ___x26_27);
                            ___x26_27 = _mm256_fmadd_ps(___x25_27_1, ___x24_1, ___x26_27);
                            ___x26_27 = _mm256_fmadd_ps(___x25_27_2, ___x24_2, ___x26_27);
                            ___x26_27 = _mm256_fmadd_ps(___x25_27_3, ___x24_3, ___x26_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x26_0);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x26_1);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x26_2);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x26_3);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x26_4);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x26_5);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x26_6);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x26_7);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x26_8);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x26_9);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x26_10);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x26_11);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x26_12);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x26_13);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0], ___x26_14);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0], ___x26_15);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0], ___x26_16);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0], ___x26_17);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0], ___x26_18);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0], ___x26_19);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0], ___x26_20);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0], ___x26_21);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0], ___x26_22);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0], ___x26_23);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0], ___x26_24);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0], ___x26_25);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0], ___x26_26);
                _mm256_store_ps(& ensemble15value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0], ___x26_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble16value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble16inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble16bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble17value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble17inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 12,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 24; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble18weights[x0][x1][x2][x3][0][0], & ensemble18weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,12 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 24; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x33_0 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0]);
                __m256 ___x33_1 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0]);
                __m256 ___x33_2 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0]);
                __m256 ___x33_3 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0]);
                __m256 ___x33_4 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0]);
                __m256 ___x33_5 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0]);
                __m256 ___x33_6 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0]);
                __m256 ___x33_7 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0]);
                __m256 ___x33_8 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0]);
                __m256 ___x33_9 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0]);
                __m256 ___x33_10 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0]);
                __m256 ___x33_11 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0]);
                __m256 ___x33_12 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0]);
                __m256 ___x33_13 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0]);
                __m256 ___x33_14 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][0]);
                __m256 ___x33_15 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][0]);
                __m256 ___x33_16 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][0]);
                __m256 ___x33_17 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][0]);
                __m256 ___x33_18 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][0]);
                __m256 ___x33_19 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][0]);
                __m256 ___x33_20 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][0]);
                __m256 ___x33_21 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][0]);
                __m256 ___x33_22 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][0]);
                __m256 ___x33_23 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][0]);
                __m256 ___x33_24 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][0]);
                __m256 ___x33_25 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][0]);
                __m256 ___x33_26 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][0]);
                __m256 ___x33_27 = _mm256_load_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x34_0_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x34_0_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x34_0_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x34_0_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x34_1_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x34_1_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x34_1_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x34_1_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x34_2_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x34_2_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x34_2_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x34_2_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x34_3_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x34_3_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x34_3_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x34_3_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x34_4_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x34_4_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x34_4_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x34_4_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x34_5_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x34_5_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x34_5_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x34_5_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x34_6_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x34_6_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x34_6_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x34_6_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x34_7_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x34_7_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x34_7_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x34_7_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x34_8_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x34_8_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x34_8_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x34_8_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x34_9_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x34_9_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x34_9_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x34_9_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x34_10_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x34_10_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x34_10_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x34_10_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x34_11_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x34_11_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x34_11_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x34_11_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x34_12_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x34_12_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x34_12_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x34_12_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x34_13_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x34_13_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x34_13_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x34_13_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x34_14_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x34_14_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x34_14_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x34_14_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x34_15_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x34_15_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x34_15_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x34_15_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x34_16_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x34_16_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x34_16_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x34_16_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x34_17_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x34_17_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x34_17_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x34_17_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x34_18_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x34_18_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x34_18_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x34_18_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x34_19_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x34_19_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x34_19_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x34_19_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x34_20_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x34_20_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x34_20_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x34_20_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x34_21_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x34_21_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x34_21_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x34_21_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x34_22_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x34_22_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x34_22_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x34_22_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x34_23_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x34_23_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x34_23_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x34_23_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x34_24_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x34_24_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x34_24_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x34_24_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x34_25_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x34_25_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x34_25_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x34_25_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x34_26_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x34_26_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x34_26_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x34_26_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x34_27_0 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x34_27_1 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x34_27_2 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x34_27_3 = _mm256_broadcast_ss(& ensemble18inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            __m256 ___x35_0 = _mm256_load_ps(& ensemble18weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x35_1 = _mm256_load_ps(& ensemble18weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x35_2 = _mm256_load_ps(& ensemble18weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x35_3 = _mm256_load_ps(& ensemble18weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x33_0 = _mm256_fmadd_ps(___x34_0_0, ___x35_0, ___x33_0);
                            ___x33_0 = _mm256_fmadd_ps(___x34_0_1, ___x35_1, ___x33_0);
                            ___x33_0 = _mm256_fmadd_ps(___x34_0_2, ___x35_2, ___x33_0);
                            ___x33_0 = _mm256_fmadd_ps(___x34_0_3, ___x35_3, ___x33_0);
                            ___x33_1 = _mm256_fmadd_ps(___x34_1_0, ___x35_0, ___x33_1);
                            ___x33_1 = _mm256_fmadd_ps(___x34_1_1, ___x35_1, ___x33_1);
                            ___x33_1 = _mm256_fmadd_ps(___x34_1_2, ___x35_2, ___x33_1);
                            ___x33_1 = _mm256_fmadd_ps(___x34_1_3, ___x35_3, ___x33_1);
                            ___x33_2 = _mm256_fmadd_ps(___x34_2_0, ___x35_0, ___x33_2);
                            ___x33_2 = _mm256_fmadd_ps(___x34_2_1, ___x35_1, ___x33_2);
                            ___x33_2 = _mm256_fmadd_ps(___x34_2_2, ___x35_2, ___x33_2);
                            ___x33_2 = _mm256_fmadd_ps(___x34_2_3, ___x35_3, ___x33_2);
                            ___x33_3 = _mm256_fmadd_ps(___x34_3_0, ___x35_0, ___x33_3);
                            ___x33_3 = _mm256_fmadd_ps(___x34_3_1, ___x35_1, ___x33_3);
                            ___x33_3 = _mm256_fmadd_ps(___x34_3_2, ___x35_2, ___x33_3);
                            ___x33_3 = _mm256_fmadd_ps(___x34_3_3, ___x35_3, ___x33_3);
                            ___x33_4 = _mm256_fmadd_ps(___x34_4_0, ___x35_0, ___x33_4);
                            ___x33_4 = _mm256_fmadd_ps(___x34_4_1, ___x35_1, ___x33_4);
                            ___x33_4 = _mm256_fmadd_ps(___x34_4_2, ___x35_2, ___x33_4);
                            ___x33_4 = _mm256_fmadd_ps(___x34_4_3, ___x35_3, ___x33_4);
                            ___x33_5 = _mm256_fmadd_ps(___x34_5_0, ___x35_0, ___x33_5);
                            ___x33_5 = _mm256_fmadd_ps(___x34_5_1, ___x35_1, ___x33_5);
                            ___x33_5 = _mm256_fmadd_ps(___x34_5_2, ___x35_2, ___x33_5);
                            ___x33_5 = _mm256_fmadd_ps(___x34_5_3, ___x35_3, ___x33_5);
                            ___x33_6 = _mm256_fmadd_ps(___x34_6_0, ___x35_0, ___x33_6);
                            ___x33_6 = _mm256_fmadd_ps(___x34_6_1, ___x35_1, ___x33_6);
                            ___x33_6 = _mm256_fmadd_ps(___x34_6_2, ___x35_2, ___x33_6);
                            ___x33_6 = _mm256_fmadd_ps(___x34_6_3, ___x35_3, ___x33_6);
                            ___x33_7 = _mm256_fmadd_ps(___x34_7_0, ___x35_0, ___x33_7);
                            ___x33_7 = _mm256_fmadd_ps(___x34_7_1, ___x35_1, ___x33_7);
                            ___x33_7 = _mm256_fmadd_ps(___x34_7_2, ___x35_2, ___x33_7);
                            ___x33_7 = _mm256_fmadd_ps(___x34_7_3, ___x35_3, ___x33_7);
                            ___x33_8 = _mm256_fmadd_ps(___x34_8_0, ___x35_0, ___x33_8);
                            ___x33_8 = _mm256_fmadd_ps(___x34_8_1, ___x35_1, ___x33_8);
                            ___x33_8 = _mm256_fmadd_ps(___x34_8_2, ___x35_2, ___x33_8);
                            ___x33_8 = _mm256_fmadd_ps(___x34_8_3, ___x35_3, ___x33_8);
                            ___x33_9 = _mm256_fmadd_ps(___x34_9_0, ___x35_0, ___x33_9);
                            ___x33_9 = _mm256_fmadd_ps(___x34_9_1, ___x35_1, ___x33_9);
                            ___x33_9 = _mm256_fmadd_ps(___x34_9_2, ___x35_2, ___x33_9);
                            ___x33_9 = _mm256_fmadd_ps(___x34_9_3, ___x35_3, ___x33_9);
                            ___x33_10 = _mm256_fmadd_ps(___x34_10_0, ___x35_0, ___x33_10);
                            ___x33_10 = _mm256_fmadd_ps(___x34_10_1, ___x35_1, ___x33_10);
                            ___x33_10 = _mm256_fmadd_ps(___x34_10_2, ___x35_2, ___x33_10);
                            ___x33_10 = _mm256_fmadd_ps(___x34_10_3, ___x35_3, ___x33_10);
                            ___x33_11 = _mm256_fmadd_ps(___x34_11_0, ___x35_0, ___x33_11);
                            ___x33_11 = _mm256_fmadd_ps(___x34_11_1, ___x35_1, ___x33_11);
                            ___x33_11 = _mm256_fmadd_ps(___x34_11_2, ___x35_2, ___x33_11);
                            ___x33_11 = _mm256_fmadd_ps(___x34_11_3, ___x35_3, ___x33_11);
                            ___x33_12 = _mm256_fmadd_ps(___x34_12_0, ___x35_0, ___x33_12);
                            ___x33_12 = _mm256_fmadd_ps(___x34_12_1, ___x35_1, ___x33_12);
                            ___x33_12 = _mm256_fmadd_ps(___x34_12_2, ___x35_2, ___x33_12);
                            ___x33_12 = _mm256_fmadd_ps(___x34_12_3, ___x35_3, ___x33_12);
                            ___x33_13 = _mm256_fmadd_ps(___x34_13_0, ___x35_0, ___x33_13);
                            ___x33_13 = _mm256_fmadd_ps(___x34_13_1, ___x35_1, ___x33_13);
                            ___x33_13 = _mm256_fmadd_ps(___x34_13_2, ___x35_2, ___x33_13);
                            ___x33_13 = _mm256_fmadd_ps(___x34_13_3, ___x35_3, ___x33_13);
                            ___x33_14 = _mm256_fmadd_ps(___x34_14_0, ___x35_0, ___x33_14);
                            ___x33_14 = _mm256_fmadd_ps(___x34_14_1, ___x35_1, ___x33_14);
                            ___x33_14 = _mm256_fmadd_ps(___x34_14_2, ___x35_2, ___x33_14);
                            ___x33_14 = _mm256_fmadd_ps(___x34_14_3, ___x35_3, ___x33_14);
                            ___x33_15 = _mm256_fmadd_ps(___x34_15_0, ___x35_0, ___x33_15);
                            ___x33_15 = _mm256_fmadd_ps(___x34_15_1, ___x35_1, ___x33_15);
                            ___x33_15 = _mm256_fmadd_ps(___x34_15_2, ___x35_2, ___x33_15);
                            ___x33_15 = _mm256_fmadd_ps(___x34_15_3, ___x35_3, ___x33_15);
                            ___x33_16 = _mm256_fmadd_ps(___x34_16_0, ___x35_0, ___x33_16);
                            ___x33_16 = _mm256_fmadd_ps(___x34_16_1, ___x35_1, ___x33_16);
                            ___x33_16 = _mm256_fmadd_ps(___x34_16_2, ___x35_2, ___x33_16);
                            ___x33_16 = _mm256_fmadd_ps(___x34_16_3, ___x35_3, ___x33_16);
                            ___x33_17 = _mm256_fmadd_ps(___x34_17_0, ___x35_0, ___x33_17);
                            ___x33_17 = _mm256_fmadd_ps(___x34_17_1, ___x35_1, ___x33_17);
                            ___x33_17 = _mm256_fmadd_ps(___x34_17_2, ___x35_2, ___x33_17);
                            ___x33_17 = _mm256_fmadd_ps(___x34_17_3, ___x35_3, ___x33_17);
                            ___x33_18 = _mm256_fmadd_ps(___x34_18_0, ___x35_0, ___x33_18);
                            ___x33_18 = _mm256_fmadd_ps(___x34_18_1, ___x35_1, ___x33_18);
                            ___x33_18 = _mm256_fmadd_ps(___x34_18_2, ___x35_2, ___x33_18);
                            ___x33_18 = _mm256_fmadd_ps(___x34_18_3, ___x35_3, ___x33_18);
                            ___x33_19 = _mm256_fmadd_ps(___x34_19_0, ___x35_0, ___x33_19);
                            ___x33_19 = _mm256_fmadd_ps(___x34_19_1, ___x35_1, ___x33_19);
                            ___x33_19 = _mm256_fmadd_ps(___x34_19_2, ___x35_2, ___x33_19);
                            ___x33_19 = _mm256_fmadd_ps(___x34_19_3, ___x35_3, ___x33_19);
                            ___x33_20 = _mm256_fmadd_ps(___x34_20_0, ___x35_0, ___x33_20);
                            ___x33_20 = _mm256_fmadd_ps(___x34_20_1, ___x35_1, ___x33_20);
                            ___x33_20 = _mm256_fmadd_ps(___x34_20_2, ___x35_2, ___x33_20);
                            ___x33_20 = _mm256_fmadd_ps(___x34_20_3, ___x35_3, ___x33_20);
                            ___x33_21 = _mm256_fmadd_ps(___x34_21_0, ___x35_0, ___x33_21);
                            ___x33_21 = _mm256_fmadd_ps(___x34_21_1, ___x35_1, ___x33_21);
                            ___x33_21 = _mm256_fmadd_ps(___x34_21_2, ___x35_2, ___x33_21);
                            ___x33_21 = _mm256_fmadd_ps(___x34_21_3, ___x35_3, ___x33_21);
                            ___x33_22 = _mm256_fmadd_ps(___x34_22_0, ___x35_0, ___x33_22);
                            ___x33_22 = _mm256_fmadd_ps(___x34_22_1, ___x35_1, ___x33_22);
                            ___x33_22 = _mm256_fmadd_ps(___x34_22_2, ___x35_2, ___x33_22);
                            ___x33_22 = _mm256_fmadd_ps(___x34_22_3, ___x35_3, ___x33_22);
                            ___x33_23 = _mm256_fmadd_ps(___x34_23_0, ___x35_0, ___x33_23);
                            ___x33_23 = _mm256_fmadd_ps(___x34_23_1, ___x35_1, ___x33_23);
                            ___x33_23 = _mm256_fmadd_ps(___x34_23_2, ___x35_2, ___x33_23);
                            ___x33_23 = _mm256_fmadd_ps(___x34_23_3, ___x35_3, ___x33_23);
                            ___x33_24 = _mm256_fmadd_ps(___x34_24_0, ___x35_0, ___x33_24);
                            ___x33_24 = _mm256_fmadd_ps(___x34_24_1, ___x35_1, ___x33_24);
                            ___x33_24 = _mm256_fmadd_ps(___x34_24_2, ___x35_2, ___x33_24);
                            ___x33_24 = _mm256_fmadd_ps(___x34_24_3, ___x35_3, ___x33_24);
                            ___x33_25 = _mm256_fmadd_ps(___x34_25_0, ___x35_0, ___x33_25);
                            ___x33_25 = _mm256_fmadd_ps(___x34_25_1, ___x35_1, ___x33_25);
                            ___x33_25 = _mm256_fmadd_ps(___x34_25_2, ___x35_2, ___x33_25);
                            ___x33_25 = _mm256_fmadd_ps(___x34_25_3, ___x35_3, ___x33_25);
                            ___x33_26 = _mm256_fmadd_ps(___x34_26_0, ___x35_0, ___x33_26);
                            ___x33_26 = _mm256_fmadd_ps(___x34_26_1, ___x35_1, ___x33_26);
                            ___x33_26 = _mm256_fmadd_ps(___x34_26_2, ___x35_2, ___x33_26);
                            ___x33_26 = _mm256_fmadd_ps(___x34_26_3, ___x35_3, ___x33_26);
                            ___x33_27 = _mm256_fmadd_ps(___x34_27_0, ___x35_0, ___x33_27);
                            ___x33_27 = _mm256_fmadd_ps(___x34_27_1, ___x35_1, ___x33_27);
                            ___x33_27 = _mm256_fmadd_ps(___x34_27_2, ___x35_2, ___x33_27);
                            ___x33_27 = _mm256_fmadd_ps(___x34_27_3, ___x35_3, ___x33_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0], ___x33_0);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0], ___x33_1);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0], ___x33_2);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0], ___x33_3);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0], ___x33_4);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0], ___x33_5);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0], ___x33_6);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0], ___x33_7);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0], ___x33_8);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0], ___x33_9);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0], ___x33_10);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0], ___x33_11);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0], ___x33_12);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0], ___x33_13);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][0], ___x33_14);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][0], ___x33_15);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][0], ___x33_16);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][0], ___x33_17);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][0], ___x33_18);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][0], ___x33_19);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][0], ___x33_20);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][0], ___x33_21);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][0], ___x33_22);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][0], ___x33_23);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][0], ___x33_24);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][0], ___x33_25);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][0], ___x33_26);
                _mm256_store_ps(& ensemble18value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][0], ___x33_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble19value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble19inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] + ensemble19bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble20value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble20inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 12; x1 ++) {
        for (int x2 = 0; x2 < 3; x2 ++) {
            for (int x3 = 0; x3 < 3; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble21weights[x0][x1][x2][x3][0][0], & ensemble21weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 12; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x42_0 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x42_1 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x42_2 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x42_3 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x42_4 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x42_5 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x42_6 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x42_7 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x42_8 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x42_9 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x42_10 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x42_11 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x42_12 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x42_13 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                __m256 ___x42_14 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0]);
                __m256 ___x42_15 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0]);
                __m256 ___x42_16 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0]);
                __m256 ___x42_17 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0]);
                __m256 ___x42_18 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0]);
                __m256 ___x42_19 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0]);
                __m256 ___x42_20 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0]);
                __m256 ___x42_21 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0]);
                __m256 ___x42_22 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0]);
                __m256 ___x42_23 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0]);
                __m256 ___x42_24 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0]);
                __m256 ___x42_25 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0]);
                __m256 ___x42_26 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0]);
                __m256 ___x42_27 = _mm256_load_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0]);
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x43_0 = _mm256_load_ps(& ensemble21weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x43_1 = _mm256_load_ps(& ensemble21weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x43_2 = _mm256_load_ps(& ensemble21weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x43_3 = _mm256_load_ps(& ensemble21weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x44_0_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x44_0_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x44_0_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x44_0_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x44_1_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x44_1_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x44_1_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x44_1_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x44_2_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x44_2_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x44_2_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x44_2_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x44_3_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x44_3_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x44_3_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x44_3_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x44_4_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x44_4_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x44_4_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x44_4_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x44_5_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x44_5_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x44_5_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x44_5_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x44_6_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x44_6_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x44_6_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x44_6_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x44_7_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x44_7_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x44_7_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x44_7_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x44_8_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x44_8_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x44_8_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x44_8_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x44_9_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x44_9_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x44_9_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x44_9_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x44_10_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x44_10_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x44_10_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x44_10_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x44_11_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x44_11_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x44_11_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x44_11_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x44_12_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x44_12_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x44_12_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x44_12_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x44_13_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x44_13_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x44_13_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x44_13_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x44_14_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x44_14_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x44_14_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x44_14_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x44_15_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x44_15_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x44_15_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x44_15_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x44_16_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x44_16_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x44_16_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x44_16_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x44_17_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x44_17_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x44_17_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x44_17_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x44_18_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x44_18_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x44_18_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x44_18_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x44_19_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x44_19_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x44_19_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x44_19_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x44_20_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x44_20_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x44_20_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x44_20_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x44_21_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x44_21_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x44_21_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x44_21_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x44_22_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x44_22_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x44_22_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x44_22_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x44_23_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x44_23_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x44_23_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x44_23_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x44_24_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x44_24_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x44_24_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x44_24_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x44_25_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x44_25_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x44_25_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x44_25_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x44_26_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x44_26_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x44_26_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x44_26_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x44_27_0 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x44_27_1 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x44_27_2 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x44_27_3 = _mm256_broadcast_ss(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            ___x42_0 = _mm256_fmadd_ps(___x44_0_0, ___x43_0, ___x42_0);
                            ___x42_0 = _mm256_fmadd_ps(___x44_0_1, ___x43_1, ___x42_0);
                            ___x42_0 = _mm256_fmadd_ps(___x44_0_2, ___x43_2, ___x42_0);
                            ___x42_0 = _mm256_fmadd_ps(___x44_0_3, ___x43_3, ___x42_0);
                            ___x42_1 = _mm256_fmadd_ps(___x44_1_0, ___x43_0, ___x42_1);
                            ___x42_1 = _mm256_fmadd_ps(___x44_1_1, ___x43_1, ___x42_1);
                            ___x42_1 = _mm256_fmadd_ps(___x44_1_2, ___x43_2, ___x42_1);
                            ___x42_1 = _mm256_fmadd_ps(___x44_1_3, ___x43_3, ___x42_1);
                            ___x42_2 = _mm256_fmadd_ps(___x44_2_0, ___x43_0, ___x42_2);
                            ___x42_2 = _mm256_fmadd_ps(___x44_2_1, ___x43_1, ___x42_2);
                            ___x42_2 = _mm256_fmadd_ps(___x44_2_2, ___x43_2, ___x42_2);
                            ___x42_2 = _mm256_fmadd_ps(___x44_2_3, ___x43_3, ___x42_2);
                            ___x42_3 = _mm256_fmadd_ps(___x44_3_0, ___x43_0, ___x42_3);
                            ___x42_3 = _mm256_fmadd_ps(___x44_3_1, ___x43_1, ___x42_3);
                            ___x42_3 = _mm256_fmadd_ps(___x44_3_2, ___x43_2, ___x42_3);
                            ___x42_3 = _mm256_fmadd_ps(___x44_3_3, ___x43_3, ___x42_3);
                            ___x42_4 = _mm256_fmadd_ps(___x44_4_0, ___x43_0, ___x42_4);
                            ___x42_4 = _mm256_fmadd_ps(___x44_4_1, ___x43_1, ___x42_4);
                            ___x42_4 = _mm256_fmadd_ps(___x44_4_2, ___x43_2, ___x42_4);
                            ___x42_4 = _mm256_fmadd_ps(___x44_4_3, ___x43_3, ___x42_4);
                            ___x42_5 = _mm256_fmadd_ps(___x44_5_0, ___x43_0, ___x42_5);
                            ___x42_5 = _mm256_fmadd_ps(___x44_5_1, ___x43_1, ___x42_5);
                            ___x42_5 = _mm256_fmadd_ps(___x44_5_2, ___x43_2, ___x42_5);
                            ___x42_5 = _mm256_fmadd_ps(___x44_5_3, ___x43_3, ___x42_5);
                            ___x42_6 = _mm256_fmadd_ps(___x44_6_0, ___x43_0, ___x42_6);
                            ___x42_6 = _mm256_fmadd_ps(___x44_6_1, ___x43_1, ___x42_6);
                            ___x42_6 = _mm256_fmadd_ps(___x44_6_2, ___x43_2, ___x42_6);
                            ___x42_6 = _mm256_fmadd_ps(___x44_6_3, ___x43_3, ___x42_6);
                            ___x42_7 = _mm256_fmadd_ps(___x44_7_0, ___x43_0, ___x42_7);
                            ___x42_7 = _mm256_fmadd_ps(___x44_7_1, ___x43_1, ___x42_7);
                            ___x42_7 = _mm256_fmadd_ps(___x44_7_2, ___x43_2, ___x42_7);
                            ___x42_7 = _mm256_fmadd_ps(___x44_7_3, ___x43_3, ___x42_7);
                            ___x42_8 = _mm256_fmadd_ps(___x44_8_0, ___x43_0, ___x42_8);
                            ___x42_8 = _mm256_fmadd_ps(___x44_8_1, ___x43_1, ___x42_8);
                            ___x42_8 = _mm256_fmadd_ps(___x44_8_2, ___x43_2, ___x42_8);
                            ___x42_8 = _mm256_fmadd_ps(___x44_8_3, ___x43_3, ___x42_8);
                            ___x42_9 = _mm256_fmadd_ps(___x44_9_0, ___x43_0, ___x42_9);
                            ___x42_9 = _mm256_fmadd_ps(___x44_9_1, ___x43_1, ___x42_9);
                            ___x42_9 = _mm256_fmadd_ps(___x44_9_2, ___x43_2, ___x42_9);
                            ___x42_9 = _mm256_fmadd_ps(___x44_9_3, ___x43_3, ___x42_9);
                            ___x42_10 = _mm256_fmadd_ps(___x44_10_0, ___x43_0, ___x42_10);
                            ___x42_10 = _mm256_fmadd_ps(___x44_10_1, ___x43_1, ___x42_10);
                            ___x42_10 = _mm256_fmadd_ps(___x44_10_2, ___x43_2, ___x42_10);
                            ___x42_10 = _mm256_fmadd_ps(___x44_10_3, ___x43_3, ___x42_10);
                            ___x42_11 = _mm256_fmadd_ps(___x44_11_0, ___x43_0, ___x42_11);
                            ___x42_11 = _mm256_fmadd_ps(___x44_11_1, ___x43_1, ___x42_11);
                            ___x42_11 = _mm256_fmadd_ps(___x44_11_2, ___x43_2, ___x42_11);
                            ___x42_11 = _mm256_fmadd_ps(___x44_11_3, ___x43_3, ___x42_11);
                            ___x42_12 = _mm256_fmadd_ps(___x44_12_0, ___x43_0, ___x42_12);
                            ___x42_12 = _mm256_fmadd_ps(___x44_12_1, ___x43_1, ___x42_12);
                            ___x42_12 = _mm256_fmadd_ps(___x44_12_2, ___x43_2, ___x42_12);
                            ___x42_12 = _mm256_fmadd_ps(___x44_12_3, ___x43_3, ___x42_12);
                            ___x42_13 = _mm256_fmadd_ps(___x44_13_0, ___x43_0, ___x42_13);
                            ___x42_13 = _mm256_fmadd_ps(___x44_13_1, ___x43_1, ___x42_13);
                            ___x42_13 = _mm256_fmadd_ps(___x44_13_2, ___x43_2, ___x42_13);
                            ___x42_13 = _mm256_fmadd_ps(___x44_13_3, ___x43_3, ___x42_13);
                            ___x42_14 = _mm256_fmadd_ps(___x44_14_0, ___x43_0, ___x42_14);
                            ___x42_14 = _mm256_fmadd_ps(___x44_14_1, ___x43_1, ___x42_14);
                            ___x42_14 = _mm256_fmadd_ps(___x44_14_2, ___x43_2, ___x42_14);
                            ___x42_14 = _mm256_fmadd_ps(___x44_14_3, ___x43_3, ___x42_14);
                            ___x42_15 = _mm256_fmadd_ps(___x44_15_0, ___x43_0, ___x42_15);
                            ___x42_15 = _mm256_fmadd_ps(___x44_15_1, ___x43_1, ___x42_15);
                            ___x42_15 = _mm256_fmadd_ps(___x44_15_2, ___x43_2, ___x42_15);
                            ___x42_15 = _mm256_fmadd_ps(___x44_15_3, ___x43_3, ___x42_15);
                            ___x42_16 = _mm256_fmadd_ps(___x44_16_0, ___x43_0, ___x42_16);
                            ___x42_16 = _mm256_fmadd_ps(___x44_16_1, ___x43_1, ___x42_16);
                            ___x42_16 = _mm256_fmadd_ps(___x44_16_2, ___x43_2, ___x42_16);
                            ___x42_16 = _mm256_fmadd_ps(___x44_16_3, ___x43_3, ___x42_16);
                            ___x42_17 = _mm256_fmadd_ps(___x44_17_0, ___x43_0, ___x42_17);
                            ___x42_17 = _mm256_fmadd_ps(___x44_17_1, ___x43_1, ___x42_17);
                            ___x42_17 = _mm256_fmadd_ps(___x44_17_2, ___x43_2, ___x42_17);
                            ___x42_17 = _mm256_fmadd_ps(___x44_17_3, ___x43_3, ___x42_17);
                            ___x42_18 = _mm256_fmadd_ps(___x44_18_0, ___x43_0, ___x42_18);
                            ___x42_18 = _mm256_fmadd_ps(___x44_18_1, ___x43_1, ___x42_18);
                            ___x42_18 = _mm256_fmadd_ps(___x44_18_2, ___x43_2, ___x42_18);
                            ___x42_18 = _mm256_fmadd_ps(___x44_18_3, ___x43_3, ___x42_18);
                            ___x42_19 = _mm256_fmadd_ps(___x44_19_0, ___x43_0, ___x42_19);
                            ___x42_19 = _mm256_fmadd_ps(___x44_19_1, ___x43_1, ___x42_19);
                            ___x42_19 = _mm256_fmadd_ps(___x44_19_2, ___x43_2, ___x42_19);
                            ___x42_19 = _mm256_fmadd_ps(___x44_19_3, ___x43_3, ___x42_19);
                            ___x42_20 = _mm256_fmadd_ps(___x44_20_0, ___x43_0, ___x42_20);
                            ___x42_20 = _mm256_fmadd_ps(___x44_20_1, ___x43_1, ___x42_20);
                            ___x42_20 = _mm256_fmadd_ps(___x44_20_2, ___x43_2, ___x42_20);
                            ___x42_20 = _mm256_fmadd_ps(___x44_20_3, ___x43_3, ___x42_20);
                            ___x42_21 = _mm256_fmadd_ps(___x44_21_0, ___x43_0, ___x42_21);
                            ___x42_21 = _mm256_fmadd_ps(___x44_21_1, ___x43_1, ___x42_21);
                            ___x42_21 = _mm256_fmadd_ps(___x44_21_2, ___x43_2, ___x42_21);
                            ___x42_21 = _mm256_fmadd_ps(___x44_21_3, ___x43_3, ___x42_21);
                            ___x42_22 = _mm256_fmadd_ps(___x44_22_0, ___x43_0, ___x42_22);
                            ___x42_22 = _mm256_fmadd_ps(___x44_22_1, ___x43_1, ___x42_22);
                            ___x42_22 = _mm256_fmadd_ps(___x44_22_2, ___x43_2, ___x42_22);
                            ___x42_22 = _mm256_fmadd_ps(___x44_22_3, ___x43_3, ___x42_22);
                            ___x42_23 = _mm256_fmadd_ps(___x44_23_0, ___x43_0, ___x42_23);
                            ___x42_23 = _mm256_fmadd_ps(___x44_23_1, ___x43_1, ___x42_23);
                            ___x42_23 = _mm256_fmadd_ps(___x44_23_2, ___x43_2, ___x42_23);
                            ___x42_23 = _mm256_fmadd_ps(___x44_23_3, ___x43_3, ___x42_23);
                            ___x42_24 = _mm256_fmadd_ps(___x44_24_0, ___x43_0, ___x42_24);
                            ___x42_24 = _mm256_fmadd_ps(___x44_24_1, ___x43_1, ___x42_24);
                            ___x42_24 = _mm256_fmadd_ps(___x44_24_2, ___x43_2, ___x42_24);
                            ___x42_24 = _mm256_fmadd_ps(___x44_24_3, ___x43_3, ___x42_24);
                            ___x42_25 = _mm256_fmadd_ps(___x44_25_0, ___x43_0, ___x42_25);
                            ___x42_25 = _mm256_fmadd_ps(___x44_25_1, ___x43_1, ___x42_25);
                            ___x42_25 = _mm256_fmadd_ps(___x44_25_2, ___x43_2, ___x42_25);
                            ___x42_25 = _mm256_fmadd_ps(___x44_25_3, ___x43_3, ___x42_25);
                            ___x42_26 = _mm256_fmadd_ps(___x44_26_0, ___x43_0, ___x42_26);
                            ___x42_26 = _mm256_fmadd_ps(___x44_26_1, ___x43_1, ___x42_26);
                            ___x42_26 = _mm256_fmadd_ps(___x44_26_2, ___x43_2, ___x42_26);
                            ___x42_26 = _mm256_fmadd_ps(___x44_26_3, ___x43_3, ___x42_26);
                            ___x42_27 = _mm256_fmadd_ps(___x44_27_0, ___x43_0, ___x42_27);
                            ___x42_27 = _mm256_fmadd_ps(___x44_27_1, ___x43_1, ___x42_27);
                            ___x42_27 = _mm256_fmadd_ps(___x44_27_2, ___x43_2, ___x42_27);
                            ___x42_27 = _mm256_fmadd_ps(___x44_27_3, ___x43_3, ___x42_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x42_0);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x42_1);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x42_2);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x42_3);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x42_4);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x42_5);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x42_6);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x42_7);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x42_8);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x42_9);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x42_10);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x42_11);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x42_12);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x42_13);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0], ___x42_14);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0], ___x42_15);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0], ___x42_16);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0], ___x42_17);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0], ___x42_18);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0], ___x42_19);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0], ___x42_20);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0], ___x42_21);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0], ___x42_22);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0], ___x42_23);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0], ___x42_24);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0], ___x42_25);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0], ___x42_26);
                _mm256_store_ps(& ensemble21value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0], ___x42_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble22value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble22inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble22bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble23value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble23inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 2,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 24; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble24weights[x0][x1][x2][x3][0][0], & ensemble24weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,2 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 24; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x51_0 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0]);
                __m256 ___x51_1 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0]);
                __m256 ___x51_2 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0]);
                __m256 ___x51_3 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0]);
                __m256 ___x51_4 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0]);
                __m256 ___x51_5 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0]);
                __m256 ___x51_6 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0]);
                __m256 ___x51_7 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0]);
                __m256 ___x51_8 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0]);
                __m256 ___x51_9 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0]);
                __m256 ___x51_10 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0]);
                __m256 ___x51_11 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0]);
                __m256 ___x51_12 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0]);
                __m256 ___x51_13 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0]);
                __m256 ___x51_14 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 14 + 2)][0]);
                __m256 ___x51_15 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 15 + 2)][0]);
                __m256 ___x51_16 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 16 + 2)][0]);
                __m256 ___x51_17 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 17 + 2)][0]);
                __m256 ___x51_18 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 18 + 2)][0]);
                __m256 ___x51_19 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 19 + 2)][0]);
                __m256 ___x51_20 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 20 + 2)][0]);
                __m256 ___x51_21 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 21 + 2)][0]);
                __m256 ___x51_22 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 22 + 2)][0]);
                __m256 ___x51_23 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 23 + 2)][0]);
                __m256 ___x51_24 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 24 + 2)][0]);
                __m256 ___x51_25 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 25 + 2)][0]);
                __m256 ___x51_26 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 26 + 2)][0]);
                __m256 ___x51_27 = _mm256_load_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 27 + 2)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x52_0_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x52_0_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x52_0_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x52_0_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x52_1_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x52_1_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x52_1_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x52_1_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x52_2_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x52_2_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x52_2_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x52_2_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x52_3_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x52_3_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x52_3_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x52_3_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x52_4_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x52_4_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x52_4_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x52_4_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x52_5_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x52_5_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x52_5_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x52_5_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x52_6_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x52_6_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x52_6_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x52_6_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x52_7_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x52_7_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x52_7_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x52_7_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x52_8_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x52_8_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x52_8_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x52_8_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x52_9_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x52_9_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x52_9_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x52_9_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x52_10_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x52_10_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x52_10_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x52_10_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x52_11_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x52_11_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x52_11_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x52_11_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x52_12_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x52_12_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x52_12_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x52_12_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x52_13_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x52_13_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x52_13_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x52_13_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x52_14_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x52_14_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x52_14_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x52_14_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x52_15_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x52_15_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x52_15_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x52_15_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x52_16_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x52_16_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x52_16_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x52_16_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x52_17_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x52_17_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x52_17_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x52_17_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x52_18_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x52_18_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x52_18_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x52_18_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x52_19_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x52_19_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x52_19_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x52_19_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x52_20_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x52_20_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x52_20_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x52_20_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x52_21_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x52_21_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x52_21_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x52_21_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x52_22_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x52_22_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x52_22_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x52_22_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x52_23_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x52_23_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x52_23_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x52_23_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x52_24_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x52_24_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x52_24_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x52_24_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x52_25_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x52_25_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x52_25_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x52_25_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x52_26_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x52_26_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x52_26_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x52_26_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x52_27_0 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x52_27_1 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x52_27_2 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x52_27_3 = _mm256_broadcast_ss(& ensemble24inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            __m256 ___x53_0 = _mm256_load_ps(& ensemble24weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x53_1 = _mm256_load_ps(& ensemble24weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x53_2 = _mm256_load_ps(& ensemble24weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x53_3 = _mm256_load_ps(& ensemble24weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x51_0 = _mm256_fmadd_ps(___x52_0_0, ___x53_0, ___x51_0);
                            ___x51_0 = _mm256_fmadd_ps(___x52_0_1, ___x53_1, ___x51_0);
                            ___x51_0 = _mm256_fmadd_ps(___x52_0_2, ___x53_2, ___x51_0);
                            ___x51_0 = _mm256_fmadd_ps(___x52_0_3, ___x53_3, ___x51_0);
                            ___x51_1 = _mm256_fmadd_ps(___x52_1_0, ___x53_0, ___x51_1);
                            ___x51_1 = _mm256_fmadd_ps(___x52_1_1, ___x53_1, ___x51_1);
                            ___x51_1 = _mm256_fmadd_ps(___x52_1_2, ___x53_2, ___x51_1);
                            ___x51_1 = _mm256_fmadd_ps(___x52_1_3, ___x53_3, ___x51_1);
                            ___x51_2 = _mm256_fmadd_ps(___x52_2_0, ___x53_0, ___x51_2);
                            ___x51_2 = _mm256_fmadd_ps(___x52_2_1, ___x53_1, ___x51_2);
                            ___x51_2 = _mm256_fmadd_ps(___x52_2_2, ___x53_2, ___x51_2);
                            ___x51_2 = _mm256_fmadd_ps(___x52_2_3, ___x53_3, ___x51_2);
                            ___x51_3 = _mm256_fmadd_ps(___x52_3_0, ___x53_0, ___x51_3);
                            ___x51_3 = _mm256_fmadd_ps(___x52_3_1, ___x53_1, ___x51_3);
                            ___x51_3 = _mm256_fmadd_ps(___x52_3_2, ___x53_2, ___x51_3);
                            ___x51_3 = _mm256_fmadd_ps(___x52_3_3, ___x53_3, ___x51_3);
                            ___x51_4 = _mm256_fmadd_ps(___x52_4_0, ___x53_0, ___x51_4);
                            ___x51_4 = _mm256_fmadd_ps(___x52_4_1, ___x53_1, ___x51_4);
                            ___x51_4 = _mm256_fmadd_ps(___x52_4_2, ___x53_2, ___x51_4);
                            ___x51_4 = _mm256_fmadd_ps(___x52_4_3, ___x53_3, ___x51_4);
                            ___x51_5 = _mm256_fmadd_ps(___x52_5_0, ___x53_0, ___x51_5);
                            ___x51_5 = _mm256_fmadd_ps(___x52_5_1, ___x53_1, ___x51_5);
                            ___x51_5 = _mm256_fmadd_ps(___x52_5_2, ___x53_2, ___x51_5);
                            ___x51_5 = _mm256_fmadd_ps(___x52_5_3, ___x53_3, ___x51_5);
                            ___x51_6 = _mm256_fmadd_ps(___x52_6_0, ___x53_0, ___x51_6);
                            ___x51_6 = _mm256_fmadd_ps(___x52_6_1, ___x53_1, ___x51_6);
                            ___x51_6 = _mm256_fmadd_ps(___x52_6_2, ___x53_2, ___x51_6);
                            ___x51_6 = _mm256_fmadd_ps(___x52_6_3, ___x53_3, ___x51_6);
                            ___x51_7 = _mm256_fmadd_ps(___x52_7_0, ___x53_0, ___x51_7);
                            ___x51_7 = _mm256_fmadd_ps(___x52_7_1, ___x53_1, ___x51_7);
                            ___x51_7 = _mm256_fmadd_ps(___x52_7_2, ___x53_2, ___x51_7);
                            ___x51_7 = _mm256_fmadd_ps(___x52_7_3, ___x53_3, ___x51_7);
                            ___x51_8 = _mm256_fmadd_ps(___x52_8_0, ___x53_0, ___x51_8);
                            ___x51_8 = _mm256_fmadd_ps(___x52_8_1, ___x53_1, ___x51_8);
                            ___x51_8 = _mm256_fmadd_ps(___x52_8_2, ___x53_2, ___x51_8);
                            ___x51_8 = _mm256_fmadd_ps(___x52_8_3, ___x53_3, ___x51_8);
                            ___x51_9 = _mm256_fmadd_ps(___x52_9_0, ___x53_0, ___x51_9);
                            ___x51_9 = _mm256_fmadd_ps(___x52_9_1, ___x53_1, ___x51_9);
                            ___x51_9 = _mm256_fmadd_ps(___x52_9_2, ___x53_2, ___x51_9);
                            ___x51_9 = _mm256_fmadd_ps(___x52_9_3, ___x53_3, ___x51_9);
                            ___x51_10 = _mm256_fmadd_ps(___x52_10_0, ___x53_0, ___x51_10);
                            ___x51_10 = _mm256_fmadd_ps(___x52_10_1, ___x53_1, ___x51_10);
                            ___x51_10 = _mm256_fmadd_ps(___x52_10_2, ___x53_2, ___x51_10);
                            ___x51_10 = _mm256_fmadd_ps(___x52_10_3, ___x53_3, ___x51_10);
                            ___x51_11 = _mm256_fmadd_ps(___x52_11_0, ___x53_0, ___x51_11);
                            ___x51_11 = _mm256_fmadd_ps(___x52_11_1, ___x53_1, ___x51_11);
                            ___x51_11 = _mm256_fmadd_ps(___x52_11_2, ___x53_2, ___x51_11);
                            ___x51_11 = _mm256_fmadd_ps(___x52_11_3, ___x53_3, ___x51_11);
                            ___x51_12 = _mm256_fmadd_ps(___x52_12_0, ___x53_0, ___x51_12);
                            ___x51_12 = _mm256_fmadd_ps(___x52_12_1, ___x53_1, ___x51_12);
                            ___x51_12 = _mm256_fmadd_ps(___x52_12_2, ___x53_2, ___x51_12);
                            ___x51_12 = _mm256_fmadd_ps(___x52_12_3, ___x53_3, ___x51_12);
                            ___x51_13 = _mm256_fmadd_ps(___x52_13_0, ___x53_0, ___x51_13);
                            ___x51_13 = _mm256_fmadd_ps(___x52_13_1, ___x53_1, ___x51_13);
                            ___x51_13 = _mm256_fmadd_ps(___x52_13_2, ___x53_2, ___x51_13);
                            ___x51_13 = _mm256_fmadd_ps(___x52_13_3, ___x53_3, ___x51_13);
                            ___x51_14 = _mm256_fmadd_ps(___x52_14_0, ___x53_0, ___x51_14);
                            ___x51_14 = _mm256_fmadd_ps(___x52_14_1, ___x53_1, ___x51_14);
                            ___x51_14 = _mm256_fmadd_ps(___x52_14_2, ___x53_2, ___x51_14);
                            ___x51_14 = _mm256_fmadd_ps(___x52_14_3, ___x53_3, ___x51_14);
                            ___x51_15 = _mm256_fmadd_ps(___x52_15_0, ___x53_0, ___x51_15);
                            ___x51_15 = _mm256_fmadd_ps(___x52_15_1, ___x53_1, ___x51_15);
                            ___x51_15 = _mm256_fmadd_ps(___x52_15_2, ___x53_2, ___x51_15);
                            ___x51_15 = _mm256_fmadd_ps(___x52_15_3, ___x53_3, ___x51_15);
                            ___x51_16 = _mm256_fmadd_ps(___x52_16_0, ___x53_0, ___x51_16);
                            ___x51_16 = _mm256_fmadd_ps(___x52_16_1, ___x53_1, ___x51_16);
                            ___x51_16 = _mm256_fmadd_ps(___x52_16_2, ___x53_2, ___x51_16);
                            ___x51_16 = _mm256_fmadd_ps(___x52_16_3, ___x53_3, ___x51_16);
                            ___x51_17 = _mm256_fmadd_ps(___x52_17_0, ___x53_0, ___x51_17);
                            ___x51_17 = _mm256_fmadd_ps(___x52_17_1, ___x53_1, ___x51_17);
                            ___x51_17 = _mm256_fmadd_ps(___x52_17_2, ___x53_2, ___x51_17);
                            ___x51_17 = _mm256_fmadd_ps(___x52_17_3, ___x53_3, ___x51_17);
                            ___x51_18 = _mm256_fmadd_ps(___x52_18_0, ___x53_0, ___x51_18);
                            ___x51_18 = _mm256_fmadd_ps(___x52_18_1, ___x53_1, ___x51_18);
                            ___x51_18 = _mm256_fmadd_ps(___x52_18_2, ___x53_2, ___x51_18);
                            ___x51_18 = _mm256_fmadd_ps(___x52_18_3, ___x53_3, ___x51_18);
                            ___x51_19 = _mm256_fmadd_ps(___x52_19_0, ___x53_0, ___x51_19);
                            ___x51_19 = _mm256_fmadd_ps(___x52_19_1, ___x53_1, ___x51_19);
                            ___x51_19 = _mm256_fmadd_ps(___x52_19_2, ___x53_2, ___x51_19);
                            ___x51_19 = _mm256_fmadd_ps(___x52_19_3, ___x53_3, ___x51_19);
                            ___x51_20 = _mm256_fmadd_ps(___x52_20_0, ___x53_0, ___x51_20);
                            ___x51_20 = _mm256_fmadd_ps(___x52_20_1, ___x53_1, ___x51_20);
                            ___x51_20 = _mm256_fmadd_ps(___x52_20_2, ___x53_2, ___x51_20);
                            ___x51_20 = _mm256_fmadd_ps(___x52_20_3, ___x53_3, ___x51_20);
                            ___x51_21 = _mm256_fmadd_ps(___x52_21_0, ___x53_0, ___x51_21);
                            ___x51_21 = _mm256_fmadd_ps(___x52_21_1, ___x53_1, ___x51_21);
                            ___x51_21 = _mm256_fmadd_ps(___x52_21_2, ___x53_2, ___x51_21);
                            ___x51_21 = _mm256_fmadd_ps(___x52_21_3, ___x53_3, ___x51_21);
                            ___x51_22 = _mm256_fmadd_ps(___x52_22_0, ___x53_0, ___x51_22);
                            ___x51_22 = _mm256_fmadd_ps(___x52_22_1, ___x53_1, ___x51_22);
                            ___x51_22 = _mm256_fmadd_ps(___x52_22_2, ___x53_2, ___x51_22);
                            ___x51_22 = _mm256_fmadd_ps(___x52_22_3, ___x53_3, ___x51_22);
                            ___x51_23 = _mm256_fmadd_ps(___x52_23_0, ___x53_0, ___x51_23);
                            ___x51_23 = _mm256_fmadd_ps(___x52_23_1, ___x53_1, ___x51_23);
                            ___x51_23 = _mm256_fmadd_ps(___x52_23_2, ___x53_2, ___x51_23);
                            ___x51_23 = _mm256_fmadd_ps(___x52_23_3, ___x53_3, ___x51_23);
                            ___x51_24 = _mm256_fmadd_ps(___x52_24_0, ___x53_0, ___x51_24);
                            ___x51_24 = _mm256_fmadd_ps(___x52_24_1, ___x53_1, ___x51_24);
                            ___x51_24 = _mm256_fmadd_ps(___x52_24_2, ___x53_2, ___x51_24);
                            ___x51_24 = _mm256_fmadd_ps(___x52_24_3, ___x53_3, ___x51_24);
                            ___x51_25 = _mm256_fmadd_ps(___x52_25_0, ___x53_0, ___x51_25);
                            ___x51_25 = _mm256_fmadd_ps(___x52_25_1, ___x53_1, ___x51_25);
                            ___x51_25 = _mm256_fmadd_ps(___x52_25_2, ___x53_2, ___x51_25);
                            ___x51_25 = _mm256_fmadd_ps(___x52_25_3, ___x53_3, ___x51_25);
                            ___x51_26 = _mm256_fmadd_ps(___x52_26_0, ___x53_0, ___x51_26);
                            ___x51_26 = _mm256_fmadd_ps(___x52_26_1, ___x53_1, ___x51_26);
                            ___x51_26 = _mm256_fmadd_ps(___x52_26_2, ___x53_2, ___x51_26);
                            ___x51_26 = _mm256_fmadd_ps(___x52_26_3, ___x53_3, ___x51_26);
                            ___x51_27 = _mm256_fmadd_ps(___x52_27_0, ___x53_0, ___x51_27);
                            ___x51_27 = _mm256_fmadd_ps(___x52_27_1, ___x53_1, ___x51_27);
                            ___x51_27 = _mm256_fmadd_ps(___x52_27_2, ___x53_2, ___x51_27);
                            ___x51_27 = _mm256_fmadd_ps(___x52_27_3, ___x53_3, ___x51_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0], ___x51_0);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0], ___x51_1);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0], ___x51_2);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0], ___x51_3);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0], ___x51_4);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0], ___x51_5);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0], ___x51_6);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0], ___x51_7);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0], ___x51_8);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0], ___x51_9);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0], ___x51_10);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0], ___x51_11);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0], ___x51_12);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0], ___x51_13);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 14 + 2)][0], ___x51_14);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 15 + 2)][0], ___x51_15);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 16 + 2)][0], ___x51_16);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 17 + 2)][0], ___x51_17);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 18 + 2)][0], ___x51_18);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 19 + 2)][0], ___x51_19);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 20 + 2)][0], ___x51_20);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 21 + 2)][0], ___x51_21);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 22 + 2)][0], ___x51_22);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 23 + 2)][0], ___x51_23);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 24 + 2)][0], ___x51_24);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 25 + 2)][0], ___x51_25);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 26 + 2)][0], ___x51_26);
                _mm256_store_ps(& ensemble24value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 27 + 2)][0], ___x51_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble25value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble25inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] + ensemble25bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble26value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble26inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 4,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 2; x1 ++) {
        for (int x2 = 0; x2 < 5; x2 ++) {
            for (int x3 = 0; x3 < 5; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble27weights[x0][x1][x2][x3][0][0], & ensemble27weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,4 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 2; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x62_0 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x62_1 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x62_2 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x62_3 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x62_4 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x62_5 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x62_6 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x62_7 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x62_8 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x62_9 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x62_10 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x62_11 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x62_12 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x62_13 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                __m256 ___x62_14 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0]);
                __m256 ___x62_15 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0]);
                __m256 ___x62_16 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0]);
                __m256 ___x62_17 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0]);
                __m256 ___x62_18 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0]);
                __m256 ___x62_19 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0]);
                __m256 ___x62_20 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0]);
                __m256 ___x62_21 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0]);
                __m256 ___x62_22 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0]);
                __m256 ___x62_23 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0]);
                __m256 ___x62_24 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0]);
                __m256 ___x62_25 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0]);
                __m256 ___x62_26 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0]);
                __m256 ___x62_27 = _mm256_load_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0]);
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x60_0 = _mm256_load_ps(& ensemble27weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x60_1 = _mm256_load_ps(& ensemble27weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x60_2 = _mm256_load_ps(& ensemble27weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x60_3 = _mm256_load_ps(& ensemble27weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x61_0_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x61_0_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x61_0_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x61_0_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x61_1_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x61_1_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x61_1_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x61_1_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x61_2_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x61_2_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x61_2_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x61_2_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x61_3_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x61_3_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x61_3_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x61_3_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x61_4_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x61_4_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x61_4_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x61_4_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x61_5_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x61_5_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x61_5_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x61_5_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x61_6_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x61_6_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x61_6_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x61_6_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x61_7_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x61_7_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x61_7_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x61_7_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x61_8_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x61_8_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x61_8_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x61_8_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x61_9_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x61_9_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x61_9_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x61_9_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x61_10_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x61_10_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x61_10_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x61_10_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x61_11_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x61_11_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x61_11_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x61_11_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x61_12_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x61_12_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x61_12_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x61_12_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x61_13_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x61_13_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x61_13_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x61_13_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x61_14_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x61_14_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x61_14_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x61_14_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x61_15_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x61_15_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x61_15_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x61_15_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x61_16_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x61_16_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x61_16_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x61_16_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x61_17_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x61_17_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x61_17_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x61_17_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x61_18_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x61_18_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x61_18_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x61_18_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x61_19_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x61_19_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x61_19_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x61_19_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x61_20_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x61_20_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x61_20_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x61_20_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x61_21_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x61_21_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x61_21_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x61_21_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x61_22_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x61_22_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x61_22_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x61_22_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x61_23_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x61_23_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x61_23_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x61_23_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x61_24_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x61_24_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x61_24_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x61_24_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x61_25_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x61_25_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x61_25_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x61_25_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x61_26_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x61_26_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x61_26_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x61_26_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x61_27_0 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x61_27_1 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x61_27_2 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x61_27_3 = _mm256_broadcast_ss(& ensemble27inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            ___x62_0 = _mm256_fmadd_ps(___x61_0_0, ___x60_0, ___x62_0);
                            ___x62_0 = _mm256_fmadd_ps(___x61_0_1, ___x60_1, ___x62_0);
                            ___x62_0 = _mm256_fmadd_ps(___x61_0_2, ___x60_2, ___x62_0);
                            ___x62_0 = _mm256_fmadd_ps(___x61_0_3, ___x60_3, ___x62_0);
                            ___x62_1 = _mm256_fmadd_ps(___x61_1_0, ___x60_0, ___x62_1);
                            ___x62_1 = _mm256_fmadd_ps(___x61_1_1, ___x60_1, ___x62_1);
                            ___x62_1 = _mm256_fmadd_ps(___x61_1_2, ___x60_2, ___x62_1);
                            ___x62_1 = _mm256_fmadd_ps(___x61_1_3, ___x60_3, ___x62_1);
                            ___x62_2 = _mm256_fmadd_ps(___x61_2_0, ___x60_0, ___x62_2);
                            ___x62_2 = _mm256_fmadd_ps(___x61_2_1, ___x60_1, ___x62_2);
                            ___x62_2 = _mm256_fmadd_ps(___x61_2_2, ___x60_2, ___x62_2);
                            ___x62_2 = _mm256_fmadd_ps(___x61_2_3, ___x60_3, ___x62_2);
                            ___x62_3 = _mm256_fmadd_ps(___x61_3_0, ___x60_0, ___x62_3);
                            ___x62_3 = _mm256_fmadd_ps(___x61_3_1, ___x60_1, ___x62_3);
                            ___x62_3 = _mm256_fmadd_ps(___x61_3_2, ___x60_2, ___x62_3);
                            ___x62_3 = _mm256_fmadd_ps(___x61_3_3, ___x60_3, ___x62_3);
                            ___x62_4 = _mm256_fmadd_ps(___x61_4_0, ___x60_0, ___x62_4);
                            ___x62_4 = _mm256_fmadd_ps(___x61_4_1, ___x60_1, ___x62_4);
                            ___x62_4 = _mm256_fmadd_ps(___x61_4_2, ___x60_2, ___x62_4);
                            ___x62_4 = _mm256_fmadd_ps(___x61_4_3, ___x60_3, ___x62_4);
                            ___x62_5 = _mm256_fmadd_ps(___x61_5_0, ___x60_0, ___x62_5);
                            ___x62_5 = _mm256_fmadd_ps(___x61_5_1, ___x60_1, ___x62_5);
                            ___x62_5 = _mm256_fmadd_ps(___x61_5_2, ___x60_2, ___x62_5);
                            ___x62_5 = _mm256_fmadd_ps(___x61_5_3, ___x60_3, ___x62_5);
                            ___x62_6 = _mm256_fmadd_ps(___x61_6_0, ___x60_0, ___x62_6);
                            ___x62_6 = _mm256_fmadd_ps(___x61_6_1, ___x60_1, ___x62_6);
                            ___x62_6 = _mm256_fmadd_ps(___x61_6_2, ___x60_2, ___x62_6);
                            ___x62_6 = _mm256_fmadd_ps(___x61_6_3, ___x60_3, ___x62_6);
                            ___x62_7 = _mm256_fmadd_ps(___x61_7_0, ___x60_0, ___x62_7);
                            ___x62_7 = _mm256_fmadd_ps(___x61_7_1, ___x60_1, ___x62_7);
                            ___x62_7 = _mm256_fmadd_ps(___x61_7_2, ___x60_2, ___x62_7);
                            ___x62_7 = _mm256_fmadd_ps(___x61_7_3, ___x60_3, ___x62_7);
                            ___x62_8 = _mm256_fmadd_ps(___x61_8_0, ___x60_0, ___x62_8);
                            ___x62_8 = _mm256_fmadd_ps(___x61_8_1, ___x60_1, ___x62_8);
                            ___x62_8 = _mm256_fmadd_ps(___x61_8_2, ___x60_2, ___x62_8);
                            ___x62_8 = _mm256_fmadd_ps(___x61_8_3, ___x60_3, ___x62_8);
                            ___x62_9 = _mm256_fmadd_ps(___x61_9_0, ___x60_0, ___x62_9);
                            ___x62_9 = _mm256_fmadd_ps(___x61_9_1, ___x60_1, ___x62_9);
                            ___x62_9 = _mm256_fmadd_ps(___x61_9_2, ___x60_2, ___x62_9);
                            ___x62_9 = _mm256_fmadd_ps(___x61_9_3, ___x60_3, ___x62_9);
                            ___x62_10 = _mm256_fmadd_ps(___x61_10_0, ___x60_0, ___x62_10);
                            ___x62_10 = _mm256_fmadd_ps(___x61_10_1, ___x60_1, ___x62_10);
                            ___x62_10 = _mm256_fmadd_ps(___x61_10_2, ___x60_2, ___x62_10);
                            ___x62_10 = _mm256_fmadd_ps(___x61_10_3, ___x60_3, ___x62_10);
                            ___x62_11 = _mm256_fmadd_ps(___x61_11_0, ___x60_0, ___x62_11);
                            ___x62_11 = _mm256_fmadd_ps(___x61_11_1, ___x60_1, ___x62_11);
                            ___x62_11 = _mm256_fmadd_ps(___x61_11_2, ___x60_2, ___x62_11);
                            ___x62_11 = _mm256_fmadd_ps(___x61_11_3, ___x60_3, ___x62_11);
                            ___x62_12 = _mm256_fmadd_ps(___x61_12_0, ___x60_0, ___x62_12);
                            ___x62_12 = _mm256_fmadd_ps(___x61_12_1, ___x60_1, ___x62_12);
                            ___x62_12 = _mm256_fmadd_ps(___x61_12_2, ___x60_2, ___x62_12);
                            ___x62_12 = _mm256_fmadd_ps(___x61_12_3, ___x60_3, ___x62_12);
                            ___x62_13 = _mm256_fmadd_ps(___x61_13_0, ___x60_0, ___x62_13);
                            ___x62_13 = _mm256_fmadd_ps(___x61_13_1, ___x60_1, ___x62_13);
                            ___x62_13 = _mm256_fmadd_ps(___x61_13_2, ___x60_2, ___x62_13);
                            ___x62_13 = _mm256_fmadd_ps(___x61_13_3, ___x60_3, ___x62_13);
                            ___x62_14 = _mm256_fmadd_ps(___x61_14_0, ___x60_0, ___x62_14);
                            ___x62_14 = _mm256_fmadd_ps(___x61_14_1, ___x60_1, ___x62_14);
                            ___x62_14 = _mm256_fmadd_ps(___x61_14_2, ___x60_2, ___x62_14);
                            ___x62_14 = _mm256_fmadd_ps(___x61_14_3, ___x60_3, ___x62_14);
                            ___x62_15 = _mm256_fmadd_ps(___x61_15_0, ___x60_0, ___x62_15);
                            ___x62_15 = _mm256_fmadd_ps(___x61_15_1, ___x60_1, ___x62_15);
                            ___x62_15 = _mm256_fmadd_ps(___x61_15_2, ___x60_2, ___x62_15);
                            ___x62_15 = _mm256_fmadd_ps(___x61_15_3, ___x60_3, ___x62_15);
                            ___x62_16 = _mm256_fmadd_ps(___x61_16_0, ___x60_0, ___x62_16);
                            ___x62_16 = _mm256_fmadd_ps(___x61_16_1, ___x60_1, ___x62_16);
                            ___x62_16 = _mm256_fmadd_ps(___x61_16_2, ___x60_2, ___x62_16);
                            ___x62_16 = _mm256_fmadd_ps(___x61_16_3, ___x60_3, ___x62_16);
                            ___x62_17 = _mm256_fmadd_ps(___x61_17_0, ___x60_0, ___x62_17);
                            ___x62_17 = _mm256_fmadd_ps(___x61_17_1, ___x60_1, ___x62_17);
                            ___x62_17 = _mm256_fmadd_ps(___x61_17_2, ___x60_2, ___x62_17);
                            ___x62_17 = _mm256_fmadd_ps(___x61_17_3, ___x60_3, ___x62_17);
                            ___x62_18 = _mm256_fmadd_ps(___x61_18_0, ___x60_0, ___x62_18);
                            ___x62_18 = _mm256_fmadd_ps(___x61_18_1, ___x60_1, ___x62_18);
                            ___x62_18 = _mm256_fmadd_ps(___x61_18_2, ___x60_2, ___x62_18);
                            ___x62_18 = _mm256_fmadd_ps(___x61_18_3, ___x60_3, ___x62_18);
                            ___x62_19 = _mm256_fmadd_ps(___x61_19_0, ___x60_0, ___x62_19);
                            ___x62_19 = _mm256_fmadd_ps(___x61_19_1, ___x60_1, ___x62_19);
                            ___x62_19 = _mm256_fmadd_ps(___x61_19_2, ___x60_2, ___x62_19);
                            ___x62_19 = _mm256_fmadd_ps(___x61_19_3, ___x60_3, ___x62_19);
                            ___x62_20 = _mm256_fmadd_ps(___x61_20_0, ___x60_0, ___x62_20);
                            ___x62_20 = _mm256_fmadd_ps(___x61_20_1, ___x60_1, ___x62_20);
                            ___x62_20 = _mm256_fmadd_ps(___x61_20_2, ___x60_2, ___x62_20);
                            ___x62_20 = _mm256_fmadd_ps(___x61_20_3, ___x60_3, ___x62_20);
                            ___x62_21 = _mm256_fmadd_ps(___x61_21_0, ___x60_0, ___x62_21);
                            ___x62_21 = _mm256_fmadd_ps(___x61_21_1, ___x60_1, ___x62_21);
                            ___x62_21 = _mm256_fmadd_ps(___x61_21_2, ___x60_2, ___x62_21);
                            ___x62_21 = _mm256_fmadd_ps(___x61_21_3, ___x60_3, ___x62_21);
                            ___x62_22 = _mm256_fmadd_ps(___x61_22_0, ___x60_0, ___x62_22);
                            ___x62_22 = _mm256_fmadd_ps(___x61_22_1, ___x60_1, ___x62_22);
                            ___x62_22 = _mm256_fmadd_ps(___x61_22_2, ___x60_2, ___x62_22);
                            ___x62_22 = _mm256_fmadd_ps(___x61_22_3, ___x60_3, ___x62_22);
                            ___x62_23 = _mm256_fmadd_ps(___x61_23_0, ___x60_0, ___x62_23);
                            ___x62_23 = _mm256_fmadd_ps(___x61_23_1, ___x60_1, ___x62_23);
                            ___x62_23 = _mm256_fmadd_ps(___x61_23_2, ___x60_2, ___x62_23);
                            ___x62_23 = _mm256_fmadd_ps(___x61_23_3, ___x60_3, ___x62_23);
                            ___x62_24 = _mm256_fmadd_ps(___x61_24_0, ___x60_0, ___x62_24);
                            ___x62_24 = _mm256_fmadd_ps(___x61_24_1, ___x60_1, ___x62_24);
                            ___x62_24 = _mm256_fmadd_ps(___x61_24_2, ___x60_2, ___x62_24);
                            ___x62_24 = _mm256_fmadd_ps(___x61_24_3, ___x60_3, ___x62_24);
                            ___x62_25 = _mm256_fmadd_ps(___x61_25_0, ___x60_0, ___x62_25);
                            ___x62_25 = _mm256_fmadd_ps(___x61_25_1, ___x60_1, ___x62_25);
                            ___x62_25 = _mm256_fmadd_ps(___x61_25_2, ___x60_2, ___x62_25);
                            ___x62_25 = _mm256_fmadd_ps(___x61_25_3, ___x60_3, ___x62_25);
                            ___x62_26 = _mm256_fmadd_ps(___x61_26_0, ___x60_0, ___x62_26);
                            ___x62_26 = _mm256_fmadd_ps(___x61_26_1, ___x60_1, ___x62_26);
                            ___x62_26 = _mm256_fmadd_ps(___x61_26_2, ___x60_2, ___x62_26);
                            ___x62_26 = _mm256_fmadd_ps(___x61_26_3, ___x60_3, ___x62_26);
                            ___x62_27 = _mm256_fmadd_ps(___x61_27_0, ___x60_0, ___x62_27);
                            ___x62_27 = _mm256_fmadd_ps(___x61_27_1, ___x60_1, ___x62_27);
                            ___x62_27 = _mm256_fmadd_ps(___x61_27_2, ___x60_2, ___x62_27);
                            ___x62_27 = _mm256_fmadd_ps(___x61_27_3, ___x60_3, ___x62_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x62_0);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x62_1);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x62_2);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x62_3);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x62_4);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x62_5);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x62_6);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x62_7);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x62_8);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x62_9);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x62_10);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x62_11);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x62_12);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x62_13);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0], ___x62_14);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0], ___x62_15);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0], ___x62_16);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0], ___x62_17);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0], ___x62_18);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0], ___x62_19);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0], ___x62_20);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0], ___x62_21);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0], ___x62_22);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0], ___x62_23);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0], ___x62_24);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0], ___x62_25);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0], ___x62_26);
                _mm256_store_ps(& ensemble27value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0], ___x62_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble28value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble28inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble28bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble29value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble29inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        
    parallel_for(0,24 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 1 - 1;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 1 - 1;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble30inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 27)][MIN(MAX(k * 1 + _input_offset_3, 0), 27)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble30inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 27)][MIN(MAX(k * 1 + _input_offset_3, 0), 27)][_input_offset_1_inner];
                            ensemble30mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble30mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble30value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 4,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 24; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble31weights[x0][x1][x2][x3][0][0], & ensemble31weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,4 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 24; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x69_0 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x69_1 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x69_2 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x69_3 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x69_4 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x69_5 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x69_6 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x69_7 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x69_8 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x69_9 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x69_10 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x69_11 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x69_12 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x69_13 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                __m256 ___x69_14 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0]);
                __m256 ___x69_15 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0]);
                __m256 ___x69_16 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0]);
                __m256 ___x69_17 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0]);
                __m256 ___x69_18 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0]);
                __m256 ___x69_19 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0]);
                __m256 ___x69_20 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0]);
                __m256 ___x69_21 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0]);
                __m256 ___x69_22 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0]);
                __m256 ___x69_23 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0]);
                __m256 ___x69_24 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0]);
                __m256 ___x69_25 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0]);
                __m256 ___x69_26 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0]);
                __m256 ___x69_27 = _mm256_load_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x70_0_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x70_0_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x70_0_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x70_0_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x70_1_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x70_1_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x70_1_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x70_1_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x70_2_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x70_2_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x70_2_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x70_2_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x70_3_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x70_3_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x70_3_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x70_3_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x70_4_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x70_4_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x70_4_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x70_4_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x70_5_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x70_5_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x70_5_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x70_5_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x70_6_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x70_6_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x70_6_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x70_6_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x70_7_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x70_7_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x70_7_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x70_7_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x70_8_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x70_8_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x70_8_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x70_8_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x70_9_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x70_9_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x70_9_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x70_9_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x70_10_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x70_10_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x70_10_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x70_10_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x70_11_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x70_11_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x70_11_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x70_11_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x70_12_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x70_12_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x70_12_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x70_12_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x70_13_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x70_13_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x70_13_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x70_13_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x70_14_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x70_14_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x70_14_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x70_14_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x70_15_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x70_15_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x70_15_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x70_15_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x70_16_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x70_16_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x70_16_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x70_16_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x70_17_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x70_17_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x70_17_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x70_17_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x70_18_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x70_18_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x70_18_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x70_18_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x70_19_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x70_19_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x70_19_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x70_19_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x70_20_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x70_20_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x70_20_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x70_20_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x70_21_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x70_21_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x70_21_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x70_21_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x70_22_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x70_22_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x70_22_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x70_22_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x70_23_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x70_23_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x70_23_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x70_23_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x70_24_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x70_24_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x70_24_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x70_24_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x70_25_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x70_25_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x70_25_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x70_25_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x70_26_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x70_26_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x70_26_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x70_26_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x70_27_0 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x70_27_1 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x70_27_2 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x70_27_3 = _mm256_broadcast_ss(& ensemble31inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            __m256 ___x71_0 = _mm256_load_ps(& ensemble31weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x71_1 = _mm256_load_ps(& ensemble31weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x71_2 = _mm256_load_ps(& ensemble31weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x71_3 = _mm256_load_ps(& ensemble31weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x69_0 = _mm256_fmadd_ps(___x70_0_0, ___x71_0, ___x69_0);
                            ___x69_0 = _mm256_fmadd_ps(___x70_0_1, ___x71_1, ___x69_0);
                            ___x69_0 = _mm256_fmadd_ps(___x70_0_2, ___x71_2, ___x69_0);
                            ___x69_0 = _mm256_fmadd_ps(___x70_0_3, ___x71_3, ___x69_0);
                            ___x69_1 = _mm256_fmadd_ps(___x70_1_0, ___x71_0, ___x69_1);
                            ___x69_1 = _mm256_fmadd_ps(___x70_1_1, ___x71_1, ___x69_1);
                            ___x69_1 = _mm256_fmadd_ps(___x70_1_2, ___x71_2, ___x69_1);
                            ___x69_1 = _mm256_fmadd_ps(___x70_1_3, ___x71_3, ___x69_1);
                            ___x69_2 = _mm256_fmadd_ps(___x70_2_0, ___x71_0, ___x69_2);
                            ___x69_2 = _mm256_fmadd_ps(___x70_2_1, ___x71_1, ___x69_2);
                            ___x69_2 = _mm256_fmadd_ps(___x70_2_2, ___x71_2, ___x69_2);
                            ___x69_2 = _mm256_fmadd_ps(___x70_2_3, ___x71_3, ___x69_2);
                            ___x69_3 = _mm256_fmadd_ps(___x70_3_0, ___x71_0, ___x69_3);
                            ___x69_3 = _mm256_fmadd_ps(___x70_3_1, ___x71_1, ___x69_3);
                            ___x69_3 = _mm256_fmadd_ps(___x70_3_2, ___x71_2, ___x69_3);
                            ___x69_3 = _mm256_fmadd_ps(___x70_3_3, ___x71_3, ___x69_3);
                            ___x69_4 = _mm256_fmadd_ps(___x70_4_0, ___x71_0, ___x69_4);
                            ___x69_4 = _mm256_fmadd_ps(___x70_4_1, ___x71_1, ___x69_4);
                            ___x69_4 = _mm256_fmadd_ps(___x70_4_2, ___x71_2, ___x69_4);
                            ___x69_4 = _mm256_fmadd_ps(___x70_4_3, ___x71_3, ___x69_4);
                            ___x69_5 = _mm256_fmadd_ps(___x70_5_0, ___x71_0, ___x69_5);
                            ___x69_5 = _mm256_fmadd_ps(___x70_5_1, ___x71_1, ___x69_5);
                            ___x69_5 = _mm256_fmadd_ps(___x70_5_2, ___x71_2, ___x69_5);
                            ___x69_5 = _mm256_fmadd_ps(___x70_5_3, ___x71_3, ___x69_5);
                            ___x69_6 = _mm256_fmadd_ps(___x70_6_0, ___x71_0, ___x69_6);
                            ___x69_6 = _mm256_fmadd_ps(___x70_6_1, ___x71_1, ___x69_6);
                            ___x69_6 = _mm256_fmadd_ps(___x70_6_2, ___x71_2, ___x69_6);
                            ___x69_6 = _mm256_fmadd_ps(___x70_6_3, ___x71_3, ___x69_6);
                            ___x69_7 = _mm256_fmadd_ps(___x70_7_0, ___x71_0, ___x69_7);
                            ___x69_7 = _mm256_fmadd_ps(___x70_7_1, ___x71_1, ___x69_7);
                            ___x69_7 = _mm256_fmadd_ps(___x70_7_2, ___x71_2, ___x69_7);
                            ___x69_7 = _mm256_fmadd_ps(___x70_7_3, ___x71_3, ___x69_7);
                            ___x69_8 = _mm256_fmadd_ps(___x70_8_0, ___x71_0, ___x69_8);
                            ___x69_8 = _mm256_fmadd_ps(___x70_8_1, ___x71_1, ___x69_8);
                            ___x69_8 = _mm256_fmadd_ps(___x70_8_2, ___x71_2, ___x69_8);
                            ___x69_8 = _mm256_fmadd_ps(___x70_8_3, ___x71_3, ___x69_8);
                            ___x69_9 = _mm256_fmadd_ps(___x70_9_0, ___x71_0, ___x69_9);
                            ___x69_9 = _mm256_fmadd_ps(___x70_9_1, ___x71_1, ___x69_9);
                            ___x69_9 = _mm256_fmadd_ps(___x70_9_2, ___x71_2, ___x69_9);
                            ___x69_9 = _mm256_fmadd_ps(___x70_9_3, ___x71_3, ___x69_9);
                            ___x69_10 = _mm256_fmadd_ps(___x70_10_0, ___x71_0, ___x69_10);
                            ___x69_10 = _mm256_fmadd_ps(___x70_10_1, ___x71_1, ___x69_10);
                            ___x69_10 = _mm256_fmadd_ps(___x70_10_2, ___x71_2, ___x69_10);
                            ___x69_10 = _mm256_fmadd_ps(___x70_10_3, ___x71_3, ___x69_10);
                            ___x69_11 = _mm256_fmadd_ps(___x70_11_0, ___x71_0, ___x69_11);
                            ___x69_11 = _mm256_fmadd_ps(___x70_11_1, ___x71_1, ___x69_11);
                            ___x69_11 = _mm256_fmadd_ps(___x70_11_2, ___x71_2, ___x69_11);
                            ___x69_11 = _mm256_fmadd_ps(___x70_11_3, ___x71_3, ___x69_11);
                            ___x69_12 = _mm256_fmadd_ps(___x70_12_0, ___x71_0, ___x69_12);
                            ___x69_12 = _mm256_fmadd_ps(___x70_12_1, ___x71_1, ___x69_12);
                            ___x69_12 = _mm256_fmadd_ps(___x70_12_2, ___x71_2, ___x69_12);
                            ___x69_12 = _mm256_fmadd_ps(___x70_12_3, ___x71_3, ___x69_12);
                            ___x69_13 = _mm256_fmadd_ps(___x70_13_0, ___x71_0, ___x69_13);
                            ___x69_13 = _mm256_fmadd_ps(___x70_13_1, ___x71_1, ___x69_13);
                            ___x69_13 = _mm256_fmadd_ps(___x70_13_2, ___x71_2, ___x69_13);
                            ___x69_13 = _mm256_fmadd_ps(___x70_13_3, ___x71_3, ___x69_13);
                            ___x69_14 = _mm256_fmadd_ps(___x70_14_0, ___x71_0, ___x69_14);
                            ___x69_14 = _mm256_fmadd_ps(___x70_14_1, ___x71_1, ___x69_14);
                            ___x69_14 = _mm256_fmadd_ps(___x70_14_2, ___x71_2, ___x69_14);
                            ___x69_14 = _mm256_fmadd_ps(___x70_14_3, ___x71_3, ___x69_14);
                            ___x69_15 = _mm256_fmadd_ps(___x70_15_0, ___x71_0, ___x69_15);
                            ___x69_15 = _mm256_fmadd_ps(___x70_15_1, ___x71_1, ___x69_15);
                            ___x69_15 = _mm256_fmadd_ps(___x70_15_2, ___x71_2, ___x69_15);
                            ___x69_15 = _mm256_fmadd_ps(___x70_15_3, ___x71_3, ___x69_15);
                            ___x69_16 = _mm256_fmadd_ps(___x70_16_0, ___x71_0, ___x69_16);
                            ___x69_16 = _mm256_fmadd_ps(___x70_16_1, ___x71_1, ___x69_16);
                            ___x69_16 = _mm256_fmadd_ps(___x70_16_2, ___x71_2, ___x69_16);
                            ___x69_16 = _mm256_fmadd_ps(___x70_16_3, ___x71_3, ___x69_16);
                            ___x69_17 = _mm256_fmadd_ps(___x70_17_0, ___x71_0, ___x69_17);
                            ___x69_17 = _mm256_fmadd_ps(___x70_17_1, ___x71_1, ___x69_17);
                            ___x69_17 = _mm256_fmadd_ps(___x70_17_2, ___x71_2, ___x69_17);
                            ___x69_17 = _mm256_fmadd_ps(___x70_17_3, ___x71_3, ___x69_17);
                            ___x69_18 = _mm256_fmadd_ps(___x70_18_0, ___x71_0, ___x69_18);
                            ___x69_18 = _mm256_fmadd_ps(___x70_18_1, ___x71_1, ___x69_18);
                            ___x69_18 = _mm256_fmadd_ps(___x70_18_2, ___x71_2, ___x69_18);
                            ___x69_18 = _mm256_fmadd_ps(___x70_18_3, ___x71_3, ___x69_18);
                            ___x69_19 = _mm256_fmadd_ps(___x70_19_0, ___x71_0, ___x69_19);
                            ___x69_19 = _mm256_fmadd_ps(___x70_19_1, ___x71_1, ___x69_19);
                            ___x69_19 = _mm256_fmadd_ps(___x70_19_2, ___x71_2, ___x69_19);
                            ___x69_19 = _mm256_fmadd_ps(___x70_19_3, ___x71_3, ___x69_19);
                            ___x69_20 = _mm256_fmadd_ps(___x70_20_0, ___x71_0, ___x69_20);
                            ___x69_20 = _mm256_fmadd_ps(___x70_20_1, ___x71_1, ___x69_20);
                            ___x69_20 = _mm256_fmadd_ps(___x70_20_2, ___x71_2, ___x69_20);
                            ___x69_20 = _mm256_fmadd_ps(___x70_20_3, ___x71_3, ___x69_20);
                            ___x69_21 = _mm256_fmadd_ps(___x70_21_0, ___x71_0, ___x69_21);
                            ___x69_21 = _mm256_fmadd_ps(___x70_21_1, ___x71_1, ___x69_21);
                            ___x69_21 = _mm256_fmadd_ps(___x70_21_2, ___x71_2, ___x69_21);
                            ___x69_21 = _mm256_fmadd_ps(___x70_21_3, ___x71_3, ___x69_21);
                            ___x69_22 = _mm256_fmadd_ps(___x70_22_0, ___x71_0, ___x69_22);
                            ___x69_22 = _mm256_fmadd_ps(___x70_22_1, ___x71_1, ___x69_22);
                            ___x69_22 = _mm256_fmadd_ps(___x70_22_2, ___x71_2, ___x69_22);
                            ___x69_22 = _mm256_fmadd_ps(___x70_22_3, ___x71_3, ___x69_22);
                            ___x69_23 = _mm256_fmadd_ps(___x70_23_0, ___x71_0, ___x69_23);
                            ___x69_23 = _mm256_fmadd_ps(___x70_23_1, ___x71_1, ___x69_23);
                            ___x69_23 = _mm256_fmadd_ps(___x70_23_2, ___x71_2, ___x69_23);
                            ___x69_23 = _mm256_fmadd_ps(___x70_23_3, ___x71_3, ___x69_23);
                            ___x69_24 = _mm256_fmadd_ps(___x70_24_0, ___x71_0, ___x69_24);
                            ___x69_24 = _mm256_fmadd_ps(___x70_24_1, ___x71_1, ___x69_24);
                            ___x69_24 = _mm256_fmadd_ps(___x70_24_2, ___x71_2, ___x69_24);
                            ___x69_24 = _mm256_fmadd_ps(___x70_24_3, ___x71_3, ___x69_24);
                            ___x69_25 = _mm256_fmadd_ps(___x70_25_0, ___x71_0, ___x69_25);
                            ___x69_25 = _mm256_fmadd_ps(___x70_25_1, ___x71_1, ___x69_25);
                            ___x69_25 = _mm256_fmadd_ps(___x70_25_2, ___x71_2, ___x69_25);
                            ___x69_25 = _mm256_fmadd_ps(___x70_25_3, ___x71_3, ___x69_25);
                            ___x69_26 = _mm256_fmadd_ps(___x70_26_0, ___x71_0, ___x69_26);
                            ___x69_26 = _mm256_fmadd_ps(___x70_26_1, ___x71_1, ___x69_26);
                            ___x69_26 = _mm256_fmadd_ps(___x70_26_2, ___x71_2, ___x69_26);
                            ___x69_26 = _mm256_fmadd_ps(___x70_26_3, ___x71_3, ___x69_26);
                            ___x69_27 = _mm256_fmadd_ps(___x70_27_0, ___x71_0, ___x69_27);
                            ___x69_27 = _mm256_fmadd_ps(___x70_27_1, ___x71_1, ___x69_27);
                            ___x69_27 = _mm256_fmadd_ps(___x70_27_2, ___x71_2, ___x69_27);
                            ___x69_27 = _mm256_fmadd_ps(___x70_27_3, ___x71_3, ___x69_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x69_0);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x69_1);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x69_2);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x69_3);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x69_4);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x69_5);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x69_6);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x69_7);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x69_8);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x69_9);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x69_10);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x69_11);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x69_12);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x69_13);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0], ___x69_14);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0], ___x69_15);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0], ___x69_16);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0], ___x69_17);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0], ___x69_18);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0], ___x69_19);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0], ___x69_20);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0], ___x69_21);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0], ___x69_22);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0], ___x69_23);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0], ___x69_24);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0], ___x69_25);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0], ___x69_26);
                _mm256_store_ps(& ensemble31value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0], ___x69_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble32value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble32inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble32bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble33value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble33inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble34value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble34inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble34value[_neuron_index_0][(_neuron_index_1_outer + 8)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble34inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble34value[_neuron_index_0][(_neuron_index_1_outer + 24)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble34inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    ensemble34value[_neuron_index_0][(_neuron_index_1_outer + 28)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble34inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
    ;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 32; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble35weights[x0][x1][x2][x3][0][0], & ensemble35weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 32; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x80_0 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x80_1 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x80_2 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x80_3 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x80_4 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x80_5 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x80_6 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x80_7 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x80_8 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x80_9 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x80_10 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x80_11 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x80_12 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x80_13 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                __m256 ___x80_14 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0]);
                __m256 ___x80_15 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0]);
                __m256 ___x80_16 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0]);
                __m256 ___x80_17 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0]);
                __m256 ___x80_18 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0]);
                __m256 ___x80_19 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0]);
                __m256 ___x80_20 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0]);
                __m256 ___x80_21 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0]);
                __m256 ___x80_22 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0]);
                __m256 ___x80_23 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0]);
                __m256 ___x80_24 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0]);
                __m256 ___x80_25 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0]);
                __m256 ___x80_26 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0]);
                __m256 ___x80_27 = _mm256_load_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x78_0_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x78_0_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x78_0_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x78_0_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x78_1_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x78_1_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x78_1_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x78_1_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x78_2_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x78_2_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x78_2_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x78_2_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x78_3_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x78_3_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x78_3_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x78_3_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x78_4_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x78_4_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x78_4_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x78_4_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x78_5_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x78_5_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x78_5_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x78_5_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x78_6_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x78_6_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x78_6_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x78_6_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x78_7_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x78_7_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x78_7_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x78_7_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x78_8_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x78_8_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x78_8_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x78_8_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x78_9_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x78_9_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x78_9_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x78_9_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x78_10_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x78_10_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x78_10_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x78_10_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x78_11_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x78_11_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x78_11_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x78_11_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x78_12_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x78_12_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x78_12_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x78_12_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x78_13_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x78_13_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x78_13_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x78_13_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x78_14_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x78_14_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x78_14_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x78_14_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x78_15_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x78_15_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x78_15_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x78_15_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x78_16_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x78_16_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x78_16_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x78_16_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x78_17_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x78_17_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x78_17_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x78_17_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x78_18_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x78_18_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x78_18_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x78_18_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x78_19_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x78_19_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x78_19_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x78_19_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x78_20_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x78_20_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x78_20_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x78_20_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x78_21_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x78_21_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x78_21_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x78_21_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x78_22_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x78_22_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x78_22_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x78_22_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x78_23_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x78_23_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x78_23_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x78_23_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x78_24_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x78_24_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x78_24_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x78_24_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x78_25_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x78_25_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x78_25_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x78_25_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x78_26_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x78_26_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x78_26_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x78_26_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x78_27_0 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x78_27_1 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x78_27_2 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x78_27_3 = _mm256_broadcast_ss(& ensemble35inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            __m256 ___x79_0 = _mm256_load_ps(& ensemble35weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x79_1 = _mm256_load_ps(& ensemble35weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x79_2 = _mm256_load_ps(& ensemble35weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x79_3 = _mm256_load_ps(& ensemble35weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x80_0 = _mm256_fmadd_ps(___x78_0_0, ___x79_0, ___x80_0);
                            ___x80_0 = _mm256_fmadd_ps(___x78_0_1, ___x79_1, ___x80_0);
                            ___x80_0 = _mm256_fmadd_ps(___x78_0_2, ___x79_2, ___x80_0);
                            ___x80_0 = _mm256_fmadd_ps(___x78_0_3, ___x79_3, ___x80_0);
                            ___x80_1 = _mm256_fmadd_ps(___x78_1_0, ___x79_0, ___x80_1);
                            ___x80_1 = _mm256_fmadd_ps(___x78_1_1, ___x79_1, ___x80_1);
                            ___x80_1 = _mm256_fmadd_ps(___x78_1_2, ___x79_2, ___x80_1);
                            ___x80_1 = _mm256_fmadd_ps(___x78_1_3, ___x79_3, ___x80_1);
                            ___x80_2 = _mm256_fmadd_ps(___x78_2_0, ___x79_0, ___x80_2);
                            ___x80_2 = _mm256_fmadd_ps(___x78_2_1, ___x79_1, ___x80_2);
                            ___x80_2 = _mm256_fmadd_ps(___x78_2_2, ___x79_2, ___x80_2);
                            ___x80_2 = _mm256_fmadd_ps(___x78_2_3, ___x79_3, ___x80_2);
                            ___x80_3 = _mm256_fmadd_ps(___x78_3_0, ___x79_0, ___x80_3);
                            ___x80_3 = _mm256_fmadd_ps(___x78_3_1, ___x79_1, ___x80_3);
                            ___x80_3 = _mm256_fmadd_ps(___x78_3_2, ___x79_2, ___x80_3);
                            ___x80_3 = _mm256_fmadd_ps(___x78_3_3, ___x79_3, ___x80_3);
                            ___x80_4 = _mm256_fmadd_ps(___x78_4_0, ___x79_0, ___x80_4);
                            ___x80_4 = _mm256_fmadd_ps(___x78_4_1, ___x79_1, ___x80_4);
                            ___x80_4 = _mm256_fmadd_ps(___x78_4_2, ___x79_2, ___x80_4);
                            ___x80_4 = _mm256_fmadd_ps(___x78_4_3, ___x79_3, ___x80_4);
                            ___x80_5 = _mm256_fmadd_ps(___x78_5_0, ___x79_0, ___x80_5);
                            ___x80_5 = _mm256_fmadd_ps(___x78_5_1, ___x79_1, ___x80_5);
                            ___x80_5 = _mm256_fmadd_ps(___x78_5_2, ___x79_2, ___x80_5);
                            ___x80_5 = _mm256_fmadd_ps(___x78_5_3, ___x79_3, ___x80_5);
                            ___x80_6 = _mm256_fmadd_ps(___x78_6_0, ___x79_0, ___x80_6);
                            ___x80_6 = _mm256_fmadd_ps(___x78_6_1, ___x79_1, ___x80_6);
                            ___x80_6 = _mm256_fmadd_ps(___x78_6_2, ___x79_2, ___x80_6);
                            ___x80_6 = _mm256_fmadd_ps(___x78_6_3, ___x79_3, ___x80_6);
                            ___x80_7 = _mm256_fmadd_ps(___x78_7_0, ___x79_0, ___x80_7);
                            ___x80_7 = _mm256_fmadd_ps(___x78_7_1, ___x79_1, ___x80_7);
                            ___x80_7 = _mm256_fmadd_ps(___x78_7_2, ___x79_2, ___x80_7);
                            ___x80_7 = _mm256_fmadd_ps(___x78_7_3, ___x79_3, ___x80_7);
                            ___x80_8 = _mm256_fmadd_ps(___x78_8_0, ___x79_0, ___x80_8);
                            ___x80_8 = _mm256_fmadd_ps(___x78_8_1, ___x79_1, ___x80_8);
                            ___x80_8 = _mm256_fmadd_ps(___x78_8_2, ___x79_2, ___x80_8);
                            ___x80_8 = _mm256_fmadd_ps(___x78_8_3, ___x79_3, ___x80_8);
                            ___x80_9 = _mm256_fmadd_ps(___x78_9_0, ___x79_0, ___x80_9);
                            ___x80_9 = _mm256_fmadd_ps(___x78_9_1, ___x79_1, ___x80_9);
                            ___x80_9 = _mm256_fmadd_ps(___x78_9_2, ___x79_2, ___x80_9);
                            ___x80_9 = _mm256_fmadd_ps(___x78_9_3, ___x79_3, ___x80_9);
                            ___x80_10 = _mm256_fmadd_ps(___x78_10_0, ___x79_0, ___x80_10);
                            ___x80_10 = _mm256_fmadd_ps(___x78_10_1, ___x79_1, ___x80_10);
                            ___x80_10 = _mm256_fmadd_ps(___x78_10_2, ___x79_2, ___x80_10);
                            ___x80_10 = _mm256_fmadd_ps(___x78_10_3, ___x79_3, ___x80_10);
                            ___x80_11 = _mm256_fmadd_ps(___x78_11_0, ___x79_0, ___x80_11);
                            ___x80_11 = _mm256_fmadd_ps(___x78_11_1, ___x79_1, ___x80_11);
                            ___x80_11 = _mm256_fmadd_ps(___x78_11_2, ___x79_2, ___x80_11);
                            ___x80_11 = _mm256_fmadd_ps(___x78_11_3, ___x79_3, ___x80_11);
                            ___x80_12 = _mm256_fmadd_ps(___x78_12_0, ___x79_0, ___x80_12);
                            ___x80_12 = _mm256_fmadd_ps(___x78_12_1, ___x79_1, ___x80_12);
                            ___x80_12 = _mm256_fmadd_ps(___x78_12_2, ___x79_2, ___x80_12);
                            ___x80_12 = _mm256_fmadd_ps(___x78_12_3, ___x79_3, ___x80_12);
                            ___x80_13 = _mm256_fmadd_ps(___x78_13_0, ___x79_0, ___x80_13);
                            ___x80_13 = _mm256_fmadd_ps(___x78_13_1, ___x79_1, ___x80_13);
                            ___x80_13 = _mm256_fmadd_ps(___x78_13_2, ___x79_2, ___x80_13);
                            ___x80_13 = _mm256_fmadd_ps(___x78_13_3, ___x79_3, ___x80_13);
                            ___x80_14 = _mm256_fmadd_ps(___x78_14_0, ___x79_0, ___x80_14);
                            ___x80_14 = _mm256_fmadd_ps(___x78_14_1, ___x79_1, ___x80_14);
                            ___x80_14 = _mm256_fmadd_ps(___x78_14_2, ___x79_2, ___x80_14);
                            ___x80_14 = _mm256_fmadd_ps(___x78_14_3, ___x79_3, ___x80_14);
                            ___x80_15 = _mm256_fmadd_ps(___x78_15_0, ___x79_0, ___x80_15);
                            ___x80_15 = _mm256_fmadd_ps(___x78_15_1, ___x79_1, ___x80_15);
                            ___x80_15 = _mm256_fmadd_ps(___x78_15_2, ___x79_2, ___x80_15);
                            ___x80_15 = _mm256_fmadd_ps(___x78_15_3, ___x79_3, ___x80_15);
                            ___x80_16 = _mm256_fmadd_ps(___x78_16_0, ___x79_0, ___x80_16);
                            ___x80_16 = _mm256_fmadd_ps(___x78_16_1, ___x79_1, ___x80_16);
                            ___x80_16 = _mm256_fmadd_ps(___x78_16_2, ___x79_2, ___x80_16);
                            ___x80_16 = _mm256_fmadd_ps(___x78_16_3, ___x79_3, ___x80_16);
                            ___x80_17 = _mm256_fmadd_ps(___x78_17_0, ___x79_0, ___x80_17);
                            ___x80_17 = _mm256_fmadd_ps(___x78_17_1, ___x79_1, ___x80_17);
                            ___x80_17 = _mm256_fmadd_ps(___x78_17_2, ___x79_2, ___x80_17);
                            ___x80_17 = _mm256_fmadd_ps(___x78_17_3, ___x79_3, ___x80_17);
                            ___x80_18 = _mm256_fmadd_ps(___x78_18_0, ___x79_0, ___x80_18);
                            ___x80_18 = _mm256_fmadd_ps(___x78_18_1, ___x79_1, ___x80_18);
                            ___x80_18 = _mm256_fmadd_ps(___x78_18_2, ___x79_2, ___x80_18);
                            ___x80_18 = _mm256_fmadd_ps(___x78_18_3, ___x79_3, ___x80_18);
                            ___x80_19 = _mm256_fmadd_ps(___x78_19_0, ___x79_0, ___x80_19);
                            ___x80_19 = _mm256_fmadd_ps(___x78_19_1, ___x79_1, ___x80_19);
                            ___x80_19 = _mm256_fmadd_ps(___x78_19_2, ___x79_2, ___x80_19);
                            ___x80_19 = _mm256_fmadd_ps(___x78_19_3, ___x79_3, ___x80_19);
                            ___x80_20 = _mm256_fmadd_ps(___x78_20_0, ___x79_0, ___x80_20);
                            ___x80_20 = _mm256_fmadd_ps(___x78_20_1, ___x79_1, ___x80_20);
                            ___x80_20 = _mm256_fmadd_ps(___x78_20_2, ___x79_2, ___x80_20);
                            ___x80_20 = _mm256_fmadd_ps(___x78_20_3, ___x79_3, ___x80_20);
                            ___x80_21 = _mm256_fmadd_ps(___x78_21_0, ___x79_0, ___x80_21);
                            ___x80_21 = _mm256_fmadd_ps(___x78_21_1, ___x79_1, ___x80_21);
                            ___x80_21 = _mm256_fmadd_ps(___x78_21_2, ___x79_2, ___x80_21);
                            ___x80_21 = _mm256_fmadd_ps(___x78_21_3, ___x79_3, ___x80_21);
                            ___x80_22 = _mm256_fmadd_ps(___x78_22_0, ___x79_0, ___x80_22);
                            ___x80_22 = _mm256_fmadd_ps(___x78_22_1, ___x79_1, ___x80_22);
                            ___x80_22 = _mm256_fmadd_ps(___x78_22_2, ___x79_2, ___x80_22);
                            ___x80_22 = _mm256_fmadd_ps(___x78_22_3, ___x79_3, ___x80_22);
                            ___x80_23 = _mm256_fmadd_ps(___x78_23_0, ___x79_0, ___x80_23);
                            ___x80_23 = _mm256_fmadd_ps(___x78_23_1, ___x79_1, ___x80_23);
                            ___x80_23 = _mm256_fmadd_ps(___x78_23_2, ___x79_2, ___x80_23);
                            ___x80_23 = _mm256_fmadd_ps(___x78_23_3, ___x79_3, ___x80_23);
                            ___x80_24 = _mm256_fmadd_ps(___x78_24_0, ___x79_0, ___x80_24);
                            ___x80_24 = _mm256_fmadd_ps(___x78_24_1, ___x79_1, ___x80_24);
                            ___x80_24 = _mm256_fmadd_ps(___x78_24_2, ___x79_2, ___x80_24);
                            ___x80_24 = _mm256_fmadd_ps(___x78_24_3, ___x79_3, ___x80_24);
                            ___x80_25 = _mm256_fmadd_ps(___x78_25_0, ___x79_0, ___x80_25);
                            ___x80_25 = _mm256_fmadd_ps(___x78_25_1, ___x79_1, ___x80_25);
                            ___x80_25 = _mm256_fmadd_ps(___x78_25_2, ___x79_2, ___x80_25);
                            ___x80_25 = _mm256_fmadd_ps(___x78_25_3, ___x79_3, ___x80_25);
                            ___x80_26 = _mm256_fmadd_ps(___x78_26_0, ___x79_0, ___x80_26);
                            ___x80_26 = _mm256_fmadd_ps(___x78_26_1, ___x79_1, ___x80_26);
                            ___x80_26 = _mm256_fmadd_ps(___x78_26_2, ___x79_2, ___x80_26);
                            ___x80_26 = _mm256_fmadd_ps(___x78_26_3, ___x79_3, ___x80_26);
                            ___x80_27 = _mm256_fmadd_ps(___x78_27_0, ___x79_0, ___x80_27);
                            ___x80_27 = _mm256_fmadd_ps(___x78_27_1, ___x79_1, ___x80_27);
                            ___x80_27 = _mm256_fmadd_ps(___x78_27_2, ___x79_2, ___x80_27);
                            ___x80_27 = _mm256_fmadd_ps(___x78_27_3, ___x79_3, ___x80_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x80_0);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x80_1);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x80_2);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x80_3);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x80_4);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x80_5);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x80_6);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x80_7);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x80_8);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x80_9);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x80_10);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x80_11);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x80_12);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x80_13);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0], ___x80_14);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0], ___x80_15);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0], ___x80_16);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0], ___x80_17);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0], ___x80_18);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0], ___x80_19);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0], ___x80_20);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0], ___x80_21);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0], ___x80_22);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0], ___x80_23);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0], ___x80_24);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0], ___x80_25);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0], ___x80_26);
                _mm256_store_ps(& ensemble35value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0], ___x80_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble36value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble36inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble36bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble37value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble37inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 32; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble38weights[x0][x1][x2][x3][0][0], & ensemble38weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 32; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x89_0 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0]);
                __m256 ___x89_1 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0]);
                __m256 ___x89_2 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0]);
                __m256 ___x89_3 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0]);
                __m256 ___x89_4 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0]);
                __m256 ___x89_5 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0]);
                __m256 ___x89_6 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0]);
                __m256 ___x89_7 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0]);
                __m256 ___x89_8 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0]);
                __m256 ___x89_9 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0]);
                __m256 ___x89_10 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0]);
                __m256 ___x89_11 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0]);
                __m256 ___x89_12 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0]);
                __m256 ___x89_13 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0]);
                __m256 ___x89_14 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][0]);
                __m256 ___x89_15 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][0]);
                __m256 ___x89_16 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][0]);
                __m256 ___x89_17 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][0]);
                __m256 ___x89_18 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][0]);
                __m256 ___x89_19 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][0]);
                __m256 ___x89_20 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][0]);
                __m256 ___x89_21 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][0]);
                __m256 ___x89_22 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][0]);
                __m256 ___x89_23 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][0]);
                __m256 ___x89_24 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][0]);
                __m256 ___x89_25 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][0]);
                __m256 ___x89_26 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][0]);
                __m256 ___x89_27 = _mm256_load_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x87_0 = _mm256_load_ps(& ensemble38weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x87_1 = _mm256_load_ps(& ensemble38weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x87_2 = _mm256_load_ps(& ensemble38weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x87_3 = _mm256_load_ps(& ensemble38weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x88_0_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x88_0_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x88_0_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x88_0_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x88_1_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x88_1_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x88_1_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x88_1_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x88_2_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x88_2_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x88_2_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x88_2_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x88_3_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x88_3_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x88_3_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x88_3_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x88_4_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x88_4_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x88_4_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x88_4_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x88_5_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x88_5_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x88_5_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x88_5_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x88_6_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x88_6_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x88_6_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x88_6_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x88_7_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x88_7_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x88_7_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x88_7_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x88_8_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x88_8_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x88_8_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x88_8_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x88_9_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x88_9_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x88_9_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x88_9_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x88_10_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x88_10_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x88_10_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x88_10_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x88_11_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x88_11_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x88_11_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x88_11_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x88_12_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x88_12_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x88_12_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x88_12_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x88_13_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x88_13_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x88_13_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x88_13_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x88_14_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x88_14_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x88_14_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x88_14_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x88_15_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x88_15_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x88_15_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x88_15_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x88_16_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x88_16_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x88_16_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x88_16_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x88_17_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x88_17_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x88_17_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x88_17_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x88_18_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x88_18_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x88_18_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x88_18_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x88_19_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x88_19_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x88_19_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x88_19_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x88_20_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x88_20_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x88_20_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x88_20_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x88_21_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x88_21_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x88_21_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x88_21_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x88_22_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x88_22_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x88_22_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x88_22_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x88_23_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x88_23_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x88_23_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x88_23_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x88_24_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x88_24_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x88_24_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x88_24_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x88_25_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x88_25_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x88_25_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x88_25_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x88_26_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x88_26_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x88_26_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x88_26_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x88_27_0 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x88_27_1 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x88_27_2 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x88_27_3 = _mm256_broadcast_ss(& ensemble38inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            ___x89_0 = _mm256_fmadd_ps(___x88_0_0, ___x87_0, ___x89_0);
                            ___x89_0 = _mm256_fmadd_ps(___x88_0_1, ___x87_1, ___x89_0);
                            ___x89_0 = _mm256_fmadd_ps(___x88_0_2, ___x87_2, ___x89_0);
                            ___x89_0 = _mm256_fmadd_ps(___x88_0_3, ___x87_3, ___x89_0);
                            ___x89_1 = _mm256_fmadd_ps(___x88_1_0, ___x87_0, ___x89_1);
                            ___x89_1 = _mm256_fmadd_ps(___x88_1_1, ___x87_1, ___x89_1);
                            ___x89_1 = _mm256_fmadd_ps(___x88_1_2, ___x87_2, ___x89_1);
                            ___x89_1 = _mm256_fmadd_ps(___x88_1_3, ___x87_3, ___x89_1);
                            ___x89_2 = _mm256_fmadd_ps(___x88_2_0, ___x87_0, ___x89_2);
                            ___x89_2 = _mm256_fmadd_ps(___x88_2_1, ___x87_1, ___x89_2);
                            ___x89_2 = _mm256_fmadd_ps(___x88_2_2, ___x87_2, ___x89_2);
                            ___x89_2 = _mm256_fmadd_ps(___x88_2_3, ___x87_3, ___x89_2);
                            ___x89_3 = _mm256_fmadd_ps(___x88_3_0, ___x87_0, ___x89_3);
                            ___x89_3 = _mm256_fmadd_ps(___x88_3_1, ___x87_1, ___x89_3);
                            ___x89_3 = _mm256_fmadd_ps(___x88_3_2, ___x87_2, ___x89_3);
                            ___x89_3 = _mm256_fmadd_ps(___x88_3_3, ___x87_3, ___x89_3);
                            ___x89_4 = _mm256_fmadd_ps(___x88_4_0, ___x87_0, ___x89_4);
                            ___x89_4 = _mm256_fmadd_ps(___x88_4_1, ___x87_1, ___x89_4);
                            ___x89_4 = _mm256_fmadd_ps(___x88_4_2, ___x87_2, ___x89_4);
                            ___x89_4 = _mm256_fmadd_ps(___x88_4_3, ___x87_3, ___x89_4);
                            ___x89_5 = _mm256_fmadd_ps(___x88_5_0, ___x87_0, ___x89_5);
                            ___x89_5 = _mm256_fmadd_ps(___x88_5_1, ___x87_1, ___x89_5);
                            ___x89_5 = _mm256_fmadd_ps(___x88_5_2, ___x87_2, ___x89_5);
                            ___x89_5 = _mm256_fmadd_ps(___x88_5_3, ___x87_3, ___x89_5);
                            ___x89_6 = _mm256_fmadd_ps(___x88_6_0, ___x87_0, ___x89_6);
                            ___x89_6 = _mm256_fmadd_ps(___x88_6_1, ___x87_1, ___x89_6);
                            ___x89_6 = _mm256_fmadd_ps(___x88_6_2, ___x87_2, ___x89_6);
                            ___x89_6 = _mm256_fmadd_ps(___x88_6_3, ___x87_3, ___x89_6);
                            ___x89_7 = _mm256_fmadd_ps(___x88_7_0, ___x87_0, ___x89_7);
                            ___x89_7 = _mm256_fmadd_ps(___x88_7_1, ___x87_1, ___x89_7);
                            ___x89_7 = _mm256_fmadd_ps(___x88_7_2, ___x87_2, ___x89_7);
                            ___x89_7 = _mm256_fmadd_ps(___x88_7_3, ___x87_3, ___x89_7);
                            ___x89_8 = _mm256_fmadd_ps(___x88_8_0, ___x87_0, ___x89_8);
                            ___x89_8 = _mm256_fmadd_ps(___x88_8_1, ___x87_1, ___x89_8);
                            ___x89_8 = _mm256_fmadd_ps(___x88_8_2, ___x87_2, ___x89_8);
                            ___x89_8 = _mm256_fmadd_ps(___x88_8_3, ___x87_3, ___x89_8);
                            ___x89_9 = _mm256_fmadd_ps(___x88_9_0, ___x87_0, ___x89_9);
                            ___x89_9 = _mm256_fmadd_ps(___x88_9_1, ___x87_1, ___x89_9);
                            ___x89_9 = _mm256_fmadd_ps(___x88_9_2, ___x87_2, ___x89_9);
                            ___x89_9 = _mm256_fmadd_ps(___x88_9_3, ___x87_3, ___x89_9);
                            ___x89_10 = _mm256_fmadd_ps(___x88_10_0, ___x87_0, ___x89_10);
                            ___x89_10 = _mm256_fmadd_ps(___x88_10_1, ___x87_1, ___x89_10);
                            ___x89_10 = _mm256_fmadd_ps(___x88_10_2, ___x87_2, ___x89_10);
                            ___x89_10 = _mm256_fmadd_ps(___x88_10_3, ___x87_3, ___x89_10);
                            ___x89_11 = _mm256_fmadd_ps(___x88_11_0, ___x87_0, ___x89_11);
                            ___x89_11 = _mm256_fmadd_ps(___x88_11_1, ___x87_1, ___x89_11);
                            ___x89_11 = _mm256_fmadd_ps(___x88_11_2, ___x87_2, ___x89_11);
                            ___x89_11 = _mm256_fmadd_ps(___x88_11_3, ___x87_3, ___x89_11);
                            ___x89_12 = _mm256_fmadd_ps(___x88_12_0, ___x87_0, ___x89_12);
                            ___x89_12 = _mm256_fmadd_ps(___x88_12_1, ___x87_1, ___x89_12);
                            ___x89_12 = _mm256_fmadd_ps(___x88_12_2, ___x87_2, ___x89_12);
                            ___x89_12 = _mm256_fmadd_ps(___x88_12_3, ___x87_3, ___x89_12);
                            ___x89_13 = _mm256_fmadd_ps(___x88_13_0, ___x87_0, ___x89_13);
                            ___x89_13 = _mm256_fmadd_ps(___x88_13_1, ___x87_1, ___x89_13);
                            ___x89_13 = _mm256_fmadd_ps(___x88_13_2, ___x87_2, ___x89_13);
                            ___x89_13 = _mm256_fmadd_ps(___x88_13_3, ___x87_3, ___x89_13);
                            ___x89_14 = _mm256_fmadd_ps(___x88_14_0, ___x87_0, ___x89_14);
                            ___x89_14 = _mm256_fmadd_ps(___x88_14_1, ___x87_1, ___x89_14);
                            ___x89_14 = _mm256_fmadd_ps(___x88_14_2, ___x87_2, ___x89_14);
                            ___x89_14 = _mm256_fmadd_ps(___x88_14_3, ___x87_3, ___x89_14);
                            ___x89_15 = _mm256_fmadd_ps(___x88_15_0, ___x87_0, ___x89_15);
                            ___x89_15 = _mm256_fmadd_ps(___x88_15_1, ___x87_1, ___x89_15);
                            ___x89_15 = _mm256_fmadd_ps(___x88_15_2, ___x87_2, ___x89_15);
                            ___x89_15 = _mm256_fmadd_ps(___x88_15_3, ___x87_3, ___x89_15);
                            ___x89_16 = _mm256_fmadd_ps(___x88_16_0, ___x87_0, ___x89_16);
                            ___x89_16 = _mm256_fmadd_ps(___x88_16_1, ___x87_1, ___x89_16);
                            ___x89_16 = _mm256_fmadd_ps(___x88_16_2, ___x87_2, ___x89_16);
                            ___x89_16 = _mm256_fmadd_ps(___x88_16_3, ___x87_3, ___x89_16);
                            ___x89_17 = _mm256_fmadd_ps(___x88_17_0, ___x87_0, ___x89_17);
                            ___x89_17 = _mm256_fmadd_ps(___x88_17_1, ___x87_1, ___x89_17);
                            ___x89_17 = _mm256_fmadd_ps(___x88_17_2, ___x87_2, ___x89_17);
                            ___x89_17 = _mm256_fmadd_ps(___x88_17_3, ___x87_3, ___x89_17);
                            ___x89_18 = _mm256_fmadd_ps(___x88_18_0, ___x87_0, ___x89_18);
                            ___x89_18 = _mm256_fmadd_ps(___x88_18_1, ___x87_1, ___x89_18);
                            ___x89_18 = _mm256_fmadd_ps(___x88_18_2, ___x87_2, ___x89_18);
                            ___x89_18 = _mm256_fmadd_ps(___x88_18_3, ___x87_3, ___x89_18);
                            ___x89_19 = _mm256_fmadd_ps(___x88_19_0, ___x87_0, ___x89_19);
                            ___x89_19 = _mm256_fmadd_ps(___x88_19_1, ___x87_1, ___x89_19);
                            ___x89_19 = _mm256_fmadd_ps(___x88_19_2, ___x87_2, ___x89_19);
                            ___x89_19 = _mm256_fmadd_ps(___x88_19_3, ___x87_3, ___x89_19);
                            ___x89_20 = _mm256_fmadd_ps(___x88_20_0, ___x87_0, ___x89_20);
                            ___x89_20 = _mm256_fmadd_ps(___x88_20_1, ___x87_1, ___x89_20);
                            ___x89_20 = _mm256_fmadd_ps(___x88_20_2, ___x87_2, ___x89_20);
                            ___x89_20 = _mm256_fmadd_ps(___x88_20_3, ___x87_3, ___x89_20);
                            ___x89_21 = _mm256_fmadd_ps(___x88_21_0, ___x87_0, ___x89_21);
                            ___x89_21 = _mm256_fmadd_ps(___x88_21_1, ___x87_1, ___x89_21);
                            ___x89_21 = _mm256_fmadd_ps(___x88_21_2, ___x87_2, ___x89_21);
                            ___x89_21 = _mm256_fmadd_ps(___x88_21_3, ___x87_3, ___x89_21);
                            ___x89_22 = _mm256_fmadd_ps(___x88_22_0, ___x87_0, ___x89_22);
                            ___x89_22 = _mm256_fmadd_ps(___x88_22_1, ___x87_1, ___x89_22);
                            ___x89_22 = _mm256_fmadd_ps(___x88_22_2, ___x87_2, ___x89_22);
                            ___x89_22 = _mm256_fmadd_ps(___x88_22_3, ___x87_3, ___x89_22);
                            ___x89_23 = _mm256_fmadd_ps(___x88_23_0, ___x87_0, ___x89_23);
                            ___x89_23 = _mm256_fmadd_ps(___x88_23_1, ___x87_1, ___x89_23);
                            ___x89_23 = _mm256_fmadd_ps(___x88_23_2, ___x87_2, ___x89_23);
                            ___x89_23 = _mm256_fmadd_ps(___x88_23_3, ___x87_3, ___x89_23);
                            ___x89_24 = _mm256_fmadd_ps(___x88_24_0, ___x87_0, ___x89_24);
                            ___x89_24 = _mm256_fmadd_ps(___x88_24_1, ___x87_1, ___x89_24);
                            ___x89_24 = _mm256_fmadd_ps(___x88_24_2, ___x87_2, ___x89_24);
                            ___x89_24 = _mm256_fmadd_ps(___x88_24_3, ___x87_3, ___x89_24);
                            ___x89_25 = _mm256_fmadd_ps(___x88_25_0, ___x87_0, ___x89_25);
                            ___x89_25 = _mm256_fmadd_ps(___x88_25_1, ___x87_1, ___x89_25);
                            ___x89_25 = _mm256_fmadd_ps(___x88_25_2, ___x87_2, ___x89_25);
                            ___x89_25 = _mm256_fmadd_ps(___x88_25_3, ___x87_3, ___x89_25);
                            ___x89_26 = _mm256_fmadd_ps(___x88_26_0, ___x87_0, ___x89_26);
                            ___x89_26 = _mm256_fmadd_ps(___x88_26_1, ___x87_1, ___x89_26);
                            ___x89_26 = _mm256_fmadd_ps(___x88_26_2, ___x87_2, ___x89_26);
                            ___x89_26 = _mm256_fmadd_ps(___x88_26_3, ___x87_3, ___x89_26);
                            ___x89_27 = _mm256_fmadd_ps(___x88_27_0, ___x87_0, ___x89_27);
                            ___x89_27 = _mm256_fmadd_ps(___x88_27_1, ___x87_1, ___x89_27);
                            ___x89_27 = _mm256_fmadd_ps(___x88_27_2, ___x87_2, ___x89_27);
                            ___x89_27 = _mm256_fmadd_ps(___x88_27_3, ___x87_3, ___x89_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0], ___x89_0);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0], ___x89_1);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0], ___x89_2);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0], ___x89_3);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0], ___x89_4);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0], ___x89_5);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0], ___x89_6);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0], ___x89_7);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0], ___x89_8);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0], ___x89_9);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0], ___x89_10);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0], ___x89_11);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0], ___x89_12);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0], ___x89_13);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][0], ___x89_14);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][0], ___x89_15);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][0], ___x89_16);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][0], ___x89_17);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][0], ___x89_18);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][0], ___x89_19);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][0], ___x89_20);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][0], ___x89_21);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][0], ___x89_22);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][0], ___x89_23);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][0], ___x89_24);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][0], ___x89_25);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][0], ___x89_26);
                _mm256_store_ps(& ensemble38value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][0], ___x89_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble39value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble39inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] + ensemble39bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble40value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble40inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 24,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 16; x1 ++) {
        for (int x2 = 0; x2 < 3; x2 ++) {
            for (int x3 = 0; x3 < 3; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble41weights[x0][x1][x2][x3][0][0], & ensemble41weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,24 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 16; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x98_0 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x98_1 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x98_2 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x98_3 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x98_4 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x98_5 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x98_6 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x98_7 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x98_8 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x98_9 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x98_10 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x98_11 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x98_12 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x98_13 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                __m256 ___x98_14 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0]);
                __m256 ___x98_15 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0]);
                __m256 ___x98_16 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0]);
                __m256 ___x98_17 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0]);
                __m256 ___x98_18 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0]);
                __m256 ___x98_19 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0]);
                __m256 ___x98_20 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0]);
                __m256 ___x98_21 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0]);
                __m256 ___x98_22 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0]);
                __m256 ___x98_23 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0]);
                __m256 ___x98_24 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0]);
                __m256 ___x98_25 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0]);
                __m256 ___x98_26 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0]);
                __m256 ___x98_27 = _mm256_load_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0]);
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x96_0_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x96_0_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x96_0_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x96_0_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x96_1_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x96_1_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x96_1_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x96_1_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x96_2_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x96_2_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x96_2_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x96_2_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x96_3_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x96_3_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x96_3_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x96_3_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x96_4_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x96_4_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x96_4_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x96_4_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x96_5_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x96_5_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x96_5_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x96_5_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x96_6_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x96_6_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x96_6_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x96_6_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x96_7_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x96_7_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x96_7_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x96_7_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x96_8_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x96_8_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x96_8_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x96_8_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x96_9_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x96_9_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x96_9_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x96_9_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x96_10_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x96_10_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x96_10_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x96_10_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x96_11_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x96_11_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x96_11_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x96_11_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x96_12_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x96_12_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x96_12_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x96_12_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x96_13_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x96_13_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x96_13_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x96_13_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x96_14_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x96_14_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x96_14_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x96_14_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x96_15_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x96_15_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x96_15_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x96_15_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x96_16_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x96_16_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x96_16_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x96_16_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x96_17_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x96_17_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x96_17_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x96_17_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x96_18_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x96_18_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x96_18_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x96_18_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x96_19_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x96_19_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x96_19_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x96_19_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x96_20_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x96_20_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x96_20_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x96_20_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x96_21_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x96_21_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x96_21_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x96_21_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x96_22_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x96_22_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x96_22_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x96_22_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x96_23_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x96_23_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x96_23_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x96_23_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x96_24_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x96_24_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x96_24_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x96_24_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x96_25_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x96_25_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x96_25_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x96_25_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x96_26_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x96_26_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x96_26_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x96_26_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x96_27_0 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x96_27_1 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x96_27_2 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x96_27_3 = _mm256_broadcast_ss(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            __m256 ___x97_0 = _mm256_load_ps(& ensemble41weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x97_1 = _mm256_load_ps(& ensemble41weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x97_2 = _mm256_load_ps(& ensemble41weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x97_3 = _mm256_load_ps(& ensemble41weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x98_0 = _mm256_fmadd_ps(___x96_0_0, ___x97_0, ___x98_0);
                            ___x98_0 = _mm256_fmadd_ps(___x96_0_1, ___x97_1, ___x98_0);
                            ___x98_0 = _mm256_fmadd_ps(___x96_0_2, ___x97_2, ___x98_0);
                            ___x98_0 = _mm256_fmadd_ps(___x96_0_3, ___x97_3, ___x98_0);
                            ___x98_1 = _mm256_fmadd_ps(___x96_1_0, ___x97_0, ___x98_1);
                            ___x98_1 = _mm256_fmadd_ps(___x96_1_1, ___x97_1, ___x98_1);
                            ___x98_1 = _mm256_fmadd_ps(___x96_1_2, ___x97_2, ___x98_1);
                            ___x98_1 = _mm256_fmadd_ps(___x96_1_3, ___x97_3, ___x98_1);
                            ___x98_2 = _mm256_fmadd_ps(___x96_2_0, ___x97_0, ___x98_2);
                            ___x98_2 = _mm256_fmadd_ps(___x96_2_1, ___x97_1, ___x98_2);
                            ___x98_2 = _mm256_fmadd_ps(___x96_2_2, ___x97_2, ___x98_2);
                            ___x98_2 = _mm256_fmadd_ps(___x96_2_3, ___x97_3, ___x98_2);
                            ___x98_3 = _mm256_fmadd_ps(___x96_3_0, ___x97_0, ___x98_3);
                            ___x98_3 = _mm256_fmadd_ps(___x96_3_1, ___x97_1, ___x98_3);
                            ___x98_3 = _mm256_fmadd_ps(___x96_3_2, ___x97_2, ___x98_3);
                            ___x98_3 = _mm256_fmadd_ps(___x96_3_3, ___x97_3, ___x98_3);
                            ___x98_4 = _mm256_fmadd_ps(___x96_4_0, ___x97_0, ___x98_4);
                            ___x98_4 = _mm256_fmadd_ps(___x96_4_1, ___x97_1, ___x98_4);
                            ___x98_4 = _mm256_fmadd_ps(___x96_4_2, ___x97_2, ___x98_4);
                            ___x98_4 = _mm256_fmadd_ps(___x96_4_3, ___x97_3, ___x98_4);
                            ___x98_5 = _mm256_fmadd_ps(___x96_5_0, ___x97_0, ___x98_5);
                            ___x98_5 = _mm256_fmadd_ps(___x96_5_1, ___x97_1, ___x98_5);
                            ___x98_5 = _mm256_fmadd_ps(___x96_5_2, ___x97_2, ___x98_5);
                            ___x98_5 = _mm256_fmadd_ps(___x96_5_3, ___x97_3, ___x98_5);
                            ___x98_6 = _mm256_fmadd_ps(___x96_6_0, ___x97_0, ___x98_6);
                            ___x98_6 = _mm256_fmadd_ps(___x96_6_1, ___x97_1, ___x98_6);
                            ___x98_6 = _mm256_fmadd_ps(___x96_6_2, ___x97_2, ___x98_6);
                            ___x98_6 = _mm256_fmadd_ps(___x96_6_3, ___x97_3, ___x98_6);
                            ___x98_7 = _mm256_fmadd_ps(___x96_7_0, ___x97_0, ___x98_7);
                            ___x98_7 = _mm256_fmadd_ps(___x96_7_1, ___x97_1, ___x98_7);
                            ___x98_7 = _mm256_fmadd_ps(___x96_7_2, ___x97_2, ___x98_7);
                            ___x98_7 = _mm256_fmadd_ps(___x96_7_3, ___x97_3, ___x98_7);
                            ___x98_8 = _mm256_fmadd_ps(___x96_8_0, ___x97_0, ___x98_8);
                            ___x98_8 = _mm256_fmadd_ps(___x96_8_1, ___x97_1, ___x98_8);
                            ___x98_8 = _mm256_fmadd_ps(___x96_8_2, ___x97_2, ___x98_8);
                            ___x98_8 = _mm256_fmadd_ps(___x96_8_3, ___x97_3, ___x98_8);
                            ___x98_9 = _mm256_fmadd_ps(___x96_9_0, ___x97_0, ___x98_9);
                            ___x98_9 = _mm256_fmadd_ps(___x96_9_1, ___x97_1, ___x98_9);
                            ___x98_9 = _mm256_fmadd_ps(___x96_9_2, ___x97_2, ___x98_9);
                            ___x98_9 = _mm256_fmadd_ps(___x96_9_3, ___x97_3, ___x98_9);
                            ___x98_10 = _mm256_fmadd_ps(___x96_10_0, ___x97_0, ___x98_10);
                            ___x98_10 = _mm256_fmadd_ps(___x96_10_1, ___x97_1, ___x98_10);
                            ___x98_10 = _mm256_fmadd_ps(___x96_10_2, ___x97_2, ___x98_10);
                            ___x98_10 = _mm256_fmadd_ps(___x96_10_3, ___x97_3, ___x98_10);
                            ___x98_11 = _mm256_fmadd_ps(___x96_11_0, ___x97_0, ___x98_11);
                            ___x98_11 = _mm256_fmadd_ps(___x96_11_1, ___x97_1, ___x98_11);
                            ___x98_11 = _mm256_fmadd_ps(___x96_11_2, ___x97_2, ___x98_11);
                            ___x98_11 = _mm256_fmadd_ps(___x96_11_3, ___x97_3, ___x98_11);
                            ___x98_12 = _mm256_fmadd_ps(___x96_12_0, ___x97_0, ___x98_12);
                            ___x98_12 = _mm256_fmadd_ps(___x96_12_1, ___x97_1, ___x98_12);
                            ___x98_12 = _mm256_fmadd_ps(___x96_12_2, ___x97_2, ___x98_12);
                            ___x98_12 = _mm256_fmadd_ps(___x96_12_3, ___x97_3, ___x98_12);
                            ___x98_13 = _mm256_fmadd_ps(___x96_13_0, ___x97_0, ___x98_13);
                            ___x98_13 = _mm256_fmadd_ps(___x96_13_1, ___x97_1, ___x98_13);
                            ___x98_13 = _mm256_fmadd_ps(___x96_13_2, ___x97_2, ___x98_13);
                            ___x98_13 = _mm256_fmadd_ps(___x96_13_3, ___x97_3, ___x98_13);
                            ___x98_14 = _mm256_fmadd_ps(___x96_14_0, ___x97_0, ___x98_14);
                            ___x98_14 = _mm256_fmadd_ps(___x96_14_1, ___x97_1, ___x98_14);
                            ___x98_14 = _mm256_fmadd_ps(___x96_14_2, ___x97_2, ___x98_14);
                            ___x98_14 = _mm256_fmadd_ps(___x96_14_3, ___x97_3, ___x98_14);
                            ___x98_15 = _mm256_fmadd_ps(___x96_15_0, ___x97_0, ___x98_15);
                            ___x98_15 = _mm256_fmadd_ps(___x96_15_1, ___x97_1, ___x98_15);
                            ___x98_15 = _mm256_fmadd_ps(___x96_15_2, ___x97_2, ___x98_15);
                            ___x98_15 = _mm256_fmadd_ps(___x96_15_3, ___x97_3, ___x98_15);
                            ___x98_16 = _mm256_fmadd_ps(___x96_16_0, ___x97_0, ___x98_16);
                            ___x98_16 = _mm256_fmadd_ps(___x96_16_1, ___x97_1, ___x98_16);
                            ___x98_16 = _mm256_fmadd_ps(___x96_16_2, ___x97_2, ___x98_16);
                            ___x98_16 = _mm256_fmadd_ps(___x96_16_3, ___x97_3, ___x98_16);
                            ___x98_17 = _mm256_fmadd_ps(___x96_17_0, ___x97_0, ___x98_17);
                            ___x98_17 = _mm256_fmadd_ps(___x96_17_1, ___x97_1, ___x98_17);
                            ___x98_17 = _mm256_fmadd_ps(___x96_17_2, ___x97_2, ___x98_17);
                            ___x98_17 = _mm256_fmadd_ps(___x96_17_3, ___x97_3, ___x98_17);
                            ___x98_18 = _mm256_fmadd_ps(___x96_18_0, ___x97_0, ___x98_18);
                            ___x98_18 = _mm256_fmadd_ps(___x96_18_1, ___x97_1, ___x98_18);
                            ___x98_18 = _mm256_fmadd_ps(___x96_18_2, ___x97_2, ___x98_18);
                            ___x98_18 = _mm256_fmadd_ps(___x96_18_3, ___x97_3, ___x98_18);
                            ___x98_19 = _mm256_fmadd_ps(___x96_19_0, ___x97_0, ___x98_19);
                            ___x98_19 = _mm256_fmadd_ps(___x96_19_1, ___x97_1, ___x98_19);
                            ___x98_19 = _mm256_fmadd_ps(___x96_19_2, ___x97_2, ___x98_19);
                            ___x98_19 = _mm256_fmadd_ps(___x96_19_3, ___x97_3, ___x98_19);
                            ___x98_20 = _mm256_fmadd_ps(___x96_20_0, ___x97_0, ___x98_20);
                            ___x98_20 = _mm256_fmadd_ps(___x96_20_1, ___x97_1, ___x98_20);
                            ___x98_20 = _mm256_fmadd_ps(___x96_20_2, ___x97_2, ___x98_20);
                            ___x98_20 = _mm256_fmadd_ps(___x96_20_3, ___x97_3, ___x98_20);
                            ___x98_21 = _mm256_fmadd_ps(___x96_21_0, ___x97_0, ___x98_21);
                            ___x98_21 = _mm256_fmadd_ps(___x96_21_1, ___x97_1, ___x98_21);
                            ___x98_21 = _mm256_fmadd_ps(___x96_21_2, ___x97_2, ___x98_21);
                            ___x98_21 = _mm256_fmadd_ps(___x96_21_3, ___x97_3, ___x98_21);
                            ___x98_22 = _mm256_fmadd_ps(___x96_22_0, ___x97_0, ___x98_22);
                            ___x98_22 = _mm256_fmadd_ps(___x96_22_1, ___x97_1, ___x98_22);
                            ___x98_22 = _mm256_fmadd_ps(___x96_22_2, ___x97_2, ___x98_22);
                            ___x98_22 = _mm256_fmadd_ps(___x96_22_3, ___x97_3, ___x98_22);
                            ___x98_23 = _mm256_fmadd_ps(___x96_23_0, ___x97_0, ___x98_23);
                            ___x98_23 = _mm256_fmadd_ps(___x96_23_1, ___x97_1, ___x98_23);
                            ___x98_23 = _mm256_fmadd_ps(___x96_23_2, ___x97_2, ___x98_23);
                            ___x98_23 = _mm256_fmadd_ps(___x96_23_3, ___x97_3, ___x98_23);
                            ___x98_24 = _mm256_fmadd_ps(___x96_24_0, ___x97_0, ___x98_24);
                            ___x98_24 = _mm256_fmadd_ps(___x96_24_1, ___x97_1, ___x98_24);
                            ___x98_24 = _mm256_fmadd_ps(___x96_24_2, ___x97_2, ___x98_24);
                            ___x98_24 = _mm256_fmadd_ps(___x96_24_3, ___x97_3, ___x98_24);
                            ___x98_25 = _mm256_fmadd_ps(___x96_25_0, ___x97_0, ___x98_25);
                            ___x98_25 = _mm256_fmadd_ps(___x96_25_1, ___x97_1, ___x98_25);
                            ___x98_25 = _mm256_fmadd_ps(___x96_25_2, ___x97_2, ___x98_25);
                            ___x98_25 = _mm256_fmadd_ps(___x96_25_3, ___x97_3, ___x98_25);
                            ___x98_26 = _mm256_fmadd_ps(___x96_26_0, ___x97_0, ___x98_26);
                            ___x98_26 = _mm256_fmadd_ps(___x96_26_1, ___x97_1, ___x98_26);
                            ___x98_26 = _mm256_fmadd_ps(___x96_26_2, ___x97_2, ___x98_26);
                            ___x98_26 = _mm256_fmadd_ps(___x96_26_3, ___x97_3, ___x98_26);
                            ___x98_27 = _mm256_fmadd_ps(___x96_27_0, ___x97_0, ___x98_27);
                            ___x98_27 = _mm256_fmadd_ps(___x96_27_1, ___x97_1, ___x98_27);
                            ___x98_27 = _mm256_fmadd_ps(___x96_27_2, ___x97_2, ___x98_27);
                            ___x98_27 = _mm256_fmadd_ps(___x96_27_3, ___x97_3, ___x98_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x98_0);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x98_1);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x98_2);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x98_3);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x98_4);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x98_5);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x98_6);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x98_7);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x98_8);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x98_9);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x98_10);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x98_11);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x98_12);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x98_13);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0], ___x98_14);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0], ___x98_15);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0], ___x98_16);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0], ___x98_17);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0], ___x98_18);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0], ___x98_19);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0], ___x98_20);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0], ___x98_21);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0], ___x98_22);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0], ___x98_23);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0], ___x98_24);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0], ___x98_25);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0], ___x98_26);
                _mm256_store_ps(& ensemble41value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0], ___x98_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble42value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble42inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble42bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble43value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble43inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 4,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 32; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble44weights[x0][x1][x2][x3][0][0], & ensemble44weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,4 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 32; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x105_0 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0]);
                __m256 ___x105_1 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0]);
                __m256 ___x105_2 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0]);
                __m256 ___x105_3 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0]);
                __m256 ___x105_4 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0]);
                __m256 ___x105_5 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0]);
                __m256 ___x105_6 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0]);
                __m256 ___x105_7 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0]);
                __m256 ___x105_8 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0]);
                __m256 ___x105_9 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0]);
                __m256 ___x105_10 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0]);
                __m256 ___x105_11 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0]);
                __m256 ___x105_12 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0]);
                __m256 ___x105_13 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0]);
                __m256 ___x105_14 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 14 + 2)][0]);
                __m256 ___x105_15 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 15 + 2)][0]);
                __m256 ___x105_16 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 16 + 2)][0]);
                __m256 ___x105_17 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 17 + 2)][0]);
                __m256 ___x105_18 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 18 + 2)][0]);
                __m256 ___x105_19 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 19 + 2)][0]);
                __m256 ___x105_20 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 20 + 2)][0]);
                __m256 ___x105_21 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 21 + 2)][0]);
                __m256 ___x105_22 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 22 + 2)][0]);
                __m256 ___x105_23 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 23 + 2)][0]);
                __m256 ___x105_24 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 24 + 2)][0]);
                __m256 ___x105_25 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 25 + 2)][0]);
                __m256 ___x105_26 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 26 + 2)][0]);
                __m256 ___x105_27 = _mm256_load_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 27 + 2)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x106_0 = _mm256_load_ps(& ensemble44weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x106_1 = _mm256_load_ps(& ensemble44weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x106_2 = _mm256_load_ps(& ensemble44weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x106_3 = _mm256_load_ps(& ensemble44weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x107_0_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x107_0_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x107_0_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x107_0_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x107_1_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x107_1_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x107_1_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x107_1_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x107_2_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x107_2_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x107_2_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x107_2_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x107_3_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x107_3_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x107_3_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x107_3_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x107_4_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x107_4_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x107_4_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x107_4_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x107_5_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x107_5_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x107_5_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x107_5_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x107_6_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x107_6_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x107_6_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x107_6_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x107_7_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x107_7_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x107_7_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x107_7_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x107_8_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x107_8_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x107_8_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x107_8_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x107_9_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x107_9_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x107_9_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x107_9_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x107_10_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x107_10_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x107_10_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x107_10_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x107_11_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x107_11_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x107_11_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x107_11_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x107_12_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x107_12_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x107_12_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x107_12_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x107_13_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x107_13_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x107_13_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x107_13_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x107_14_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x107_14_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x107_14_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x107_14_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x107_15_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x107_15_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x107_15_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x107_15_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x107_16_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x107_16_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x107_16_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x107_16_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x107_17_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x107_17_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x107_17_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x107_17_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x107_18_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x107_18_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x107_18_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x107_18_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x107_19_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x107_19_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x107_19_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x107_19_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x107_20_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x107_20_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x107_20_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x107_20_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x107_21_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x107_21_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x107_21_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x107_21_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x107_22_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x107_22_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x107_22_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x107_22_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x107_23_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x107_23_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x107_23_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x107_23_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x107_24_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x107_24_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x107_24_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x107_24_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x107_25_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x107_25_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x107_25_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x107_25_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x107_26_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x107_26_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x107_26_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x107_26_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x107_27_0 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x107_27_1 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x107_27_2 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x107_27_3 = _mm256_broadcast_ss(& ensemble44inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            ___x105_0 = _mm256_fmadd_ps(___x107_0_0, ___x106_0, ___x105_0);
                            ___x105_0 = _mm256_fmadd_ps(___x107_0_1, ___x106_1, ___x105_0);
                            ___x105_0 = _mm256_fmadd_ps(___x107_0_2, ___x106_2, ___x105_0);
                            ___x105_0 = _mm256_fmadd_ps(___x107_0_3, ___x106_3, ___x105_0);
                            ___x105_1 = _mm256_fmadd_ps(___x107_1_0, ___x106_0, ___x105_1);
                            ___x105_1 = _mm256_fmadd_ps(___x107_1_1, ___x106_1, ___x105_1);
                            ___x105_1 = _mm256_fmadd_ps(___x107_1_2, ___x106_2, ___x105_1);
                            ___x105_1 = _mm256_fmadd_ps(___x107_1_3, ___x106_3, ___x105_1);
                            ___x105_2 = _mm256_fmadd_ps(___x107_2_0, ___x106_0, ___x105_2);
                            ___x105_2 = _mm256_fmadd_ps(___x107_2_1, ___x106_1, ___x105_2);
                            ___x105_2 = _mm256_fmadd_ps(___x107_2_2, ___x106_2, ___x105_2);
                            ___x105_2 = _mm256_fmadd_ps(___x107_2_3, ___x106_3, ___x105_2);
                            ___x105_3 = _mm256_fmadd_ps(___x107_3_0, ___x106_0, ___x105_3);
                            ___x105_3 = _mm256_fmadd_ps(___x107_3_1, ___x106_1, ___x105_3);
                            ___x105_3 = _mm256_fmadd_ps(___x107_3_2, ___x106_2, ___x105_3);
                            ___x105_3 = _mm256_fmadd_ps(___x107_3_3, ___x106_3, ___x105_3);
                            ___x105_4 = _mm256_fmadd_ps(___x107_4_0, ___x106_0, ___x105_4);
                            ___x105_4 = _mm256_fmadd_ps(___x107_4_1, ___x106_1, ___x105_4);
                            ___x105_4 = _mm256_fmadd_ps(___x107_4_2, ___x106_2, ___x105_4);
                            ___x105_4 = _mm256_fmadd_ps(___x107_4_3, ___x106_3, ___x105_4);
                            ___x105_5 = _mm256_fmadd_ps(___x107_5_0, ___x106_0, ___x105_5);
                            ___x105_5 = _mm256_fmadd_ps(___x107_5_1, ___x106_1, ___x105_5);
                            ___x105_5 = _mm256_fmadd_ps(___x107_5_2, ___x106_2, ___x105_5);
                            ___x105_5 = _mm256_fmadd_ps(___x107_5_3, ___x106_3, ___x105_5);
                            ___x105_6 = _mm256_fmadd_ps(___x107_6_0, ___x106_0, ___x105_6);
                            ___x105_6 = _mm256_fmadd_ps(___x107_6_1, ___x106_1, ___x105_6);
                            ___x105_6 = _mm256_fmadd_ps(___x107_6_2, ___x106_2, ___x105_6);
                            ___x105_6 = _mm256_fmadd_ps(___x107_6_3, ___x106_3, ___x105_6);
                            ___x105_7 = _mm256_fmadd_ps(___x107_7_0, ___x106_0, ___x105_7);
                            ___x105_7 = _mm256_fmadd_ps(___x107_7_1, ___x106_1, ___x105_7);
                            ___x105_7 = _mm256_fmadd_ps(___x107_7_2, ___x106_2, ___x105_7);
                            ___x105_7 = _mm256_fmadd_ps(___x107_7_3, ___x106_3, ___x105_7);
                            ___x105_8 = _mm256_fmadd_ps(___x107_8_0, ___x106_0, ___x105_8);
                            ___x105_8 = _mm256_fmadd_ps(___x107_8_1, ___x106_1, ___x105_8);
                            ___x105_8 = _mm256_fmadd_ps(___x107_8_2, ___x106_2, ___x105_8);
                            ___x105_8 = _mm256_fmadd_ps(___x107_8_3, ___x106_3, ___x105_8);
                            ___x105_9 = _mm256_fmadd_ps(___x107_9_0, ___x106_0, ___x105_9);
                            ___x105_9 = _mm256_fmadd_ps(___x107_9_1, ___x106_1, ___x105_9);
                            ___x105_9 = _mm256_fmadd_ps(___x107_9_2, ___x106_2, ___x105_9);
                            ___x105_9 = _mm256_fmadd_ps(___x107_9_3, ___x106_3, ___x105_9);
                            ___x105_10 = _mm256_fmadd_ps(___x107_10_0, ___x106_0, ___x105_10);
                            ___x105_10 = _mm256_fmadd_ps(___x107_10_1, ___x106_1, ___x105_10);
                            ___x105_10 = _mm256_fmadd_ps(___x107_10_2, ___x106_2, ___x105_10);
                            ___x105_10 = _mm256_fmadd_ps(___x107_10_3, ___x106_3, ___x105_10);
                            ___x105_11 = _mm256_fmadd_ps(___x107_11_0, ___x106_0, ___x105_11);
                            ___x105_11 = _mm256_fmadd_ps(___x107_11_1, ___x106_1, ___x105_11);
                            ___x105_11 = _mm256_fmadd_ps(___x107_11_2, ___x106_2, ___x105_11);
                            ___x105_11 = _mm256_fmadd_ps(___x107_11_3, ___x106_3, ___x105_11);
                            ___x105_12 = _mm256_fmadd_ps(___x107_12_0, ___x106_0, ___x105_12);
                            ___x105_12 = _mm256_fmadd_ps(___x107_12_1, ___x106_1, ___x105_12);
                            ___x105_12 = _mm256_fmadd_ps(___x107_12_2, ___x106_2, ___x105_12);
                            ___x105_12 = _mm256_fmadd_ps(___x107_12_3, ___x106_3, ___x105_12);
                            ___x105_13 = _mm256_fmadd_ps(___x107_13_0, ___x106_0, ___x105_13);
                            ___x105_13 = _mm256_fmadd_ps(___x107_13_1, ___x106_1, ___x105_13);
                            ___x105_13 = _mm256_fmadd_ps(___x107_13_2, ___x106_2, ___x105_13);
                            ___x105_13 = _mm256_fmadd_ps(___x107_13_3, ___x106_3, ___x105_13);
                            ___x105_14 = _mm256_fmadd_ps(___x107_14_0, ___x106_0, ___x105_14);
                            ___x105_14 = _mm256_fmadd_ps(___x107_14_1, ___x106_1, ___x105_14);
                            ___x105_14 = _mm256_fmadd_ps(___x107_14_2, ___x106_2, ___x105_14);
                            ___x105_14 = _mm256_fmadd_ps(___x107_14_3, ___x106_3, ___x105_14);
                            ___x105_15 = _mm256_fmadd_ps(___x107_15_0, ___x106_0, ___x105_15);
                            ___x105_15 = _mm256_fmadd_ps(___x107_15_1, ___x106_1, ___x105_15);
                            ___x105_15 = _mm256_fmadd_ps(___x107_15_2, ___x106_2, ___x105_15);
                            ___x105_15 = _mm256_fmadd_ps(___x107_15_3, ___x106_3, ___x105_15);
                            ___x105_16 = _mm256_fmadd_ps(___x107_16_0, ___x106_0, ___x105_16);
                            ___x105_16 = _mm256_fmadd_ps(___x107_16_1, ___x106_1, ___x105_16);
                            ___x105_16 = _mm256_fmadd_ps(___x107_16_2, ___x106_2, ___x105_16);
                            ___x105_16 = _mm256_fmadd_ps(___x107_16_3, ___x106_3, ___x105_16);
                            ___x105_17 = _mm256_fmadd_ps(___x107_17_0, ___x106_0, ___x105_17);
                            ___x105_17 = _mm256_fmadd_ps(___x107_17_1, ___x106_1, ___x105_17);
                            ___x105_17 = _mm256_fmadd_ps(___x107_17_2, ___x106_2, ___x105_17);
                            ___x105_17 = _mm256_fmadd_ps(___x107_17_3, ___x106_3, ___x105_17);
                            ___x105_18 = _mm256_fmadd_ps(___x107_18_0, ___x106_0, ___x105_18);
                            ___x105_18 = _mm256_fmadd_ps(___x107_18_1, ___x106_1, ___x105_18);
                            ___x105_18 = _mm256_fmadd_ps(___x107_18_2, ___x106_2, ___x105_18);
                            ___x105_18 = _mm256_fmadd_ps(___x107_18_3, ___x106_3, ___x105_18);
                            ___x105_19 = _mm256_fmadd_ps(___x107_19_0, ___x106_0, ___x105_19);
                            ___x105_19 = _mm256_fmadd_ps(___x107_19_1, ___x106_1, ___x105_19);
                            ___x105_19 = _mm256_fmadd_ps(___x107_19_2, ___x106_2, ___x105_19);
                            ___x105_19 = _mm256_fmadd_ps(___x107_19_3, ___x106_3, ___x105_19);
                            ___x105_20 = _mm256_fmadd_ps(___x107_20_0, ___x106_0, ___x105_20);
                            ___x105_20 = _mm256_fmadd_ps(___x107_20_1, ___x106_1, ___x105_20);
                            ___x105_20 = _mm256_fmadd_ps(___x107_20_2, ___x106_2, ___x105_20);
                            ___x105_20 = _mm256_fmadd_ps(___x107_20_3, ___x106_3, ___x105_20);
                            ___x105_21 = _mm256_fmadd_ps(___x107_21_0, ___x106_0, ___x105_21);
                            ___x105_21 = _mm256_fmadd_ps(___x107_21_1, ___x106_1, ___x105_21);
                            ___x105_21 = _mm256_fmadd_ps(___x107_21_2, ___x106_2, ___x105_21);
                            ___x105_21 = _mm256_fmadd_ps(___x107_21_3, ___x106_3, ___x105_21);
                            ___x105_22 = _mm256_fmadd_ps(___x107_22_0, ___x106_0, ___x105_22);
                            ___x105_22 = _mm256_fmadd_ps(___x107_22_1, ___x106_1, ___x105_22);
                            ___x105_22 = _mm256_fmadd_ps(___x107_22_2, ___x106_2, ___x105_22);
                            ___x105_22 = _mm256_fmadd_ps(___x107_22_3, ___x106_3, ___x105_22);
                            ___x105_23 = _mm256_fmadd_ps(___x107_23_0, ___x106_0, ___x105_23);
                            ___x105_23 = _mm256_fmadd_ps(___x107_23_1, ___x106_1, ___x105_23);
                            ___x105_23 = _mm256_fmadd_ps(___x107_23_2, ___x106_2, ___x105_23);
                            ___x105_23 = _mm256_fmadd_ps(___x107_23_3, ___x106_3, ___x105_23);
                            ___x105_24 = _mm256_fmadd_ps(___x107_24_0, ___x106_0, ___x105_24);
                            ___x105_24 = _mm256_fmadd_ps(___x107_24_1, ___x106_1, ___x105_24);
                            ___x105_24 = _mm256_fmadd_ps(___x107_24_2, ___x106_2, ___x105_24);
                            ___x105_24 = _mm256_fmadd_ps(___x107_24_3, ___x106_3, ___x105_24);
                            ___x105_25 = _mm256_fmadd_ps(___x107_25_0, ___x106_0, ___x105_25);
                            ___x105_25 = _mm256_fmadd_ps(___x107_25_1, ___x106_1, ___x105_25);
                            ___x105_25 = _mm256_fmadd_ps(___x107_25_2, ___x106_2, ___x105_25);
                            ___x105_25 = _mm256_fmadd_ps(___x107_25_3, ___x106_3, ___x105_25);
                            ___x105_26 = _mm256_fmadd_ps(___x107_26_0, ___x106_0, ___x105_26);
                            ___x105_26 = _mm256_fmadd_ps(___x107_26_1, ___x106_1, ___x105_26);
                            ___x105_26 = _mm256_fmadd_ps(___x107_26_2, ___x106_2, ___x105_26);
                            ___x105_26 = _mm256_fmadd_ps(___x107_26_3, ___x106_3, ___x105_26);
                            ___x105_27 = _mm256_fmadd_ps(___x107_27_0, ___x106_0, ___x105_27);
                            ___x105_27 = _mm256_fmadd_ps(___x107_27_1, ___x106_1, ___x105_27);
                            ___x105_27 = _mm256_fmadd_ps(___x107_27_2, ___x106_2, ___x105_27);
                            ___x105_27 = _mm256_fmadd_ps(___x107_27_3, ___x106_3, ___x105_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0], ___x105_0);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0], ___x105_1);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0], ___x105_2);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0], ___x105_3);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0], ___x105_4);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0], ___x105_5);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0], ___x105_6);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0], ___x105_7);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0], ___x105_8);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0], ___x105_9);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0], ___x105_10);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0], ___x105_11);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0], ___x105_12);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0], ___x105_13);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 14 + 2)][0], ___x105_14);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 15 + 2)][0], ___x105_15);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 16 + 2)][0], ___x105_16);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 17 + 2)][0], ___x105_17);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 18 + 2)][0], ___x105_18);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 19 + 2)][0], ___x105_19);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 20 + 2)][0], ___x105_20);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 21 + 2)][0], ___x105_21);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 22 + 2)][0], ___x105_22);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 23 + 2)][0], ___x105_23);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 24 + 2)][0], ___x105_24);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 25 + 2)][0], ___x105_25);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 26 + 2)][0], ___x105_26);
                _mm256_store_ps(& ensemble44value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 27 + 2)][0], ___x105_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble45value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble45inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] + ensemble45bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble46value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble46inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 12,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 4; x1 ++) {
        for (int x2 = 0; x2 < 5; x2 ++) {
            for (int x3 = 0; x3 < 5; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble47weights[x0][x1][x2][x3][0][0], & ensemble47weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,12 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 4; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x114_0 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x114_1 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x114_2 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x114_3 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x114_4 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x114_5 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x114_6 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x114_7 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x114_8 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x114_9 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x114_10 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x114_11 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x114_12 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x114_13 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                __m256 ___x114_14 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0]);
                __m256 ___x114_15 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0]);
                __m256 ___x114_16 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0]);
                __m256 ___x114_17 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0]);
                __m256 ___x114_18 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0]);
                __m256 ___x114_19 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0]);
                __m256 ___x114_20 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0]);
                __m256 ___x114_21 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0]);
                __m256 ___x114_22 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0]);
                __m256 ___x114_23 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0]);
                __m256 ___x114_24 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0]);
                __m256 ___x114_25 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0]);
                __m256 ___x114_26 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0]);
                __m256 ___x114_27 = _mm256_load_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0]);
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x115_0_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x115_0_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x115_0_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x115_0_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x115_1_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x115_1_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x115_1_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x115_1_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x115_2_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x115_2_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x115_2_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x115_2_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x115_3_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x115_3_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x115_3_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x115_3_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x115_4_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x115_4_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x115_4_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x115_4_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x115_5_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x115_5_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x115_5_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x115_5_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x115_6_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x115_6_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x115_6_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x115_6_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x115_7_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x115_7_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x115_7_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x115_7_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x115_8_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x115_8_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x115_8_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x115_8_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x115_9_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x115_9_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x115_9_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x115_9_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x115_10_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x115_10_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x115_10_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x115_10_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x115_11_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x115_11_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x115_11_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x115_11_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x115_12_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x115_12_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x115_12_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x115_12_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x115_13_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x115_13_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x115_13_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x115_13_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x115_14_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x115_14_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x115_14_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x115_14_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x115_15_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x115_15_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x115_15_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x115_15_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x115_16_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x115_16_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x115_16_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x115_16_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x115_17_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x115_17_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x115_17_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x115_17_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x115_18_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x115_18_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x115_18_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x115_18_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x115_19_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x115_19_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x115_19_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x115_19_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x115_20_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x115_20_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x115_20_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x115_20_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x115_21_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x115_21_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x115_21_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x115_21_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x115_22_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x115_22_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x115_22_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x115_22_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x115_23_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x115_23_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x115_23_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x115_23_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x115_24_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x115_24_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x115_24_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x115_24_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x115_25_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x115_25_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x115_25_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x115_25_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x115_26_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x115_26_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x115_26_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x115_26_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x115_27_0 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x115_27_1 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x115_27_2 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x115_27_3 = _mm256_broadcast_ss(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            __m256 ___x116_0 = _mm256_load_ps(& ensemble47weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x116_1 = _mm256_load_ps(& ensemble47weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x116_2 = _mm256_load_ps(& ensemble47weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x116_3 = _mm256_load_ps(& ensemble47weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x114_0 = _mm256_fmadd_ps(___x115_0_0, ___x116_0, ___x114_0);
                            ___x114_0 = _mm256_fmadd_ps(___x115_0_1, ___x116_1, ___x114_0);
                            ___x114_0 = _mm256_fmadd_ps(___x115_0_2, ___x116_2, ___x114_0);
                            ___x114_0 = _mm256_fmadd_ps(___x115_0_3, ___x116_3, ___x114_0);
                            ___x114_1 = _mm256_fmadd_ps(___x115_1_0, ___x116_0, ___x114_1);
                            ___x114_1 = _mm256_fmadd_ps(___x115_1_1, ___x116_1, ___x114_1);
                            ___x114_1 = _mm256_fmadd_ps(___x115_1_2, ___x116_2, ___x114_1);
                            ___x114_1 = _mm256_fmadd_ps(___x115_1_3, ___x116_3, ___x114_1);
                            ___x114_2 = _mm256_fmadd_ps(___x115_2_0, ___x116_0, ___x114_2);
                            ___x114_2 = _mm256_fmadd_ps(___x115_2_1, ___x116_1, ___x114_2);
                            ___x114_2 = _mm256_fmadd_ps(___x115_2_2, ___x116_2, ___x114_2);
                            ___x114_2 = _mm256_fmadd_ps(___x115_2_3, ___x116_3, ___x114_2);
                            ___x114_3 = _mm256_fmadd_ps(___x115_3_0, ___x116_0, ___x114_3);
                            ___x114_3 = _mm256_fmadd_ps(___x115_3_1, ___x116_1, ___x114_3);
                            ___x114_3 = _mm256_fmadd_ps(___x115_3_2, ___x116_2, ___x114_3);
                            ___x114_3 = _mm256_fmadd_ps(___x115_3_3, ___x116_3, ___x114_3);
                            ___x114_4 = _mm256_fmadd_ps(___x115_4_0, ___x116_0, ___x114_4);
                            ___x114_4 = _mm256_fmadd_ps(___x115_4_1, ___x116_1, ___x114_4);
                            ___x114_4 = _mm256_fmadd_ps(___x115_4_2, ___x116_2, ___x114_4);
                            ___x114_4 = _mm256_fmadd_ps(___x115_4_3, ___x116_3, ___x114_4);
                            ___x114_5 = _mm256_fmadd_ps(___x115_5_0, ___x116_0, ___x114_5);
                            ___x114_5 = _mm256_fmadd_ps(___x115_5_1, ___x116_1, ___x114_5);
                            ___x114_5 = _mm256_fmadd_ps(___x115_5_2, ___x116_2, ___x114_5);
                            ___x114_5 = _mm256_fmadd_ps(___x115_5_3, ___x116_3, ___x114_5);
                            ___x114_6 = _mm256_fmadd_ps(___x115_6_0, ___x116_0, ___x114_6);
                            ___x114_6 = _mm256_fmadd_ps(___x115_6_1, ___x116_1, ___x114_6);
                            ___x114_6 = _mm256_fmadd_ps(___x115_6_2, ___x116_2, ___x114_6);
                            ___x114_6 = _mm256_fmadd_ps(___x115_6_3, ___x116_3, ___x114_6);
                            ___x114_7 = _mm256_fmadd_ps(___x115_7_0, ___x116_0, ___x114_7);
                            ___x114_7 = _mm256_fmadd_ps(___x115_7_1, ___x116_1, ___x114_7);
                            ___x114_7 = _mm256_fmadd_ps(___x115_7_2, ___x116_2, ___x114_7);
                            ___x114_7 = _mm256_fmadd_ps(___x115_7_3, ___x116_3, ___x114_7);
                            ___x114_8 = _mm256_fmadd_ps(___x115_8_0, ___x116_0, ___x114_8);
                            ___x114_8 = _mm256_fmadd_ps(___x115_8_1, ___x116_1, ___x114_8);
                            ___x114_8 = _mm256_fmadd_ps(___x115_8_2, ___x116_2, ___x114_8);
                            ___x114_8 = _mm256_fmadd_ps(___x115_8_3, ___x116_3, ___x114_8);
                            ___x114_9 = _mm256_fmadd_ps(___x115_9_0, ___x116_0, ___x114_9);
                            ___x114_9 = _mm256_fmadd_ps(___x115_9_1, ___x116_1, ___x114_9);
                            ___x114_9 = _mm256_fmadd_ps(___x115_9_2, ___x116_2, ___x114_9);
                            ___x114_9 = _mm256_fmadd_ps(___x115_9_3, ___x116_3, ___x114_9);
                            ___x114_10 = _mm256_fmadd_ps(___x115_10_0, ___x116_0, ___x114_10);
                            ___x114_10 = _mm256_fmadd_ps(___x115_10_1, ___x116_1, ___x114_10);
                            ___x114_10 = _mm256_fmadd_ps(___x115_10_2, ___x116_2, ___x114_10);
                            ___x114_10 = _mm256_fmadd_ps(___x115_10_3, ___x116_3, ___x114_10);
                            ___x114_11 = _mm256_fmadd_ps(___x115_11_0, ___x116_0, ___x114_11);
                            ___x114_11 = _mm256_fmadd_ps(___x115_11_1, ___x116_1, ___x114_11);
                            ___x114_11 = _mm256_fmadd_ps(___x115_11_2, ___x116_2, ___x114_11);
                            ___x114_11 = _mm256_fmadd_ps(___x115_11_3, ___x116_3, ___x114_11);
                            ___x114_12 = _mm256_fmadd_ps(___x115_12_0, ___x116_0, ___x114_12);
                            ___x114_12 = _mm256_fmadd_ps(___x115_12_1, ___x116_1, ___x114_12);
                            ___x114_12 = _mm256_fmadd_ps(___x115_12_2, ___x116_2, ___x114_12);
                            ___x114_12 = _mm256_fmadd_ps(___x115_12_3, ___x116_3, ___x114_12);
                            ___x114_13 = _mm256_fmadd_ps(___x115_13_0, ___x116_0, ___x114_13);
                            ___x114_13 = _mm256_fmadd_ps(___x115_13_1, ___x116_1, ___x114_13);
                            ___x114_13 = _mm256_fmadd_ps(___x115_13_2, ___x116_2, ___x114_13);
                            ___x114_13 = _mm256_fmadd_ps(___x115_13_3, ___x116_3, ___x114_13);
                            ___x114_14 = _mm256_fmadd_ps(___x115_14_0, ___x116_0, ___x114_14);
                            ___x114_14 = _mm256_fmadd_ps(___x115_14_1, ___x116_1, ___x114_14);
                            ___x114_14 = _mm256_fmadd_ps(___x115_14_2, ___x116_2, ___x114_14);
                            ___x114_14 = _mm256_fmadd_ps(___x115_14_3, ___x116_3, ___x114_14);
                            ___x114_15 = _mm256_fmadd_ps(___x115_15_0, ___x116_0, ___x114_15);
                            ___x114_15 = _mm256_fmadd_ps(___x115_15_1, ___x116_1, ___x114_15);
                            ___x114_15 = _mm256_fmadd_ps(___x115_15_2, ___x116_2, ___x114_15);
                            ___x114_15 = _mm256_fmadd_ps(___x115_15_3, ___x116_3, ___x114_15);
                            ___x114_16 = _mm256_fmadd_ps(___x115_16_0, ___x116_0, ___x114_16);
                            ___x114_16 = _mm256_fmadd_ps(___x115_16_1, ___x116_1, ___x114_16);
                            ___x114_16 = _mm256_fmadd_ps(___x115_16_2, ___x116_2, ___x114_16);
                            ___x114_16 = _mm256_fmadd_ps(___x115_16_3, ___x116_3, ___x114_16);
                            ___x114_17 = _mm256_fmadd_ps(___x115_17_0, ___x116_0, ___x114_17);
                            ___x114_17 = _mm256_fmadd_ps(___x115_17_1, ___x116_1, ___x114_17);
                            ___x114_17 = _mm256_fmadd_ps(___x115_17_2, ___x116_2, ___x114_17);
                            ___x114_17 = _mm256_fmadd_ps(___x115_17_3, ___x116_3, ___x114_17);
                            ___x114_18 = _mm256_fmadd_ps(___x115_18_0, ___x116_0, ___x114_18);
                            ___x114_18 = _mm256_fmadd_ps(___x115_18_1, ___x116_1, ___x114_18);
                            ___x114_18 = _mm256_fmadd_ps(___x115_18_2, ___x116_2, ___x114_18);
                            ___x114_18 = _mm256_fmadd_ps(___x115_18_3, ___x116_3, ___x114_18);
                            ___x114_19 = _mm256_fmadd_ps(___x115_19_0, ___x116_0, ___x114_19);
                            ___x114_19 = _mm256_fmadd_ps(___x115_19_1, ___x116_1, ___x114_19);
                            ___x114_19 = _mm256_fmadd_ps(___x115_19_2, ___x116_2, ___x114_19);
                            ___x114_19 = _mm256_fmadd_ps(___x115_19_3, ___x116_3, ___x114_19);
                            ___x114_20 = _mm256_fmadd_ps(___x115_20_0, ___x116_0, ___x114_20);
                            ___x114_20 = _mm256_fmadd_ps(___x115_20_1, ___x116_1, ___x114_20);
                            ___x114_20 = _mm256_fmadd_ps(___x115_20_2, ___x116_2, ___x114_20);
                            ___x114_20 = _mm256_fmadd_ps(___x115_20_3, ___x116_3, ___x114_20);
                            ___x114_21 = _mm256_fmadd_ps(___x115_21_0, ___x116_0, ___x114_21);
                            ___x114_21 = _mm256_fmadd_ps(___x115_21_1, ___x116_1, ___x114_21);
                            ___x114_21 = _mm256_fmadd_ps(___x115_21_2, ___x116_2, ___x114_21);
                            ___x114_21 = _mm256_fmadd_ps(___x115_21_3, ___x116_3, ___x114_21);
                            ___x114_22 = _mm256_fmadd_ps(___x115_22_0, ___x116_0, ___x114_22);
                            ___x114_22 = _mm256_fmadd_ps(___x115_22_1, ___x116_1, ___x114_22);
                            ___x114_22 = _mm256_fmadd_ps(___x115_22_2, ___x116_2, ___x114_22);
                            ___x114_22 = _mm256_fmadd_ps(___x115_22_3, ___x116_3, ___x114_22);
                            ___x114_23 = _mm256_fmadd_ps(___x115_23_0, ___x116_0, ___x114_23);
                            ___x114_23 = _mm256_fmadd_ps(___x115_23_1, ___x116_1, ___x114_23);
                            ___x114_23 = _mm256_fmadd_ps(___x115_23_2, ___x116_2, ___x114_23);
                            ___x114_23 = _mm256_fmadd_ps(___x115_23_3, ___x116_3, ___x114_23);
                            ___x114_24 = _mm256_fmadd_ps(___x115_24_0, ___x116_0, ___x114_24);
                            ___x114_24 = _mm256_fmadd_ps(___x115_24_1, ___x116_1, ___x114_24);
                            ___x114_24 = _mm256_fmadd_ps(___x115_24_2, ___x116_2, ___x114_24);
                            ___x114_24 = _mm256_fmadd_ps(___x115_24_3, ___x116_3, ___x114_24);
                            ___x114_25 = _mm256_fmadd_ps(___x115_25_0, ___x116_0, ___x114_25);
                            ___x114_25 = _mm256_fmadd_ps(___x115_25_1, ___x116_1, ___x114_25);
                            ___x114_25 = _mm256_fmadd_ps(___x115_25_2, ___x116_2, ___x114_25);
                            ___x114_25 = _mm256_fmadd_ps(___x115_25_3, ___x116_3, ___x114_25);
                            ___x114_26 = _mm256_fmadd_ps(___x115_26_0, ___x116_0, ___x114_26);
                            ___x114_26 = _mm256_fmadd_ps(___x115_26_1, ___x116_1, ___x114_26);
                            ___x114_26 = _mm256_fmadd_ps(___x115_26_2, ___x116_2, ___x114_26);
                            ___x114_26 = _mm256_fmadd_ps(___x115_26_3, ___x116_3, ___x114_26);
                            ___x114_27 = _mm256_fmadd_ps(___x115_27_0, ___x116_0, ___x114_27);
                            ___x114_27 = _mm256_fmadd_ps(___x115_27_1, ___x116_1, ___x114_27);
                            ___x114_27 = _mm256_fmadd_ps(___x115_27_2, ___x116_2, ___x114_27);
                            ___x114_27 = _mm256_fmadd_ps(___x115_27_3, ___x116_3, ___x114_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x114_0);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x114_1);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x114_2);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x114_3);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x114_4);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x114_5);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x114_6);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x114_7);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x114_8);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x114_9);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x114_10);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x114_11);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x114_12);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x114_13);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0], ___x114_14);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0], ___x114_15);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0], ___x114_16);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0], ___x114_17);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0], ___x114_18);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0], ___x114_19);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0], ___x114_20);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0], ___x114_21);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0], ___x114_22);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0], ___x114_23);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0], ___x114_24);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0], ___x114_25);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0], ___x114_26);
                _mm256_store_ps(& ensemble47value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0], ___x114_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble48value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble48inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble48bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble49value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble49inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        
    parallel_for(0,32 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 1 - 1;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 1 - 1;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble50inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 27)][MIN(MAX(k * 1 + _input_offset_3, 0), 27)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble50inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 27)][MIN(MAX(k * 1 + _input_offset_3, 0), 27)][_input_offset_1_inner];
                            ensemble50mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble50mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble50value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 8,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 32; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble51weights[x0][x1][x2][x3][0][0], & ensemble51weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,8 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 32; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int in_x_14 = (_neuron_index_3 + 14) * 1;
                int in_x_15 = (_neuron_index_3 + 15) * 1;
                int in_x_16 = (_neuron_index_3 + 16) * 1;
                int in_x_17 = (_neuron_index_3 + 17) * 1;
                int in_x_18 = (_neuron_index_3 + 18) * 1;
                int in_x_19 = (_neuron_index_3 + 19) * 1;
                int in_x_20 = (_neuron_index_3 + 20) * 1;
                int in_x_21 = (_neuron_index_3 + 21) * 1;
                int in_x_22 = (_neuron_index_3 + 22) * 1;
                int in_x_23 = (_neuron_index_3 + 23) * 1;
                int in_x_24 = (_neuron_index_3 + 24) * 1;
                int in_x_25 = (_neuron_index_3 + 25) * 1;
                int in_x_26 = (_neuron_index_3 + 26) * 1;
                int in_x_27 = (_neuron_index_3 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m256 ___x123_0 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x123_1 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x123_2 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x123_3 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x123_4 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x123_5 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x123_6 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x123_7 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x123_8 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x123_9 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x123_10 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x123_11 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x123_12 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x123_13 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                __m256 ___x123_14 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0]);
                __m256 ___x123_15 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0]);
                __m256 ___x123_16 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0]);
                __m256 ___x123_17 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0]);
                __m256 ___x123_18 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0]);
                __m256 ___x123_19 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0]);
                __m256 ___x123_20 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0]);
                __m256 ___x123_21 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0]);
                __m256 ___x123_22 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0]);
                __m256 ___x123_23 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0]);
                __m256 ___x123_24 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0]);
                __m256 ___x123_25 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0]);
                __m256 ___x123_26 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0]);
                __m256 ___x123_27 = _mm256_load_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x124_0 = _mm256_load_ps(& ensemble51weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x124_1 = _mm256_load_ps(& ensemble51weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x124_2 = _mm256_load_ps(& ensemble51weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x124_3 = _mm256_load_ps(& ensemble51weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x125_0_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x125_0_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x125_0_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x125_0_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x125_1_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x125_1_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x125_1_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x125_1_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x125_2_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x125_2_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x125_2_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x125_2_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x125_3_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x125_3_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x125_3_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x125_3_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x125_4_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x125_4_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x125_4_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x125_4_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x125_5_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x125_5_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x125_5_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x125_5_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x125_6_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x125_6_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x125_6_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x125_6_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x125_7_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x125_7_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x125_7_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x125_7_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x125_8_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x125_8_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x125_8_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x125_8_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x125_9_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x125_9_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x125_9_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x125_9_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x125_10_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x125_10_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x125_10_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x125_10_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x125_11_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x125_11_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x125_11_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x125_11_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x125_12_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x125_12_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x125_12_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x125_12_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x125_13_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x125_13_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x125_13_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x125_13_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x125_14_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 0)]);
                            __m256 ___x125_14_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 1)]);
                            __m256 ___x125_14_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 2)]);
                            __m256 ___x125_14_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][(i_inner + 3)]);
                            __m256 ___x125_15_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 0)]);
                            __m256 ___x125_15_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 1)]);
                            __m256 ___x125_15_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 2)]);
                            __m256 ___x125_15_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][(i_inner + 3)]);
                            __m256 ___x125_16_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 0)]);
                            __m256 ___x125_16_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 1)]);
                            __m256 ___x125_16_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 2)]);
                            __m256 ___x125_16_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][(i_inner + 3)]);
                            __m256 ___x125_17_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 0)]);
                            __m256 ___x125_17_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 1)]);
                            __m256 ___x125_17_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 2)]);
                            __m256 ___x125_17_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][(i_inner + 3)]);
                            __m256 ___x125_18_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 0)]);
                            __m256 ___x125_18_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 1)]);
                            __m256 ___x125_18_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 2)]);
                            __m256 ___x125_18_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][(i_inner + 3)]);
                            __m256 ___x125_19_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 0)]);
                            __m256 ___x125_19_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 1)]);
                            __m256 ___x125_19_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 2)]);
                            __m256 ___x125_19_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][(i_inner + 3)]);
                            __m256 ___x125_20_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 0)]);
                            __m256 ___x125_20_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 1)]);
                            __m256 ___x125_20_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 2)]);
                            __m256 ___x125_20_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][(i_inner + 3)]);
                            __m256 ___x125_21_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 0)]);
                            __m256 ___x125_21_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 1)]);
                            __m256 ___x125_21_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 2)]);
                            __m256 ___x125_21_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][(i_inner + 3)]);
                            __m256 ___x125_22_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 0)]);
                            __m256 ___x125_22_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 1)]);
                            __m256 ___x125_22_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 2)]);
                            __m256 ___x125_22_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][(i_inner + 3)]);
                            __m256 ___x125_23_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 0)]);
                            __m256 ___x125_23_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 1)]);
                            __m256 ___x125_23_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 2)]);
                            __m256 ___x125_23_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][(i_inner + 3)]);
                            __m256 ___x125_24_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 0)]);
                            __m256 ___x125_24_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 1)]);
                            __m256 ___x125_24_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 2)]);
                            __m256 ___x125_24_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][(i_inner + 3)]);
                            __m256 ___x125_25_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 0)]);
                            __m256 ___x125_25_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 1)]);
                            __m256 ___x125_25_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 2)]);
                            __m256 ___x125_25_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][(i_inner + 3)]);
                            __m256 ___x125_26_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 0)]);
                            __m256 ___x125_26_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 1)]);
                            __m256 ___x125_26_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 2)]);
                            __m256 ___x125_26_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][(i_inner + 3)]);
                            __m256 ___x125_27_0 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 0)]);
                            __m256 ___x125_27_1 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 1)]);
                            __m256 ___x125_27_2 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 2)]);
                            __m256 ___x125_27_3 = _mm256_broadcast_ss(& ensemble51inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][(i_inner + 3)]);
                            ___x123_0 = _mm256_fmadd_ps(___x125_0_0, ___x124_0, ___x123_0);
                            ___x123_0 = _mm256_fmadd_ps(___x125_0_1, ___x124_1, ___x123_0);
                            ___x123_0 = _mm256_fmadd_ps(___x125_0_2, ___x124_2, ___x123_0);
                            ___x123_0 = _mm256_fmadd_ps(___x125_0_3, ___x124_3, ___x123_0);
                            ___x123_1 = _mm256_fmadd_ps(___x125_1_0, ___x124_0, ___x123_1);
                            ___x123_1 = _mm256_fmadd_ps(___x125_1_1, ___x124_1, ___x123_1);
                            ___x123_1 = _mm256_fmadd_ps(___x125_1_2, ___x124_2, ___x123_1);
                            ___x123_1 = _mm256_fmadd_ps(___x125_1_3, ___x124_3, ___x123_1);
                            ___x123_2 = _mm256_fmadd_ps(___x125_2_0, ___x124_0, ___x123_2);
                            ___x123_2 = _mm256_fmadd_ps(___x125_2_1, ___x124_1, ___x123_2);
                            ___x123_2 = _mm256_fmadd_ps(___x125_2_2, ___x124_2, ___x123_2);
                            ___x123_2 = _mm256_fmadd_ps(___x125_2_3, ___x124_3, ___x123_2);
                            ___x123_3 = _mm256_fmadd_ps(___x125_3_0, ___x124_0, ___x123_3);
                            ___x123_3 = _mm256_fmadd_ps(___x125_3_1, ___x124_1, ___x123_3);
                            ___x123_3 = _mm256_fmadd_ps(___x125_3_2, ___x124_2, ___x123_3);
                            ___x123_3 = _mm256_fmadd_ps(___x125_3_3, ___x124_3, ___x123_3);
                            ___x123_4 = _mm256_fmadd_ps(___x125_4_0, ___x124_0, ___x123_4);
                            ___x123_4 = _mm256_fmadd_ps(___x125_4_1, ___x124_1, ___x123_4);
                            ___x123_4 = _mm256_fmadd_ps(___x125_4_2, ___x124_2, ___x123_4);
                            ___x123_4 = _mm256_fmadd_ps(___x125_4_3, ___x124_3, ___x123_4);
                            ___x123_5 = _mm256_fmadd_ps(___x125_5_0, ___x124_0, ___x123_5);
                            ___x123_5 = _mm256_fmadd_ps(___x125_5_1, ___x124_1, ___x123_5);
                            ___x123_5 = _mm256_fmadd_ps(___x125_5_2, ___x124_2, ___x123_5);
                            ___x123_5 = _mm256_fmadd_ps(___x125_5_3, ___x124_3, ___x123_5);
                            ___x123_6 = _mm256_fmadd_ps(___x125_6_0, ___x124_0, ___x123_6);
                            ___x123_6 = _mm256_fmadd_ps(___x125_6_1, ___x124_1, ___x123_6);
                            ___x123_6 = _mm256_fmadd_ps(___x125_6_2, ___x124_2, ___x123_6);
                            ___x123_6 = _mm256_fmadd_ps(___x125_6_3, ___x124_3, ___x123_6);
                            ___x123_7 = _mm256_fmadd_ps(___x125_7_0, ___x124_0, ___x123_7);
                            ___x123_7 = _mm256_fmadd_ps(___x125_7_1, ___x124_1, ___x123_7);
                            ___x123_7 = _mm256_fmadd_ps(___x125_7_2, ___x124_2, ___x123_7);
                            ___x123_7 = _mm256_fmadd_ps(___x125_7_3, ___x124_3, ___x123_7);
                            ___x123_8 = _mm256_fmadd_ps(___x125_8_0, ___x124_0, ___x123_8);
                            ___x123_8 = _mm256_fmadd_ps(___x125_8_1, ___x124_1, ___x123_8);
                            ___x123_8 = _mm256_fmadd_ps(___x125_8_2, ___x124_2, ___x123_8);
                            ___x123_8 = _mm256_fmadd_ps(___x125_8_3, ___x124_3, ___x123_8);
                            ___x123_9 = _mm256_fmadd_ps(___x125_9_0, ___x124_0, ___x123_9);
                            ___x123_9 = _mm256_fmadd_ps(___x125_9_1, ___x124_1, ___x123_9);
                            ___x123_9 = _mm256_fmadd_ps(___x125_9_2, ___x124_2, ___x123_9);
                            ___x123_9 = _mm256_fmadd_ps(___x125_9_3, ___x124_3, ___x123_9);
                            ___x123_10 = _mm256_fmadd_ps(___x125_10_0, ___x124_0, ___x123_10);
                            ___x123_10 = _mm256_fmadd_ps(___x125_10_1, ___x124_1, ___x123_10);
                            ___x123_10 = _mm256_fmadd_ps(___x125_10_2, ___x124_2, ___x123_10);
                            ___x123_10 = _mm256_fmadd_ps(___x125_10_3, ___x124_3, ___x123_10);
                            ___x123_11 = _mm256_fmadd_ps(___x125_11_0, ___x124_0, ___x123_11);
                            ___x123_11 = _mm256_fmadd_ps(___x125_11_1, ___x124_1, ___x123_11);
                            ___x123_11 = _mm256_fmadd_ps(___x125_11_2, ___x124_2, ___x123_11);
                            ___x123_11 = _mm256_fmadd_ps(___x125_11_3, ___x124_3, ___x123_11);
                            ___x123_12 = _mm256_fmadd_ps(___x125_12_0, ___x124_0, ___x123_12);
                            ___x123_12 = _mm256_fmadd_ps(___x125_12_1, ___x124_1, ___x123_12);
                            ___x123_12 = _mm256_fmadd_ps(___x125_12_2, ___x124_2, ___x123_12);
                            ___x123_12 = _mm256_fmadd_ps(___x125_12_3, ___x124_3, ___x123_12);
                            ___x123_13 = _mm256_fmadd_ps(___x125_13_0, ___x124_0, ___x123_13);
                            ___x123_13 = _mm256_fmadd_ps(___x125_13_1, ___x124_1, ___x123_13);
                            ___x123_13 = _mm256_fmadd_ps(___x125_13_2, ___x124_2, ___x123_13);
                            ___x123_13 = _mm256_fmadd_ps(___x125_13_3, ___x124_3, ___x123_13);
                            ___x123_14 = _mm256_fmadd_ps(___x125_14_0, ___x124_0, ___x123_14);
                            ___x123_14 = _mm256_fmadd_ps(___x125_14_1, ___x124_1, ___x123_14);
                            ___x123_14 = _mm256_fmadd_ps(___x125_14_2, ___x124_2, ___x123_14);
                            ___x123_14 = _mm256_fmadd_ps(___x125_14_3, ___x124_3, ___x123_14);
                            ___x123_15 = _mm256_fmadd_ps(___x125_15_0, ___x124_0, ___x123_15);
                            ___x123_15 = _mm256_fmadd_ps(___x125_15_1, ___x124_1, ___x123_15);
                            ___x123_15 = _mm256_fmadd_ps(___x125_15_2, ___x124_2, ___x123_15);
                            ___x123_15 = _mm256_fmadd_ps(___x125_15_3, ___x124_3, ___x123_15);
                            ___x123_16 = _mm256_fmadd_ps(___x125_16_0, ___x124_0, ___x123_16);
                            ___x123_16 = _mm256_fmadd_ps(___x125_16_1, ___x124_1, ___x123_16);
                            ___x123_16 = _mm256_fmadd_ps(___x125_16_2, ___x124_2, ___x123_16);
                            ___x123_16 = _mm256_fmadd_ps(___x125_16_3, ___x124_3, ___x123_16);
                            ___x123_17 = _mm256_fmadd_ps(___x125_17_0, ___x124_0, ___x123_17);
                            ___x123_17 = _mm256_fmadd_ps(___x125_17_1, ___x124_1, ___x123_17);
                            ___x123_17 = _mm256_fmadd_ps(___x125_17_2, ___x124_2, ___x123_17);
                            ___x123_17 = _mm256_fmadd_ps(___x125_17_3, ___x124_3, ___x123_17);
                            ___x123_18 = _mm256_fmadd_ps(___x125_18_0, ___x124_0, ___x123_18);
                            ___x123_18 = _mm256_fmadd_ps(___x125_18_1, ___x124_1, ___x123_18);
                            ___x123_18 = _mm256_fmadd_ps(___x125_18_2, ___x124_2, ___x123_18);
                            ___x123_18 = _mm256_fmadd_ps(___x125_18_3, ___x124_3, ___x123_18);
                            ___x123_19 = _mm256_fmadd_ps(___x125_19_0, ___x124_0, ___x123_19);
                            ___x123_19 = _mm256_fmadd_ps(___x125_19_1, ___x124_1, ___x123_19);
                            ___x123_19 = _mm256_fmadd_ps(___x125_19_2, ___x124_2, ___x123_19);
                            ___x123_19 = _mm256_fmadd_ps(___x125_19_3, ___x124_3, ___x123_19);
                            ___x123_20 = _mm256_fmadd_ps(___x125_20_0, ___x124_0, ___x123_20);
                            ___x123_20 = _mm256_fmadd_ps(___x125_20_1, ___x124_1, ___x123_20);
                            ___x123_20 = _mm256_fmadd_ps(___x125_20_2, ___x124_2, ___x123_20);
                            ___x123_20 = _mm256_fmadd_ps(___x125_20_3, ___x124_3, ___x123_20);
                            ___x123_21 = _mm256_fmadd_ps(___x125_21_0, ___x124_0, ___x123_21);
                            ___x123_21 = _mm256_fmadd_ps(___x125_21_1, ___x124_1, ___x123_21);
                            ___x123_21 = _mm256_fmadd_ps(___x125_21_2, ___x124_2, ___x123_21);
                            ___x123_21 = _mm256_fmadd_ps(___x125_21_3, ___x124_3, ___x123_21);
                            ___x123_22 = _mm256_fmadd_ps(___x125_22_0, ___x124_0, ___x123_22);
                            ___x123_22 = _mm256_fmadd_ps(___x125_22_1, ___x124_1, ___x123_22);
                            ___x123_22 = _mm256_fmadd_ps(___x125_22_2, ___x124_2, ___x123_22);
                            ___x123_22 = _mm256_fmadd_ps(___x125_22_3, ___x124_3, ___x123_22);
                            ___x123_23 = _mm256_fmadd_ps(___x125_23_0, ___x124_0, ___x123_23);
                            ___x123_23 = _mm256_fmadd_ps(___x125_23_1, ___x124_1, ___x123_23);
                            ___x123_23 = _mm256_fmadd_ps(___x125_23_2, ___x124_2, ___x123_23);
                            ___x123_23 = _mm256_fmadd_ps(___x125_23_3, ___x124_3, ___x123_23);
                            ___x123_24 = _mm256_fmadd_ps(___x125_24_0, ___x124_0, ___x123_24);
                            ___x123_24 = _mm256_fmadd_ps(___x125_24_1, ___x124_1, ___x123_24);
                            ___x123_24 = _mm256_fmadd_ps(___x125_24_2, ___x124_2, ___x123_24);
                            ___x123_24 = _mm256_fmadd_ps(___x125_24_3, ___x124_3, ___x123_24);
                            ___x123_25 = _mm256_fmadd_ps(___x125_25_0, ___x124_0, ___x123_25);
                            ___x123_25 = _mm256_fmadd_ps(___x125_25_1, ___x124_1, ___x123_25);
                            ___x123_25 = _mm256_fmadd_ps(___x125_25_2, ___x124_2, ___x123_25);
                            ___x123_25 = _mm256_fmadd_ps(___x125_25_3, ___x124_3, ___x123_25);
                            ___x123_26 = _mm256_fmadd_ps(___x125_26_0, ___x124_0, ___x123_26);
                            ___x123_26 = _mm256_fmadd_ps(___x125_26_1, ___x124_1, ___x123_26);
                            ___x123_26 = _mm256_fmadd_ps(___x125_26_2, ___x124_2, ___x123_26);
                            ___x123_26 = _mm256_fmadd_ps(___x125_26_3, ___x124_3, ___x123_26);
                            ___x123_27 = _mm256_fmadd_ps(___x125_27_0, ___x124_0, ___x123_27);
                            ___x123_27 = _mm256_fmadd_ps(___x125_27_1, ___x124_1, ___x123_27);
                            ___x123_27 = _mm256_fmadd_ps(___x125_27_2, ___x124_2, ___x123_27);
                            ___x123_27 = _mm256_fmadd_ps(___x125_27_3, ___x124_3, ___x123_27);
                        }
                    }
                }
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x123_0);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x123_1);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x123_2);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x123_3);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x123_4);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x123_5);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x123_6);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x123_7);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x123_8);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x123_9);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x123_10);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x123_11);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x123_12);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x123_13);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][0], ___x123_14);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][0], ___x123_15);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][0], ___x123_16);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][0], ___x123_17);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][0], ___x123_18);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][0], ___x123_19);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][0], ___x123_20);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][0], ___x123_21);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][0], ___x123_22);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][0], ___x123_23);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][0], ___x123_24);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][0], ___x123_25);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][0], ___x123_26);
                _mm256_store_ps(& ensemble51value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][0], ___x123_27);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble52value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble52inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble52bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble53value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble53inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble54value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble54inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 24; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble54value[_neuron_index_0][(_neuron_index_1_outer + 16)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble54inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble54value[_neuron_index_0][(_neuron_index_1_outer + 40)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble54inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble54value[_neuron_index_0][(_neuron_index_1_outer + 52)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble54inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        
    parallel_for(0,60 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 2 - 0;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 2 - 0;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble55inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 27)][MIN(MAX(k * 1 + _input_offset_3, 0), 27)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble55inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 27)][MIN(MAX(k * 1 + _input_offset_3, 0), 27)][_input_offset_1_inner];
                            ensemble55mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble55mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble55value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 24,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 60; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble56weights[x0][x1][x2][x3][0][0], & ensemble56weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,24 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 60; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x133_0 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x133_1 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x133_2 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x133_3 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x133_4 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x133_5 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x133_6 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x133_7 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x133_8 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x133_9 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x133_10 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x133_11 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x133_12 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x133_13 = _mm256_load_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x132_0 = _mm256_load_ps(& ensemble56weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x132_1 = _mm256_load_ps(& ensemble56weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x132_2 = _mm256_load_ps(& ensemble56weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x132_3 = _mm256_load_ps(& ensemble56weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x134_0_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x134_0_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x134_0_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x134_0_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x134_1_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x134_1_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x134_1_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x134_1_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x134_2_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x134_2_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x134_2_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x134_2_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x134_3_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x134_3_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x134_3_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x134_3_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x134_4_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x134_4_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x134_4_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x134_4_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x134_5_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x134_5_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x134_5_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x134_5_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x134_6_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x134_6_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x134_6_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x134_6_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x134_7_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x134_7_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x134_7_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x134_7_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x134_8_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x134_8_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x134_8_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x134_8_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x134_9_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x134_9_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x134_9_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x134_9_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x134_10_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x134_10_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x134_10_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x134_10_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x134_11_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x134_11_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x134_11_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x134_11_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x134_12_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x134_12_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x134_12_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x134_12_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x134_13_0 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x134_13_1 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x134_13_2 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x134_13_3 = _mm256_broadcast_ss(& ensemble56inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x133_0 = _mm256_fmadd_ps(___x134_0_0, ___x132_0, ___x133_0);
                            ___x133_0 = _mm256_fmadd_ps(___x134_0_1, ___x132_1, ___x133_0);
                            ___x133_0 = _mm256_fmadd_ps(___x134_0_2, ___x132_2, ___x133_0);
                            ___x133_0 = _mm256_fmadd_ps(___x134_0_3, ___x132_3, ___x133_0);
                            ___x133_1 = _mm256_fmadd_ps(___x134_1_0, ___x132_0, ___x133_1);
                            ___x133_1 = _mm256_fmadd_ps(___x134_1_1, ___x132_1, ___x133_1);
                            ___x133_1 = _mm256_fmadd_ps(___x134_1_2, ___x132_2, ___x133_1);
                            ___x133_1 = _mm256_fmadd_ps(___x134_1_3, ___x132_3, ___x133_1);
                            ___x133_2 = _mm256_fmadd_ps(___x134_2_0, ___x132_0, ___x133_2);
                            ___x133_2 = _mm256_fmadd_ps(___x134_2_1, ___x132_1, ___x133_2);
                            ___x133_2 = _mm256_fmadd_ps(___x134_2_2, ___x132_2, ___x133_2);
                            ___x133_2 = _mm256_fmadd_ps(___x134_2_3, ___x132_3, ___x133_2);
                            ___x133_3 = _mm256_fmadd_ps(___x134_3_0, ___x132_0, ___x133_3);
                            ___x133_3 = _mm256_fmadd_ps(___x134_3_1, ___x132_1, ___x133_3);
                            ___x133_3 = _mm256_fmadd_ps(___x134_3_2, ___x132_2, ___x133_3);
                            ___x133_3 = _mm256_fmadd_ps(___x134_3_3, ___x132_3, ___x133_3);
                            ___x133_4 = _mm256_fmadd_ps(___x134_4_0, ___x132_0, ___x133_4);
                            ___x133_4 = _mm256_fmadd_ps(___x134_4_1, ___x132_1, ___x133_4);
                            ___x133_4 = _mm256_fmadd_ps(___x134_4_2, ___x132_2, ___x133_4);
                            ___x133_4 = _mm256_fmadd_ps(___x134_4_3, ___x132_3, ___x133_4);
                            ___x133_5 = _mm256_fmadd_ps(___x134_5_0, ___x132_0, ___x133_5);
                            ___x133_5 = _mm256_fmadd_ps(___x134_5_1, ___x132_1, ___x133_5);
                            ___x133_5 = _mm256_fmadd_ps(___x134_5_2, ___x132_2, ___x133_5);
                            ___x133_5 = _mm256_fmadd_ps(___x134_5_3, ___x132_3, ___x133_5);
                            ___x133_6 = _mm256_fmadd_ps(___x134_6_0, ___x132_0, ___x133_6);
                            ___x133_6 = _mm256_fmadd_ps(___x134_6_1, ___x132_1, ___x133_6);
                            ___x133_6 = _mm256_fmadd_ps(___x134_6_2, ___x132_2, ___x133_6);
                            ___x133_6 = _mm256_fmadd_ps(___x134_6_3, ___x132_3, ___x133_6);
                            ___x133_7 = _mm256_fmadd_ps(___x134_7_0, ___x132_0, ___x133_7);
                            ___x133_7 = _mm256_fmadd_ps(___x134_7_1, ___x132_1, ___x133_7);
                            ___x133_7 = _mm256_fmadd_ps(___x134_7_2, ___x132_2, ___x133_7);
                            ___x133_7 = _mm256_fmadd_ps(___x134_7_3, ___x132_3, ___x133_7);
                            ___x133_8 = _mm256_fmadd_ps(___x134_8_0, ___x132_0, ___x133_8);
                            ___x133_8 = _mm256_fmadd_ps(___x134_8_1, ___x132_1, ___x133_8);
                            ___x133_8 = _mm256_fmadd_ps(___x134_8_2, ___x132_2, ___x133_8);
                            ___x133_8 = _mm256_fmadd_ps(___x134_8_3, ___x132_3, ___x133_8);
                            ___x133_9 = _mm256_fmadd_ps(___x134_9_0, ___x132_0, ___x133_9);
                            ___x133_9 = _mm256_fmadd_ps(___x134_9_1, ___x132_1, ___x133_9);
                            ___x133_9 = _mm256_fmadd_ps(___x134_9_2, ___x132_2, ___x133_9);
                            ___x133_9 = _mm256_fmadd_ps(___x134_9_3, ___x132_3, ___x133_9);
                            ___x133_10 = _mm256_fmadd_ps(___x134_10_0, ___x132_0, ___x133_10);
                            ___x133_10 = _mm256_fmadd_ps(___x134_10_1, ___x132_1, ___x133_10);
                            ___x133_10 = _mm256_fmadd_ps(___x134_10_2, ___x132_2, ___x133_10);
                            ___x133_10 = _mm256_fmadd_ps(___x134_10_3, ___x132_3, ___x133_10);
                            ___x133_11 = _mm256_fmadd_ps(___x134_11_0, ___x132_0, ___x133_11);
                            ___x133_11 = _mm256_fmadd_ps(___x134_11_1, ___x132_1, ___x133_11);
                            ___x133_11 = _mm256_fmadd_ps(___x134_11_2, ___x132_2, ___x133_11);
                            ___x133_11 = _mm256_fmadd_ps(___x134_11_3, ___x132_3, ___x133_11);
                            ___x133_12 = _mm256_fmadd_ps(___x134_12_0, ___x132_0, ___x133_12);
                            ___x133_12 = _mm256_fmadd_ps(___x134_12_1, ___x132_1, ___x133_12);
                            ___x133_12 = _mm256_fmadd_ps(___x134_12_2, ___x132_2, ___x133_12);
                            ___x133_12 = _mm256_fmadd_ps(___x134_12_3, ___x132_3, ___x133_12);
                            ___x133_13 = _mm256_fmadd_ps(___x134_13_0, ___x132_0, ___x133_13);
                            ___x133_13 = _mm256_fmadd_ps(___x134_13_1, ___x132_1, ___x133_13);
                            ___x133_13 = _mm256_fmadd_ps(___x134_13_2, ___x132_2, ___x133_13);
                            ___x133_13 = _mm256_fmadd_ps(___x134_13_3, ___x132_3, ___x133_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x133_0);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x133_1);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x133_2);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x133_3);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x133_4);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x133_5);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x133_6);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x133_7);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x133_8);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x133_9);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x133_10);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x133_11);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x133_12);
                _mm256_store_ps(& ensemble56value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x133_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble57value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble57inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble57bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble58value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble58inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 12,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 60; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble59weights[x0][x1][x2][x3][0][0], & ensemble59weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,12 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 60; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x142_0 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0]);
                __m256 ___x142_1 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0]);
                __m256 ___x142_2 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0]);
                __m256 ___x142_3 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0]);
                __m256 ___x142_4 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0]);
                __m256 ___x142_5 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0]);
                __m256 ___x142_6 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0]);
                __m256 ___x142_7 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0]);
                __m256 ___x142_8 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0]);
                __m256 ___x142_9 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0]);
                __m256 ___x142_10 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0]);
                __m256 ___x142_11 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0]);
                __m256 ___x142_12 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0]);
                __m256 ___x142_13 = _mm256_load_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x141_0_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x141_0_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x141_0_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x141_0_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x141_1_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x141_1_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x141_1_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x141_1_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x141_2_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x141_2_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x141_2_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x141_2_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x141_3_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x141_3_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x141_3_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x141_3_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x141_4_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x141_4_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x141_4_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x141_4_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x141_5_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x141_5_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x141_5_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x141_5_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x141_6_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x141_6_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x141_6_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x141_6_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x141_7_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x141_7_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x141_7_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x141_7_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x141_8_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x141_8_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x141_8_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x141_8_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x141_9_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x141_9_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x141_9_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x141_9_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x141_10_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x141_10_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x141_10_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x141_10_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x141_11_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x141_11_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x141_11_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x141_11_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x141_12_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x141_12_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x141_12_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x141_12_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x141_13_0 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x141_13_1 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x141_13_2 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x141_13_3 = _mm256_broadcast_ss(& ensemble59inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x143_0 = _mm256_load_ps(& ensemble59weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x143_1 = _mm256_load_ps(& ensemble59weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x143_2 = _mm256_load_ps(& ensemble59weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x143_3 = _mm256_load_ps(& ensemble59weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x142_0 = _mm256_fmadd_ps(___x141_0_0, ___x143_0, ___x142_0);
                            ___x142_0 = _mm256_fmadd_ps(___x141_0_1, ___x143_1, ___x142_0);
                            ___x142_0 = _mm256_fmadd_ps(___x141_0_2, ___x143_2, ___x142_0);
                            ___x142_0 = _mm256_fmadd_ps(___x141_0_3, ___x143_3, ___x142_0);
                            ___x142_1 = _mm256_fmadd_ps(___x141_1_0, ___x143_0, ___x142_1);
                            ___x142_1 = _mm256_fmadd_ps(___x141_1_1, ___x143_1, ___x142_1);
                            ___x142_1 = _mm256_fmadd_ps(___x141_1_2, ___x143_2, ___x142_1);
                            ___x142_1 = _mm256_fmadd_ps(___x141_1_3, ___x143_3, ___x142_1);
                            ___x142_2 = _mm256_fmadd_ps(___x141_2_0, ___x143_0, ___x142_2);
                            ___x142_2 = _mm256_fmadd_ps(___x141_2_1, ___x143_1, ___x142_2);
                            ___x142_2 = _mm256_fmadd_ps(___x141_2_2, ___x143_2, ___x142_2);
                            ___x142_2 = _mm256_fmadd_ps(___x141_2_3, ___x143_3, ___x142_2);
                            ___x142_3 = _mm256_fmadd_ps(___x141_3_0, ___x143_0, ___x142_3);
                            ___x142_3 = _mm256_fmadd_ps(___x141_3_1, ___x143_1, ___x142_3);
                            ___x142_3 = _mm256_fmadd_ps(___x141_3_2, ___x143_2, ___x142_3);
                            ___x142_3 = _mm256_fmadd_ps(___x141_3_3, ___x143_3, ___x142_3);
                            ___x142_4 = _mm256_fmadd_ps(___x141_4_0, ___x143_0, ___x142_4);
                            ___x142_4 = _mm256_fmadd_ps(___x141_4_1, ___x143_1, ___x142_4);
                            ___x142_4 = _mm256_fmadd_ps(___x141_4_2, ___x143_2, ___x142_4);
                            ___x142_4 = _mm256_fmadd_ps(___x141_4_3, ___x143_3, ___x142_4);
                            ___x142_5 = _mm256_fmadd_ps(___x141_5_0, ___x143_0, ___x142_5);
                            ___x142_5 = _mm256_fmadd_ps(___x141_5_1, ___x143_1, ___x142_5);
                            ___x142_5 = _mm256_fmadd_ps(___x141_5_2, ___x143_2, ___x142_5);
                            ___x142_5 = _mm256_fmadd_ps(___x141_5_3, ___x143_3, ___x142_5);
                            ___x142_6 = _mm256_fmadd_ps(___x141_6_0, ___x143_0, ___x142_6);
                            ___x142_6 = _mm256_fmadd_ps(___x141_6_1, ___x143_1, ___x142_6);
                            ___x142_6 = _mm256_fmadd_ps(___x141_6_2, ___x143_2, ___x142_6);
                            ___x142_6 = _mm256_fmadd_ps(___x141_6_3, ___x143_3, ___x142_6);
                            ___x142_7 = _mm256_fmadd_ps(___x141_7_0, ___x143_0, ___x142_7);
                            ___x142_7 = _mm256_fmadd_ps(___x141_7_1, ___x143_1, ___x142_7);
                            ___x142_7 = _mm256_fmadd_ps(___x141_7_2, ___x143_2, ___x142_7);
                            ___x142_7 = _mm256_fmadd_ps(___x141_7_3, ___x143_3, ___x142_7);
                            ___x142_8 = _mm256_fmadd_ps(___x141_8_0, ___x143_0, ___x142_8);
                            ___x142_8 = _mm256_fmadd_ps(___x141_8_1, ___x143_1, ___x142_8);
                            ___x142_8 = _mm256_fmadd_ps(___x141_8_2, ___x143_2, ___x142_8);
                            ___x142_8 = _mm256_fmadd_ps(___x141_8_3, ___x143_3, ___x142_8);
                            ___x142_9 = _mm256_fmadd_ps(___x141_9_0, ___x143_0, ___x142_9);
                            ___x142_9 = _mm256_fmadd_ps(___x141_9_1, ___x143_1, ___x142_9);
                            ___x142_9 = _mm256_fmadd_ps(___x141_9_2, ___x143_2, ___x142_9);
                            ___x142_9 = _mm256_fmadd_ps(___x141_9_3, ___x143_3, ___x142_9);
                            ___x142_10 = _mm256_fmadd_ps(___x141_10_0, ___x143_0, ___x142_10);
                            ___x142_10 = _mm256_fmadd_ps(___x141_10_1, ___x143_1, ___x142_10);
                            ___x142_10 = _mm256_fmadd_ps(___x141_10_2, ___x143_2, ___x142_10);
                            ___x142_10 = _mm256_fmadd_ps(___x141_10_3, ___x143_3, ___x142_10);
                            ___x142_11 = _mm256_fmadd_ps(___x141_11_0, ___x143_0, ___x142_11);
                            ___x142_11 = _mm256_fmadd_ps(___x141_11_1, ___x143_1, ___x142_11);
                            ___x142_11 = _mm256_fmadd_ps(___x141_11_2, ___x143_2, ___x142_11);
                            ___x142_11 = _mm256_fmadd_ps(___x141_11_3, ___x143_3, ___x142_11);
                            ___x142_12 = _mm256_fmadd_ps(___x141_12_0, ___x143_0, ___x142_12);
                            ___x142_12 = _mm256_fmadd_ps(___x141_12_1, ___x143_1, ___x142_12);
                            ___x142_12 = _mm256_fmadd_ps(___x141_12_2, ___x143_2, ___x142_12);
                            ___x142_12 = _mm256_fmadd_ps(___x141_12_3, ___x143_3, ___x142_12);
                            ___x142_13 = _mm256_fmadd_ps(___x141_13_0, ___x143_0, ___x142_13);
                            ___x142_13 = _mm256_fmadd_ps(___x141_13_1, ___x143_1, ___x142_13);
                            ___x142_13 = _mm256_fmadd_ps(___x141_13_2, ___x143_2, ___x142_13);
                            ___x142_13 = _mm256_fmadd_ps(___x141_13_3, ___x143_3, ___x142_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0], ___x142_0);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0], ___x142_1);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0], ___x142_2);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0], ___x142_3);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0], ___x142_4);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0], ___x142_5);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0], ___x142_6);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0], ___x142_7);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0], ___x142_8);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0], ___x142_9);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0], ___x142_10);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0], ___x142_11);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0], ___x142_12);
                _mm256_store_ps(& ensemble59value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0], ___x142_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble60value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble60inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] + ensemble60bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble61value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble61inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 26,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 12; x1 ++) {
        for (int x2 = 0; x2 < 3; x2 ++) {
            for (int x3 = 0; x3 < 3; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble62weights[x0][x1][x2][x3][0][0], & ensemble62weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,26 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 12; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x152_0 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x152_1 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x152_2 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x152_3 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x152_4 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x152_5 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x152_6 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x152_7 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x152_8 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x152_9 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x152_10 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x152_11 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x152_12 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x152_13 = _mm256_load_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x150_0 = _mm256_load_ps(& ensemble62weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x150_1 = _mm256_load_ps(& ensemble62weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x150_2 = _mm256_load_ps(& ensemble62weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x150_3 = _mm256_load_ps(& ensemble62weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x151_0_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x151_0_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x151_0_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x151_0_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x151_1_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x151_1_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x151_1_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x151_1_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x151_2_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x151_2_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x151_2_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x151_2_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x151_3_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x151_3_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x151_3_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x151_3_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x151_4_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x151_4_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x151_4_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x151_4_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x151_5_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x151_5_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x151_5_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x151_5_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x151_6_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x151_6_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x151_6_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x151_6_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x151_7_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x151_7_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x151_7_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x151_7_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x151_8_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x151_8_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x151_8_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x151_8_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x151_9_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x151_9_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x151_9_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x151_9_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x151_10_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x151_10_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x151_10_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x151_10_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x151_11_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x151_11_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x151_11_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x151_11_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x151_12_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x151_12_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x151_12_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x151_12_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x151_13_0 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x151_13_1 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x151_13_2 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x151_13_3 = _mm256_broadcast_ss(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x152_0 = _mm256_fmadd_ps(___x151_0_0, ___x150_0, ___x152_0);
                            ___x152_0 = _mm256_fmadd_ps(___x151_0_1, ___x150_1, ___x152_0);
                            ___x152_0 = _mm256_fmadd_ps(___x151_0_2, ___x150_2, ___x152_0);
                            ___x152_0 = _mm256_fmadd_ps(___x151_0_3, ___x150_3, ___x152_0);
                            ___x152_1 = _mm256_fmadd_ps(___x151_1_0, ___x150_0, ___x152_1);
                            ___x152_1 = _mm256_fmadd_ps(___x151_1_1, ___x150_1, ___x152_1);
                            ___x152_1 = _mm256_fmadd_ps(___x151_1_2, ___x150_2, ___x152_1);
                            ___x152_1 = _mm256_fmadd_ps(___x151_1_3, ___x150_3, ___x152_1);
                            ___x152_2 = _mm256_fmadd_ps(___x151_2_0, ___x150_0, ___x152_2);
                            ___x152_2 = _mm256_fmadd_ps(___x151_2_1, ___x150_1, ___x152_2);
                            ___x152_2 = _mm256_fmadd_ps(___x151_2_2, ___x150_2, ___x152_2);
                            ___x152_2 = _mm256_fmadd_ps(___x151_2_3, ___x150_3, ___x152_2);
                            ___x152_3 = _mm256_fmadd_ps(___x151_3_0, ___x150_0, ___x152_3);
                            ___x152_3 = _mm256_fmadd_ps(___x151_3_1, ___x150_1, ___x152_3);
                            ___x152_3 = _mm256_fmadd_ps(___x151_3_2, ___x150_2, ___x152_3);
                            ___x152_3 = _mm256_fmadd_ps(___x151_3_3, ___x150_3, ___x152_3);
                            ___x152_4 = _mm256_fmadd_ps(___x151_4_0, ___x150_0, ___x152_4);
                            ___x152_4 = _mm256_fmadd_ps(___x151_4_1, ___x150_1, ___x152_4);
                            ___x152_4 = _mm256_fmadd_ps(___x151_4_2, ___x150_2, ___x152_4);
                            ___x152_4 = _mm256_fmadd_ps(___x151_4_3, ___x150_3, ___x152_4);
                            ___x152_5 = _mm256_fmadd_ps(___x151_5_0, ___x150_0, ___x152_5);
                            ___x152_5 = _mm256_fmadd_ps(___x151_5_1, ___x150_1, ___x152_5);
                            ___x152_5 = _mm256_fmadd_ps(___x151_5_2, ___x150_2, ___x152_5);
                            ___x152_5 = _mm256_fmadd_ps(___x151_5_3, ___x150_3, ___x152_5);
                            ___x152_6 = _mm256_fmadd_ps(___x151_6_0, ___x150_0, ___x152_6);
                            ___x152_6 = _mm256_fmadd_ps(___x151_6_1, ___x150_1, ___x152_6);
                            ___x152_6 = _mm256_fmadd_ps(___x151_6_2, ___x150_2, ___x152_6);
                            ___x152_6 = _mm256_fmadd_ps(___x151_6_3, ___x150_3, ___x152_6);
                            ___x152_7 = _mm256_fmadd_ps(___x151_7_0, ___x150_0, ___x152_7);
                            ___x152_7 = _mm256_fmadd_ps(___x151_7_1, ___x150_1, ___x152_7);
                            ___x152_7 = _mm256_fmadd_ps(___x151_7_2, ___x150_2, ___x152_7);
                            ___x152_7 = _mm256_fmadd_ps(___x151_7_3, ___x150_3, ___x152_7);
                            ___x152_8 = _mm256_fmadd_ps(___x151_8_0, ___x150_0, ___x152_8);
                            ___x152_8 = _mm256_fmadd_ps(___x151_8_1, ___x150_1, ___x152_8);
                            ___x152_8 = _mm256_fmadd_ps(___x151_8_2, ___x150_2, ___x152_8);
                            ___x152_8 = _mm256_fmadd_ps(___x151_8_3, ___x150_3, ___x152_8);
                            ___x152_9 = _mm256_fmadd_ps(___x151_9_0, ___x150_0, ___x152_9);
                            ___x152_9 = _mm256_fmadd_ps(___x151_9_1, ___x150_1, ___x152_9);
                            ___x152_9 = _mm256_fmadd_ps(___x151_9_2, ___x150_2, ___x152_9);
                            ___x152_9 = _mm256_fmadd_ps(___x151_9_3, ___x150_3, ___x152_9);
                            ___x152_10 = _mm256_fmadd_ps(___x151_10_0, ___x150_0, ___x152_10);
                            ___x152_10 = _mm256_fmadd_ps(___x151_10_1, ___x150_1, ___x152_10);
                            ___x152_10 = _mm256_fmadd_ps(___x151_10_2, ___x150_2, ___x152_10);
                            ___x152_10 = _mm256_fmadd_ps(___x151_10_3, ___x150_3, ___x152_10);
                            ___x152_11 = _mm256_fmadd_ps(___x151_11_0, ___x150_0, ___x152_11);
                            ___x152_11 = _mm256_fmadd_ps(___x151_11_1, ___x150_1, ___x152_11);
                            ___x152_11 = _mm256_fmadd_ps(___x151_11_2, ___x150_2, ___x152_11);
                            ___x152_11 = _mm256_fmadd_ps(___x151_11_3, ___x150_3, ___x152_11);
                            ___x152_12 = _mm256_fmadd_ps(___x151_12_0, ___x150_0, ___x152_12);
                            ___x152_12 = _mm256_fmadd_ps(___x151_12_1, ___x150_1, ___x152_12);
                            ___x152_12 = _mm256_fmadd_ps(___x151_12_2, ___x150_2, ___x152_12);
                            ___x152_12 = _mm256_fmadd_ps(___x151_12_3, ___x150_3, ___x152_12);
                            ___x152_13 = _mm256_fmadd_ps(___x151_13_0, ___x150_0, ___x152_13);
                            ___x152_13 = _mm256_fmadd_ps(___x151_13_1, ___x150_1, ___x152_13);
                            ___x152_13 = _mm256_fmadd_ps(___x151_13_2, ___x150_2, ___x152_13);
                            ___x152_13 = _mm256_fmadd_ps(___x151_13_3, ___x150_3, ___x152_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x152_0);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x152_1);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x152_2);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x152_3);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x152_4);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x152_5);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x152_6);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x152_7);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x152_8);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x152_9);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x152_10);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x152_11);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x152_12);
                _mm256_store_ps(& ensemble62value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x152_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble63value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble63inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble63bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble64value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble64inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 2,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 60; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble65weights[x0][x1][x2][x3][0][0], & ensemble65weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,2 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 60; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x160_0 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0]);
                __m256 ___x160_1 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0]);
                __m256 ___x160_2 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0]);
                __m256 ___x160_3 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0]);
                __m256 ___x160_4 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0]);
                __m256 ___x160_5 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0]);
                __m256 ___x160_6 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0]);
                __m256 ___x160_7 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0]);
                __m256 ___x160_8 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0]);
                __m256 ___x160_9 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0]);
                __m256 ___x160_10 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0]);
                __m256 ___x160_11 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0]);
                __m256 ___x160_12 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0]);
                __m256 ___x160_13 = _mm256_load_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x159_0 = _mm256_load_ps(& ensemble65weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x159_1 = _mm256_load_ps(& ensemble65weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x159_2 = _mm256_load_ps(& ensemble65weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x159_3 = _mm256_load_ps(& ensemble65weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x161_0_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x161_0_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x161_0_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x161_0_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x161_1_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x161_1_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x161_1_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x161_1_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x161_2_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x161_2_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x161_2_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x161_2_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x161_3_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x161_3_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x161_3_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x161_3_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x161_4_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x161_4_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x161_4_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x161_4_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x161_5_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x161_5_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x161_5_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x161_5_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x161_6_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x161_6_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x161_6_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x161_6_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x161_7_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x161_7_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x161_7_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x161_7_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x161_8_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x161_8_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x161_8_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x161_8_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x161_9_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x161_9_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x161_9_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x161_9_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x161_10_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x161_10_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x161_10_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x161_10_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x161_11_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x161_11_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x161_11_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x161_11_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x161_12_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x161_12_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x161_12_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x161_12_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x161_13_0 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x161_13_1 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x161_13_2 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x161_13_3 = _mm256_broadcast_ss(& ensemble65inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x160_0 = _mm256_fmadd_ps(___x161_0_0, ___x159_0, ___x160_0);
                            ___x160_0 = _mm256_fmadd_ps(___x161_0_1, ___x159_1, ___x160_0);
                            ___x160_0 = _mm256_fmadd_ps(___x161_0_2, ___x159_2, ___x160_0);
                            ___x160_0 = _mm256_fmadd_ps(___x161_0_3, ___x159_3, ___x160_0);
                            ___x160_1 = _mm256_fmadd_ps(___x161_1_0, ___x159_0, ___x160_1);
                            ___x160_1 = _mm256_fmadd_ps(___x161_1_1, ___x159_1, ___x160_1);
                            ___x160_1 = _mm256_fmadd_ps(___x161_1_2, ___x159_2, ___x160_1);
                            ___x160_1 = _mm256_fmadd_ps(___x161_1_3, ___x159_3, ___x160_1);
                            ___x160_2 = _mm256_fmadd_ps(___x161_2_0, ___x159_0, ___x160_2);
                            ___x160_2 = _mm256_fmadd_ps(___x161_2_1, ___x159_1, ___x160_2);
                            ___x160_2 = _mm256_fmadd_ps(___x161_2_2, ___x159_2, ___x160_2);
                            ___x160_2 = _mm256_fmadd_ps(___x161_2_3, ___x159_3, ___x160_2);
                            ___x160_3 = _mm256_fmadd_ps(___x161_3_0, ___x159_0, ___x160_3);
                            ___x160_3 = _mm256_fmadd_ps(___x161_3_1, ___x159_1, ___x160_3);
                            ___x160_3 = _mm256_fmadd_ps(___x161_3_2, ___x159_2, ___x160_3);
                            ___x160_3 = _mm256_fmadd_ps(___x161_3_3, ___x159_3, ___x160_3);
                            ___x160_4 = _mm256_fmadd_ps(___x161_4_0, ___x159_0, ___x160_4);
                            ___x160_4 = _mm256_fmadd_ps(___x161_4_1, ___x159_1, ___x160_4);
                            ___x160_4 = _mm256_fmadd_ps(___x161_4_2, ___x159_2, ___x160_4);
                            ___x160_4 = _mm256_fmadd_ps(___x161_4_3, ___x159_3, ___x160_4);
                            ___x160_5 = _mm256_fmadd_ps(___x161_5_0, ___x159_0, ___x160_5);
                            ___x160_5 = _mm256_fmadd_ps(___x161_5_1, ___x159_1, ___x160_5);
                            ___x160_5 = _mm256_fmadd_ps(___x161_5_2, ___x159_2, ___x160_5);
                            ___x160_5 = _mm256_fmadd_ps(___x161_5_3, ___x159_3, ___x160_5);
                            ___x160_6 = _mm256_fmadd_ps(___x161_6_0, ___x159_0, ___x160_6);
                            ___x160_6 = _mm256_fmadd_ps(___x161_6_1, ___x159_1, ___x160_6);
                            ___x160_6 = _mm256_fmadd_ps(___x161_6_2, ___x159_2, ___x160_6);
                            ___x160_6 = _mm256_fmadd_ps(___x161_6_3, ___x159_3, ___x160_6);
                            ___x160_7 = _mm256_fmadd_ps(___x161_7_0, ___x159_0, ___x160_7);
                            ___x160_7 = _mm256_fmadd_ps(___x161_7_1, ___x159_1, ___x160_7);
                            ___x160_7 = _mm256_fmadd_ps(___x161_7_2, ___x159_2, ___x160_7);
                            ___x160_7 = _mm256_fmadd_ps(___x161_7_3, ___x159_3, ___x160_7);
                            ___x160_8 = _mm256_fmadd_ps(___x161_8_0, ___x159_0, ___x160_8);
                            ___x160_8 = _mm256_fmadd_ps(___x161_8_1, ___x159_1, ___x160_8);
                            ___x160_8 = _mm256_fmadd_ps(___x161_8_2, ___x159_2, ___x160_8);
                            ___x160_8 = _mm256_fmadd_ps(___x161_8_3, ___x159_3, ___x160_8);
                            ___x160_9 = _mm256_fmadd_ps(___x161_9_0, ___x159_0, ___x160_9);
                            ___x160_9 = _mm256_fmadd_ps(___x161_9_1, ___x159_1, ___x160_9);
                            ___x160_9 = _mm256_fmadd_ps(___x161_9_2, ___x159_2, ___x160_9);
                            ___x160_9 = _mm256_fmadd_ps(___x161_9_3, ___x159_3, ___x160_9);
                            ___x160_10 = _mm256_fmadd_ps(___x161_10_0, ___x159_0, ___x160_10);
                            ___x160_10 = _mm256_fmadd_ps(___x161_10_1, ___x159_1, ___x160_10);
                            ___x160_10 = _mm256_fmadd_ps(___x161_10_2, ___x159_2, ___x160_10);
                            ___x160_10 = _mm256_fmadd_ps(___x161_10_3, ___x159_3, ___x160_10);
                            ___x160_11 = _mm256_fmadd_ps(___x161_11_0, ___x159_0, ___x160_11);
                            ___x160_11 = _mm256_fmadd_ps(___x161_11_1, ___x159_1, ___x160_11);
                            ___x160_11 = _mm256_fmadd_ps(___x161_11_2, ___x159_2, ___x160_11);
                            ___x160_11 = _mm256_fmadd_ps(___x161_11_3, ___x159_3, ___x160_11);
                            ___x160_12 = _mm256_fmadd_ps(___x161_12_0, ___x159_0, ___x160_12);
                            ___x160_12 = _mm256_fmadd_ps(___x161_12_1, ___x159_1, ___x160_12);
                            ___x160_12 = _mm256_fmadd_ps(___x161_12_2, ___x159_2, ___x160_12);
                            ___x160_12 = _mm256_fmadd_ps(___x161_12_3, ___x159_3, ___x160_12);
                            ___x160_13 = _mm256_fmadd_ps(___x161_13_0, ___x159_0, ___x160_13);
                            ___x160_13 = _mm256_fmadd_ps(___x161_13_1, ___x159_1, ___x160_13);
                            ___x160_13 = _mm256_fmadd_ps(___x161_13_2, ___x159_2, ___x160_13);
                            ___x160_13 = _mm256_fmadd_ps(___x161_13_3, ___x159_3, ___x160_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0], ___x160_0);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0], ___x160_1);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0], ___x160_2);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0], ___x160_3);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0], ___x160_4);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0], ___x160_5);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0], ___x160_6);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0], ___x160_7);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0], ___x160_8);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0], ___x160_9);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0], ___x160_10);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0], ___x160_11);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0], ___x160_12);
                _mm256_store_ps(& ensemble65value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0], ___x160_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble66value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble66inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] + ensemble66bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble67value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble67inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 6,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 2; x1 ++) {
        for (int x2 = 0; x2 < 5; x2 ++) {
            for (int x3 = 0; x3 < 5; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble68weights[x0][x1][x2][x3][0][0], & ensemble68weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,6 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 2; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x169_0 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x169_1 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x169_2 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x169_3 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x169_4 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x169_5 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x169_6 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x169_7 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x169_8 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x169_9 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x169_10 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x169_11 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x169_12 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x169_13 = _mm256_load_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x168_0 = _mm256_load_ps(& ensemble68weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x168_1 = _mm256_load_ps(& ensemble68weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x168_2 = _mm256_load_ps(& ensemble68weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x168_3 = _mm256_load_ps(& ensemble68weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x170_0_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x170_0_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x170_0_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x170_0_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x170_1_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x170_1_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x170_1_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x170_1_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x170_2_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x170_2_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x170_2_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x170_2_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x170_3_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x170_3_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x170_3_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x170_3_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x170_4_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x170_4_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x170_4_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x170_4_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x170_5_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x170_5_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x170_5_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x170_5_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x170_6_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x170_6_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x170_6_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x170_6_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x170_7_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x170_7_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x170_7_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x170_7_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x170_8_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x170_8_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x170_8_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x170_8_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x170_9_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x170_9_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x170_9_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x170_9_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x170_10_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x170_10_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x170_10_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x170_10_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x170_11_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x170_11_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x170_11_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x170_11_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x170_12_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x170_12_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x170_12_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x170_12_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x170_13_0 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x170_13_1 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x170_13_2 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x170_13_3 = _mm256_broadcast_ss(& ensemble68inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x169_0 = _mm256_fmadd_ps(___x170_0_0, ___x168_0, ___x169_0);
                            ___x169_0 = _mm256_fmadd_ps(___x170_0_1, ___x168_1, ___x169_0);
                            ___x169_0 = _mm256_fmadd_ps(___x170_0_2, ___x168_2, ___x169_0);
                            ___x169_0 = _mm256_fmadd_ps(___x170_0_3, ___x168_3, ___x169_0);
                            ___x169_1 = _mm256_fmadd_ps(___x170_1_0, ___x168_0, ___x169_1);
                            ___x169_1 = _mm256_fmadd_ps(___x170_1_1, ___x168_1, ___x169_1);
                            ___x169_1 = _mm256_fmadd_ps(___x170_1_2, ___x168_2, ___x169_1);
                            ___x169_1 = _mm256_fmadd_ps(___x170_1_3, ___x168_3, ___x169_1);
                            ___x169_2 = _mm256_fmadd_ps(___x170_2_0, ___x168_0, ___x169_2);
                            ___x169_2 = _mm256_fmadd_ps(___x170_2_1, ___x168_1, ___x169_2);
                            ___x169_2 = _mm256_fmadd_ps(___x170_2_2, ___x168_2, ___x169_2);
                            ___x169_2 = _mm256_fmadd_ps(___x170_2_3, ___x168_3, ___x169_2);
                            ___x169_3 = _mm256_fmadd_ps(___x170_3_0, ___x168_0, ___x169_3);
                            ___x169_3 = _mm256_fmadd_ps(___x170_3_1, ___x168_1, ___x169_3);
                            ___x169_3 = _mm256_fmadd_ps(___x170_3_2, ___x168_2, ___x169_3);
                            ___x169_3 = _mm256_fmadd_ps(___x170_3_3, ___x168_3, ___x169_3);
                            ___x169_4 = _mm256_fmadd_ps(___x170_4_0, ___x168_0, ___x169_4);
                            ___x169_4 = _mm256_fmadd_ps(___x170_4_1, ___x168_1, ___x169_4);
                            ___x169_4 = _mm256_fmadd_ps(___x170_4_2, ___x168_2, ___x169_4);
                            ___x169_4 = _mm256_fmadd_ps(___x170_4_3, ___x168_3, ___x169_4);
                            ___x169_5 = _mm256_fmadd_ps(___x170_5_0, ___x168_0, ___x169_5);
                            ___x169_5 = _mm256_fmadd_ps(___x170_5_1, ___x168_1, ___x169_5);
                            ___x169_5 = _mm256_fmadd_ps(___x170_5_2, ___x168_2, ___x169_5);
                            ___x169_5 = _mm256_fmadd_ps(___x170_5_3, ___x168_3, ___x169_5);
                            ___x169_6 = _mm256_fmadd_ps(___x170_6_0, ___x168_0, ___x169_6);
                            ___x169_6 = _mm256_fmadd_ps(___x170_6_1, ___x168_1, ___x169_6);
                            ___x169_6 = _mm256_fmadd_ps(___x170_6_2, ___x168_2, ___x169_6);
                            ___x169_6 = _mm256_fmadd_ps(___x170_6_3, ___x168_3, ___x169_6);
                            ___x169_7 = _mm256_fmadd_ps(___x170_7_0, ___x168_0, ___x169_7);
                            ___x169_7 = _mm256_fmadd_ps(___x170_7_1, ___x168_1, ___x169_7);
                            ___x169_7 = _mm256_fmadd_ps(___x170_7_2, ___x168_2, ___x169_7);
                            ___x169_7 = _mm256_fmadd_ps(___x170_7_3, ___x168_3, ___x169_7);
                            ___x169_8 = _mm256_fmadd_ps(___x170_8_0, ___x168_0, ___x169_8);
                            ___x169_8 = _mm256_fmadd_ps(___x170_8_1, ___x168_1, ___x169_8);
                            ___x169_8 = _mm256_fmadd_ps(___x170_8_2, ___x168_2, ___x169_8);
                            ___x169_8 = _mm256_fmadd_ps(___x170_8_3, ___x168_3, ___x169_8);
                            ___x169_9 = _mm256_fmadd_ps(___x170_9_0, ___x168_0, ___x169_9);
                            ___x169_9 = _mm256_fmadd_ps(___x170_9_1, ___x168_1, ___x169_9);
                            ___x169_9 = _mm256_fmadd_ps(___x170_9_2, ___x168_2, ___x169_9);
                            ___x169_9 = _mm256_fmadd_ps(___x170_9_3, ___x168_3, ___x169_9);
                            ___x169_10 = _mm256_fmadd_ps(___x170_10_0, ___x168_0, ___x169_10);
                            ___x169_10 = _mm256_fmadd_ps(___x170_10_1, ___x168_1, ___x169_10);
                            ___x169_10 = _mm256_fmadd_ps(___x170_10_2, ___x168_2, ___x169_10);
                            ___x169_10 = _mm256_fmadd_ps(___x170_10_3, ___x168_3, ___x169_10);
                            ___x169_11 = _mm256_fmadd_ps(___x170_11_0, ___x168_0, ___x169_11);
                            ___x169_11 = _mm256_fmadd_ps(___x170_11_1, ___x168_1, ___x169_11);
                            ___x169_11 = _mm256_fmadd_ps(___x170_11_2, ___x168_2, ___x169_11);
                            ___x169_11 = _mm256_fmadd_ps(___x170_11_3, ___x168_3, ___x169_11);
                            ___x169_12 = _mm256_fmadd_ps(___x170_12_0, ___x168_0, ___x169_12);
                            ___x169_12 = _mm256_fmadd_ps(___x170_12_1, ___x168_1, ___x169_12);
                            ___x169_12 = _mm256_fmadd_ps(___x170_12_2, ___x168_2, ___x169_12);
                            ___x169_12 = _mm256_fmadd_ps(___x170_12_3, ___x168_3, ___x169_12);
                            ___x169_13 = _mm256_fmadd_ps(___x170_13_0, ___x168_0, ___x169_13);
                            ___x169_13 = _mm256_fmadd_ps(___x170_13_1, ___x168_1, ___x169_13);
                            ___x169_13 = _mm256_fmadd_ps(___x170_13_2, ___x168_2, ___x169_13);
                            ___x169_13 = _mm256_fmadd_ps(___x170_13_3, ___x168_3, ___x169_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x169_0);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x169_1);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x169_2);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x169_3);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x169_4);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x169_5);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x169_6);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x169_7);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x169_8);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x169_9);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x169_10);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x169_11);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x169_12);
                _mm256_store_ps(& ensemble68value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x169_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble69value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble69inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble69bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble70value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble70inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        
    parallel_for(0,60 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 1 - 1;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 1 - 1;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble71inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble71inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner];
                            ensemble71mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble71mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble71value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 8,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 60; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble72weights[x0][x1][x2][x3][0][0], & ensemble72weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,8 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 60; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x179_0 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x179_1 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x179_2 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x179_3 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x179_4 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x179_5 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x179_6 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x179_7 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x179_8 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x179_9 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x179_10 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x179_11 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x179_12 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x179_13 = _mm256_load_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x177_0 = _mm256_load_ps(& ensemble72weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x177_1 = _mm256_load_ps(& ensemble72weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x177_2 = _mm256_load_ps(& ensemble72weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x177_3 = _mm256_load_ps(& ensemble72weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x178_0_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x178_0_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x178_0_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x178_0_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x178_1_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x178_1_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x178_1_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x178_1_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x178_2_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x178_2_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x178_2_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x178_2_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x178_3_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x178_3_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x178_3_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x178_3_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x178_4_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x178_4_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x178_4_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x178_4_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x178_5_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x178_5_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x178_5_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x178_5_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x178_6_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x178_6_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x178_6_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x178_6_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x178_7_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x178_7_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x178_7_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x178_7_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x178_8_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x178_8_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x178_8_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x178_8_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x178_9_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x178_9_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x178_9_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x178_9_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x178_10_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x178_10_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x178_10_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x178_10_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x178_11_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x178_11_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x178_11_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x178_11_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x178_12_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x178_12_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x178_12_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x178_12_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x178_13_0 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x178_13_1 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x178_13_2 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x178_13_3 = _mm256_broadcast_ss(& ensemble72inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x179_0 = _mm256_fmadd_ps(___x178_0_0, ___x177_0, ___x179_0);
                            ___x179_0 = _mm256_fmadd_ps(___x178_0_1, ___x177_1, ___x179_0);
                            ___x179_0 = _mm256_fmadd_ps(___x178_0_2, ___x177_2, ___x179_0);
                            ___x179_0 = _mm256_fmadd_ps(___x178_0_3, ___x177_3, ___x179_0);
                            ___x179_1 = _mm256_fmadd_ps(___x178_1_0, ___x177_0, ___x179_1);
                            ___x179_1 = _mm256_fmadd_ps(___x178_1_1, ___x177_1, ___x179_1);
                            ___x179_1 = _mm256_fmadd_ps(___x178_1_2, ___x177_2, ___x179_1);
                            ___x179_1 = _mm256_fmadd_ps(___x178_1_3, ___x177_3, ___x179_1);
                            ___x179_2 = _mm256_fmadd_ps(___x178_2_0, ___x177_0, ___x179_2);
                            ___x179_2 = _mm256_fmadd_ps(___x178_2_1, ___x177_1, ___x179_2);
                            ___x179_2 = _mm256_fmadd_ps(___x178_2_2, ___x177_2, ___x179_2);
                            ___x179_2 = _mm256_fmadd_ps(___x178_2_3, ___x177_3, ___x179_2);
                            ___x179_3 = _mm256_fmadd_ps(___x178_3_0, ___x177_0, ___x179_3);
                            ___x179_3 = _mm256_fmadd_ps(___x178_3_1, ___x177_1, ___x179_3);
                            ___x179_3 = _mm256_fmadd_ps(___x178_3_2, ___x177_2, ___x179_3);
                            ___x179_3 = _mm256_fmadd_ps(___x178_3_3, ___x177_3, ___x179_3);
                            ___x179_4 = _mm256_fmadd_ps(___x178_4_0, ___x177_0, ___x179_4);
                            ___x179_4 = _mm256_fmadd_ps(___x178_4_1, ___x177_1, ___x179_4);
                            ___x179_4 = _mm256_fmadd_ps(___x178_4_2, ___x177_2, ___x179_4);
                            ___x179_4 = _mm256_fmadd_ps(___x178_4_3, ___x177_3, ___x179_4);
                            ___x179_5 = _mm256_fmadd_ps(___x178_5_0, ___x177_0, ___x179_5);
                            ___x179_5 = _mm256_fmadd_ps(___x178_5_1, ___x177_1, ___x179_5);
                            ___x179_5 = _mm256_fmadd_ps(___x178_5_2, ___x177_2, ___x179_5);
                            ___x179_5 = _mm256_fmadd_ps(___x178_5_3, ___x177_3, ___x179_5);
                            ___x179_6 = _mm256_fmadd_ps(___x178_6_0, ___x177_0, ___x179_6);
                            ___x179_6 = _mm256_fmadd_ps(___x178_6_1, ___x177_1, ___x179_6);
                            ___x179_6 = _mm256_fmadd_ps(___x178_6_2, ___x177_2, ___x179_6);
                            ___x179_6 = _mm256_fmadd_ps(___x178_6_3, ___x177_3, ___x179_6);
                            ___x179_7 = _mm256_fmadd_ps(___x178_7_0, ___x177_0, ___x179_7);
                            ___x179_7 = _mm256_fmadd_ps(___x178_7_1, ___x177_1, ___x179_7);
                            ___x179_7 = _mm256_fmadd_ps(___x178_7_2, ___x177_2, ___x179_7);
                            ___x179_7 = _mm256_fmadd_ps(___x178_7_3, ___x177_3, ___x179_7);
                            ___x179_8 = _mm256_fmadd_ps(___x178_8_0, ___x177_0, ___x179_8);
                            ___x179_8 = _mm256_fmadd_ps(___x178_8_1, ___x177_1, ___x179_8);
                            ___x179_8 = _mm256_fmadd_ps(___x178_8_2, ___x177_2, ___x179_8);
                            ___x179_8 = _mm256_fmadd_ps(___x178_8_3, ___x177_3, ___x179_8);
                            ___x179_9 = _mm256_fmadd_ps(___x178_9_0, ___x177_0, ___x179_9);
                            ___x179_9 = _mm256_fmadd_ps(___x178_9_1, ___x177_1, ___x179_9);
                            ___x179_9 = _mm256_fmadd_ps(___x178_9_2, ___x177_2, ___x179_9);
                            ___x179_9 = _mm256_fmadd_ps(___x178_9_3, ___x177_3, ___x179_9);
                            ___x179_10 = _mm256_fmadd_ps(___x178_10_0, ___x177_0, ___x179_10);
                            ___x179_10 = _mm256_fmadd_ps(___x178_10_1, ___x177_1, ___x179_10);
                            ___x179_10 = _mm256_fmadd_ps(___x178_10_2, ___x177_2, ___x179_10);
                            ___x179_10 = _mm256_fmadd_ps(___x178_10_3, ___x177_3, ___x179_10);
                            ___x179_11 = _mm256_fmadd_ps(___x178_11_0, ___x177_0, ___x179_11);
                            ___x179_11 = _mm256_fmadd_ps(___x178_11_1, ___x177_1, ___x179_11);
                            ___x179_11 = _mm256_fmadd_ps(___x178_11_2, ___x177_2, ___x179_11);
                            ___x179_11 = _mm256_fmadd_ps(___x178_11_3, ___x177_3, ___x179_11);
                            ___x179_12 = _mm256_fmadd_ps(___x178_12_0, ___x177_0, ___x179_12);
                            ___x179_12 = _mm256_fmadd_ps(___x178_12_1, ___x177_1, ___x179_12);
                            ___x179_12 = _mm256_fmadd_ps(___x178_12_2, ___x177_2, ___x179_12);
                            ___x179_12 = _mm256_fmadd_ps(___x178_12_3, ___x177_3, ___x179_12);
                            ___x179_13 = _mm256_fmadd_ps(___x178_13_0, ___x177_0, ___x179_13);
                            ___x179_13 = _mm256_fmadd_ps(___x178_13_1, ___x177_1, ___x179_13);
                            ___x179_13 = _mm256_fmadd_ps(___x178_13_2, ___x177_2, ___x179_13);
                            ___x179_13 = _mm256_fmadd_ps(___x178_13_3, ___x177_3, ___x179_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x179_0);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x179_1);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x179_2);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x179_3);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x179_4);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x179_5);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x179_6);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x179_7);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x179_8);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x179_9);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x179_10);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x179_11);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x179_12);
                _mm256_store_ps(& ensemble72value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x179_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble73value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble73inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble73bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble74value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble74inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 24; _neuron_index_1_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble75value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble75inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 26; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble75value[_neuron_index_0][(_neuron_index_1_outer + 24)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble75inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble75value[_neuron_index_0][(_neuron_index_1_outer + 50)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble75inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble75value[_neuron_index_0][(_neuron_index_1_outer + 56)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble75inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        
    parallel_for(0,64 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 3 - 0;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 3 - 0;
                int _input_offset_3 = in_x;
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        ensemble76value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] += ensemble76inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner];
                    }
                }
                ensemble76value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble76value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / ensemble76kernel[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble77weights[x0][x1][x2][x3][0][0], & ensemble77weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 4) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                __m256 ___x187_0 = _mm256_load_ps(& ensemble77value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x187_1 = _mm256_load_ps(& ensemble77value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x187_2 = _mm256_load_ps(& ensemble77value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x187_3 = _mm256_load_ps(& ensemble77value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x186_0_0 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x186_0_1 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x186_0_2 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x186_0_3 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x186_1_0 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x186_1_1 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x186_1_2 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x186_1_3 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x186_2_0 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x186_2_1 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x186_2_2 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x186_2_3 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x186_3_0 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x186_3_1 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x186_3_2 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x186_3_3 = _mm256_broadcast_ss(& ensemble77inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x188_0 = _mm256_load_ps(& ensemble77weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x188_1 = _mm256_load_ps(& ensemble77weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x188_2 = _mm256_load_ps(& ensemble77weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x188_3 = _mm256_load_ps(& ensemble77weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x187_0 = _mm256_fmadd_ps(___x186_0_0, ___x188_0, ___x187_0);
                            ___x187_0 = _mm256_fmadd_ps(___x186_0_1, ___x188_1, ___x187_0);
                            ___x187_0 = _mm256_fmadd_ps(___x186_0_2, ___x188_2, ___x187_0);
                            ___x187_0 = _mm256_fmadd_ps(___x186_0_3, ___x188_3, ___x187_0);
                            ___x187_1 = _mm256_fmadd_ps(___x186_1_0, ___x188_0, ___x187_1);
                            ___x187_1 = _mm256_fmadd_ps(___x186_1_1, ___x188_1, ___x187_1);
                            ___x187_1 = _mm256_fmadd_ps(___x186_1_2, ___x188_2, ___x187_1);
                            ___x187_1 = _mm256_fmadd_ps(___x186_1_3, ___x188_3, ___x187_1);
                            ___x187_2 = _mm256_fmadd_ps(___x186_2_0, ___x188_0, ___x187_2);
                            ___x187_2 = _mm256_fmadd_ps(___x186_2_1, ___x188_1, ___x187_2);
                            ___x187_2 = _mm256_fmadd_ps(___x186_2_2, ___x188_2, ___x187_2);
                            ___x187_2 = _mm256_fmadd_ps(___x186_2_3, ___x188_3, ___x187_2);
                            ___x187_3 = _mm256_fmadd_ps(___x186_3_0, ___x188_0, ___x187_3);
                            ___x187_3 = _mm256_fmadd_ps(___x186_3_1, ___x188_1, ___x187_3);
                            ___x187_3 = _mm256_fmadd_ps(___x186_3_2, ___x188_2, ___x187_3);
                            ___x187_3 = _mm256_fmadd_ps(___x186_3_3, ___x188_3, ___x187_3);
                        }
                    }
                }
                _mm256_store_ps(& ensemble77value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x187_0);
                _mm256_store_ps(& ensemble77value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x187_1);
                _mm256_store_ps(& ensemble77value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x187_2);
                _mm256_store_ps(& ensemble77value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x187_3);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble78value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble78inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble78bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble79value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble79inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 128,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 16; x1 ++) {
        for (int x2 = 0; x2 < 4; x2 ++) {
            for (int x3 = 0; x3 < 4; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble80weights[x0][x1][x2][x3][0][0], & ensemble80weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 16,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 16;
          
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          __m256 ___x195_0 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 0)][_neuron_index_1_outer][0]);
    __m256 ___x195_1 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 1)][_neuron_index_1_outer][0]);
    __m256 ___x195_2 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 2)][_neuron_index_1_outer][0]);
    __m256 ___x195_3 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 3)][_neuron_index_1_outer][0]);
    __m256 ___x195_4 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 4)][_neuron_index_1_outer][0]);
    __m256 ___x195_5 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 5)][_neuron_index_1_outer][0]);
    __m256 ___x195_6 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 6)][_neuron_index_1_outer][0]);
    __m256 ___x195_7 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 7)][_neuron_index_1_outer][0]);
    __m256 ___x195_8 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 8)][_neuron_index_1_outer][0]);
    __m256 ___x195_9 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 9)][_neuron_index_1_outer][0]);
    __m256 ___x195_10 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 10)][_neuron_index_1_outer][0]);
    __m256 ___x195_11 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 11)][_neuron_index_1_outer][0]);
    __m256 ___x195_12 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 12)][_neuron_index_1_outer][0]);
    __m256 ___x195_13 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 13)][_neuron_index_1_outer][0]);
    __m256 ___x195_14 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 14)][_neuron_index_1_outer][0]);
    __m256 ___x195_15 = _mm256_load_ps(& ensemble80value[(_neuron_index_0 + 15)][_neuron_index_1_outer][0]);
    for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 16; __unique_loopvar0_outer += 1) {
        for (int __unique_loopvar0_inner = 0; __unique_loopvar0_inner < 8; __unique_loopvar0_inner += 1) {
            for (int __unique_loopvar1 = 0; __unique_loopvar1 < 4; __unique_loopvar1 += 1) {
                for (int __unique_loopvar2 = 0; __unique_loopvar2 < 4; __unique_loopvar2 += 1) {
                    __m256 ___x196_0 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_1 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_2 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_3 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_4 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_5 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_6 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_7 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_8 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_9 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_10 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_11 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_12 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_13 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_14 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x196_15 = _mm256_broadcast_ss(& ensemble80inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x197 = _mm256_load_ps(& ensemble80weights_transposed[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][__unique_loopvar0_inner][0]);
                    ___x195_0 = _mm256_fmadd_ps(___x196_0, ___x197, ___x195_0);
                    ___x195_1 = _mm256_fmadd_ps(___x196_1, ___x197, ___x195_1);
                    ___x195_2 = _mm256_fmadd_ps(___x196_2, ___x197, ___x195_2);
                    ___x195_3 = _mm256_fmadd_ps(___x196_3, ___x197, ___x195_3);
                    ___x195_4 = _mm256_fmadd_ps(___x196_4, ___x197, ___x195_4);
                    ___x195_5 = _mm256_fmadd_ps(___x196_5, ___x197, ___x195_5);
                    ___x195_6 = _mm256_fmadd_ps(___x196_6, ___x197, ___x195_6);
                    ___x195_7 = _mm256_fmadd_ps(___x196_7, ___x197, ___x195_7);
                    ___x195_8 = _mm256_fmadd_ps(___x196_8, ___x197, ___x195_8);
                    ___x195_9 = _mm256_fmadd_ps(___x196_9, ___x197, ___x195_9);
                    ___x195_10 = _mm256_fmadd_ps(___x196_10, ___x197, ___x195_10);
                    ___x195_11 = _mm256_fmadd_ps(___x196_11, ___x197, ___x195_11);
                    ___x195_12 = _mm256_fmadd_ps(___x196_12, ___x197, ___x195_12);
                    ___x195_13 = _mm256_fmadd_ps(___x196_13, ___x197, ___x195_13);
                    ___x195_14 = _mm256_fmadd_ps(___x196_14, ___x197, ___x195_14);
                    ___x195_15 = _mm256_fmadd_ps(___x196_15, ___x197, ___x195_15);
                }
            }
        }
    }
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 0)][_neuron_index_1_outer][0], ___x195_0);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 1)][_neuron_index_1_outer][0], ___x195_1);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 2)][_neuron_index_1_outer][0], ___x195_2);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 3)][_neuron_index_1_outer][0], ___x195_3);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 4)][_neuron_index_1_outer][0], ___x195_4);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 5)][_neuron_index_1_outer][0], ___x195_5);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 6)][_neuron_index_1_outer][0], ___x195_6);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 7)][_neuron_index_1_outer][0], ___x195_7);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 8)][_neuron_index_1_outer][0], ___x195_8);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 9)][_neuron_index_1_outer][0], ___x195_9);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 10)][_neuron_index_1_outer][0], ___x195_10);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 11)][_neuron_index_1_outer][0], ___x195_11);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 12)][_neuron_index_1_outer][0], ___x195_12);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 13)][_neuron_index_1_outer][0], ___x195_13);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 14)][_neuron_index_1_outer][0], ___x195_14);
    _mm256_store_ps(& ensemble80value[(_neuron_index_0 + 15)][_neuron_index_1_outer][0], ___x195_15);
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
        ensemble81value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = ensemble81inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] + ensemble81bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
        ensemble82value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = MAX(ensemble82inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner], (float) 0.0);
    };
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 126,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 128; x1 ++) {
        transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble83weights[x0][x1][0][0], & ensemble83weights_transposed[x0][x1][0][0]);
    }
        } 
      }
    );
    
    parallel_for(0,128 / 16,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 16;
          
    parallel_for(0,126 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          __m256 ___x206_0 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 0)][_neuron_index_1_outer][0]);
    __m256 ___x206_1 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 1)][_neuron_index_1_outer][0]);
    __m256 ___x206_2 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 2)][_neuron_index_1_outer][0]);
    __m256 ___x206_3 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 3)][_neuron_index_1_outer][0]);
    __m256 ___x206_4 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 4)][_neuron_index_1_outer][0]);
    __m256 ___x206_5 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 5)][_neuron_index_1_outer][0]);
    __m256 ___x206_6 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 6)][_neuron_index_1_outer][0]);
    __m256 ___x206_7 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 7)][_neuron_index_1_outer][0]);
    __m256 ___x206_8 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 8)][_neuron_index_1_outer][0]);
    __m256 ___x206_9 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 9)][_neuron_index_1_outer][0]);
    __m256 ___x206_10 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 10)][_neuron_index_1_outer][0]);
    __m256 ___x206_11 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 11)][_neuron_index_1_outer][0]);
    __m256 ___x206_12 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 12)][_neuron_index_1_outer][0]);
    __m256 ___x206_13 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 13)][_neuron_index_1_outer][0]);
    __m256 ___x206_14 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 14)][_neuron_index_1_outer][0]);
    __m256 ___x206_15 = _mm256_load_ps(& ensemble83value[(_neuron_index_0 + 15)][_neuron_index_1_outer][0]);
    for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 128; __unique_loopvar0_outer += 1) {
        for (int __unique_loopvar0_inner = 0; __unique_loopvar0_inner < 8; __unique_loopvar0_inner += 1) {
            __m256 ___x204 = _mm256_load_ps(& ensemble83weights_transposed[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar0_inner][0]);
            __m256 ___x205_0 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_1 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_2 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_3 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_4 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_5 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_6 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_7 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_8 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_9 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_10 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_11 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_12 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_13 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_14 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x205_15 = _mm256_broadcast_ss(& ensemble83inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            ___x206_0 = _mm256_fmadd_ps(___x205_0, ___x204, ___x206_0);
            ___x206_1 = _mm256_fmadd_ps(___x205_1, ___x204, ___x206_1);
            ___x206_2 = _mm256_fmadd_ps(___x205_2, ___x204, ___x206_2);
            ___x206_3 = _mm256_fmadd_ps(___x205_3, ___x204, ___x206_3);
            ___x206_4 = _mm256_fmadd_ps(___x205_4, ___x204, ___x206_4);
            ___x206_5 = _mm256_fmadd_ps(___x205_5, ___x204, ___x206_5);
            ___x206_6 = _mm256_fmadd_ps(___x205_6, ___x204, ___x206_6);
            ___x206_7 = _mm256_fmadd_ps(___x205_7, ___x204, ___x206_7);
            ___x206_8 = _mm256_fmadd_ps(___x205_8, ___x204, ___x206_8);
            ___x206_9 = _mm256_fmadd_ps(___x205_9, ___x204, ___x206_9);
            ___x206_10 = _mm256_fmadd_ps(___x205_10, ___x204, ___x206_10);
            ___x206_11 = _mm256_fmadd_ps(___x205_11, ___x204, ___x206_11);
            ___x206_12 = _mm256_fmadd_ps(___x205_12, ___x204, ___x206_12);
            ___x206_13 = _mm256_fmadd_ps(___x205_13, ___x204, ___x206_13);
            ___x206_14 = _mm256_fmadd_ps(___x205_14, ___x204, ___x206_14);
            ___x206_15 = _mm256_fmadd_ps(___x205_15, ___x204, ___x206_15);
        }
    }
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 0)][_neuron_index_1_outer][0], ___x206_0);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 1)][_neuron_index_1_outer][0], ___x206_1);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 2)][_neuron_index_1_outer][0], ___x206_2);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 3)][_neuron_index_1_outer][0], ___x206_3);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 4)][_neuron_index_1_outer][0], ___x206_4);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 5)][_neuron_index_1_outer][0], ___x206_5);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 6)][_neuron_index_1_outer][0], ___x206_6);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 7)][_neuron_index_1_outer][0], ___x206_7);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 8)][_neuron_index_1_outer][0], ___x206_8);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 9)][_neuron_index_1_outer][0], ___x206_9);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 10)][_neuron_index_1_outer][0], ___x206_10);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 11)][_neuron_index_1_outer][0], ___x206_11);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 12)][_neuron_index_1_outer][0], ___x206_12);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 13)][_neuron_index_1_outer][0], ___x206_13);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 14)][_neuron_index_1_outer][0], ___x206_14);
    _mm256_store_ps(& ensemble83value[(_neuron_index_0 + 15)][_neuron_index_1_outer][0], ___x206_15);
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,126 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
        ensemble84value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = ensemble84inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] + ensemble84bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
    };
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 20,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble85weights[x0][x1][x2][x3][0][0], & ensemble85weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,20 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x213_0 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x213_1 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x213_2 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x213_3 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x213_4 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x213_5 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x213_6 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x213_7 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x213_8 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x213_9 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x213_10 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x213_11 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x213_12 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x213_13 = _mm256_load_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x214_0_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x214_0_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x214_0_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x214_0_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x214_1_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x214_1_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x214_1_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x214_1_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x214_2_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x214_2_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x214_2_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x214_2_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x214_3_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x214_3_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x214_3_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x214_3_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x214_4_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x214_4_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x214_4_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x214_4_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x214_5_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x214_5_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x214_5_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x214_5_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x214_6_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x214_6_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x214_6_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x214_6_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x214_7_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x214_7_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x214_7_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x214_7_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x214_8_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x214_8_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x214_8_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x214_8_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x214_9_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x214_9_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x214_9_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x214_9_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x214_10_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x214_10_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x214_10_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x214_10_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x214_11_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x214_11_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x214_11_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x214_11_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x214_12_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x214_12_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x214_12_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x214_12_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x214_13_0 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x214_13_1 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x214_13_2 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x214_13_3 = _mm256_broadcast_ss(& ensemble85inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x215_0 = _mm256_load_ps(& ensemble85weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x215_1 = _mm256_load_ps(& ensemble85weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x215_2 = _mm256_load_ps(& ensemble85weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x215_3 = _mm256_load_ps(& ensemble85weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x213_0 = _mm256_fmadd_ps(___x214_0_0, ___x215_0, ___x213_0);
                            ___x213_0 = _mm256_fmadd_ps(___x214_0_1, ___x215_1, ___x213_0);
                            ___x213_0 = _mm256_fmadd_ps(___x214_0_2, ___x215_2, ___x213_0);
                            ___x213_0 = _mm256_fmadd_ps(___x214_0_3, ___x215_3, ___x213_0);
                            ___x213_1 = _mm256_fmadd_ps(___x214_1_0, ___x215_0, ___x213_1);
                            ___x213_1 = _mm256_fmadd_ps(___x214_1_1, ___x215_1, ___x213_1);
                            ___x213_1 = _mm256_fmadd_ps(___x214_1_2, ___x215_2, ___x213_1);
                            ___x213_1 = _mm256_fmadd_ps(___x214_1_3, ___x215_3, ___x213_1);
                            ___x213_2 = _mm256_fmadd_ps(___x214_2_0, ___x215_0, ___x213_2);
                            ___x213_2 = _mm256_fmadd_ps(___x214_2_1, ___x215_1, ___x213_2);
                            ___x213_2 = _mm256_fmadd_ps(___x214_2_2, ___x215_2, ___x213_2);
                            ___x213_2 = _mm256_fmadd_ps(___x214_2_3, ___x215_3, ___x213_2);
                            ___x213_3 = _mm256_fmadd_ps(___x214_3_0, ___x215_0, ___x213_3);
                            ___x213_3 = _mm256_fmadd_ps(___x214_3_1, ___x215_1, ___x213_3);
                            ___x213_3 = _mm256_fmadd_ps(___x214_3_2, ___x215_2, ___x213_3);
                            ___x213_3 = _mm256_fmadd_ps(___x214_3_3, ___x215_3, ___x213_3);
                            ___x213_4 = _mm256_fmadd_ps(___x214_4_0, ___x215_0, ___x213_4);
                            ___x213_4 = _mm256_fmadd_ps(___x214_4_1, ___x215_1, ___x213_4);
                            ___x213_4 = _mm256_fmadd_ps(___x214_4_2, ___x215_2, ___x213_4);
                            ___x213_4 = _mm256_fmadd_ps(___x214_4_3, ___x215_3, ___x213_4);
                            ___x213_5 = _mm256_fmadd_ps(___x214_5_0, ___x215_0, ___x213_5);
                            ___x213_5 = _mm256_fmadd_ps(___x214_5_1, ___x215_1, ___x213_5);
                            ___x213_5 = _mm256_fmadd_ps(___x214_5_2, ___x215_2, ___x213_5);
                            ___x213_5 = _mm256_fmadd_ps(___x214_5_3, ___x215_3, ___x213_5);
                            ___x213_6 = _mm256_fmadd_ps(___x214_6_0, ___x215_0, ___x213_6);
                            ___x213_6 = _mm256_fmadd_ps(___x214_6_1, ___x215_1, ___x213_6);
                            ___x213_6 = _mm256_fmadd_ps(___x214_6_2, ___x215_2, ___x213_6);
                            ___x213_6 = _mm256_fmadd_ps(___x214_6_3, ___x215_3, ___x213_6);
                            ___x213_7 = _mm256_fmadd_ps(___x214_7_0, ___x215_0, ___x213_7);
                            ___x213_7 = _mm256_fmadd_ps(___x214_7_1, ___x215_1, ___x213_7);
                            ___x213_7 = _mm256_fmadd_ps(___x214_7_2, ___x215_2, ___x213_7);
                            ___x213_7 = _mm256_fmadd_ps(___x214_7_3, ___x215_3, ___x213_7);
                            ___x213_8 = _mm256_fmadd_ps(___x214_8_0, ___x215_0, ___x213_8);
                            ___x213_8 = _mm256_fmadd_ps(___x214_8_1, ___x215_1, ___x213_8);
                            ___x213_8 = _mm256_fmadd_ps(___x214_8_2, ___x215_2, ___x213_8);
                            ___x213_8 = _mm256_fmadd_ps(___x214_8_3, ___x215_3, ___x213_8);
                            ___x213_9 = _mm256_fmadd_ps(___x214_9_0, ___x215_0, ___x213_9);
                            ___x213_9 = _mm256_fmadd_ps(___x214_9_1, ___x215_1, ___x213_9);
                            ___x213_9 = _mm256_fmadd_ps(___x214_9_2, ___x215_2, ___x213_9);
                            ___x213_9 = _mm256_fmadd_ps(___x214_9_3, ___x215_3, ___x213_9);
                            ___x213_10 = _mm256_fmadd_ps(___x214_10_0, ___x215_0, ___x213_10);
                            ___x213_10 = _mm256_fmadd_ps(___x214_10_1, ___x215_1, ___x213_10);
                            ___x213_10 = _mm256_fmadd_ps(___x214_10_2, ___x215_2, ___x213_10);
                            ___x213_10 = _mm256_fmadd_ps(___x214_10_3, ___x215_3, ___x213_10);
                            ___x213_11 = _mm256_fmadd_ps(___x214_11_0, ___x215_0, ___x213_11);
                            ___x213_11 = _mm256_fmadd_ps(___x214_11_1, ___x215_1, ___x213_11);
                            ___x213_11 = _mm256_fmadd_ps(___x214_11_2, ___x215_2, ___x213_11);
                            ___x213_11 = _mm256_fmadd_ps(___x214_11_3, ___x215_3, ___x213_11);
                            ___x213_12 = _mm256_fmadd_ps(___x214_12_0, ___x215_0, ___x213_12);
                            ___x213_12 = _mm256_fmadd_ps(___x214_12_1, ___x215_1, ___x213_12);
                            ___x213_12 = _mm256_fmadd_ps(___x214_12_2, ___x215_2, ___x213_12);
                            ___x213_12 = _mm256_fmadd_ps(___x214_12_3, ___x215_3, ___x213_12);
                            ___x213_13 = _mm256_fmadd_ps(___x214_13_0, ___x215_0, ___x213_13);
                            ___x213_13 = _mm256_fmadd_ps(___x214_13_1, ___x215_1, ___x213_13);
                            ___x213_13 = _mm256_fmadd_ps(___x214_13_2, ___x215_2, ___x213_13);
                            ___x213_13 = _mm256_fmadd_ps(___x214_13_3, ___x215_3, ___x213_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x213_0);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x213_1);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x213_2);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x213_3);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x213_4);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x213_5);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x213_6);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x213_7);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x213_8);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x213_9);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x213_10);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x213_11);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x213_12);
                _mm256_store_ps(& ensemble85value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x213_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble86value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble86inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble86bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble87value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble87inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 14,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble88weights[x0][x1][x2][x3][0][0], & ensemble88weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,14 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x223_0 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0]);
                __m256 ___x223_1 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0]);
                __m256 ___x223_2 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0]);
                __m256 ___x223_3 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0]);
                __m256 ___x223_4 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0]);
                __m256 ___x223_5 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0]);
                __m256 ___x223_6 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0]);
                __m256 ___x223_7 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0]);
                __m256 ___x223_8 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0]);
                __m256 ___x223_9 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0]);
                __m256 ___x223_10 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0]);
                __m256 ___x223_11 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0]);
                __m256 ___x223_12 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0]);
                __m256 ___x223_13 = _mm256_load_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x222_0 = _mm256_load_ps(& ensemble88weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x222_1 = _mm256_load_ps(& ensemble88weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x222_2 = _mm256_load_ps(& ensemble88weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x222_3 = _mm256_load_ps(& ensemble88weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x224_0_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x224_0_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x224_0_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x224_0_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x224_1_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x224_1_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x224_1_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x224_1_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x224_2_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x224_2_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x224_2_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x224_2_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x224_3_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x224_3_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x224_3_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x224_3_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x224_4_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x224_4_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x224_4_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x224_4_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x224_5_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x224_5_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x224_5_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x224_5_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x224_6_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x224_6_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x224_6_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x224_6_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x224_7_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x224_7_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x224_7_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x224_7_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x224_8_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x224_8_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x224_8_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x224_8_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x224_9_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x224_9_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x224_9_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x224_9_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x224_10_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x224_10_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x224_10_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x224_10_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x224_11_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x224_11_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x224_11_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x224_11_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x224_12_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x224_12_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x224_12_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x224_12_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x224_13_0 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x224_13_1 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x224_13_2 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x224_13_3 = _mm256_broadcast_ss(& ensemble88inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x223_0 = _mm256_fmadd_ps(___x224_0_0, ___x222_0, ___x223_0);
                            ___x223_0 = _mm256_fmadd_ps(___x224_0_1, ___x222_1, ___x223_0);
                            ___x223_0 = _mm256_fmadd_ps(___x224_0_2, ___x222_2, ___x223_0);
                            ___x223_0 = _mm256_fmadd_ps(___x224_0_3, ___x222_3, ___x223_0);
                            ___x223_1 = _mm256_fmadd_ps(___x224_1_0, ___x222_0, ___x223_1);
                            ___x223_1 = _mm256_fmadd_ps(___x224_1_1, ___x222_1, ___x223_1);
                            ___x223_1 = _mm256_fmadd_ps(___x224_1_2, ___x222_2, ___x223_1);
                            ___x223_1 = _mm256_fmadd_ps(___x224_1_3, ___x222_3, ___x223_1);
                            ___x223_2 = _mm256_fmadd_ps(___x224_2_0, ___x222_0, ___x223_2);
                            ___x223_2 = _mm256_fmadd_ps(___x224_2_1, ___x222_1, ___x223_2);
                            ___x223_2 = _mm256_fmadd_ps(___x224_2_2, ___x222_2, ___x223_2);
                            ___x223_2 = _mm256_fmadd_ps(___x224_2_3, ___x222_3, ___x223_2);
                            ___x223_3 = _mm256_fmadd_ps(___x224_3_0, ___x222_0, ___x223_3);
                            ___x223_3 = _mm256_fmadd_ps(___x224_3_1, ___x222_1, ___x223_3);
                            ___x223_3 = _mm256_fmadd_ps(___x224_3_2, ___x222_2, ___x223_3);
                            ___x223_3 = _mm256_fmadd_ps(___x224_3_3, ___x222_3, ___x223_3);
                            ___x223_4 = _mm256_fmadd_ps(___x224_4_0, ___x222_0, ___x223_4);
                            ___x223_4 = _mm256_fmadd_ps(___x224_4_1, ___x222_1, ___x223_4);
                            ___x223_4 = _mm256_fmadd_ps(___x224_4_2, ___x222_2, ___x223_4);
                            ___x223_4 = _mm256_fmadd_ps(___x224_4_3, ___x222_3, ___x223_4);
                            ___x223_5 = _mm256_fmadd_ps(___x224_5_0, ___x222_0, ___x223_5);
                            ___x223_5 = _mm256_fmadd_ps(___x224_5_1, ___x222_1, ___x223_5);
                            ___x223_5 = _mm256_fmadd_ps(___x224_5_2, ___x222_2, ___x223_5);
                            ___x223_5 = _mm256_fmadd_ps(___x224_5_3, ___x222_3, ___x223_5);
                            ___x223_6 = _mm256_fmadd_ps(___x224_6_0, ___x222_0, ___x223_6);
                            ___x223_6 = _mm256_fmadd_ps(___x224_6_1, ___x222_1, ___x223_6);
                            ___x223_6 = _mm256_fmadd_ps(___x224_6_2, ___x222_2, ___x223_6);
                            ___x223_6 = _mm256_fmadd_ps(___x224_6_3, ___x222_3, ___x223_6);
                            ___x223_7 = _mm256_fmadd_ps(___x224_7_0, ___x222_0, ___x223_7);
                            ___x223_7 = _mm256_fmadd_ps(___x224_7_1, ___x222_1, ___x223_7);
                            ___x223_7 = _mm256_fmadd_ps(___x224_7_2, ___x222_2, ___x223_7);
                            ___x223_7 = _mm256_fmadd_ps(___x224_7_3, ___x222_3, ___x223_7);
                            ___x223_8 = _mm256_fmadd_ps(___x224_8_0, ___x222_0, ___x223_8);
                            ___x223_8 = _mm256_fmadd_ps(___x224_8_1, ___x222_1, ___x223_8);
                            ___x223_8 = _mm256_fmadd_ps(___x224_8_2, ___x222_2, ___x223_8);
                            ___x223_8 = _mm256_fmadd_ps(___x224_8_3, ___x222_3, ___x223_8);
                            ___x223_9 = _mm256_fmadd_ps(___x224_9_0, ___x222_0, ___x223_9);
                            ___x223_9 = _mm256_fmadd_ps(___x224_9_1, ___x222_1, ___x223_9);
                            ___x223_9 = _mm256_fmadd_ps(___x224_9_2, ___x222_2, ___x223_9);
                            ___x223_9 = _mm256_fmadd_ps(___x224_9_3, ___x222_3, ___x223_9);
                            ___x223_10 = _mm256_fmadd_ps(___x224_10_0, ___x222_0, ___x223_10);
                            ___x223_10 = _mm256_fmadd_ps(___x224_10_1, ___x222_1, ___x223_10);
                            ___x223_10 = _mm256_fmadd_ps(___x224_10_2, ___x222_2, ___x223_10);
                            ___x223_10 = _mm256_fmadd_ps(___x224_10_3, ___x222_3, ___x223_10);
                            ___x223_11 = _mm256_fmadd_ps(___x224_11_0, ___x222_0, ___x223_11);
                            ___x223_11 = _mm256_fmadd_ps(___x224_11_1, ___x222_1, ___x223_11);
                            ___x223_11 = _mm256_fmadd_ps(___x224_11_2, ___x222_2, ___x223_11);
                            ___x223_11 = _mm256_fmadd_ps(___x224_11_3, ___x222_3, ___x223_11);
                            ___x223_12 = _mm256_fmadd_ps(___x224_12_0, ___x222_0, ___x223_12);
                            ___x223_12 = _mm256_fmadd_ps(___x224_12_1, ___x222_1, ___x223_12);
                            ___x223_12 = _mm256_fmadd_ps(___x224_12_2, ___x222_2, ___x223_12);
                            ___x223_12 = _mm256_fmadd_ps(___x224_12_3, ___x222_3, ___x223_12);
                            ___x223_13 = _mm256_fmadd_ps(___x224_13_0, ___x222_0, ___x223_13);
                            ___x223_13 = _mm256_fmadd_ps(___x224_13_1, ___x222_1, ___x223_13);
                            ___x223_13 = _mm256_fmadd_ps(___x224_13_2, ___x222_2, ___x223_13);
                            ___x223_13 = _mm256_fmadd_ps(___x224_13_3, ___x222_3, ___x223_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0], ___x223_0);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0], ___x223_1);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0], ___x223_2);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0], ___x223_3);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0], ___x223_4);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0], ___x223_5);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0], ___x223_6);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0], ___x223_7);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0], ___x223_8);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0], ___x223_9);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0], ___x223_10);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0], ___x223_11);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0], ___x223_12);
                _mm256_store_ps(& ensemble88value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0], ___x223_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble89value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble89inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] + ensemble89bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble90value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble90inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 28,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 14; x1 ++) {
        for (int x2 = 0; x2 < 3; x2 ++) {
            for (int x3 = 0; x3 < 3; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble91weights[x0][x1][x2][x3][0][0], & ensemble91weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,28 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 14; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x232_0 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x232_1 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x232_2 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x232_3 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x232_4 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x232_5 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x232_6 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x232_7 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x232_8 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x232_9 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x232_10 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x232_11 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x232_12 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x232_13 = _mm256_load_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x231_0_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x231_0_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x231_0_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x231_0_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x231_1_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x231_1_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x231_1_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x231_1_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x231_2_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x231_2_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x231_2_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x231_2_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x231_3_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x231_3_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x231_3_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x231_3_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x231_4_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x231_4_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x231_4_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x231_4_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x231_5_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x231_5_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x231_5_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x231_5_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x231_6_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x231_6_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x231_6_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x231_6_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x231_7_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x231_7_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x231_7_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x231_7_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x231_8_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x231_8_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x231_8_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x231_8_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x231_9_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x231_9_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x231_9_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x231_9_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x231_10_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x231_10_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x231_10_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x231_10_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x231_11_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x231_11_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x231_11_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x231_11_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x231_12_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x231_12_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x231_12_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x231_12_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x231_13_0 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x231_13_1 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x231_13_2 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x231_13_3 = _mm256_broadcast_ss(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x233_0 = _mm256_load_ps(& ensemble91weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x233_1 = _mm256_load_ps(& ensemble91weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x233_2 = _mm256_load_ps(& ensemble91weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x233_3 = _mm256_load_ps(& ensemble91weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x232_0 = _mm256_fmadd_ps(___x231_0_0, ___x233_0, ___x232_0);
                            ___x232_0 = _mm256_fmadd_ps(___x231_0_1, ___x233_1, ___x232_0);
                            ___x232_0 = _mm256_fmadd_ps(___x231_0_2, ___x233_2, ___x232_0);
                            ___x232_0 = _mm256_fmadd_ps(___x231_0_3, ___x233_3, ___x232_0);
                            ___x232_1 = _mm256_fmadd_ps(___x231_1_0, ___x233_0, ___x232_1);
                            ___x232_1 = _mm256_fmadd_ps(___x231_1_1, ___x233_1, ___x232_1);
                            ___x232_1 = _mm256_fmadd_ps(___x231_1_2, ___x233_2, ___x232_1);
                            ___x232_1 = _mm256_fmadd_ps(___x231_1_3, ___x233_3, ___x232_1);
                            ___x232_2 = _mm256_fmadd_ps(___x231_2_0, ___x233_0, ___x232_2);
                            ___x232_2 = _mm256_fmadd_ps(___x231_2_1, ___x233_1, ___x232_2);
                            ___x232_2 = _mm256_fmadd_ps(___x231_2_2, ___x233_2, ___x232_2);
                            ___x232_2 = _mm256_fmadd_ps(___x231_2_3, ___x233_3, ___x232_2);
                            ___x232_3 = _mm256_fmadd_ps(___x231_3_0, ___x233_0, ___x232_3);
                            ___x232_3 = _mm256_fmadd_ps(___x231_3_1, ___x233_1, ___x232_3);
                            ___x232_3 = _mm256_fmadd_ps(___x231_3_2, ___x233_2, ___x232_3);
                            ___x232_3 = _mm256_fmadd_ps(___x231_3_3, ___x233_3, ___x232_3);
                            ___x232_4 = _mm256_fmadd_ps(___x231_4_0, ___x233_0, ___x232_4);
                            ___x232_4 = _mm256_fmadd_ps(___x231_4_1, ___x233_1, ___x232_4);
                            ___x232_4 = _mm256_fmadd_ps(___x231_4_2, ___x233_2, ___x232_4);
                            ___x232_4 = _mm256_fmadd_ps(___x231_4_3, ___x233_3, ___x232_4);
                            ___x232_5 = _mm256_fmadd_ps(___x231_5_0, ___x233_0, ___x232_5);
                            ___x232_5 = _mm256_fmadd_ps(___x231_5_1, ___x233_1, ___x232_5);
                            ___x232_5 = _mm256_fmadd_ps(___x231_5_2, ___x233_2, ___x232_5);
                            ___x232_5 = _mm256_fmadd_ps(___x231_5_3, ___x233_3, ___x232_5);
                            ___x232_6 = _mm256_fmadd_ps(___x231_6_0, ___x233_0, ___x232_6);
                            ___x232_6 = _mm256_fmadd_ps(___x231_6_1, ___x233_1, ___x232_6);
                            ___x232_6 = _mm256_fmadd_ps(___x231_6_2, ___x233_2, ___x232_6);
                            ___x232_6 = _mm256_fmadd_ps(___x231_6_3, ___x233_3, ___x232_6);
                            ___x232_7 = _mm256_fmadd_ps(___x231_7_0, ___x233_0, ___x232_7);
                            ___x232_7 = _mm256_fmadd_ps(___x231_7_1, ___x233_1, ___x232_7);
                            ___x232_7 = _mm256_fmadd_ps(___x231_7_2, ___x233_2, ___x232_7);
                            ___x232_7 = _mm256_fmadd_ps(___x231_7_3, ___x233_3, ___x232_7);
                            ___x232_8 = _mm256_fmadd_ps(___x231_8_0, ___x233_0, ___x232_8);
                            ___x232_8 = _mm256_fmadd_ps(___x231_8_1, ___x233_1, ___x232_8);
                            ___x232_8 = _mm256_fmadd_ps(___x231_8_2, ___x233_2, ___x232_8);
                            ___x232_8 = _mm256_fmadd_ps(___x231_8_3, ___x233_3, ___x232_8);
                            ___x232_9 = _mm256_fmadd_ps(___x231_9_0, ___x233_0, ___x232_9);
                            ___x232_9 = _mm256_fmadd_ps(___x231_9_1, ___x233_1, ___x232_9);
                            ___x232_9 = _mm256_fmadd_ps(___x231_9_2, ___x233_2, ___x232_9);
                            ___x232_9 = _mm256_fmadd_ps(___x231_9_3, ___x233_3, ___x232_9);
                            ___x232_10 = _mm256_fmadd_ps(___x231_10_0, ___x233_0, ___x232_10);
                            ___x232_10 = _mm256_fmadd_ps(___x231_10_1, ___x233_1, ___x232_10);
                            ___x232_10 = _mm256_fmadd_ps(___x231_10_2, ___x233_2, ___x232_10);
                            ___x232_10 = _mm256_fmadd_ps(___x231_10_3, ___x233_3, ___x232_10);
                            ___x232_11 = _mm256_fmadd_ps(___x231_11_0, ___x233_0, ___x232_11);
                            ___x232_11 = _mm256_fmadd_ps(___x231_11_1, ___x233_1, ___x232_11);
                            ___x232_11 = _mm256_fmadd_ps(___x231_11_2, ___x233_2, ___x232_11);
                            ___x232_11 = _mm256_fmadd_ps(___x231_11_3, ___x233_3, ___x232_11);
                            ___x232_12 = _mm256_fmadd_ps(___x231_12_0, ___x233_0, ___x232_12);
                            ___x232_12 = _mm256_fmadd_ps(___x231_12_1, ___x233_1, ___x232_12);
                            ___x232_12 = _mm256_fmadd_ps(___x231_12_2, ___x233_2, ___x232_12);
                            ___x232_12 = _mm256_fmadd_ps(___x231_12_3, ___x233_3, ___x232_12);
                            ___x232_13 = _mm256_fmadd_ps(___x231_13_0, ___x233_0, ___x232_13);
                            ___x232_13 = _mm256_fmadd_ps(___x231_13_1, ___x233_1, ___x232_13);
                            ___x232_13 = _mm256_fmadd_ps(___x231_13_2, ___x233_2, ___x232_13);
                            ___x232_13 = _mm256_fmadd_ps(___x231_13_3, ___x233_3, ___x232_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x232_0);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x232_1);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x232_2);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x232_3);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x232_4);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x232_5);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x232_6);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x232_7);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x232_8);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x232_9);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x232_10);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x232_11);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x232_12);
                _mm256_store_ps(& ensemble91value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x232_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble92value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble92inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble92bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble93value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble93inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 3,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble94weights[x0][x1][x2][x3][0][0], & ensemble94weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,3 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x240_0 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0]);
                __m256 ___x240_1 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0]);
                __m256 ___x240_2 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0]);
                __m256 ___x240_3 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0]);
                __m256 ___x240_4 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0]);
                __m256 ___x240_5 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0]);
                __m256 ___x240_6 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0]);
                __m256 ___x240_7 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0]);
                __m256 ___x240_8 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0]);
                __m256 ___x240_9 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0]);
                __m256 ___x240_10 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0]);
                __m256 ___x240_11 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0]);
                __m256 ___x240_12 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0]);
                __m256 ___x240_13 = _mm256_load_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x241_0_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x241_0_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x241_0_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x241_0_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x241_1_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x241_1_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x241_1_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x241_1_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x241_2_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x241_2_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x241_2_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x241_2_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x241_3_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x241_3_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x241_3_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x241_3_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x241_4_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x241_4_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x241_4_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x241_4_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x241_5_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x241_5_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x241_5_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x241_5_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x241_6_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x241_6_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x241_6_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x241_6_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x241_7_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x241_7_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x241_7_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x241_7_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x241_8_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x241_8_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x241_8_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x241_8_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x241_9_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x241_9_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x241_9_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x241_9_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x241_10_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x241_10_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x241_10_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x241_10_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x241_11_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x241_11_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x241_11_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x241_11_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x241_12_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x241_12_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x241_12_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x241_12_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x241_13_0 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x241_13_1 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x241_13_2 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x241_13_3 = _mm256_broadcast_ss(& ensemble94inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x242_0 = _mm256_load_ps(& ensemble94weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x242_1 = _mm256_load_ps(& ensemble94weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x242_2 = _mm256_load_ps(& ensemble94weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x242_3 = _mm256_load_ps(& ensemble94weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x240_0 = _mm256_fmadd_ps(___x241_0_0, ___x242_0, ___x240_0);
                            ___x240_0 = _mm256_fmadd_ps(___x241_0_1, ___x242_1, ___x240_0);
                            ___x240_0 = _mm256_fmadd_ps(___x241_0_2, ___x242_2, ___x240_0);
                            ___x240_0 = _mm256_fmadd_ps(___x241_0_3, ___x242_3, ___x240_0);
                            ___x240_1 = _mm256_fmadd_ps(___x241_1_0, ___x242_0, ___x240_1);
                            ___x240_1 = _mm256_fmadd_ps(___x241_1_1, ___x242_1, ___x240_1);
                            ___x240_1 = _mm256_fmadd_ps(___x241_1_2, ___x242_2, ___x240_1);
                            ___x240_1 = _mm256_fmadd_ps(___x241_1_3, ___x242_3, ___x240_1);
                            ___x240_2 = _mm256_fmadd_ps(___x241_2_0, ___x242_0, ___x240_2);
                            ___x240_2 = _mm256_fmadd_ps(___x241_2_1, ___x242_1, ___x240_2);
                            ___x240_2 = _mm256_fmadd_ps(___x241_2_2, ___x242_2, ___x240_2);
                            ___x240_2 = _mm256_fmadd_ps(___x241_2_3, ___x242_3, ___x240_2);
                            ___x240_3 = _mm256_fmadd_ps(___x241_3_0, ___x242_0, ___x240_3);
                            ___x240_3 = _mm256_fmadd_ps(___x241_3_1, ___x242_1, ___x240_3);
                            ___x240_3 = _mm256_fmadd_ps(___x241_3_2, ___x242_2, ___x240_3);
                            ___x240_3 = _mm256_fmadd_ps(___x241_3_3, ___x242_3, ___x240_3);
                            ___x240_4 = _mm256_fmadd_ps(___x241_4_0, ___x242_0, ___x240_4);
                            ___x240_4 = _mm256_fmadd_ps(___x241_4_1, ___x242_1, ___x240_4);
                            ___x240_4 = _mm256_fmadd_ps(___x241_4_2, ___x242_2, ___x240_4);
                            ___x240_4 = _mm256_fmadd_ps(___x241_4_3, ___x242_3, ___x240_4);
                            ___x240_5 = _mm256_fmadd_ps(___x241_5_0, ___x242_0, ___x240_5);
                            ___x240_5 = _mm256_fmadd_ps(___x241_5_1, ___x242_1, ___x240_5);
                            ___x240_5 = _mm256_fmadd_ps(___x241_5_2, ___x242_2, ___x240_5);
                            ___x240_5 = _mm256_fmadd_ps(___x241_5_3, ___x242_3, ___x240_5);
                            ___x240_6 = _mm256_fmadd_ps(___x241_6_0, ___x242_0, ___x240_6);
                            ___x240_6 = _mm256_fmadd_ps(___x241_6_1, ___x242_1, ___x240_6);
                            ___x240_6 = _mm256_fmadd_ps(___x241_6_2, ___x242_2, ___x240_6);
                            ___x240_6 = _mm256_fmadd_ps(___x241_6_3, ___x242_3, ___x240_6);
                            ___x240_7 = _mm256_fmadd_ps(___x241_7_0, ___x242_0, ___x240_7);
                            ___x240_7 = _mm256_fmadd_ps(___x241_7_1, ___x242_1, ___x240_7);
                            ___x240_7 = _mm256_fmadd_ps(___x241_7_2, ___x242_2, ___x240_7);
                            ___x240_7 = _mm256_fmadd_ps(___x241_7_3, ___x242_3, ___x240_7);
                            ___x240_8 = _mm256_fmadd_ps(___x241_8_0, ___x242_0, ___x240_8);
                            ___x240_8 = _mm256_fmadd_ps(___x241_8_1, ___x242_1, ___x240_8);
                            ___x240_8 = _mm256_fmadd_ps(___x241_8_2, ___x242_2, ___x240_8);
                            ___x240_8 = _mm256_fmadd_ps(___x241_8_3, ___x242_3, ___x240_8);
                            ___x240_9 = _mm256_fmadd_ps(___x241_9_0, ___x242_0, ___x240_9);
                            ___x240_9 = _mm256_fmadd_ps(___x241_9_1, ___x242_1, ___x240_9);
                            ___x240_9 = _mm256_fmadd_ps(___x241_9_2, ___x242_2, ___x240_9);
                            ___x240_9 = _mm256_fmadd_ps(___x241_9_3, ___x242_3, ___x240_9);
                            ___x240_10 = _mm256_fmadd_ps(___x241_10_0, ___x242_0, ___x240_10);
                            ___x240_10 = _mm256_fmadd_ps(___x241_10_1, ___x242_1, ___x240_10);
                            ___x240_10 = _mm256_fmadd_ps(___x241_10_2, ___x242_2, ___x240_10);
                            ___x240_10 = _mm256_fmadd_ps(___x241_10_3, ___x242_3, ___x240_10);
                            ___x240_11 = _mm256_fmadd_ps(___x241_11_0, ___x242_0, ___x240_11);
                            ___x240_11 = _mm256_fmadd_ps(___x241_11_1, ___x242_1, ___x240_11);
                            ___x240_11 = _mm256_fmadd_ps(___x241_11_2, ___x242_2, ___x240_11);
                            ___x240_11 = _mm256_fmadd_ps(___x241_11_3, ___x242_3, ___x240_11);
                            ___x240_12 = _mm256_fmadd_ps(___x241_12_0, ___x242_0, ___x240_12);
                            ___x240_12 = _mm256_fmadd_ps(___x241_12_1, ___x242_1, ___x240_12);
                            ___x240_12 = _mm256_fmadd_ps(___x241_12_2, ___x242_2, ___x240_12);
                            ___x240_12 = _mm256_fmadd_ps(___x241_12_3, ___x242_3, ___x240_12);
                            ___x240_13 = _mm256_fmadd_ps(___x241_13_0, ___x242_0, ___x240_13);
                            ___x240_13 = _mm256_fmadd_ps(___x241_13_1, ___x242_1, ___x240_13);
                            ___x240_13 = _mm256_fmadd_ps(___x241_13_2, ___x242_2, ___x240_13);
                            ___x240_13 = _mm256_fmadd_ps(___x241_13_3, ___x242_3, ___x240_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0], ___x240_0);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0], ___x240_1);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0], ___x240_2);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0], ___x240_3);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0], ___x240_4);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0], ___x240_5);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0], ___x240_6);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0], ___x240_7);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0], ___x240_8);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0], ___x240_9);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0], ___x240_10);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0], ___x240_11);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0], ___x240_12);
                _mm256_store_ps(& ensemble94value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0], ___x240_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble95value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble95inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] + ensemble95bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble96value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble96inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 8,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 3; x1 ++) {
        for (int x2 = 0; x2 < 5; x2 ++) {
            for (int x3 = 0; x3 < 5; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble97weights[x0][x1][x2][x3][0][0], & ensemble97weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,8 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 3; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x251_0 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x251_1 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x251_2 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x251_3 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x251_4 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x251_5 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x251_6 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x251_7 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x251_8 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x251_9 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x251_10 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x251_11 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x251_12 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x251_13 = _mm256_load_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x249_0 = _mm256_load_ps(& ensemble97weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x249_1 = _mm256_load_ps(& ensemble97weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x249_2 = _mm256_load_ps(& ensemble97weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x249_3 = _mm256_load_ps(& ensemble97weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x250_0_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x250_0_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x250_0_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x250_0_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x250_1_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x250_1_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x250_1_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x250_1_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x250_2_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x250_2_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x250_2_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x250_2_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x250_3_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x250_3_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x250_3_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x250_3_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x250_4_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x250_4_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x250_4_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x250_4_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x250_5_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x250_5_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x250_5_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x250_5_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x250_6_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x250_6_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x250_6_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x250_6_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x250_7_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x250_7_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x250_7_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x250_7_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x250_8_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x250_8_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x250_8_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x250_8_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x250_9_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x250_9_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x250_9_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x250_9_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x250_10_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x250_10_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x250_10_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x250_10_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x250_11_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x250_11_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x250_11_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x250_11_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x250_12_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x250_12_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x250_12_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x250_12_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x250_13_0 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x250_13_1 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x250_13_2 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x250_13_3 = _mm256_broadcast_ss(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x251_0 = _mm256_fmadd_ps(___x250_0_0, ___x249_0, ___x251_0);
                            ___x251_0 = _mm256_fmadd_ps(___x250_0_1, ___x249_1, ___x251_0);
                            ___x251_0 = _mm256_fmadd_ps(___x250_0_2, ___x249_2, ___x251_0);
                            ___x251_0 = _mm256_fmadd_ps(___x250_0_3, ___x249_3, ___x251_0);
                            ___x251_1 = _mm256_fmadd_ps(___x250_1_0, ___x249_0, ___x251_1);
                            ___x251_1 = _mm256_fmadd_ps(___x250_1_1, ___x249_1, ___x251_1);
                            ___x251_1 = _mm256_fmadd_ps(___x250_1_2, ___x249_2, ___x251_1);
                            ___x251_1 = _mm256_fmadd_ps(___x250_1_3, ___x249_3, ___x251_1);
                            ___x251_2 = _mm256_fmadd_ps(___x250_2_0, ___x249_0, ___x251_2);
                            ___x251_2 = _mm256_fmadd_ps(___x250_2_1, ___x249_1, ___x251_2);
                            ___x251_2 = _mm256_fmadd_ps(___x250_2_2, ___x249_2, ___x251_2);
                            ___x251_2 = _mm256_fmadd_ps(___x250_2_3, ___x249_3, ___x251_2);
                            ___x251_3 = _mm256_fmadd_ps(___x250_3_0, ___x249_0, ___x251_3);
                            ___x251_3 = _mm256_fmadd_ps(___x250_3_1, ___x249_1, ___x251_3);
                            ___x251_3 = _mm256_fmadd_ps(___x250_3_2, ___x249_2, ___x251_3);
                            ___x251_3 = _mm256_fmadd_ps(___x250_3_3, ___x249_3, ___x251_3);
                            ___x251_4 = _mm256_fmadd_ps(___x250_4_0, ___x249_0, ___x251_4);
                            ___x251_4 = _mm256_fmadd_ps(___x250_4_1, ___x249_1, ___x251_4);
                            ___x251_4 = _mm256_fmadd_ps(___x250_4_2, ___x249_2, ___x251_4);
                            ___x251_4 = _mm256_fmadd_ps(___x250_4_3, ___x249_3, ___x251_4);
                            ___x251_5 = _mm256_fmadd_ps(___x250_5_0, ___x249_0, ___x251_5);
                            ___x251_5 = _mm256_fmadd_ps(___x250_5_1, ___x249_1, ___x251_5);
                            ___x251_5 = _mm256_fmadd_ps(___x250_5_2, ___x249_2, ___x251_5);
                            ___x251_5 = _mm256_fmadd_ps(___x250_5_3, ___x249_3, ___x251_5);
                            ___x251_6 = _mm256_fmadd_ps(___x250_6_0, ___x249_0, ___x251_6);
                            ___x251_6 = _mm256_fmadd_ps(___x250_6_1, ___x249_1, ___x251_6);
                            ___x251_6 = _mm256_fmadd_ps(___x250_6_2, ___x249_2, ___x251_6);
                            ___x251_6 = _mm256_fmadd_ps(___x250_6_3, ___x249_3, ___x251_6);
                            ___x251_7 = _mm256_fmadd_ps(___x250_7_0, ___x249_0, ___x251_7);
                            ___x251_7 = _mm256_fmadd_ps(___x250_7_1, ___x249_1, ___x251_7);
                            ___x251_7 = _mm256_fmadd_ps(___x250_7_2, ___x249_2, ___x251_7);
                            ___x251_7 = _mm256_fmadd_ps(___x250_7_3, ___x249_3, ___x251_7);
                            ___x251_8 = _mm256_fmadd_ps(___x250_8_0, ___x249_0, ___x251_8);
                            ___x251_8 = _mm256_fmadd_ps(___x250_8_1, ___x249_1, ___x251_8);
                            ___x251_8 = _mm256_fmadd_ps(___x250_8_2, ___x249_2, ___x251_8);
                            ___x251_8 = _mm256_fmadd_ps(___x250_8_3, ___x249_3, ___x251_8);
                            ___x251_9 = _mm256_fmadd_ps(___x250_9_0, ___x249_0, ___x251_9);
                            ___x251_9 = _mm256_fmadd_ps(___x250_9_1, ___x249_1, ___x251_9);
                            ___x251_9 = _mm256_fmadd_ps(___x250_9_2, ___x249_2, ___x251_9);
                            ___x251_9 = _mm256_fmadd_ps(___x250_9_3, ___x249_3, ___x251_9);
                            ___x251_10 = _mm256_fmadd_ps(___x250_10_0, ___x249_0, ___x251_10);
                            ___x251_10 = _mm256_fmadd_ps(___x250_10_1, ___x249_1, ___x251_10);
                            ___x251_10 = _mm256_fmadd_ps(___x250_10_2, ___x249_2, ___x251_10);
                            ___x251_10 = _mm256_fmadd_ps(___x250_10_3, ___x249_3, ___x251_10);
                            ___x251_11 = _mm256_fmadd_ps(___x250_11_0, ___x249_0, ___x251_11);
                            ___x251_11 = _mm256_fmadd_ps(___x250_11_1, ___x249_1, ___x251_11);
                            ___x251_11 = _mm256_fmadd_ps(___x250_11_2, ___x249_2, ___x251_11);
                            ___x251_11 = _mm256_fmadd_ps(___x250_11_3, ___x249_3, ___x251_11);
                            ___x251_12 = _mm256_fmadd_ps(___x250_12_0, ___x249_0, ___x251_12);
                            ___x251_12 = _mm256_fmadd_ps(___x250_12_1, ___x249_1, ___x251_12);
                            ___x251_12 = _mm256_fmadd_ps(___x250_12_2, ___x249_2, ___x251_12);
                            ___x251_12 = _mm256_fmadd_ps(___x250_12_3, ___x249_3, ___x251_12);
                            ___x251_13 = _mm256_fmadd_ps(___x250_13_0, ___x249_0, ___x251_13);
                            ___x251_13 = _mm256_fmadd_ps(___x250_13_1, ___x249_1, ___x251_13);
                            ___x251_13 = _mm256_fmadd_ps(___x250_13_2, ___x249_2, ___x251_13);
                            ___x251_13 = _mm256_fmadd_ps(___x250_13_3, ___x249_3, ___x251_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x251_0);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x251_1);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x251_2);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x251_3);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x251_4);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x251_5);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x251_6);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x251_7);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x251_8);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x251_9);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x251_10);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x251_11);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x251_12);
                _mm256_store_ps(& ensemble97value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x251_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble98value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble98inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble98bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble99value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble99inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        
    parallel_for(0,64 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 1 - 1;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 1 - 1;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble100inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble100inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner];
                            ensemble100mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble100mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble100value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 8,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble101weights[x0][x1][x2][x3][0][0], & ensemble101weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,8 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x260_0 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x260_1 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x260_2 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x260_3 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x260_4 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x260_5 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x260_6 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x260_7 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x260_8 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x260_9 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x260_10 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x260_11 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x260_12 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x260_13 = _mm256_load_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x258_0 = _mm256_load_ps(& ensemble101weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x258_1 = _mm256_load_ps(& ensemble101weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x258_2 = _mm256_load_ps(& ensemble101weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x258_3 = _mm256_load_ps(& ensemble101weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x259_0_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x259_0_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x259_0_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x259_0_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x259_1_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x259_1_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x259_1_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x259_1_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x259_2_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x259_2_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x259_2_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x259_2_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x259_3_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x259_3_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x259_3_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x259_3_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x259_4_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x259_4_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x259_4_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x259_4_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x259_5_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x259_5_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x259_5_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x259_5_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x259_6_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x259_6_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x259_6_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x259_6_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x259_7_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x259_7_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x259_7_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x259_7_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x259_8_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x259_8_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x259_8_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x259_8_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x259_9_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x259_9_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x259_9_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x259_9_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x259_10_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x259_10_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x259_10_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x259_10_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x259_11_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x259_11_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x259_11_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x259_11_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x259_12_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x259_12_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x259_12_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x259_12_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x259_13_0 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x259_13_1 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x259_13_2 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x259_13_3 = _mm256_broadcast_ss(& ensemble101inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x260_0 = _mm256_fmadd_ps(___x259_0_0, ___x258_0, ___x260_0);
                            ___x260_0 = _mm256_fmadd_ps(___x259_0_1, ___x258_1, ___x260_0);
                            ___x260_0 = _mm256_fmadd_ps(___x259_0_2, ___x258_2, ___x260_0);
                            ___x260_0 = _mm256_fmadd_ps(___x259_0_3, ___x258_3, ___x260_0);
                            ___x260_1 = _mm256_fmadd_ps(___x259_1_0, ___x258_0, ___x260_1);
                            ___x260_1 = _mm256_fmadd_ps(___x259_1_1, ___x258_1, ___x260_1);
                            ___x260_1 = _mm256_fmadd_ps(___x259_1_2, ___x258_2, ___x260_1);
                            ___x260_1 = _mm256_fmadd_ps(___x259_1_3, ___x258_3, ___x260_1);
                            ___x260_2 = _mm256_fmadd_ps(___x259_2_0, ___x258_0, ___x260_2);
                            ___x260_2 = _mm256_fmadd_ps(___x259_2_1, ___x258_1, ___x260_2);
                            ___x260_2 = _mm256_fmadd_ps(___x259_2_2, ___x258_2, ___x260_2);
                            ___x260_2 = _mm256_fmadd_ps(___x259_2_3, ___x258_3, ___x260_2);
                            ___x260_3 = _mm256_fmadd_ps(___x259_3_0, ___x258_0, ___x260_3);
                            ___x260_3 = _mm256_fmadd_ps(___x259_3_1, ___x258_1, ___x260_3);
                            ___x260_3 = _mm256_fmadd_ps(___x259_3_2, ___x258_2, ___x260_3);
                            ___x260_3 = _mm256_fmadd_ps(___x259_3_3, ___x258_3, ___x260_3);
                            ___x260_4 = _mm256_fmadd_ps(___x259_4_0, ___x258_0, ___x260_4);
                            ___x260_4 = _mm256_fmadd_ps(___x259_4_1, ___x258_1, ___x260_4);
                            ___x260_4 = _mm256_fmadd_ps(___x259_4_2, ___x258_2, ___x260_4);
                            ___x260_4 = _mm256_fmadd_ps(___x259_4_3, ___x258_3, ___x260_4);
                            ___x260_5 = _mm256_fmadd_ps(___x259_5_0, ___x258_0, ___x260_5);
                            ___x260_5 = _mm256_fmadd_ps(___x259_5_1, ___x258_1, ___x260_5);
                            ___x260_5 = _mm256_fmadd_ps(___x259_5_2, ___x258_2, ___x260_5);
                            ___x260_5 = _mm256_fmadd_ps(___x259_5_3, ___x258_3, ___x260_5);
                            ___x260_6 = _mm256_fmadd_ps(___x259_6_0, ___x258_0, ___x260_6);
                            ___x260_6 = _mm256_fmadd_ps(___x259_6_1, ___x258_1, ___x260_6);
                            ___x260_6 = _mm256_fmadd_ps(___x259_6_2, ___x258_2, ___x260_6);
                            ___x260_6 = _mm256_fmadd_ps(___x259_6_3, ___x258_3, ___x260_6);
                            ___x260_7 = _mm256_fmadd_ps(___x259_7_0, ___x258_0, ___x260_7);
                            ___x260_7 = _mm256_fmadd_ps(___x259_7_1, ___x258_1, ___x260_7);
                            ___x260_7 = _mm256_fmadd_ps(___x259_7_2, ___x258_2, ___x260_7);
                            ___x260_7 = _mm256_fmadd_ps(___x259_7_3, ___x258_3, ___x260_7);
                            ___x260_8 = _mm256_fmadd_ps(___x259_8_0, ___x258_0, ___x260_8);
                            ___x260_8 = _mm256_fmadd_ps(___x259_8_1, ___x258_1, ___x260_8);
                            ___x260_8 = _mm256_fmadd_ps(___x259_8_2, ___x258_2, ___x260_8);
                            ___x260_8 = _mm256_fmadd_ps(___x259_8_3, ___x258_3, ___x260_8);
                            ___x260_9 = _mm256_fmadd_ps(___x259_9_0, ___x258_0, ___x260_9);
                            ___x260_9 = _mm256_fmadd_ps(___x259_9_1, ___x258_1, ___x260_9);
                            ___x260_9 = _mm256_fmadd_ps(___x259_9_2, ___x258_2, ___x260_9);
                            ___x260_9 = _mm256_fmadd_ps(___x259_9_3, ___x258_3, ___x260_9);
                            ___x260_10 = _mm256_fmadd_ps(___x259_10_0, ___x258_0, ___x260_10);
                            ___x260_10 = _mm256_fmadd_ps(___x259_10_1, ___x258_1, ___x260_10);
                            ___x260_10 = _mm256_fmadd_ps(___x259_10_2, ___x258_2, ___x260_10);
                            ___x260_10 = _mm256_fmadd_ps(___x259_10_3, ___x258_3, ___x260_10);
                            ___x260_11 = _mm256_fmadd_ps(___x259_11_0, ___x258_0, ___x260_11);
                            ___x260_11 = _mm256_fmadd_ps(___x259_11_1, ___x258_1, ___x260_11);
                            ___x260_11 = _mm256_fmadd_ps(___x259_11_2, ___x258_2, ___x260_11);
                            ___x260_11 = _mm256_fmadd_ps(___x259_11_3, ___x258_3, ___x260_11);
                            ___x260_12 = _mm256_fmadd_ps(___x259_12_0, ___x258_0, ___x260_12);
                            ___x260_12 = _mm256_fmadd_ps(___x259_12_1, ___x258_1, ___x260_12);
                            ___x260_12 = _mm256_fmadd_ps(___x259_12_2, ___x258_2, ___x260_12);
                            ___x260_12 = _mm256_fmadd_ps(___x259_12_3, ___x258_3, ___x260_12);
                            ___x260_13 = _mm256_fmadd_ps(___x259_13_0, ___x258_0, ___x260_13);
                            ___x260_13 = _mm256_fmadd_ps(___x259_13_1, ___x258_1, ___x260_13);
                            ___x260_13 = _mm256_fmadd_ps(___x259_13_2, ___x258_2, ___x260_13);
                            ___x260_13 = _mm256_fmadd_ps(___x259_13_3, ___x258_3, ___x260_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x260_0);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x260_1);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x260_2);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x260_3);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x260_4);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x260_5);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x260_6);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x260_7);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x260_8);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x260_9);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x260_10);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x260_11);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x260_12);
                _mm256_store_ps(& ensemble101value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x260_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble102value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble102inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble102bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble103value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble103inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 20; _neuron_index_1_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble104value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble104inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 28; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble104value[_neuron_index_0][(_neuron_index_1_outer + 20)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble104inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble104value[_neuron_index_0][(_neuron_index_1_outer + 48)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble104inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    ensemble104value[_neuron_index_0][(_neuron_index_1_outer + 56)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble104inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
    ;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble105weights[x0][x1][x2][x3][0][0], & ensemble105weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x269_0 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x269_1 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x269_2 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x269_3 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x269_4 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x269_5 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x269_6 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x269_7 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x269_8 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x269_9 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x269_10 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x269_11 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x269_12 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x269_13 = _mm256_load_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x267_0 = _mm256_load_ps(& ensemble105weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x267_1 = _mm256_load_ps(& ensemble105weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x267_2 = _mm256_load_ps(& ensemble105weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x267_3 = _mm256_load_ps(& ensemble105weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x268_0_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x268_0_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x268_0_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x268_0_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x268_1_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x268_1_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x268_1_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x268_1_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x268_2_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x268_2_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x268_2_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x268_2_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x268_3_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x268_3_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x268_3_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x268_3_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x268_4_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x268_4_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x268_4_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x268_4_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x268_5_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x268_5_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x268_5_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x268_5_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x268_6_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x268_6_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x268_6_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x268_6_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x268_7_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x268_7_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x268_7_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x268_7_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x268_8_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x268_8_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x268_8_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x268_8_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x268_9_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x268_9_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x268_9_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x268_9_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x268_10_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x268_10_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x268_10_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x268_10_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x268_11_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x268_11_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x268_11_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x268_11_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x268_12_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x268_12_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x268_12_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x268_12_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x268_13_0 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x268_13_1 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x268_13_2 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x268_13_3 = _mm256_broadcast_ss(& ensemble105inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x269_0 = _mm256_fmadd_ps(___x268_0_0, ___x267_0, ___x269_0);
                            ___x269_0 = _mm256_fmadd_ps(___x268_0_1, ___x267_1, ___x269_0);
                            ___x269_0 = _mm256_fmadd_ps(___x268_0_2, ___x267_2, ___x269_0);
                            ___x269_0 = _mm256_fmadd_ps(___x268_0_3, ___x267_3, ___x269_0);
                            ___x269_1 = _mm256_fmadd_ps(___x268_1_0, ___x267_0, ___x269_1);
                            ___x269_1 = _mm256_fmadd_ps(___x268_1_1, ___x267_1, ___x269_1);
                            ___x269_1 = _mm256_fmadd_ps(___x268_1_2, ___x267_2, ___x269_1);
                            ___x269_1 = _mm256_fmadd_ps(___x268_1_3, ___x267_3, ___x269_1);
                            ___x269_2 = _mm256_fmadd_ps(___x268_2_0, ___x267_0, ___x269_2);
                            ___x269_2 = _mm256_fmadd_ps(___x268_2_1, ___x267_1, ___x269_2);
                            ___x269_2 = _mm256_fmadd_ps(___x268_2_2, ___x267_2, ___x269_2);
                            ___x269_2 = _mm256_fmadd_ps(___x268_2_3, ___x267_3, ___x269_2);
                            ___x269_3 = _mm256_fmadd_ps(___x268_3_0, ___x267_0, ___x269_3);
                            ___x269_3 = _mm256_fmadd_ps(___x268_3_1, ___x267_1, ___x269_3);
                            ___x269_3 = _mm256_fmadd_ps(___x268_3_2, ___x267_2, ___x269_3);
                            ___x269_3 = _mm256_fmadd_ps(___x268_3_3, ___x267_3, ___x269_3);
                            ___x269_4 = _mm256_fmadd_ps(___x268_4_0, ___x267_0, ___x269_4);
                            ___x269_4 = _mm256_fmadd_ps(___x268_4_1, ___x267_1, ___x269_4);
                            ___x269_4 = _mm256_fmadd_ps(___x268_4_2, ___x267_2, ___x269_4);
                            ___x269_4 = _mm256_fmadd_ps(___x268_4_3, ___x267_3, ___x269_4);
                            ___x269_5 = _mm256_fmadd_ps(___x268_5_0, ___x267_0, ___x269_5);
                            ___x269_5 = _mm256_fmadd_ps(___x268_5_1, ___x267_1, ___x269_5);
                            ___x269_5 = _mm256_fmadd_ps(___x268_5_2, ___x267_2, ___x269_5);
                            ___x269_5 = _mm256_fmadd_ps(___x268_5_3, ___x267_3, ___x269_5);
                            ___x269_6 = _mm256_fmadd_ps(___x268_6_0, ___x267_0, ___x269_6);
                            ___x269_6 = _mm256_fmadd_ps(___x268_6_1, ___x267_1, ___x269_6);
                            ___x269_6 = _mm256_fmadd_ps(___x268_6_2, ___x267_2, ___x269_6);
                            ___x269_6 = _mm256_fmadd_ps(___x268_6_3, ___x267_3, ___x269_6);
                            ___x269_7 = _mm256_fmadd_ps(___x268_7_0, ___x267_0, ___x269_7);
                            ___x269_7 = _mm256_fmadd_ps(___x268_7_1, ___x267_1, ___x269_7);
                            ___x269_7 = _mm256_fmadd_ps(___x268_7_2, ___x267_2, ___x269_7);
                            ___x269_7 = _mm256_fmadd_ps(___x268_7_3, ___x267_3, ___x269_7);
                            ___x269_8 = _mm256_fmadd_ps(___x268_8_0, ___x267_0, ___x269_8);
                            ___x269_8 = _mm256_fmadd_ps(___x268_8_1, ___x267_1, ___x269_8);
                            ___x269_8 = _mm256_fmadd_ps(___x268_8_2, ___x267_2, ___x269_8);
                            ___x269_8 = _mm256_fmadd_ps(___x268_8_3, ___x267_3, ___x269_8);
                            ___x269_9 = _mm256_fmadd_ps(___x268_9_0, ___x267_0, ___x269_9);
                            ___x269_9 = _mm256_fmadd_ps(___x268_9_1, ___x267_1, ___x269_9);
                            ___x269_9 = _mm256_fmadd_ps(___x268_9_2, ___x267_2, ___x269_9);
                            ___x269_9 = _mm256_fmadd_ps(___x268_9_3, ___x267_3, ___x269_9);
                            ___x269_10 = _mm256_fmadd_ps(___x268_10_0, ___x267_0, ___x269_10);
                            ___x269_10 = _mm256_fmadd_ps(___x268_10_1, ___x267_1, ___x269_10);
                            ___x269_10 = _mm256_fmadd_ps(___x268_10_2, ___x267_2, ___x269_10);
                            ___x269_10 = _mm256_fmadd_ps(___x268_10_3, ___x267_3, ___x269_10);
                            ___x269_11 = _mm256_fmadd_ps(___x268_11_0, ___x267_0, ___x269_11);
                            ___x269_11 = _mm256_fmadd_ps(___x268_11_1, ___x267_1, ___x269_11);
                            ___x269_11 = _mm256_fmadd_ps(___x268_11_2, ___x267_2, ___x269_11);
                            ___x269_11 = _mm256_fmadd_ps(___x268_11_3, ___x267_3, ___x269_11);
                            ___x269_12 = _mm256_fmadd_ps(___x268_12_0, ___x267_0, ___x269_12);
                            ___x269_12 = _mm256_fmadd_ps(___x268_12_1, ___x267_1, ___x269_12);
                            ___x269_12 = _mm256_fmadd_ps(___x268_12_2, ___x267_2, ___x269_12);
                            ___x269_12 = _mm256_fmadd_ps(___x268_12_3, ___x267_3, ___x269_12);
                            ___x269_13 = _mm256_fmadd_ps(___x268_13_0, ___x267_0, ___x269_13);
                            ___x269_13 = _mm256_fmadd_ps(___x268_13_1, ___x267_1, ___x269_13);
                            ___x269_13 = _mm256_fmadd_ps(___x268_13_2, ___x267_2, ___x269_13);
                            ___x269_13 = _mm256_fmadd_ps(___x268_13_3, ___x267_3, ___x269_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x269_0);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x269_1);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x269_2);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x269_3);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x269_4);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x269_5);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x269_6);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x269_7);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x269_8);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x269_9);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x269_10);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x269_11);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x269_12);
                _mm256_store_ps(& ensemble105value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x269_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble106value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble106inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble106bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble107value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble107inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble108weights[x0][x1][x2][x3][0][0], & ensemble108weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x276_0 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0]);
                __m256 ___x276_1 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0]);
                __m256 ___x276_2 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0]);
                __m256 ___x276_3 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0]);
                __m256 ___x276_4 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0]);
                __m256 ___x276_5 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0]);
                __m256 ___x276_6 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0]);
                __m256 ___x276_7 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0]);
                __m256 ___x276_8 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0]);
                __m256 ___x276_9 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0]);
                __m256 ___x276_10 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0]);
                __m256 ___x276_11 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0]);
                __m256 ___x276_12 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0]);
                __m256 ___x276_13 = _mm256_load_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x277_0_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x277_0_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x277_0_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x277_0_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x277_1_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x277_1_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x277_1_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x277_1_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x277_2_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x277_2_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x277_2_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x277_2_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x277_3_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x277_3_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x277_3_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x277_3_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x277_4_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x277_4_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x277_4_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x277_4_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x277_5_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x277_5_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x277_5_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x277_5_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x277_6_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x277_6_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x277_6_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x277_6_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x277_7_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x277_7_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x277_7_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x277_7_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x277_8_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x277_8_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x277_8_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x277_8_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x277_9_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x277_9_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x277_9_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x277_9_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x277_10_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x277_10_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x277_10_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x277_10_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x277_11_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x277_11_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x277_11_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x277_11_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x277_12_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x277_12_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x277_12_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x277_12_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x277_13_0 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x277_13_1 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x277_13_2 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x277_13_3 = _mm256_broadcast_ss(& ensemble108inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x278_0 = _mm256_load_ps(& ensemble108weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x278_1 = _mm256_load_ps(& ensemble108weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x278_2 = _mm256_load_ps(& ensemble108weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x278_3 = _mm256_load_ps(& ensemble108weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x276_0 = _mm256_fmadd_ps(___x277_0_0, ___x278_0, ___x276_0);
                            ___x276_0 = _mm256_fmadd_ps(___x277_0_1, ___x278_1, ___x276_0);
                            ___x276_0 = _mm256_fmadd_ps(___x277_0_2, ___x278_2, ___x276_0);
                            ___x276_0 = _mm256_fmadd_ps(___x277_0_3, ___x278_3, ___x276_0);
                            ___x276_1 = _mm256_fmadd_ps(___x277_1_0, ___x278_0, ___x276_1);
                            ___x276_1 = _mm256_fmadd_ps(___x277_1_1, ___x278_1, ___x276_1);
                            ___x276_1 = _mm256_fmadd_ps(___x277_1_2, ___x278_2, ___x276_1);
                            ___x276_1 = _mm256_fmadd_ps(___x277_1_3, ___x278_3, ___x276_1);
                            ___x276_2 = _mm256_fmadd_ps(___x277_2_0, ___x278_0, ___x276_2);
                            ___x276_2 = _mm256_fmadd_ps(___x277_2_1, ___x278_1, ___x276_2);
                            ___x276_2 = _mm256_fmadd_ps(___x277_2_2, ___x278_2, ___x276_2);
                            ___x276_2 = _mm256_fmadd_ps(___x277_2_3, ___x278_3, ___x276_2);
                            ___x276_3 = _mm256_fmadd_ps(___x277_3_0, ___x278_0, ___x276_3);
                            ___x276_3 = _mm256_fmadd_ps(___x277_3_1, ___x278_1, ___x276_3);
                            ___x276_3 = _mm256_fmadd_ps(___x277_3_2, ___x278_2, ___x276_3);
                            ___x276_3 = _mm256_fmadd_ps(___x277_3_3, ___x278_3, ___x276_3);
                            ___x276_4 = _mm256_fmadd_ps(___x277_4_0, ___x278_0, ___x276_4);
                            ___x276_4 = _mm256_fmadd_ps(___x277_4_1, ___x278_1, ___x276_4);
                            ___x276_4 = _mm256_fmadd_ps(___x277_4_2, ___x278_2, ___x276_4);
                            ___x276_4 = _mm256_fmadd_ps(___x277_4_3, ___x278_3, ___x276_4);
                            ___x276_5 = _mm256_fmadd_ps(___x277_5_0, ___x278_0, ___x276_5);
                            ___x276_5 = _mm256_fmadd_ps(___x277_5_1, ___x278_1, ___x276_5);
                            ___x276_5 = _mm256_fmadd_ps(___x277_5_2, ___x278_2, ___x276_5);
                            ___x276_5 = _mm256_fmadd_ps(___x277_5_3, ___x278_3, ___x276_5);
                            ___x276_6 = _mm256_fmadd_ps(___x277_6_0, ___x278_0, ___x276_6);
                            ___x276_6 = _mm256_fmadd_ps(___x277_6_1, ___x278_1, ___x276_6);
                            ___x276_6 = _mm256_fmadd_ps(___x277_6_2, ___x278_2, ___x276_6);
                            ___x276_6 = _mm256_fmadd_ps(___x277_6_3, ___x278_3, ___x276_6);
                            ___x276_7 = _mm256_fmadd_ps(___x277_7_0, ___x278_0, ___x276_7);
                            ___x276_7 = _mm256_fmadd_ps(___x277_7_1, ___x278_1, ___x276_7);
                            ___x276_7 = _mm256_fmadd_ps(___x277_7_2, ___x278_2, ___x276_7);
                            ___x276_7 = _mm256_fmadd_ps(___x277_7_3, ___x278_3, ___x276_7);
                            ___x276_8 = _mm256_fmadd_ps(___x277_8_0, ___x278_0, ___x276_8);
                            ___x276_8 = _mm256_fmadd_ps(___x277_8_1, ___x278_1, ___x276_8);
                            ___x276_8 = _mm256_fmadd_ps(___x277_8_2, ___x278_2, ___x276_8);
                            ___x276_8 = _mm256_fmadd_ps(___x277_8_3, ___x278_3, ___x276_8);
                            ___x276_9 = _mm256_fmadd_ps(___x277_9_0, ___x278_0, ___x276_9);
                            ___x276_9 = _mm256_fmadd_ps(___x277_9_1, ___x278_1, ___x276_9);
                            ___x276_9 = _mm256_fmadd_ps(___x277_9_2, ___x278_2, ___x276_9);
                            ___x276_9 = _mm256_fmadd_ps(___x277_9_3, ___x278_3, ___x276_9);
                            ___x276_10 = _mm256_fmadd_ps(___x277_10_0, ___x278_0, ___x276_10);
                            ___x276_10 = _mm256_fmadd_ps(___x277_10_1, ___x278_1, ___x276_10);
                            ___x276_10 = _mm256_fmadd_ps(___x277_10_2, ___x278_2, ___x276_10);
                            ___x276_10 = _mm256_fmadd_ps(___x277_10_3, ___x278_3, ___x276_10);
                            ___x276_11 = _mm256_fmadd_ps(___x277_11_0, ___x278_0, ___x276_11);
                            ___x276_11 = _mm256_fmadd_ps(___x277_11_1, ___x278_1, ___x276_11);
                            ___x276_11 = _mm256_fmadd_ps(___x277_11_2, ___x278_2, ___x276_11);
                            ___x276_11 = _mm256_fmadd_ps(___x277_11_3, ___x278_3, ___x276_11);
                            ___x276_12 = _mm256_fmadd_ps(___x277_12_0, ___x278_0, ___x276_12);
                            ___x276_12 = _mm256_fmadd_ps(___x277_12_1, ___x278_1, ___x276_12);
                            ___x276_12 = _mm256_fmadd_ps(___x277_12_2, ___x278_2, ___x276_12);
                            ___x276_12 = _mm256_fmadd_ps(___x277_12_3, ___x278_3, ___x276_12);
                            ___x276_13 = _mm256_fmadd_ps(___x277_13_0, ___x278_0, ___x276_13);
                            ___x276_13 = _mm256_fmadd_ps(___x277_13_1, ___x278_1, ___x276_13);
                            ___x276_13 = _mm256_fmadd_ps(___x277_13_2, ___x278_2, ___x276_13);
                            ___x276_13 = _mm256_fmadd_ps(___x277_13_3, ___x278_3, ___x276_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0], ___x276_0);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0], ___x276_1);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0], ___x276_2);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0], ___x276_3);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0], ___x276_4);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0], ___x276_5);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0], ___x276_6);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0], ___x276_7);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0], ___x276_8);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0], ___x276_9);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0], ___x276_10);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0], ___x276_11);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0], ___x276_12);
                _mm256_store_ps(& ensemble108value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0], ___x276_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble109value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble109inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] + ensemble109bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble110value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble110inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 32,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 16; x1 ++) {
        for (int x2 = 0; x2 < 3; x2 ++) {
            for (int x3 = 0; x3 < 3; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble111weights[x0][x1][x2][x3][0][0], & ensemble111weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,32 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 16; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x286_0 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x286_1 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x286_2 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x286_3 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x286_4 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x286_5 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x286_6 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x286_7 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x286_8 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x286_9 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x286_10 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x286_11 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x286_12 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x286_13 = _mm256_load_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x285_0 = _mm256_load_ps(& ensemble111weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x285_1 = _mm256_load_ps(& ensemble111weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x285_2 = _mm256_load_ps(& ensemble111weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x285_3 = _mm256_load_ps(& ensemble111weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x287_0_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x287_0_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x287_0_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x287_0_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x287_1_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x287_1_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x287_1_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x287_1_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x287_2_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x287_2_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x287_2_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x287_2_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x287_3_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x287_3_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x287_3_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x287_3_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x287_4_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x287_4_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x287_4_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x287_4_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x287_5_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x287_5_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x287_5_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x287_5_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x287_6_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x287_6_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x287_6_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x287_6_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x287_7_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x287_7_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x287_7_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x287_7_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x287_8_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x287_8_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x287_8_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x287_8_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x287_9_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x287_9_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x287_9_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x287_9_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x287_10_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x287_10_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x287_10_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x287_10_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x287_11_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x287_11_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x287_11_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x287_11_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x287_12_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x287_12_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x287_12_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x287_12_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x287_13_0 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x287_13_1 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x287_13_2 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x287_13_3 = _mm256_broadcast_ss(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x286_0 = _mm256_fmadd_ps(___x287_0_0, ___x285_0, ___x286_0);
                            ___x286_0 = _mm256_fmadd_ps(___x287_0_1, ___x285_1, ___x286_0);
                            ___x286_0 = _mm256_fmadd_ps(___x287_0_2, ___x285_2, ___x286_0);
                            ___x286_0 = _mm256_fmadd_ps(___x287_0_3, ___x285_3, ___x286_0);
                            ___x286_1 = _mm256_fmadd_ps(___x287_1_0, ___x285_0, ___x286_1);
                            ___x286_1 = _mm256_fmadd_ps(___x287_1_1, ___x285_1, ___x286_1);
                            ___x286_1 = _mm256_fmadd_ps(___x287_1_2, ___x285_2, ___x286_1);
                            ___x286_1 = _mm256_fmadd_ps(___x287_1_3, ___x285_3, ___x286_1);
                            ___x286_2 = _mm256_fmadd_ps(___x287_2_0, ___x285_0, ___x286_2);
                            ___x286_2 = _mm256_fmadd_ps(___x287_2_1, ___x285_1, ___x286_2);
                            ___x286_2 = _mm256_fmadd_ps(___x287_2_2, ___x285_2, ___x286_2);
                            ___x286_2 = _mm256_fmadd_ps(___x287_2_3, ___x285_3, ___x286_2);
                            ___x286_3 = _mm256_fmadd_ps(___x287_3_0, ___x285_0, ___x286_3);
                            ___x286_3 = _mm256_fmadd_ps(___x287_3_1, ___x285_1, ___x286_3);
                            ___x286_3 = _mm256_fmadd_ps(___x287_3_2, ___x285_2, ___x286_3);
                            ___x286_3 = _mm256_fmadd_ps(___x287_3_3, ___x285_3, ___x286_3);
                            ___x286_4 = _mm256_fmadd_ps(___x287_4_0, ___x285_0, ___x286_4);
                            ___x286_4 = _mm256_fmadd_ps(___x287_4_1, ___x285_1, ___x286_4);
                            ___x286_4 = _mm256_fmadd_ps(___x287_4_2, ___x285_2, ___x286_4);
                            ___x286_4 = _mm256_fmadd_ps(___x287_4_3, ___x285_3, ___x286_4);
                            ___x286_5 = _mm256_fmadd_ps(___x287_5_0, ___x285_0, ___x286_5);
                            ___x286_5 = _mm256_fmadd_ps(___x287_5_1, ___x285_1, ___x286_5);
                            ___x286_5 = _mm256_fmadd_ps(___x287_5_2, ___x285_2, ___x286_5);
                            ___x286_5 = _mm256_fmadd_ps(___x287_5_3, ___x285_3, ___x286_5);
                            ___x286_6 = _mm256_fmadd_ps(___x287_6_0, ___x285_0, ___x286_6);
                            ___x286_6 = _mm256_fmadd_ps(___x287_6_1, ___x285_1, ___x286_6);
                            ___x286_6 = _mm256_fmadd_ps(___x287_6_2, ___x285_2, ___x286_6);
                            ___x286_6 = _mm256_fmadd_ps(___x287_6_3, ___x285_3, ___x286_6);
                            ___x286_7 = _mm256_fmadd_ps(___x287_7_0, ___x285_0, ___x286_7);
                            ___x286_7 = _mm256_fmadd_ps(___x287_7_1, ___x285_1, ___x286_7);
                            ___x286_7 = _mm256_fmadd_ps(___x287_7_2, ___x285_2, ___x286_7);
                            ___x286_7 = _mm256_fmadd_ps(___x287_7_3, ___x285_3, ___x286_7);
                            ___x286_8 = _mm256_fmadd_ps(___x287_8_0, ___x285_0, ___x286_8);
                            ___x286_8 = _mm256_fmadd_ps(___x287_8_1, ___x285_1, ___x286_8);
                            ___x286_8 = _mm256_fmadd_ps(___x287_8_2, ___x285_2, ___x286_8);
                            ___x286_8 = _mm256_fmadd_ps(___x287_8_3, ___x285_3, ___x286_8);
                            ___x286_9 = _mm256_fmadd_ps(___x287_9_0, ___x285_0, ___x286_9);
                            ___x286_9 = _mm256_fmadd_ps(___x287_9_1, ___x285_1, ___x286_9);
                            ___x286_9 = _mm256_fmadd_ps(___x287_9_2, ___x285_2, ___x286_9);
                            ___x286_9 = _mm256_fmadd_ps(___x287_9_3, ___x285_3, ___x286_9);
                            ___x286_10 = _mm256_fmadd_ps(___x287_10_0, ___x285_0, ___x286_10);
                            ___x286_10 = _mm256_fmadd_ps(___x287_10_1, ___x285_1, ___x286_10);
                            ___x286_10 = _mm256_fmadd_ps(___x287_10_2, ___x285_2, ___x286_10);
                            ___x286_10 = _mm256_fmadd_ps(___x287_10_3, ___x285_3, ___x286_10);
                            ___x286_11 = _mm256_fmadd_ps(___x287_11_0, ___x285_0, ___x286_11);
                            ___x286_11 = _mm256_fmadd_ps(___x287_11_1, ___x285_1, ___x286_11);
                            ___x286_11 = _mm256_fmadd_ps(___x287_11_2, ___x285_2, ___x286_11);
                            ___x286_11 = _mm256_fmadd_ps(___x287_11_3, ___x285_3, ___x286_11);
                            ___x286_12 = _mm256_fmadd_ps(___x287_12_0, ___x285_0, ___x286_12);
                            ___x286_12 = _mm256_fmadd_ps(___x287_12_1, ___x285_1, ___x286_12);
                            ___x286_12 = _mm256_fmadd_ps(___x287_12_2, ___x285_2, ___x286_12);
                            ___x286_12 = _mm256_fmadd_ps(___x287_12_3, ___x285_3, ___x286_12);
                            ___x286_13 = _mm256_fmadd_ps(___x287_13_0, ___x285_0, ___x286_13);
                            ___x286_13 = _mm256_fmadd_ps(___x287_13_1, ___x285_1, ___x286_13);
                            ___x286_13 = _mm256_fmadd_ps(___x287_13_2, ___x285_2, ___x286_13);
                            ___x286_13 = _mm256_fmadd_ps(___x287_13_3, ___x285_3, ___x286_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x286_0);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x286_1);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x286_2);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x286_3);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x286_4);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x286_5);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x286_6);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x286_7);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x286_8);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x286_9);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x286_10);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x286_11);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x286_12);
                _mm256_store_ps(& ensemble111value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x286_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble112value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble112inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble112bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble113value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble113inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 3,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble114weights[x0][x1][x2][x3][0][0], & ensemble114weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,3 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x294_0 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0]);
                __m256 ___x294_1 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0]);
                __m256 ___x294_2 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0]);
                __m256 ___x294_3 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0]);
                __m256 ___x294_4 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0]);
                __m256 ___x294_5 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0]);
                __m256 ___x294_6 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0]);
                __m256 ___x294_7 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0]);
                __m256 ___x294_8 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0]);
                __m256 ___x294_9 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0]);
                __m256 ___x294_10 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0]);
                __m256 ___x294_11 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0]);
                __m256 ___x294_12 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0]);
                __m256 ___x294_13 = _mm256_load_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x295_0 = _mm256_load_ps(& ensemble114weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x295_1 = _mm256_load_ps(& ensemble114weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x295_2 = _mm256_load_ps(& ensemble114weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x295_3 = _mm256_load_ps(& ensemble114weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x296_0_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x296_0_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x296_0_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x296_0_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x296_1_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x296_1_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x296_1_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x296_1_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x296_2_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x296_2_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x296_2_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x296_2_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x296_3_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x296_3_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x296_3_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x296_3_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x296_4_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x296_4_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x296_4_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x296_4_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x296_5_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x296_5_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x296_5_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x296_5_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x296_6_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x296_6_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x296_6_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x296_6_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x296_7_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x296_7_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x296_7_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x296_7_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x296_8_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x296_8_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x296_8_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x296_8_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x296_9_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x296_9_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x296_9_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x296_9_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x296_10_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x296_10_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x296_10_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x296_10_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x296_11_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x296_11_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x296_11_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x296_11_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x296_12_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x296_12_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x296_12_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x296_12_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x296_13_0 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x296_13_1 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x296_13_2 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x296_13_3 = _mm256_broadcast_ss(& ensemble114inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x294_0 = _mm256_fmadd_ps(___x296_0_0, ___x295_0, ___x294_0);
                            ___x294_0 = _mm256_fmadd_ps(___x296_0_1, ___x295_1, ___x294_0);
                            ___x294_0 = _mm256_fmadd_ps(___x296_0_2, ___x295_2, ___x294_0);
                            ___x294_0 = _mm256_fmadd_ps(___x296_0_3, ___x295_3, ___x294_0);
                            ___x294_1 = _mm256_fmadd_ps(___x296_1_0, ___x295_0, ___x294_1);
                            ___x294_1 = _mm256_fmadd_ps(___x296_1_1, ___x295_1, ___x294_1);
                            ___x294_1 = _mm256_fmadd_ps(___x296_1_2, ___x295_2, ___x294_1);
                            ___x294_1 = _mm256_fmadd_ps(___x296_1_3, ___x295_3, ___x294_1);
                            ___x294_2 = _mm256_fmadd_ps(___x296_2_0, ___x295_0, ___x294_2);
                            ___x294_2 = _mm256_fmadd_ps(___x296_2_1, ___x295_1, ___x294_2);
                            ___x294_2 = _mm256_fmadd_ps(___x296_2_2, ___x295_2, ___x294_2);
                            ___x294_2 = _mm256_fmadd_ps(___x296_2_3, ___x295_3, ___x294_2);
                            ___x294_3 = _mm256_fmadd_ps(___x296_3_0, ___x295_0, ___x294_3);
                            ___x294_3 = _mm256_fmadd_ps(___x296_3_1, ___x295_1, ___x294_3);
                            ___x294_3 = _mm256_fmadd_ps(___x296_3_2, ___x295_2, ___x294_3);
                            ___x294_3 = _mm256_fmadd_ps(___x296_3_3, ___x295_3, ___x294_3);
                            ___x294_4 = _mm256_fmadd_ps(___x296_4_0, ___x295_0, ___x294_4);
                            ___x294_4 = _mm256_fmadd_ps(___x296_4_1, ___x295_1, ___x294_4);
                            ___x294_4 = _mm256_fmadd_ps(___x296_4_2, ___x295_2, ___x294_4);
                            ___x294_4 = _mm256_fmadd_ps(___x296_4_3, ___x295_3, ___x294_4);
                            ___x294_5 = _mm256_fmadd_ps(___x296_5_0, ___x295_0, ___x294_5);
                            ___x294_5 = _mm256_fmadd_ps(___x296_5_1, ___x295_1, ___x294_5);
                            ___x294_5 = _mm256_fmadd_ps(___x296_5_2, ___x295_2, ___x294_5);
                            ___x294_5 = _mm256_fmadd_ps(___x296_5_3, ___x295_3, ___x294_5);
                            ___x294_6 = _mm256_fmadd_ps(___x296_6_0, ___x295_0, ___x294_6);
                            ___x294_6 = _mm256_fmadd_ps(___x296_6_1, ___x295_1, ___x294_6);
                            ___x294_6 = _mm256_fmadd_ps(___x296_6_2, ___x295_2, ___x294_6);
                            ___x294_6 = _mm256_fmadd_ps(___x296_6_3, ___x295_3, ___x294_6);
                            ___x294_7 = _mm256_fmadd_ps(___x296_7_0, ___x295_0, ___x294_7);
                            ___x294_7 = _mm256_fmadd_ps(___x296_7_1, ___x295_1, ___x294_7);
                            ___x294_7 = _mm256_fmadd_ps(___x296_7_2, ___x295_2, ___x294_7);
                            ___x294_7 = _mm256_fmadd_ps(___x296_7_3, ___x295_3, ___x294_7);
                            ___x294_8 = _mm256_fmadd_ps(___x296_8_0, ___x295_0, ___x294_8);
                            ___x294_8 = _mm256_fmadd_ps(___x296_8_1, ___x295_1, ___x294_8);
                            ___x294_8 = _mm256_fmadd_ps(___x296_8_2, ___x295_2, ___x294_8);
                            ___x294_8 = _mm256_fmadd_ps(___x296_8_3, ___x295_3, ___x294_8);
                            ___x294_9 = _mm256_fmadd_ps(___x296_9_0, ___x295_0, ___x294_9);
                            ___x294_9 = _mm256_fmadd_ps(___x296_9_1, ___x295_1, ___x294_9);
                            ___x294_9 = _mm256_fmadd_ps(___x296_9_2, ___x295_2, ___x294_9);
                            ___x294_9 = _mm256_fmadd_ps(___x296_9_3, ___x295_3, ___x294_9);
                            ___x294_10 = _mm256_fmadd_ps(___x296_10_0, ___x295_0, ___x294_10);
                            ___x294_10 = _mm256_fmadd_ps(___x296_10_1, ___x295_1, ___x294_10);
                            ___x294_10 = _mm256_fmadd_ps(___x296_10_2, ___x295_2, ___x294_10);
                            ___x294_10 = _mm256_fmadd_ps(___x296_10_3, ___x295_3, ___x294_10);
                            ___x294_11 = _mm256_fmadd_ps(___x296_11_0, ___x295_0, ___x294_11);
                            ___x294_11 = _mm256_fmadd_ps(___x296_11_1, ___x295_1, ___x294_11);
                            ___x294_11 = _mm256_fmadd_ps(___x296_11_2, ___x295_2, ___x294_11);
                            ___x294_11 = _mm256_fmadd_ps(___x296_11_3, ___x295_3, ___x294_11);
                            ___x294_12 = _mm256_fmadd_ps(___x296_12_0, ___x295_0, ___x294_12);
                            ___x294_12 = _mm256_fmadd_ps(___x296_12_1, ___x295_1, ___x294_12);
                            ___x294_12 = _mm256_fmadd_ps(___x296_12_2, ___x295_2, ___x294_12);
                            ___x294_12 = _mm256_fmadd_ps(___x296_12_3, ___x295_3, ___x294_12);
                            ___x294_13 = _mm256_fmadd_ps(___x296_13_0, ___x295_0, ___x294_13);
                            ___x294_13 = _mm256_fmadd_ps(___x296_13_1, ___x295_1, ___x294_13);
                            ___x294_13 = _mm256_fmadd_ps(___x296_13_2, ___x295_2, ___x294_13);
                            ___x294_13 = _mm256_fmadd_ps(___x296_13_3, ___x295_3, ___x294_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0], ___x294_0);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0], ___x294_1);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0], ___x294_2);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0], ___x294_3);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0], ___x294_4);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0], ___x294_5);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0], ___x294_6);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0], ___x294_7);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0], ___x294_8);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0], ___x294_9);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0], ___x294_10);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0], ___x294_11);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0], ___x294_12);
                _mm256_store_ps(& ensemble114value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0], ___x294_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble115value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble115inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] + ensemble115bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble116value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble116inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 8,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 3; x1 ++) {
        for (int x2 = 0; x2 < 5; x2 ++) {
            for (int x3 = 0; x3 < 5; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble117weights[x0][x1][x2][x3][0][0], & ensemble117weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,8 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 3; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x304_0 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x304_1 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x304_2 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x304_3 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x304_4 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x304_5 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x304_6 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x304_7 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x304_8 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x304_9 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x304_10 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x304_11 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x304_12 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x304_13 = _mm256_load_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x303_0_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x303_0_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x303_0_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x303_0_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x303_1_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x303_1_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x303_1_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x303_1_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x303_2_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x303_2_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x303_2_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x303_2_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x303_3_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x303_3_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x303_3_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x303_3_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x303_4_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x303_4_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x303_4_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x303_4_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x303_5_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x303_5_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x303_5_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x303_5_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x303_6_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x303_6_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x303_6_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x303_6_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x303_7_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x303_7_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x303_7_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x303_7_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x303_8_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x303_8_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x303_8_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x303_8_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x303_9_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x303_9_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x303_9_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x303_9_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x303_10_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x303_10_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x303_10_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x303_10_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x303_11_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x303_11_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x303_11_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x303_11_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x303_12_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x303_12_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x303_12_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x303_12_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x303_13_0 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x303_13_1 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x303_13_2 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x303_13_3 = _mm256_broadcast_ss(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x305_0 = _mm256_load_ps(& ensemble117weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x305_1 = _mm256_load_ps(& ensemble117weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x305_2 = _mm256_load_ps(& ensemble117weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x305_3 = _mm256_load_ps(& ensemble117weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x304_0 = _mm256_fmadd_ps(___x303_0_0, ___x305_0, ___x304_0);
                            ___x304_0 = _mm256_fmadd_ps(___x303_0_1, ___x305_1, ___x304_0);
                            ___x304_0 = _mm256_fmadd_ps(___x303_0_2, ___x305_2, ___x304_0);
                            ___x304_0 = _mm256_fmadd_ps(___x303_0_3, ___x305_3, ___x304_0);
                            ___x304_1 = _mm256_fmadd_ps(___x303_1_0, ___x305_0, ___x304_1);
                            ___x304_1 = _mm256_fmadd_ps(___x303_1_1, ___x305_1, ___x304_1);
                            ___x304_1 = _mm256_fmadd_ps(___x303_1_2, ___x305_2, ___x304_1);
                            ___x304_1 = _mm256_fmadd_ps(___x303_1_3, ___x305_3, ___x304_1);
                            ___x304_2 = _mm256_fmadd_ps(___x303_2_0, ___x305_0, ___x304_2);
                            ___x304_2 = _mm256_fmadd_ps(___x303_2_1, ___x305_1, ___x304_2);
                            ___x304_2 = _mm256_fmadd_ps(___x303_2_2, ___x305_2, ___x304_2);
                            ___x304_2 = _mm256_fmadd_ps(___x303_2_3, ___x305_3, ___x304_2);
                            ___x304_3 = _mm256_fmadd_ps(___x303_3_0, ___x305_0, ___x304_3);
                            ___x304_3 = _mm256_fmadd_ps(___x303_3_1, ___x305_1, ___x304_3);
                            ___x304_3 = _mm256_fmadd_ps(___x303_3_2, ___x305_2, ___x304_3);
                            ___x304_3 = _mm256_fmadd_ps(___x303_3_3, ___x305_3, ___x304_3);
                            ___x304_4 = _mm256_fmadd_ps(___x303_4_0, ___x305_0, ___x304_4);
                            ___x304_4 = _mm256_fmadd_ps(___x303_4_1, ___x305_1, ___x304_4);
                            ___x304_4 = _mm256_fmadd_ps(___x303_4_2, ___x305_2, ___x304_4);
                            ___x304_4 = _mm256_fmadd_ps(___x303_4_3, ___x305_3, ___x304_4);
                            ___x304_5 = _mm256_fmadd_ps(___x303_5_0, ___x305_0, ___x304_5);
                            ___x304_5 = _mm256_fmadd_ps(___x303_5_1, ___x305_1, ___x304_5);
                            ___x304_5 = _mm256_fmadd_ps(___x303_5_2, ___x305_2, ___x304_5);
                            ___x304_5 = _mm256_fmadd_ps(___x303_5_3, ___x305_3, ___x304_5);
                            ___x304_6 = _mm256_fmadd_ps(___x303_6_0, ___x305_0, ___x304_6);
                            ___x304_6 = _mm256_fmadd_ps(___x303_6_1, ___x305_1, ___x304_6);
                            ___x304_6 = _mm256_fmadd_ps(___x303_6_2, ___x305_2, ___x304_6);
                            ___x304_6 = _mm256_fmadd_ps(___x303_6_3, ___x305_3, ___x304_6);
                            ___x304_7 = _mm256_fmadd_ps(___x303_7_0, ___x305_0, ___x304_7);
                            ___x304_7 = _mm256_fmadd_ps(___x303_7_1, ___x305_1, ___x304_7);
                            ___x304_7 = _mm256_fmadd_ps(___x303_7_2, ___x305_2, ___x304_7);
                            ___x304_7 = _mm256_fmadd_ps(___x303_7_3, ___x305_3, ___x304_7);
                            ___x304_8 = _mm256_fmadd_ps(___x303_8_0, ___x305_0, ___x304_8);
                            ___x304_8 = _mm256_fmadd_ps(___x303_8_1, ___x305_1, ___x304_8);
                            ___x304_8 = _mm256_fmadd_ps(___x303_8_2, ___x305_2, ___x304_8);
                            ___x304_8 = _mm256_fmadd_ps(___x303_8_3, ___x305_3, ___x304_8);
                            ___x304_9 = _mm256_fmadd_ps(___x303_9_0, ___x305_0, ___x304_9);
                            ___x304_9 = _mm256_fmadd_ps(___x303_9_1, ___x305_1, ___x304_9);
                            ___x304_9 = _mm256_fmadd_ps(___x303_9_2, ___x305_2, ___x304_9);
                            ___x304_9 = _mm256_fmadd_ps(___x303_9_3, ___x305_3, ___x304_9);
                            ___x304_10 = _mm256_fmadd_ps(___x303_10_0, ___x305_0, ___x304_10);
                            ___x304_10 = _mm256_fmadd_ps(___x303_10_1, ___x305_1, ___x304_10);
                            ___x304_10 = _mm256_fmadd_ps(___x303_10_2, ___x305_2, ___x304_10);
                            ___x304_10 = _mm256_fmadd_ps(___x303_10_3, ___x305_3, ___x304_10);
                            ___x304_11 = _mm256_fmadd_ps(___x303_11_0, ___x305_0, ___x304_11);
                            ___x304_11 = _mm256_fmadd_ps(___x303_11_1, ___x305_1, ___x304_11);
                            ___x304_11 = _mm256_fmadd_ps(___x303_11_2, ___x305_2, ___x304_11);
                            ___x304_11 = _mm256_fmadd_ps(___x303_11_3, ___x305_3, ___x304_11);
                            ___x304_12 = _mm256_fmadd_ps(___x303_12_0, ___x305_0, ___x304_12);
                            ___x304_12 = _mm256_fmadd_ps(___x303_12_1, ___x305_1, ___x304_12);
                            ___x304_12 = _mm256_fmadd_ps(___x303_12_2, ___x305_2, ___x304_12);
                            ___x304_12 = _mm256_fmadd_ps(___x303_12_3, ___x305_3, ___x304_12);
                            ___x304_13 = _mm256_fmadd_ps(___x303_13_0, ___x305_0, ___x304_13);
                            ___x304_13 = _mm256_fmadd_ps(___x303_13_1, ___x305_1, ___x304_13);
                            ___x304_13 = _mm256_fmadd_ps(___x303_13_2, ___x305_2, ___x304_13);
                            ___x304_13 = _mm256_fmadd_ps(___x303_13_3, ___x305_3, ___x304_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x304_0);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x304_1);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x304_2);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x304_3);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x304_4);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x304_5);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x304_6);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x304_7);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x304_8);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x304_9);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x304_10);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x304_11);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x304_12);
                _mm256_store_ps(& ensemble117value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x304_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble118value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble118inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble118bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble119value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble119inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        
    parallel_for(0,64 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 1 - 1;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 1 - 1;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble120inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble120inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner];
                            ensemble120mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble120mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble120value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 8,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble121weights[x0][x1][x2][x3][0][0], & ensemble121weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,8 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x314_0 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x314_1 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x314_2 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x314_3 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x314_4 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x314_5 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x314_6 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x314_7 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x314_8 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x314_9 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x314_10 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x314_11 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x314_12 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x314_13 = _mm256_load_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x312_0 = _mm256_load_ps(& ensemble121weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x312_1 = _mm256_load_ps(& ensemble121weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x312_2 = _mm256_load_ps(& ensemble121weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x312_3 = _mm256_load_ps(& ensemble121weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x313_0_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x313_0_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x313_0_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x313_0_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x313_1_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x313_1_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x313_1_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x313_1_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x313_2_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x313_2_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x313_2_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x313_2_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x313_3_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x313_3_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x313_3_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x313_3_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x313_4_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x313_4_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x313_4_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x313_4_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x313_5_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x313_5_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x313_5_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x313_5_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x313_6_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x313_6_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x313_6_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x313_6_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x313_7_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x313_7_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x313_7_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x313_7_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x313_8_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x313_8_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x313_8_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x313_8_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x313_9_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x313_9_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x313_9_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x313_9_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x313_10_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x313_10_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x313_10_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x313_10_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x313_11_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x313_11_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x313_11_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x313_11_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x313_12_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x313_12_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x313_12_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x313_12_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x313_13_0 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x313_13_1 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x313_13_2 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x313_13_3 = _mm256_broadcast_ss(& ensemble121inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x314_0 = _mm256_fmadd_ps(___x313_0_0, ___x312_0, ___x314_0);
                            ___x314_0 = _mm256_fmadd_ps(___x313_0_1, ___x312_1, ___x314_0);
                            ___x314_0 = _mm256_fmadd_ps(___x313_0_2, ___x312_2, ___x314_0);
                            ___x314_0 = _mm256_fmadd_ps(___x313_0_3, ___x312_3, ___x314_0);
                            ___x314_1 = _mm256_fmadd_ps(___x313_1_0, ___x312_0, ___x314_1);
                            ___x314_1 = _mm256_fmadd_ps(___x313_1_1, ___x312_1, ___x314_1);
                            ___x314_1 = _mm256_fmadd_ps(___x313_1_2, ___x312_2, ___x314_1);
                            ___x314_1 = _mm256_fmadd_ps(___x313_1_3, ___x312_3, ___x314_1);
                            ___x314_2 = _mm256_fmadd_ps(___x313_2_0, ___x312_0, ___x314_2);
                            ___x314_2 = _mm256_fmadd_ps(___x313_2_1, ___x312_1, ___x314_2);
                            ___x314_2 = _mm256_fmadd_ps(___x313_2_2, ___x312_2, ___x314_2);
                            ___x314_2 = _mm256_fmadd_ps(___x313_2_3, ___x312_3, ___x314_2);
                            ___x314_3 = _mm256_fmadd_ps(___x313_3_0, ___x312_0, ___x314_3);
                            ___x314_3 = _mm256_fmadd_ps(___x313_3_1, ___x312_1, ___x314_3);
                            ___x314_3 = _mm256_fmadd_ps(___x313_3_2, ___x312_2, ___x314_3);
                            ___x314_3 = _mm256_fmadd_ps(___x313_3_3, ___x312_3, ___x314_3);
                            ___x314_4 = _mm256_fmadd_ps(___x313_4_0, ___x312_0, ___x314_4);
                            ___x314_4 = _mm256_fmadd_ps(___x313_4_1, ___x312_1, ___x314_4);
                            ___x314_4 = _mm256_fmadd_ps(___x313_4_2, ___x312_2, ___x314_4);
                            ___x314_4 = _mm256_fmadd_ps(___x313_4_3, ___x312_3, ___x314_4);
                            ___x314_5 = _mm256_fmadd_ps(___x313_5_0, ___x312_0, ___x314_5);
                            ___x314_5 = _mm256_fmadd_ps(___x313_5_1, ___x312_1, ___x314_5);
                            ___x314_5 = _mm256_fmadd_ps(___x313_5_2, ___x312_2, ___x314_5);
                            ___x314_5 = _mm256_fmadd_ps(___x313_5_3, ___x312_3, ___x314_5);
                            ___x314_6 = _mm256_fmadd_ps(___x313_6_0, ___x312_0, ___x314_6);
                            ___x314_6 = _mm256_fmadd_ps(___x313_6_1, ___x312_1, ___x314_6);
                            ___x314_6 = _mm256_fmadd_ps(___x313_6_2, ___x312_2, ___x314_6);
                            ___x314_6 = _mm256_fmadd_ps(___x313_6_3, ___x312_3, ___x314_6);
                            ___x314_7 = _mm256_fmadd_ps(___x313_7_0, ___x312_0, ___x314_7);
                            ___x314_7 = _mm256_fmadd_ps(___x313_7_1, ___x312_1, ___x314_7);
                            ___x314_7 = _mm256_fmadd_ps(___x313_7_2, ___x312_2, ___x314_7);
                            ___x314_7 = _mm256_fmadd_ps(___x313_7_3, ___x312_3, ___x314_7);
                            ___x314_8 = _mm256_fmadd_ps(___x313_8_0, ___x312_0, ___x314_8);
                            ___x314_8 = _mm256_fmadd_ps(___x313_8_1, ___x312_1, ___x314_8);
                            ___x314_8 = _mm256_fmadd_ps(___x313_8_2, ___x312_2, ___x314_8);
                            ___x314_8 = _mm256_fmadd_ps(___x313_8_3, ___x312_3, ___x314_8);
                            ___x314_9 = _mm256_fmadd_ps(___x313_9_0, ___x312_0, ___x314_9);
                            ___x314_9 = _mm256_fmadd_ps(___x313_9_1, ___x312_1, ___x314_9);
                            ___x314_9 = _mm256_fmadd_ps(___x313_9_2, ___x312_2, ___x314_9);
                            ___x314_9 = _mm256_fmadd_ps(___x313_9_3, ___x312_3, ___x314_9);
                            ___x314_10 = _mm256_fmadd_ps(___x313_10_0, ___x312_0, ___x314_10);
                            ___x314_10 = _mm256_fmadd_ps(___x313_10_1, ___x312_1, ___x314_10);
                            ___x314_10 = _mm256_fmadd_ps(___x313_10_2, ___x312_2, ___x314_10);
                            ___x314_10 = _mm256_fmadd_ps(___x313_10_3, ___x312_3, ___x314_10);
                            ___x314_11 = _mm256_fmadd_ps(___x313_11_0, ___x312_0, ___x314_11);
                            ___x314_11 = _mm256_fmadd_ps(___x313_11_1, ___x312_1, ___x314_11);
                            ___x314_11 = _mm256_fmadd_ps(___x313_11_2, ___x312_2, ___x314_11);
                            ___x314_11 = _mm256_fmadd_ps(___x313_11_3, ___x312_3, ___x314_11);
                            ___x314_12 = _mm256_fmadd_ps(___x313_12_0, ___x312_0, ___x314_12);
                            ___x314_12 = _mm256_fmadd_ps(___x313_12_1, ___x312_1, ___x314_12);
                            ___x314_12 = _mm256_fmadd_ps(___x313_12_2, ___x312_2, ___x314_12);
                            ___x314_12 = _mm256_fmadd_ps(___x313_12_3, ___x312_3, ___x314_12);
                            ___x314_13 = _mm256_fmadd_ps(___x313_13_0, ___x312_0, ___x314_13);
                            ___x314_13 = _mm256_fmadd_ps(___x313_13_1, ___x312_1, ___x314_13);
                            ___x314_13 = _mm256_fmadd_ps(___x313_13_2, ___x312_2, ___x314_13);
                            ___x314_13 = _mm256_fmadd_ps(___x313_13_3, ___x312_3, ___x314_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x314_0);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x314_1);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x314_2);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x314_3);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x314_4);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x314_5);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x314_6);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x314_7);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x314_8);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x314_9);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x314_10);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x314_11);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x314_12);
                _mm256_store_ps(& ensemble121value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x314_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble122value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble122inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble122bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble123value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble123inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble124value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble124inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 32; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble124value[_neuron_index_0][(_neuron_index_1_outer + 16)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble124inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble124value[_neuron_index_0][(_neuron_index_1_outer + 48)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble124inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    ensemble124value[_neuron_index_0][(_neuron_index_1_outer + 56)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble124inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
    ;
        }
      }
    );
    
    parallel_for(0, 14,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble125weights[x0][x1][x2][x3][0][0], & ensemble125weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,14 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x321_0 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x321_1 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x321_2 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x321_3 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x321_4 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x321_5 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x321_6 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x321_7 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x321_8 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x321_9 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x321_10 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x321_11 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x321_12 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x321_13 = _mm256_load_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x322_0 = _mm256_load_ps(& ensemble125weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x322_1 = _mm256_load_ps(& ensemble125weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x322_2 = _mm256_load_ps(& ensemble125weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x322_3 = _mm256_load_ps(& ensemble125weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x323_0_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x323_0_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x323_0_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x323_0_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x323_1_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x323_1_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x323_1_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x323_1_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x323_2_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x323_2_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x323_2_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x323_2_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x323_3_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x323_3_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x323_3_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x323_3_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x323_4_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x323_4_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x323_4_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x323_4_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x323_5_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x323_5_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x323_5_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x323_5_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x323_6_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x323_6_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x323_6_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x323_6_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x323_7_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x323_7_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x323_7_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x323_7_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x323_8_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x323_8_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x323_8_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x323_8_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x323_9_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x323_9_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x323_9_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x323_9_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x323_10_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x323_10_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x323_10_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x323_10_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x323_11_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x323_11_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x323_11_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x323_11_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x323_12_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x323_12_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x323_12_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x323_12_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x323_13_0 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x323_13_1 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x323_13_2 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x323_13_3 = _mm256_broadcast_ss(& ensemble125inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x321_0 = _mm256_fmadd_ps(___x323_0_0, ___x322_0, ___x321_0);
                            ___x321_0 = _mm256_fmadd_ps(___x323_0_1, ___x322_1, ___x321_0);
                            ___x321_0 = _mm256_fmadd_ps(___x323_0_2, ___x322_2, ___x321_0);
                            ___x321_0 = _mm256_fmadd_ps(___x323_0_3, ___x322_3, ___x321_0);
                            ___x321_1 = _mm256_fmadd_ps(___x323_1_0, ___x322_0, ___x321_1);
                            ___x321_1 = _mm256_fmadd_ps(___x323_1_1, ___x322_1, ___x321_1);
                            ___x321_1 = _mm256_fmadd_ps(___x323_1_2, ___x322_2, ___x321_1);
                            ___x321_1 = _mm256_fmadd_ps(___x323_1_3, ___x322_3, ___x321_1);
                            ___x321_2 = _mm256_fmadd_ps(___x323_2_0, ___x322_0, ___x321_2);
                            ___x321_2 = _mm256_fmadd_ps(___x323_2_1, ___x322_1, ___x321_2);
                            ___x321_2 = _mm256_fmadd_ps(___x323_2_2, ___x322_2, ___x321_2);
                            ___x321_2 = _mm256_fmadd_ps(___x323_2_3, ___x322_3, ___x321_2);
                            ___x321_3 = _mm256_fmadd_ps(___x323_3_0, ___x322_0, ___x321_3);
                            ___x321_3 = _mm256_fmadd_ps(___x323_3_1, ___x322_1, ___x321_3);
                            ___x321_3 = _mm256_fmadd_ps(___x323_3_2, ___x322_2, ___x321_3);
                            ___x321_3 = _mm256_fmadd_ps(___x323_3_3, ___x322_3, ___x321_3);
                            ___x321_4 = _mm256_fmadd_ps(___x323_4_0, ___x322_0, ___x321_4);
                            ___x321_4 = _mm256_fmadd_ps(___x323_4_1, ___x322_1, ___x321_4);
                            ___x321_4 = _mm256_fmadd_ps(___x323_4_2, ___x322_2, ___x321_4);
                            ___x321_4 = _mm256_fmadd_ps(___x323_4_3, ___x322_3, ___x321_4);
                            ___x321_5 = _mm256_fmadd_ps(___x323_5_0, ___x322_0, ___x321_5);
                            ___x321_5 = _mm256_fmadd_ps(___x323_5_1, ___x322_1, ___x321_5);
                            ___x321_5 = _mm256_fmadd_ps(___x323_5_2, ___x322_2, ___x321_5);
                            ___x321_5 = _mm256_fmadd_ps(___x323_5_3, ___x322_3, ___x321_5);
                            ___x321_6 = _mm256_fmadd_ps(___x323_6_0, ___x322_0, ___x321_6);
                            ___x321_6 = _mm256_fmadd_ps(___x323_6_1, ___x322_1, ___x321_6);
                            ___x321_6 = _mm256_fmadd_ps(___x323_6_2, ___x322_2, ___x321_6);
                            ___x321_6 = _mm256_fmadd_ps(___x323_6_3, ___x322_3, ___x321_6);
                            ___x321_7 = _mm256_fmadd_ps(___x323_7_0, ___x322_0, ___x321_7);
                            ___x321_7 = _mm256_fmadd_ps(___x323_7_1, ___x322_1, ___x321_7);
                            ___x321_7 = _mm256_fmadd_ps(___x323_7_2, ___x322_2, ___x321_7);
                            ___x321_7 = _mm256_fmadd_ps(___x323_7_3, ___x322_3, ___x321_7);
                            ___x321_8 = _mm256_fmadd_ps(___x323_8_0, ___x322_0, ___x321_8);
                            ___x321_8 = _mm256_fmadd_ps(___x323_8_1, ___x322_1, ___x321_8);
                            ___x321_8 = _mm256_fmadd_ps(___x323_8_2, ___x322_2, ___x321_8);
                            ___x321_8 = _mm256_fmadd_ps(___x323_8_3, ___x322_3, ___x321_8);
                            ___x321_9 = _mm256_fmadd_ps(___x323_9_0, ___x322_0, ___x321_9);
                            ___x321_9 = _mm256_fmadd_ps(___x323_9_1, ___x322_1, ___x321_9);
                            ___x321_9 = _mm256_fmadd_ps(___x323_9_2, ___x322_2, ___x321_9);
                            ___x321_9 = _mm256_fmadd_ps(___x323_9_3, ___x322_3, ___x321_9);
                            ___x321_10 = _mm256_fmadd_ps(___x323_10_0, ___x322_0, ___x321_10);
                            ___x321_10 = _mm256_fmadd_ps(___x323_10_1, ___x322_1, ___x321_10);
                            ___x321_10 = _mm256_fmadd_ps(___x323_10_2, ___x322_2, ___x321_10);
                            ___x321_10 = _mm256_fmadd_ps(___x323_10_3, ___x322_3, ___x321_10);
                            ___x321_11 = _mm256_fmadd_ps(___x323_11_0, ___x322_0, ___x321_11);
                            ___x321_11 = _mm256_fmadd_ps(___x323_11_1, ___x322_1, ___x321_11);
                            ___x321_11 = _mm256_fmadd_ps(___x323_11_2, ___x322_2, ___x321_11);
                            ___x321_11 = _mm256_fmadd_ps(___x323_11_3, ___x322_3, ___x321_11);
                            ___x321_12 = _mm256_fmadd_ps(___x323_12_0, ___x322_0, ___x321_12);
                            ___x321_12 = _mm256_fmadd_ps(___x323_12_1, ___x322_1, ___x321_12);
                            ___x321_12 = _mm256_fmadd_ps(___x323_12_2, ___x322_2, ___x321_12);
                            ___x321_12 = _mm256_fmadd_ps(___x323_12_3, ___x322_3, ___x321_12);
                            ___x321_13 = _mm256_fmadd_ps(___x323_13_0, ___x322_0, ___x321_13);
                            ___x321_13 = _mm256_fmadd_ps(___x323_13_1, ___x322_1, ___x321_13);
                            ___x321_13 = _mm256_fmadd_ps(___x323_13_2, ___x322_2, ___x321_13);
                            ___x321_13 = _mm256_fmadd_ps(___x323_13_3, ___x322_3, ___x321_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x321_0);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x321_1);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x321_2);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x321_3);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x321_4);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x321_5);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x321_6);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x321_7);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x321_8);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x321_9);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x321_10);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x321_11);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x321_12);
                _mm256_store_ps(& ensemble125value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x321_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble126value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble126inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble126bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble127value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble127inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 18,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble128weights[x0][x1][x2][x3][0][0], & ensemble128weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,18 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x331_0 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0]);
                __m256 ___x331_1 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0]);
                __m256 ___x331_2 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0]);
                __m256 ___x331_3 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0]);
                __m256 ___x331_4 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0]);
                __m256 ___x331_5 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0]);
                __m256 ___x331_6 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0]);
                __m256 ___x331_7 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0]);
                __m256 ___x331_8 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0]);
                __m256 ___x331_9 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0]);
                __m256 ___x331_10 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0]);
                __m256 ___x331_11 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0]);
                __m256 ___x331_12 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0]);
                __m256 ___x331_13 = _mm256_load_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x330_0_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x330_0_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x330_0_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x330_0_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x330_1_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x330_1_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x330_1_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x330_1_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x330_2_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x330_2_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x330_2_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x330_2_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x330_3_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x330_3_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x330_3_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x330_3_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x330_4_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x330_4_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x330_4_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x330_4_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x330_5_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x330_5_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x330_5_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x330_5_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x330_6_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x330_6_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x330_6_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x330_6_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x330_7_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x330_7_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x330_7_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x330_7_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x330_8_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x330_8_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x330_8_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x330_8_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x330_9_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x330_9_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x330_9_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x330_9_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x330_10_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x330_10_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x330_10_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x330_10_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x330_11_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x330_11_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x330_11_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x330_11_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x330_12_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x330_12_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x330_12_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x330_12_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x330_13_0 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x330_13_1 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x330_13_2 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x330_13_3 = _mm256_broadcast_ss(& ensemble128inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x332_0 = _mm256_load_ps(& ensemble128weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x332_1 = _mm256_load_ps(& ensemble128weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x332_2 = _mm256_load_ps(& ensemble128weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x332_3 = _mm256_load_ps(& ensemble128weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x331_0 = _mm256_fmadd_ps(___x330_0_0, ___x332_0, ___x331_0);
                            ___x331_0 = _mm256_fmadd_ps(___x330_0_1, ___x332_1, ___x331_0);
                            ___x331_0 = _mm256_fmadd_ps(___x330_0_2, ___x332_2, ___x331_0);
                            ___x331_0 = _mm256_fmadd_ps(___x330_0_3, ___x332_3, ___x331_0);
                            ___x331_1 = _mm256_fmadd_ps(___x330_1_0, ___x332_0, ___x331_1);
                            ___x331_1 = _mm256_fmadd_ps(___x330_1_1, ___x332_1, ___x331_1);
                            ___x331_1 = _mm256_fmadd_ps(___x330_1_2, ___x332_2, ___x331_1);
                            ___x331_1 = _mm256_fmadd_ps(___x330_1_3, ___x332_3, ___x331_1);
                            ___x331_2 = _mm256_fmadd_ps(___x330_2_0, ___x332_0, ___x331_2);
                            ___x331_2 = _mm256_fmadd_ps(___x330_2_1, ___x332_1, ___x331_2);
                            ___x331_2 = _mm256_fmadd_ps(___x330_2_2, ___x332_2, ___x331_2);
                            ___x331_2 = _mm256_fmadd_ps(___x330_2_3, ___x332_3, ___x331_2);
                            ___x331_3 = _mm256_fmadd_ps(___x330_3_0, ___x332_0, ___x331_3);
                            ___x331_3 = _mm256_fmadd_ps(___x330_3_1, ___x332_1, ___x331_3);
                            ___x331_3 = _mm256_fmadd_ps(___x330_3_2, ___x332_2, ___x331_3);
                            ___x331_3 = _mm256_fmadd_ps(___x330_3_3, ___x332_3, ___x331_3);
                            ___x331_4 = _mm256_fmadd_ps(___x330_4_0, ___x332_0, ___x331_4);
                            ___x331_4 = _mm256_fmadd_ps(___x330_4_1, ___x332_1, ___x331_4);
                            ___x331_4 = _mm256_fmadd_ps(___x330_4_2, ___x332_2, ___x331_4);
                            ___x331_4 = _mm256_fmadd_ps(___x330_4_3, ___x332_3, ___x331_4);
                            ___x331_5 = _mm256_fmadd_ps(___x330_5_0, ___x332_0, ___x331_5);
                            ___x331_5 = _mm256_fmadd_ps(___x330_5_1, ___x332_1, ___x331_5);
                            ___x331_5 = _mm256_fmadd_ps(___x330_5_2, ___x332_2, ___x331_5);
                            ___x331_5 = _mm256_fmadd_ps(___x330_5_3, ___x332_3, ___x331_5);
                            ___x331_6 = _mm256_fmadd_ps(___x330_6_0, ___x332_0, ___x331_6);
                            ___x331_6 = _mm256_fmadd_ps(___x330_6_1, ___x332_1, ___x331_6);
                            ___x331_6 = _mm256_fmadd_ps(___x330_6_2, ___x332_2, ___x331_6);
                            ___x331_6 = _mm256_fmadd_ps(___x330_6_3, ___x332_3, ___x331_6);
                            ___x331_7 = _mm256_fmadd_ps(___x330_7_0, ___x332_0, ___x331_7);
                            ___x331_7 = _mm256_fmadd_ps(___x330_7_1, ___x332_1, ___x331_7);
                            ___x331_7 = _mm256_fmadd_ps(___x330_7_2, ___x332_2, ___x331_7);
                            ___x331_7 = _mm256_fmadd_ps(___x330_7_3, ___x332_3, ___x331_7);
                            ___x331_8 = _mm256_fmadd_ps(___x330_8_0, ___x332_0, ___x331_8);
                            ___x331_8 = _mm256_fmadd_ps(___x330_8_1, ___x332_1, ___x331_8);
                            ___x331_8 = _mm256_fmadd_ps(___x330_8_2, ___x332_2, ___x331_8);
                            ___x331_8 = _mm256_fmadd_ps(___x330_8_3, ___x332_3, ___x331_8);
                            ___x331_9 = _mm256_fmadd_ps(___x330_9_0, ___x332_0, ___x331_9);
                            ___x331_9 = _mm256_fmadd_ps(___x330_9_1, ___x332_1, ___x331_9);
                            ___x331_9 = _mm256_fmadd_ps(___x330_9_2, ___x332_2, ___x331_9);
                            ___x331_9 = _mm256_fmadd_ps(___x330_9_3, ___x332_3, ___x331_9);
                            ___x331_10 = _mm256_fmadd_ps(___x330_10_0, ___x332_0, ___x331_10);
                            ___x331_10 = _mm256_fmadd_ps(___x330_10_1, ___x332_1, ___x331_10);
                            ___x331_10 = _mm256_fmadd_ps(___x330_10_2, ___x332_2, ___x331_10);
                            ___x331_10 = _mm256_fmadd_ps(___x330_10_3, ___x332_3, ___x331_10);
                            ___x331_11 = _mm256_fmadd_ps(___x330_11_0, ___x332_0, ___x331_11);
                            ___x331_11 = _mm256_fmadd_ps(___x330_11_1, ___x332_1, ___x331_11);
                            ___x331_11 = _mm256_fmadd_ps(___x330_11_2, ___x332_2, ___x331_11);
                            ___x331_11 = _mm256_fmadd_ps(___x330_11_3, ___x332_3, ___x331_11);
                            ___x331_12 = _mm256_fmadd_ps(___x330_12_0, ___x332_0, ___x331_12);
                            ___x331_12 = _mm256_fmadd_ps(___x330_12_1, ___x332_1, ___x331_12);
                            ___x331_12 = _mm256_fmadd_ps(___x330_12_2, ___x332_2, ___x331_12);
                            ___x331_12 = _mm256_fmadd_ps(___x330_12_3, ___x332_3, ___x331_12);
                            ___x331_13 = _mm256_fmadd_ps(___x330_13_0, ___x332_0, ___x331_13);
                            ___x331_13 = _mm256_fmadd_ps(___x330_13_1, ___x332_1, ___x331_13);
                            ___x331_13 = _mm256_fmadd_ps(___x330_13_2, ___x332_2, ___x331_13);
                            ___x331_13 = _mm256_fmadd_ps(___x330_13_3, ___x332_3, ___x331_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0], ___x331_0);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0], ___x331_1);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0], ___x331_2);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0], ___x331_3);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0], ___x331_4);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0], ___x331_5);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0], ___x331_6);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0], ___x331_7);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0], ___x331_8);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0], ___x331_9);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0], ___x331_10);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0], ___x331_11);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0], ___x331_12);
                _mm256_store_ps(& ensemble128value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0], ___x331_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble129value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble129inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] + ensemble129bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble130value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble130inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 36,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 18; x1 ++) {
        for (int x2 = 0; x2 < 3; x2 ++) {
            for (int x3 = 0; x3 < 3; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble131weights[x0][x1][x2][x3][0][0], & ensemble131weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,36 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 18; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x340_0 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x340_1 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x340_2 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x340_3 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x340_4 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x340_5 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x340_6 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x340_7 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x340_8 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x340_9 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x340_10 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x340_11 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x340_12 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x340_13 = _mm256_load_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x339_0_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x339_0_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x339_0_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x339_0_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x339_1_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x339_1_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x339_1_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x339_1_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x339_2_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x339_2_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x339_2_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x339_2_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x339_3_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x339_3_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x339_3_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x339_3_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x339_4_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x339_4_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x339_4_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x339_4_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x339_5_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x339_5_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x339_5_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x339_5_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x339_6_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x339_6_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x339_6_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x339_6_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x339_7_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x339_7_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x339_7_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x339_7_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x339_8_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x339_8_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x339_8_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x339_8_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x339_9_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x339_9_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x339_9_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x339_9_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x339_10_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x339_10_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x339_10_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x339_10_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x339_11_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x339_11_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x339_11_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x339_11_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x339_12_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x339_12_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x339_12_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x339_12_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x339_13_0 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x339_13_1 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x339_13_2 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x339_13_3 = _mm256_broadcast_ss(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x341_0 = _mm256_load_ps(& ensemble131weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x341_1 = _mm256_load_ps(& ensemble131weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x341_2 = _mm256_load_ps(& ensemble131weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x341_3 = _mm256_load_ps(& ensemble131weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x340_0 = _mm256_fmadd_ps(___x339_0_0, ___x341_0, ___x340_0);
                            ___x340_0 = _mm256_fmadd_ps(___x339_0_1, ___x341_1, ___x340_0);
                            ___x340_0 = _mm256_fmadd_ps(___x339_0_2, ___x341_2, ___x340_0);
                            ___x340_0 = _mm256_fmadd_ps(___x339_0_3, ___x341_3, ___x340_0);
                            ___x340_1 = _mm256_fmadd_ps(___x339_1_0, ___x341_0, ___x340_1);
                            ___x340_1 = _mm256_fmadd_ps(___x339_1_1, ___x341_1, ___x340_1);
                            ___x340_1 = _mm256_fmadd_ps(___x339_1_2, ___x341_2, ___x340_1);
                            ___x340_1 = _mm256_fmadd_ps(___x339_1_3, ___x341_3, ___x340_1);
                            ___x340_2 = _mm256_fmadd_ps(___x339_2_0, ___x341_0, ___x340_2);
                            ___x340_2 = _mm256_fmadd_ps(___x339_2_1, ___x341_1, ___x340_2);
                            ___x340_2 = _mm256_fmadd_ps(___x339_2_2, ___x341_2, ___x340_2);
                            ___x340_2 = _mm256_fmadd_ps(___x339_2_3, ___x341_3, ___x340_2);
                            ___x340_3 = _mm256_fmadd_ps(___x339_3_0, ___x341_0, ___x340_3);
                            ___x340_3 = _mm256_fmadd_ps(___x339_3_1, ___x341_1, ___x340_3);
                            ___x340_3 = _mm256_fmadd_ps(___x339_3_2, ___x341_2, ___x340_3);
                            ___x340_3 = _mm256_fmadd_ps(___x339_3_3, ___x341_3, ___x340_3);
                            ___x340_4 = _mm256_fmadd_ps(___x339_4_0, ___x341_0, ___x340_4);
                            ___x340_4 = _mm256_fmadd_ps(___x339_4_1, ___x341_1, ___x340_4);
                            ___x340_4 = _mm256_fmadd_ps(___x339_4_2, ___x341_2, ___x340_4);
                            ___x340_4 = _mm256_fmadd_ps(___x339_4_3, ___x341_3, ___x340_4);
                            ___x340_5 = _mm256_fmadd_ps(___x339_5_0, ___x341_0, ___x340_5);
                            ___x340_5 = _mm256_fmadd_ps(___x339_5_1, ___x341_1, ___x340_5);
                            ___x340_5 = _mm256_fmadd_ps(___x339_5_2, ___x341_2, ___x340_5);
                            ___x340_5 = _mm256_fmadd_ps(___x339_5_3, ___x341_3, ___x340_5);
                            ___x340_6 = _mm256_fmadd_ps(___x339_6_0, ___x341_0, ___x340_6);
                            ___x340_6 = _mm256_fmadd_ps(___x339_6_1, ___x341_1, ___x340_6);
                            ___x340_6 = _mm256_fmadd_ps(___x339_6_2, ___x341_2, ___x340_6);
                            ___x340_6 = _mm256_fmadd_ps(___x339_6_3, ___x341_3, ___x340_6);
                            ___x340_7 = _mm256_fmadd_ps(___x339_7_0, ___x341_0, ___x340_7);
                            ___x340_7 = _mm256_fmadd_ps(___x339_7_1, ___x341_1, ___x340_7);
                            ___x340_7 = _mm256_fmadd_ps(___x339_7_2, ___x341_2, ___x340_7);
                            ___x340_7 = _mm256_fmadd_ps(___x339_7_3, ___x341_3, ___x340_7);
                            ___x340_8 = _mm256_fmadd_ps(___x339_8_0, ___x341_0, ___x340_8);
                            ___x340_8 = _mm256_fmadd_ps(___x339_8_1, ___x341_1, ___x340_8);
                            ___x340_8 = _mm256_fmadd_ps(___x339_8_2, ___x341_2, ___x340_8);
                            ___x340_8 = _mm256_fmadd_ps(___x339_8_3, ___x341_3, ___x340_8);
                            ___x340_9 = _mm256_fmadd_ps(___x339_9_0, ___x341_0, ___x340_9);
                            ___x340_9 = _mm256_fmadd_ps(___x339_9_1, ___x341_1, ___x340_9);
                            ___x340_9 = _mm256_fmadd_ps(___x339_9_2, ___x341_2, ___x340_9);
                            ___x340_9 = _mm256_fmadd_ps(___x339_9_3, ___x341_3, ___x340_9);
                            ___x340_10 = _mm256_fmadd_ps(___x339_10_0, ___x341_0, ___x340_10);
                            ___x340_10 = _mm256_fmadd_ps(___x339_10_1, ___x341_1, ___x340_10);
                            ___x340_10 = _mm256_fmadd_ps(___x339_10_2, ___x341_2, ___x340_10);
                            ___x340_10 = _mm256_fmadd_ps(___x339_10_3, ___x341_3, ___x340_10);
                            ___x340_11 = _mm256_fmadd_ps(___x339_11_0, ___x341_0, ___x340_11);
                            ___x340_11 = _mm256_fmadd_ps(___x339_11_1, ___x341_1, ___x340_11);
                            ___x340_11 = _mm256_fmadd_ps(___x339_11_2, ___x341_2, ___x340_11);
                            ___x340_11 = _mm256_fmadd_ps(___x339_11_3, ___x341_3, ___x340_11);
                            ___x340_12 = _mm256_fmadd_ps(___x339_12_0, ___x341_0, ___x340_12);
                            ___x340_12 = _mm256_fmadd_ps(___x339_12_1, ___x341_1, ___x340_12);
                            ___x340_12 = _mm256_fmadd_ps(___x339_12_2, ___x341_2, ___x340_12);
                            ___x340_12 = _mm256_fmadd_ps(___x339_12_3, ___x341_3, ___x340_12);
                            ___x340_13 = _mm256_fmadd_ps(___x339_13_0, ___x341_0, ___x340_13);
                            ___x340_13 = _mm256_fmadd_ps(___x339_13_1, ___x341_1, ___x340_13);
                            ___x340_13 = _mm256_fmadd_ps(___x339_13_2, ___x341_2, ___x340_13);
                            ___x340_13 = _mm256_fmadd_ps(___x339_13_3, ___x341_3, ___x340_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x340_0);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x340_1);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x340_2);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x340_3);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x340_4);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x340_5);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x340_6);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x340_7);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x340_8);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x340_9);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x340_10);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x340_11);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x340_12);
                _mm256_store_ps(& ensemble131value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x340_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble132value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble132inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble132bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble133value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble133inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 4,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble134weights[x0][x1][x2][x3][0][0], & ensemble134weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,4 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x348_0 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0]);
                __m256 ___x348_1 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0]);
                __m256 ___x348_2 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0]);
                __m256 ___x348_3 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0]);
                __m256 ___x348_4 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0]);
                __m256 ___x348_5 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0]);
                __m256 ___x348_6 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0]);
                __m256 ___x348_7 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0]);
                __m256 ___x348_8 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0]);
                __m256 ___x348_9 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0]);
                __m256 ___x348_10 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0]);
                __m256 ___x348_11 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0]);
                __m256 ___x348_12 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0]);
                __m256 ___x348_13 = _mm256_load_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x349_0 = _mm256_load_ps(& ensemble134weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x349_1 = _mm256_load_ps(& ensemble134weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x349_2 = _mm256_load_ps(& ensemble134weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x349_3 = _mm256_load_ps(& ensemble134weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x350_0_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x350_0_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x350_0_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x350_0_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x350_1_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x350_1_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x350_1_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x350_1_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x350_2_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x350_2_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x350_2_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x350_2_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x350_3_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x350_3_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x350_3_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x350_3_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x350_4_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x350_4_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x350_4_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x350_4_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x350_5_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x350_5_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x350_5_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x350_5_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x350_6_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x350_6_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x350_6_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x350_6_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x350_7_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x350_7_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x350_7_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x350_7_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x350_8_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x350_8_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x350_8_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x350_8_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x350_9_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x350_9_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x350_9_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x350_9_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x350_10_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x350_10_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x350_10_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x350_10_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x350_11_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x350_11_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x350_11_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x350_11_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x350_12_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x350_12_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x350_12_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x350_12_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x350_13_0 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x350_13_1 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x350_13_2 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x350_13_3 = _mm256_broadcast_ss(& ensemble134inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x348_0 = _mm256_fmadd_ps(___x350_0_0, ___x349_0, ___x348_0);
                            ___x348_0 = _mm256_fmadd_ps(___x350_0_1, ___x349_1, ___x348_0);
                            ___x348_0 = _mm256_fmadd_ps(___x350_0_2, ___x349_2, ___x348_0);
                            ___x348_0 = _mm256_fmadd_ps(___x350_0_3, ___x349_3, ___x348_0);
                            ___x348_1 = _mm256_fmadd_ps(___x350_1_0, ___x349_0, ___x348_1);
                            ___x348_1 = _mm256_fmadd_ps(___x350_1_1, ___x349_1, ___x348_1);
                            ___x348_1 = _mm256_fmadd_ps(___x350_1_2, ___x349_2, ___x348_1);
                            ___x348_1 = _mm256_fmadd_ps(___x350_1_3, ___x349_3, ___x348_1);
                            ___x348_2 = _mm256_fmadd_ps(___x350_2_0, ___x349_0, ___x348_2);
                            ___x348_2 = _mm256_fmadd_ps(___x350_2_1, ___x349_1, ___x348_2);
                            ___x348_2 = _mm256_fmadd_ps(___x350_2_2, ___x349_2, ___x348_2);
                            ___x348_2 = _mm256_fmadd_ps(___x350_2_3, ___x349_3, ___x348_2);
                            ___x348_3 = _mm256_fmadd_ps(___x350_3_0, ___x349_0, ___x348_3);
                            ___x348_3 = _mm256_fmadd_ps(___x350_3_1, ___x349_1, ___x348_3);
                            ___x348_3 = _mm256_fmadd_ps(___x350_3_2, ___x349_2, ___x348_3);
                            ___x348_3 = _mm256_fmadd_ps(___x350_3_3, ___x349_3, ___x348_3);
                            ___x348_4 = _mm256_fmadd_ps(___x350_4_0, ___x349_0, ___x348_4);
                            ___x348_4 = _mm256_fmadd_ps(___x350_4_1, ___x349_1, ___x348_4);
                            ___x348_4 = _mm256_fmadd_ps(___x350_4_2, ___x349_2, ___x348_4);
                            ___x348_4 = _mm256_fmadd_ps(___x350_4_3, ___x349_3, ___x348_4);
                            ___x348_5 = _mm256_fmadd_ps(___x350_5_0, ___x349_0, ___x348_5);
                            ___x348_5 = _mm256_fmadd_ps(___x350_5_1, ___x349_1, ___x348_5);
                            ___x348_5 = _mm256_fmadd_ps(___x350_5_2, ___x349_2, ___x348_5);
                            ___x348_5 = _mm256_fmadd_ps(___x350_5_3, ___x349_3, ___x348_5);
                            ___x348_6 = _mm256_fmadd_ps(___x350_6_0, ___x349_0, ___x348_6);
                            ___x348_6 = _mm256_fmadd_ps(___x350_6_1, ___x349_1, ___x348_6);
                            ___x348_6 = _mm256_fmadd_ps(___x350_6_2, ___x349_2, ___x348_6);
                            ___x348_6 = _mm256_fmadd_ps(___x350_6_3, ___x349_3, ___x348_6);
                            ___x348_7 = _mm256_fmadd_ps(___x350_7_0, ___x349_0, ___x348_7);
                            ___x348_7 = _mm256_fmadd_ps(___x350_7_1, ___x349_1, ___x348_7);
                            ___x348_7 = _mm256_fmadd_ps(___x350_7_2, ___x349_2, ___x348_7);
                            ___x348_7 = _mm256_fmadd_ps(___x350_7_3, ___x349_3, ___x348_7);
                            ___x348_8 = _mm256_fmadd_ps(___x350_8_0, ___x349_0, ___x348_8);
                            ___x348_8 = _mm256_fmadd_ps(___x350_8_1, ___x349_1, ___x348_8);
                            ___x348_8 = _mm256_fmadd_ps(___x350_8_2, ___x349_2, ___x348_8);
                            ___x348_8 = _mm256_fmadd_ps(___x350_8_3, ___x349_3, ___x348_8);
                            ___x348_9 = _mm256_fmadd_ps(___x350_9_0, ___x349_0, ___x348_9);
                            ___x348_9 = _mm256_fmadd_ps(___x350_9_1, ___x349_1, ___x348_9);
                            ___x348_9 = _mm256_fmadd_ps(___x350_9_2, ___x349_2, ___x348_9);
                            ___x348_9 = _mm256_fmadd_ps(___x350_9_3, ___x349_3, ___x348_9);
                            ___x348_10 = _mm256_fmadd_ps(___x350_10_0, ___x349_0, ___x348_10);
                            ___x348_10 = _mm256_fmadd_ps(___x350_10_1, ___x349_1, ___x348_10);
                            ___x348_10 = _mm256_fmadd_ps(___x350_10_2, ___x349_2, ___x348_10);
                            ___x348_10 = _mm256_fmadd_ps(___x350_10_3, ___x349_3, ___x348_10);
                            ___x348_11 = _mm256_fmadd_ps(___x350_11_0, ___x349_0, ___x348_11);
                            ___x348_11 = _mm256_fmadd_ps(___x350_11_1, ___x349_1, ___x348_11);
                            ___x348_11 = _mm256_fmadd_ps(___x350_11_2, ___x349_2, ___x348_11);
                            ___x348_11 = _mm256_fmadd_ps(___x350_11_3, ___x349_3, ___x348_11);
                            ___x348_12 = _mm256_fmadd_ps(___x350_12_0, ___x349_0, ___x348_12);
                            ___x348_12 = _mm256_fmadd_ps(___x350_12_1, ___x349_1, ___x348_12);
                            ___x348_12 = _mm256_fmadd_ps(___x350_12_2, ___x349_2, ___x348_12);
                            ___x348_12 = _mm256_fmadd_ps(___x350_12_3, ___x349_3, ___x348_12);
                            ___x348_13 = _mm256_fmadd_ps(___x350_13_0, ___x349_0, ___x348_13);
                            ___x348_13 = _mm256_fmadd_ps(___x350_13_1, ___x349_1, ___x348_13);
                            ___x348_13 = _mm256_fmadd_ps(___x350_13_2, ___x349_2, ___x348_13);
                            ___x348_13 = _mm256_fmadd_ps(___x350_13_3, ___x349_3, ___x348_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0], ___x348_0);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0], ___x348_1);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0], ___x348_2);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0], ___x348_3);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0], ___x348_4);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0], ___x348_5);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0], ___x348_6);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0], ___x348_7);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0], ___x348_8);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0], ___x348_9);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0], ___x348_10);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0], ___x348_11);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0], ___x348_12);
                _mm256_store_ps(& ensemble134value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0], ___x348_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble135value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble135inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] + ensemble135bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble136value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble136inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 8,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 4; x1 ++) {
        for (int x2 = 0; x2 < 5; x2 ++) {
            for (int x3 = 0; x3 < 5; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble137weights[x0][x1][x2][x3][0][0], & ensemble137weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,8 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 4; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x358_0 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x358_1 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x358_2 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x358_3 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x358_4 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x358_5 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x358_6 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x358_7 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x358_8 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x358_9 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x358_10 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x358_11 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x358_12 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x358_13 = _mm256_load_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x357_0 = _mm256_load_ps(& ensemble137weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x357_1 = _mm256_load_ps(& ensemble137weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x357_2 = _mm256_load_ps(& ensemble137weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x357_3 = _mm256_load_ps(& ensemble137weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x359_0_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x359_0_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x359_0_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x359_0_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x359_1_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x359_1_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x359_1_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x359_1_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x359_2_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x359_2_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x359_2_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x359_2_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x359_3_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x359_3_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x359_3_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x359_3_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x359_4_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x359_4_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x359_4_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x359_4_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x359_5_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x359_5_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x359_5_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x359_5_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x359_6_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x359_6_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x359_6_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x359_6_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x359_7_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x359_7_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x359_7_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x359_7_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x359_8_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x359_8_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x359_8_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x359_8_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x359_9_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x359_9_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x359_9_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x359_9_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x359_10_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x359_10_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x359_10_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x359_10_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x359_11_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x359_11_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x359_11_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x359_11_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x359_12_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x359_12_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x359_12_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x359_12_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x359_13_0 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x359_13_1 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x359_13_2 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x359_13_3 = _mm256_broadcast_ss(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x358_0 = _mm256_fmadd_ps(___x359_0_0, ___x357_0, ___x358_0);
                            ___x358_0 = _mm256_fmadd_ps(___x359_0_1, ___x357_1, ___x358_0);
                            ___x358_0 = _mm256_fmadd_ps(___x359_0_2, ___x357_2, ___x358_0);
                            ___x358_0 = _mm256_fmadd_ps(___x359_0_3, ___x357_3, ___x358_0);
                            ___x358_1 = _mm256_fmadd_ps(___x359_1_0, ___x357_0, ___x358_1);
                            ___x358_1 = _mm256_fmadd_ps(___x359_1_1, ___x357_1, ___x358_1);
                            ___x358_1 = _mm256_fmadd_ps(___x359_1_2, ___x357_2, ___x358_1);
                            ___x358_1 = _mm256_fmadd_ps(___x359_1_3, ___x357_3, ___x358_1);
                            ___x358_2 = _mm256_fmadd_ps(___x359_2_0, ___x357_0, ___x358_2);
                            ___x358_2 = _mm256_fmadd_ps(___x359_2_1, ___x357_1, ___x358_2);
                            ___x358_2 = _mm256_fmadd_ps(___x359_2_2, ___x357_2, ___x358_2);
                            ___x358_2 = _mm256_fmadd_ps(___x359_2_3, ___x357_3, ___x358_2);
                            ___x358_3 = _mm256_fmadd_ps(___x359_3_0, ___x357_0, ___x358_3);
                            ___x358_3 = _mm256_fmadd_ps(___x359_3_1, ___x357_1, ___x358_3);
                            ___x358_3 = _mm256_fmadd_ps(___x359_3_2, ___x357_2, ___x358_3);
                            ___x358_3 = _mm256_fmadd_ps(___x359_3_3, ___x357_3, ___x358_3);
                            ___x358_4 = _mm256_fmadd_ps(___x359_4_0, ___x357_0, ___x358_4);
                            ___x358_4 = _mm256_fmadd_ps(___x359_4_1, ___x357_1, ___x358_4);
                            ___x358_4 = _mm256_fmadd_ps(___x359_4_2, ___x357_2, ___x358_4);
                            ___x358_4 = _mm256_fmadd_ps(___x359_4_3, ___x357_3, ___x358_4);
                            ___x358_5 = _mm256_fmadd_ps(___x359_5_0, ___x357_0, ___x358_5);
                            ___x358_5 = _mm256_fmadd_ps(___x359_5_1, ___x357_1, ___x358_5);
                            ___x358_5 = _mm256_fmadd_ps(___x359_5_2, ___x357_2, ___x358_5);
                            ___x358_5 = _mm256_fmadd_ps(___x359_5_3, ___x357_3, ___x358_5);
                            ___x358_6 = _mm256_fmadd_ps(___x359_6_0, ___x357_0, ___x358_6);
                            ___x358_6 = _mm256_fmadd_ps(___x359_6_1, ___x357_1, ___x358_6);
                            ___x358_6 = _mm256_fmadd_ps(___x359_6_2, ___x357_2, ___x358_6);
                            ___x358_6 = _mm256_fmadd_ps(___x359_6_3, ___x357_3, ___x358_6);
                            ___x358_7 = _mm256_fmadd_ps(___x359_7_0, ___x357_0, ___x358_7);
                            ___x358_7 = _mm256_fmadd_ps(___x359_7_1, ___x357_1, ___x358_7);
                            ___x358_7 = _mm256_fmadd_ps(___x359_7_2, ___x357_2, ___x358_7);
                            ___x358_7 = _mm256_fmadd_ps(___x359_7_3, ___x357_3, ___x358_7);
                            ___x358_8 = _mm256_fmadd_ps(___x359_8_0, ___x357_0, ___x358_8);
                            ___x358_8 = _mm256_fmadd_ps(___x359_8_1, ___x357_1, ___x358_8);
                            ___x358_8 = _mm256_fmadd_ps(___x359_8_2, ___x357_2, ___x358_8);
                            ___x358_8 = _mm256_fmadd_ps(___x359_8_3, ___x357_3, ___x358_8);
                            ___x358_9 = _mm256_fmadd_ps(___x359_9_0, ___x357_0, ___x358_9);
                            ___x358_9 = _mm256_fmadd_ps(___x359_9_1, ___x357_1, ___x358_9);
                            ___x358_9 = _mm256_fmadd_ps(___x359_9_2, ___x357_2, ___x358_9);
                            ___x358_9 = _mm256_fmadd_ps(___x359_9_3, ___x357_3, ___x358_9);
                            ___x358_10 = _mm256_fmadd_ps(___x359_10_0, ___x357_0, ___x358_10);
                            ___x358_10 = _mm256_fmadd_ps(___x359_10_1, ___x357_1, ___x358_10);
                            ___x358_10 = _mm256_fmadd_ps(___x359_10_2, ___x357_2, ___x358_10);
                            ___x358_10 = _mm256_fmadd_ps(___x359_10_3, ___x357_3, ___x358_10);
                            ___x358_11 = _mm256_fmadd_ps(___x359_11_0, ___x357_0, ___x358_11);
                            ___x358_11 = _mm256_fmadd_ps(___x359_11_1, ___x357_1, ___x358_11);
                            ___x358_11 = _mm256_fmadd_ps(___x359_11_2, ___x357_2, ___x358_11);
                            ___x358_11 = _mm256_fmadd_ps(___x359_11_3, ___x357_3, ___x358_11);
                            ___x358_12 = _mm256_fmadd_ps(___x359_12_0, ___x357_0, ___x358_12);
                            ___x358_12 = _mm256_fmadd_ps(___x359_12_1, ___x357_1, ___x358_12);
                            ___x358_12 = _mm256_fmadd_ps(___x359_12_2, ___x357_2, ___x358_12);
                            ___x358_12 = _mm256_fmadd_ps(___x359_12_3, ___x357_3, ___x358_12);
                            ___x358_13 = _mm256_fmadd_ps(___x359_13_0, ___x357_0, ___x358_13);
                            ___x358_13 = _mm256_fmadd_ps(___x359_13_1, ___x357_1, ___x358_13);
                            ___x358_13 = _mm256_fmadd_ps(___x359_13_2, ___x357_2, ___x358_13);
                            ___x358_13 = _mm256_fmadd_ps(___x359_13_3, ___x357_3, ___x358_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x358_0);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x358_1);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x358_2);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x358_3);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x358_4);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x358_5);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x358_6);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x358_7);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x358_8);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x358_9);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x358_10);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x358_11);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x358_12);
                _mm256_store_ps(& ensemble137value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x358_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble138value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble138inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble138bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble139value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble139inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        
    parallel_for(0,64 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 1 - 1;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 1 - 1;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble140inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble140inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner];
                            ensemble140mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble140mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble140value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 8,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 64; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble141weights[x0][x1][x2][x3][0][0], & ensemble141weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,8 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 64; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x367_0 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x367_1 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x367_2 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x367_3 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x367_4 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x367_5 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x367_6 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x367_7 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x367_8 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x367_9 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x367_10 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x367_11 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x367_12 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x367_13 = _mm256_load_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x366_0_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x366_0_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x366_0_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x366_0_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x366_1_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x366_1_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x366_1_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x366_1_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x366_2_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x366_2_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x366_2_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x366_2_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x366_3_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x366_3_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x366_3_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x366_3_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x366_4_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x366_4_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x366_4_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x366_4_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x366_5_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x366_5_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x366_5_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x366_5_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x366_6_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x366_6_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x366_6_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x366_6_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x366_7_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x366_7_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x366_7_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x366_7_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x366_8_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x366_8_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x366_8_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x366_8_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x366_9_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x366_9_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x366_9_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x366_9_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x366_10_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x366_10_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x366_10_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x366_10_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x366_11_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x366_11_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x366_11_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x366_11_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x366_12_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x366_12_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x366_12_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x366_12_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x366_13_0 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x366_13_1 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x366_13_2 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x366_13_3 = _mm256_broadcast_ss(& ensemble141inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x368_0 = _mm256_load_ps(& ensemble141weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x368_1 = _mm256_load_ps(& ensemble141weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x368_2 = _mm256_load_ps(& ensemble141weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x368_3 = _mm256_load_ps(& ensemble141weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x367_0 = _mm256_fmadd_ps(___x366_0_0, ___x368_0, ___x367_0);
                            ___x367_0 = _mm256_fmadd_ps(___x366_0_1, ___x368_1, ___x367_0);
                            ___x367_0 = _mm256_fmadd_ps(___x366_0_2, ___x368_2, ___x367_0);
                            ___x367_0 = _mm256_fmadd_ps(___x366_0_3, ___x368_3, ___x367_0);
                            ___x367_1 = _mm256_fmadd_ps(___x366_1_0, ___x368_0, ___x367_1);
                            ___x367_1 = _mm256_fmadd_ps(___x366_1_1, ___x368_1, ___x367_1);
                            ___x367_1 = _mm256_fmadd_ps(___x366_1_2, ___x368_2, ___x367_1);
                            ___x367_1 = _mm256_fmadd_ps(___x366_1_3, ___x368_3, ___x367_1);
                            ___x367_2 = _mm256_fmadd_ps(___x366_2_0, ___x368_0, ___x367_2);
                            ___x367_2 = _mm256_fmadd_ps(___x366_2_1, ___x368_1, ___x367_2);
                            ___x367_2 = _mm256_fmadd_ps(___x366_2_2, ___x368_2, ___x367_2);
                            ___x367_2 = _mm256_fmadd_ps(___x366_2_3, ___x368_3, ___x367_2);
                            ___x367_3 = _mm256_fmadd_ps(___x366_3_0, ___x368_0, ___x367_3);
                            ___x367_3 = _mm256_fmadd_ps(___x366_3_1, ___x368_1, ___x367_3);
                            ___x367_3 = _mm256_fmadd_ps(___x366_3_2, ___x368_2, ___x367_3);
                            ___x367_3 = _mm256_fmadd_ps(___x366_3_3, ___x368_3, ___x367_3);
                            ___x367_4 = _mm256_fmadd_ps(___x366_4_0, ___x368_0, ___x367_4);
                            ___x367_4 = _mm256_fmadd_ps(___x366_4_1, ___x368_1, ___x367_4);
                            ___x367_4 = _mm256_fmadd_ps(___x366_4_2, ___x368_2, ___x367_4);
                            ___x367_4 = _mm256_fmadd_ps(___x366_4_3, ___x368_3, ___x367_4);
                            ___x367_5 = _mm256_fmadd_ps(___x366_5_0, ___x368_0, ___x367_5);
                            ___x367_5 = _mm256_fmadd_ps(___x366_5_1, ___x368_1, ___x367_5);
                            ___x367_5 = _mm256_fmadd_ps(___x366_5_2, ___x368_2, ___x367_5);
                            ___x367_5 = _mm256_fmadd_ps(___x366_5_3, ___x368_3, ___x367_5);
                            ___x367_6 = _mm256_fmadd_ps(___x366_6_0, ___x368_0, ___x367_6);
                            ___x367_6 = _mm256_fmadd_ps(___x366_6_1, ___x368_1, ___x367_6);
                            ___x367_6 = _mm256_fmadd_ps(___x366_6_2, ___x368_2, ___x367_6);
                            ___x367_6 = _mm256_fmadd_ps(___x366_6_3, ___x368_3, ___x367_6);
                            ___x367_7 = _mm256_fmadd_ps(___x366_7_0, ___x368_0, ___x367_7);
                            ___x367_7 = _mm256_fmadd_ps(___x366_7_1, ___x368_1, ___x367_7);
                            ___x367_7 = _mm256_fmadd_ps(___x366_7_2, ___x368_2, ___x367_7);
                            ___x367_7 = _mm256_fmadd_ps(___x366_7_3, ___x368_3, ___x367_7);
                            ___x367_8 = _mm256_fmadd_ps(___x366_8_0, ___x368_0, ___x367_8);
                            ___x367_8 = _mm256_fmadd_ps(___x366_8_1, ___x368_1, ___x367_8);
                            ___x367_8 = _mm256_fmadd_ps(___x366_8_2, ___x368_2, ___x367_8);
                            ___x367_8 = _mm256_fmadd_ps(___x366_8_3, ___x368_3, ___x367_8);
                            ___x367_9 = _mm256_fmadd_ps(___x366_9_0, ___x368_0, ___x367_9);
                            ___x367_9 = _mm256_fmadd_ps(___x366_9_1, ___x368_1, ___x367_9);
                            ___x367_9 = _mm256_fmadd_ps(___x366_9_2, ___x368_2, ___x367_9);
                            ___x367_9 = _mm256_fmadd_ps(___x366_9_3, ___x368_3, ___x367_9);
                            ___x367_10 = _mm256_fmadd_ps(___x366_10_0, ___x368_0, ___x367_10);
                            ___x367_10 = _mm256_fmadd_ps(___x366_10_1, ___x368_1, ___x367_10);
                            ___x367_10 = _mm256_fmadd_ps(___x366_10_2, ___x368_2, ___x367_10);
                            ___x367_10 = _mm256_fmadd_ps(___x366_10_3, ___x368_3, ___x367_10);
                            ___x367_11 = _mm256_fmadd_ps(___x366_11_0, ___x368_0, ___x367_11);
                            ___x367_11 = _mm256_fmadd_ps(___x366_11_1, ___x368_1, ___x367_11);
                            ___x367_11 = _mm256_fmadd_ps(___x366_11_2, ___x368_2, ___x367_11);
                            ___x367_11 = _mm256_fmadd_ps(___x366_11_3, ___x368_3, ___x367_11);
                            ___x367_12 = _mm256_fmadd_ps(___x366_12_0, ___x368_0, ___x367_12);
                            ___x367_12 = _mm256_fmadd_ps(___x366_12_1, ___x368_1, ___x367_12);
                            ___x367_12 = _mm256_fmadd_ps(___x366_12_2, ___x368_2, ___x367_12);
                            ___x367_12 = _mm256_fmadd_ps(___x366_12_3, ___x368_3, ___x367_12);
                            ___x367_13 = _mm256_fmadd_ps(___x366_13_0, ___x368_0, ___x367_13);
                            ___x367_13 = _mm256_fmadd_ps(___x366_13_1, ___x368_1, ___x367_13);
                            ___x367_13 = _mm256_fmadd_ps(___x366_13_2, ___x368_2, ___x367_13);
                            ___x367_13 = _mm256_fmadd_ps(___x366_13_3, ___x368_3, ___x367_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x367_0);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x367_1);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x367_2);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x367_3);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x367_4);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x367_5);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x367_6);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x367_7);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x367_8);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x367_9);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x367_10);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x367_11);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x367_12);
                _mm256_store_ps(& ensemble141value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x367_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble142value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble142inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble142bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble143value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble143inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 14; _neuron_index_1_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble144value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble144inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 36; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble144value[_neuron_index_0][(_neuron_index_1_outer + 14)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble144inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble144value[_neuron_index_0][(_neuron_index_1_outer + 50)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble144inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    ensemble144value[_neuron_index_0][(_neuron_index_1_outer + 58)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble144inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        
    parallel_for(0,66 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 3 - 0;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 3 - 0;
                int _input_offset_3 = in_x;
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        ensemble145value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] += ensemble145inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner];
                    }
                }
                ensemble145value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble145value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / ensemble145kernel[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 66; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble146weights[x0][x1][x2][x3][0][0], & ensemble146weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 66; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 4) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                __m256 ___x375_0 = _mm256_load_ps(& ensemble146value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x375_1 = _mm256_load_ps(& ensemble146value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x375_2 = _mm256_load_ps(& ensemble146value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x375_3 = _mm256_load_ps(& ensemble146value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x376_0_0 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x376_0_1 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x376_0_2 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x376_0_3 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x376_1_0 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x376_1_1 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x376_1_2 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x376_1_3 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x376_2_0 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x376_2_1 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x376_2_2 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x376_2_3 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x376_3_0 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x376_3_1 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x376_3_2 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x376_3_3 = _mm256_broadcast_ss(& ensemble146inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x377_0 = _mm256_load_ps(& ensemble146weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x377_1 = _mm256_load_ps(& ensemble146weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x377_2 = _mm256_load_ps(& ensemble146weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x377_3 = _mm256_load_ps(& ensemble146weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x375_0 = _mm256_fmadd_ps(___x376_0_0, ___x377_0, ___x375_0);
                            ___x375_0 = _mm256_fmadd_ps(___x376_0_1, ___x377_1, ___x375_0);
                            ___x375_0 = _mm256_fmadd_ps(___x376_0_2, ___x377_2, ___x375_0);
                            ___x375_0 = _mm256_fmadd_ps(___x376_0_3, ___x377_3, ___x375_0);
                            ___x375_1 = _mm256_fmadd_ps(___x376_1_0, ___x377_0, ___x375_1);
                            ___x375_1 = _mm256_fmadd_ps(___x376_1_1, ___x377_1, ___x375_1);
                            ___x375_1 = _mm256_fmadd_ps(___x376_1_2, ___x377_2, ___x375_1);
                            ___x375_1 = _mm256_fmadd_ps(___x376_1_3, ___x377_3, ___x375_1);
                            ___x375_2 = _mm256_fmadd_ps(___x376_2_0, ___x377_0, ___x375_2);
                            ___x375_2 = _mm256_fmadd_ps(___x376_2_1, ___x377_1, ___x375_2);
                            ___x375_2 = _mm256_fmadd_ps(___x376_2_2, ___x377_2, ___x375_2);
                            ___x375_2 = _mm256_fmadd_ps(___x376_2_3, ___x377_3, ___x375_2);
                            ___x375_3 = _mm256_fmadd_ps(___x376_3_0, ___x377_0, ___x375_3);
                            ___x375_3 = _mm256_fmadd_ps(___x376_3_1, ___x377_1, ___x375_3);
                            ___x375_3 = _mm256_fmadd_ps(___x376_3_2, ___x377_2, ___x375_3);
                            ___x375_3 = _mm256_fmadd_ps(___x376_3_3, ___x377_3, ___x375_3);
                        }
                    }
                }
                _mm256_store_ps(& ensemble146value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x375_0);
                _mm256_store_ps(& ensemble146value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x375_1);
                _mm256_store_ps(& ensemble146value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x375_2);
                _mm256_store_ps(& ensemble146value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x375_3);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble147value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble147inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble147bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble148value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble148inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 128,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 16; x1 ++) {
        for (int x2 = 0; x2 < 4; x2 ++) {
            for (int x3 = 0; x3 < 4; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble149weights[x0][x1][x2][x3][0][0], & ensemble149weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 16,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 16;
          
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          __m256 ___x386_0 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 0)][_neuron_index_1_outer][0]);
    __m256 ___x386_1 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 1)][_neuron_index_1_outer][0]);
    __m256 ___x386_2 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 2)][_neuron_index_1_outer][0]);
    __m256 ___x386_3 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 3)][_neuron_index_1_outer][0]);
    __m256 ___x386_4 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 4)][_neuron_index_1_outer][0]);
    __m256 ___x386_5 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 5)][_neuron_index_1_outer][0]);
    __m256 ___x386_6 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 6)][_neuron_index_1_outer][0]);
    __m256 ___x386_7 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 7)][_neuron_index_1_outer][0]);
    __m256 ___x386_8 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 8)][_neuron_index_1_outer][0]);
    __m256 ___x386_9 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 9)][_neuron_index_1_outer][0]);
    __m256 ___x386_10 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 10)][_neuron_index_1_outer][0]);
    __m256 ___x386_11 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 11)][_neuron_index_1_outer][0]);
    __m256 ___x386_12 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 12)][_neuron_index_1_outer][0]);
    __m256 ___x386_13 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 13)][_neuron_index_1_outer][0]);
    __m256 ___x386_14 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 14)][_neuron_index_1_outer][0]);
    __m256 ___x386_15 = _mm256_load_ps(& ensemble149value[(_neuron_index_0 + 15)][_neuron_index_1_outer][0]);
    for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 16; __unique_loopvar0_outer += 1) {
        for (int __unique_loopvar0_inner = 0; __unique_loopvar0_inner < 8; __unique_loopvar0_inner += 1) {
            for (int __unique_loopvar1 = 0; __unique_loopvar1 < 4; __unique_loopvar1 += 1) {
                for (int __unique_loopvar2 = 0; __unique_loopvar2 < 4; __unique_loopvar2 += 1) {
                    __m256 ___x384 = _mm256_load_ps(& ensemble149weights_transposed[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][__unique_loopvar0_inner][0]);
                    __m256 ___x385_0 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_1 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_2 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_3 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_4 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_5 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_6 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_7 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_8 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_9 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_10 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_11 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_12 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_13 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_14 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x385_15 = _mm256_broadcast_ss(& ensemble149inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    ___x386_0 = _mm256_fmadd_ps(___x385_0, ___x384, ___x386_0);
                    ___x386_1 = _mm256_fmadd_ps(___x385_1, ___x384, ___x386_1);
                    ___x386_2 = _mm256_fmadd_ps(___x385_2, ___x384, ___x386_2);
                    ___x386_3 = _mm256_fmadd_ps(___x385_3, ___x384, ___x386_3);
                    ___x386_4 = _mm256_fmadd_ps(___x385_4, ___x384, ___x386_4);
                    ___x386_5 = _mm256_fmadd_ps(___x385_5, ___x384, ___x386_5);
                    ___x386_6 = _mm256_fmadd_ps(___x385_6, ___x384, ___x386_6);
                    ___x386_7 = _mm256_fmadd_ps(___x385_7, ___x384, ___x386_7);
                    ___x386_8 = _mm256_fmadd_ps(___x385_8, ___x384, ___x386_8);
                    ___x386_9 = _mm256_fmadd_ps(___x385_9, ___x384, ___x386_9);
                    ___x386_10 = _mm256_fmadd_ps(___x385_10, ___x384, ___x386_10);
                    ___x386_11 = _mm256_fmadd_ps(___x385_11, ___x384, ___x386_11);
                    ___x386_12 = _mm256_fmadd_ps(___x385_12, ___x384, ___x386_12);
                    ___x386_13 = _mm256_fmadd_ps(___x385_13, ___x384, ___x386_13);
                    ___x386_14 = _mm256_fmadd_ps(___x385_14, ___x384, ___x386_14);
                    ___x386_15 = _mm256_fmadd_ps(___x385_15, ___x384, ___x386_15);
                }
            }
        }
    }
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 0)][_neuron_index_1_outer][0], ___x386_0);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 1)][_neuron_index_1_outer][0], ___x386_1);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 2)][_neuron_index_1_outer][0], ___x386_2);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 3)][_neuron_index_1_outer][0], ___x386_3);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 4)][_neuron_index_1_outer][0], ___x386_4);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 5)][_neuron_index_1_outer][0], ___x386_5);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 6)][_neuron_index_1_outer][0], ___x386_6);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 7)][_neuron_index_1_outer][0], ___x386_7);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 8)][_neuron_index_1_outer][0], ___x386_8);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 9)][_neuron_index_1_outer][0], ___x386_9);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 10)][_neuron_index_1_outer][0], ___x386_10);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 11)][_neuron_index_1_outer][0], ___x386_11);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 12)][_neuron_index_1_outer][0], ___x386_12);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 13)][_neuron_index_1_outer][0], ___x386_13);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 14)][_neuron_index_1_outer][0], ___x386_14);
    _mm256_store_ps(& ensemble149value[(_neuron_index_0 + 15)][_neuron_index_1_outer][0], ___x386_15);
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
        ensemble150value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = ensemble150inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] + ensemble150bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
        ensemble151value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = MAX(ensemble151inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner], (float) 0.0);
    };
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 126,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 128; x1 ++) {
        transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble152weights[x0][x1][0][0], & ensemble152weights_transposed[x0][x1][0][0]);
    }
        } 
      }
    );
    
    parallel_for(0,128 / 16,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 16;
          
    parallel_for(0,126 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          __m256 ___x395_0 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 0)][_neuron_index_1_outer][0]);
    __m256 ___x395_1 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 1)][_neuron_index_1_outer][0]);
    __m256 ___x395_2 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 2)][_neuron_index_1_outer][0]);
    __m256 ___x395_3 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 3)][_neuron_index_1_outer][0]);
    __m256 ___x395_4 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 4)][_neuron_index_1_outer][0]);
    __m256 ___x395_5 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 5)][_neuron_index_1_outer][0]);
    __m256 ___x395_6 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 6)][_neuron_index_1_outer][0]);
    __m256 ___x395_7 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 7)][_neuron_index_1_outer][0]);
    __m256 ___x395_8 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 8)][_neuron_index_1_outer][0]);
    __m256 ___x395_9 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 9)][_neuron_index_1_outer][0]);
    __m256 ___x395_10 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 10)][_neuron_index_1_outer][0]);
    __m256 ___x395_11 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 11)][_neuron_index_1_outer][0]);
    __m256 ___x395_12 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 12)][_neuron_index_1_outer][0]);
    __m256 ___x395_13 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 13)][_neuron_index_1_outer][0]);
    __m256 ___x395_14 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 14)][_neuron_index_1_outer][0]);
    __m256 ___x395_15 = _mm256_load_ps(& ensemble152value[(_neuron_index_0 + 15)][_neuron_index_1_outer][0]);
    for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 128; __unique_loopvar0_outer += 1) {
        for (int __unique_loopvar0_inner = 0; __unique_loopvar0_inner < 8; __unique_loopvar0_inner += 1) {
            __m256 ___x393 = _mm256_load_ps(& ensemble152weights_transposed[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar0_inner][0]);
            __m256 ___x394_0 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_1 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_2 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_3 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_4 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_5 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_6 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_7 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_8 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_9 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_10 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_11 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_12 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_13 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_14 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            __m256 ___x394_15 = _mm256_broadcast_ss(& ensemble152inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][__unique_loopvar0_inner]);
            ___x395_0 = _mm256_fmadd_ps(___x394_0, ___x393, ___x395_0);
            ___x395_1 = _mm256_fmadd_ps(___x394_1, ___x393, ___x395_1);
            ___x395_2 = _mm256_fmadd_ps(___x394_2, ___x393, ___x395_2);
            ___x395_3 = _mm256_fmadd_ps(___x394_3, ___x393, ___x395_3);
            ___x395_4 = _mm256_fmadd_ps(___x394_4, ___x393, ___x395_4);
            ___x395_5 = _mm256_fmadd_ps(___x394_5, ___x393, ___x395_5);
            ___x395_6 = _mm256_fmadd_ps(___x394_6, ___x393, ___x395_6);
            ___x395_7 = _mm256_fmadd_ps(___x394_7, ___x393, ___x395_7);
            ___x395_8 = _mm256_fmadd_ps(___x394_8, ___x393, ___x395_8);
            ___x395_9 = _mm256_fmadd_ps(___x394_9, ___x393, ___x395_9);
            ___x395_10 = _mm256_fmadd_ps(___x394_10, ___x393, ___x395_10);
            ___x395_11 = _mm256_fmadd_ps(___x394_11, ___x393, ___x395_11);
            ___x395_12 = _mm256_fmadd_ps(___x394_12, ___x393, ___x395_12);
            ___x395_13 = _mm256_fmadd_ps(___x394_13, ___x393, ___x395_13);
            ___x395_14 = _mm256_fmadd_ps(___x394_14, ___x393, ___x395_14);
            ___x395_15 = _mm256_fmadd_ps(___x394_15, ___x393, ___x395_15);
        }
    }
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 0)][_neuron_index_1_outer][0], ___x395_0);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 1)][_neuron_index_1_outer][0], ___x395_1);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 2)][_neuron_index_1_outer][0], ___x395_2);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 3)][_neuron_index_1_outer][0], ___x395_3);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 4)][_neuron_index_1_outer][0], ___x395_4);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 5)][_neuron_index_1_outer][0], ___x395_5);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 6)][_neuron_index_1_outer][0], ___x395_6);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 7)][_neuron_index_1_outer][0], ___x395_7);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 8)][_neuron_index_1_outer][0], ___x395_8);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 9)][_neuron_index_1_outer][0], ___x395_9);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 10)][_neuron_index_1_outer][0], ___x395_10);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 11)][_neuron_index_1_outer][0], ___x395_11);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 12)][_neuron_index_1_outer][0], ___x395_12);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 13)][_neuron_index_1_outer][0], ___x395_13);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 14)][_neuron_index_1_outer][0], ___x395_14);
    _mm256_store_ps(& ensemble152value[(_neuron_index_0 + 15)][_neuron_index_1_outer][0], ___x395_15);
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,126 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
        ensemble153value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = ensemble153inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] + ensemble153bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
    };
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 32,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 66; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble154weights[x0][x1][x2][x3][0][0], & ensemble154weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,32 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 66; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x402_0 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x402_1 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x402_2 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x402_3 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x402_4 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x402_5 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x402_6 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x402_7 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x402_8 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x402_9 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x402_10 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x402_11 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x402_12 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x402_13 = _mm256_load_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x403_0_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x403_0_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x403_0_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x403_0_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x403_1_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x403_1_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x403_1_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x403_1_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x403_2_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x403_2_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x403_2_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x403_2_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x403_3_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x403_3_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x403_3_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x403_3_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x403_4_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x403_4_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x403_4_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x403_4_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x403_5_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x403_5_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x403_5_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x403_5_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x403_6_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x403_6_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x403_6_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x403_6_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x403_7_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x403_7_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x403_7_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x403_7_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x403_8_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x403_8_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x403_8_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x403_8_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x403_9_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x403_9_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x403_9_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x403_9_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x403_10_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x403_10_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x403_10_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x403_10_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x403_11_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x403_11_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x403_11_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x403_11_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x403_12_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x403_12_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x403_12_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x403_12_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x403_13_0 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x403_13_1 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x403_13_2 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x403_13_3 = _mm256_broadcast_ss(& ensemble154inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x404_0 = _mm256_load_ps(& ensemble154weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x404_1 = _mm256_load_ps(& ensemble154weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x404_2 = _mm256_load_ps(& ensemble154weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x404_3 = _mm256_load_ps(& ensemble154weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x402_0 = _mm256_fmadd_ps(___x403_0_0, ___x404_0, ___x402_0);
                            ___x402_0 = _mm256_fmadd_ps(___x403_0_1, ___x404_1, ___x402_0);
                            ___x402_0 = _mm256_fmadd_ps(___x403_0_2, ___x404_2, ___x402_0);
                            ___x402_0 = _mm256_fmadd_ps(___x403_0_3, ___x404_3, ___x402_0);
                            ___x402_1 = _mm256_fmadd_ps(___x403_1_0, ___x404_0, ___x402_1);
                            ___x402_1 = _mm256_fmadd_ps(___x403_1_1, ___x404_1, ___x402_1);
                            ___x402_1 = _mm256_fmadd_ps(___x403_1_2, ___x404_2, ___x402_1);
                            ___x402_1 = _mm256_fmadd_ps(___x403_1_3, ___x404_3, ___x402_1);
                            ___x402_2 = _mm256_fmadd_ps(___x403_2_0, ___x404_0, ___x402_2);
                            ___x402_2 = _mm256_fmadd_ps(___x403_2_1, ___x404_1, ___x402_2);
                            ___x402_2 = _mm256_fmadd_ps(___x403_2_2, ___x404_2, ___x402_2);
                            ___x402_2 = _mm256_fmadd_ps(___x403_2_3, ___x404_3, ___x402_2);
                            ___x402_3 = _mm256_fmadd_ps(___x403_3_0, ___x404_0, ___x402_3);
                            ___x402_3 = _mm256_fmadd_ps(___x403_3_1, ___x404_1, ___x402_3);
                            ___x402_3 = _mm256_fmadd_ps(___x403_3_2, ___x404_2, ___x402_3);
                            ___x402_3 = _mm256_fmadd_ps(___x403_3_3, ___x404_3, ___x402_3);
                            ___x402_4 = _mm256_fmadd_ps(___x403_4_0, ___x404_0, ___x402_4);
                            ___x402_4 = _mm256_fmadd_ps(___x403_4_1, ___x404_1, ___x402_4);
                            ___x402_4 = _mm256_fmadd_ps(___x403_4_2, ___x404_2, ___x402_4);
                            ___x402_4 = _mm256_fmadd_ps(___x403_4_3, ___x404_3, ___x402_4);
                            ___x402_5 = _mm256_fmadd_ps(___x403_5_0, ___x404_0, ___x402_5);
                            ___x402_5 = _mm256_fmadd_ps(___x403_5_1, ___x404_1, ___x402_5);
                            ___x402_5 = _mm256_fmadd_ps(___x403_5_2, ___x404_2, ___x402_5);
                            ___x402_5 = _mm256_fmadd_ps(___x403_5_3, ___x404_3, ___x402_5);
                            ___x402_6 = _mm256_fmadd_ps(___x403_6_0, ___x404_0, ___x402_6);
                            ___x402_6 = _mm256_fmadd_ps(___x403_6_1, ___x404_1, ___x402_6);
                            ___x402_6 = _mm256_fmadd_ps(___x403_6_2, ___x404_2, ___x402_6);
                            ___x402_6 = _mm256_fmadd_ps(___x403_6_3, ___x404_3, ___x402_6);
                            ___x402_7 = _mm256_fmadd_ps(___x403_7_0, ___x404_0, ___x402_7);
                            ___x402_7 = _mm256_fmadd_ps(___x403_7_1, ___x404_1, ___x402_7);
                            ___x402_7 = _mm256_fmadd_ps(___x403_7_2, ___x404_2, ___x402_7);
                            ___x402_7 = _mm256_fmadd_ps(___x403_7_3, ___x404_3, ___x402_7);
                            ___x402_8 = _mm256_fmadd_ps(___x403_8_0, ___x404_0, ___x402_8);
                            ___x402_8 = _mm256_fmadd_ps(___x403_8_1, ___x404_1, ___x402_8);
                            ___x402_8 = _mm256_fmadd_ps(___x403_8_2, ___x404_2, ___x402_8);
                            ___x402_8 = _mm256_fmadd_ps(___x403_8_3, ___x404_3, ___x402_8);
                            ___x402_9 = _mm256_fmadd_ps(___x403_9_0, ___x404_0, ___x402_9);
                            ___x402_9 = _mm256_fmadd_ps(___x403_9_1, ___x404_1, ___x402_9);
                            ___x402_9 = _mm256_fmadd_ps(___x403_9_2, ___x404_2, ___x402_9);
                            ___x402_9 = _mm256_fmadd_ps(___x403_9_3, ___x404_3, ___x402_9);
                            ___x402_10 = _mm256_fmadd_ps(___x403_10_0, ___x404_0, ___x402_10);
                            ___x402_10 = _mm256_fmadd_ps(___x403_10_1, ___x404_1, ___x402_10);
                            ___x402_10 = _mm256_fmadd_ps(___x403_10_2, ___x404_2, ___x402_10);
                            ___x402_10 = _mm256_fmadd_ps(___x403_10_3, ___x404_3, ___x402_10);
                            ___x402_11 = _mm256_fmadd_ps(___x403_11_0, ___x404_0, ___x402_11);
                            ___x402_11 = _mm256_fmadd_ps(___x403_11_1, ___x404_1, ___x402_11);
                            ___x402_11 = _mm256_fmadd_ps(___x403_11_2, ___x404_2, ___x402_11);
                            ___x402_11 = _mm256_fmadd_ps(___x403_11_3, ___x404_3, ___x402_11);
                            ___x402_12 = _mm256_fmadd_ps(___x403_12_0, ___x404_0, ___x402_12);
                            ___x402_12 = _mm256_fmadd_ps(___x403_12_1, ___x404_1, ___x402_12);
                            ___x402_12 = _mm256_fmadd_ps(___x403_12_2, ___x404_2, ___x402_12);
                            ___x402_12 = _mm256_fmadd_ps(___x403_12_3, ___x404_3, ___x402_12);
                            ___x402_13 = _mm256_fmadd_ps(___x403_13_0, ___x404_0, ___x402_13);
                            ___x402_13 = _mm256_fmadd_ps(___x403_13_1, ___x404_1, ___x402_13);
                            ___x402_13 = _mm256_fmadd_ps(___x403_13_2, ___x404_2, ___x402_13);
                            ___x402_13 = _mm256_fmadd_ps(___x403_13_3, ___x404_3, ___x402_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x402_0);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x402_1);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x402_2);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x402_3);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x402_4);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x402_5);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x402_6);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x402_7);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x402_8);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x402_9);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x402_10);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x402_11);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x402_12);
                _mm256_store_ps(& ensemble154value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x402_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble155value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble155inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble155bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble156value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble156inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 20,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 66; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble157weights[x0][x1][x2][x3][0][0], & ensemble157weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,20 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 66; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x412_0 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0]);
                __m256 ___x412_1 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0]);
                __m256 ___x412_2 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0]);
                __m256 ___x412_3 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0]);
                __m256 ___x412_4 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0]);
                __m256 ___x412_5 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0]);
                __m256 ___x412_6 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0]);
                __m256 ___x412_7 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0]);
                __m256 ___x412_8 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0]);
                __m256 ___x412_9 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0]);
                __m256 ___x412_10 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0]);
                __m256 ___x412_11 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0]);
                __m256 ___x412_12 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0]);
                __m256 ___x412_13 = _mm256_load_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x411_0_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x411_0_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x411_0_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x411_0_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x411_1_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x411_1_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x411_1_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x411_1_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x411_2_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x411_2_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x411_2_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x411_2_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x411_3_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x411_3_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x411_3_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x411_3_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x411_4_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x411_4_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x411_4_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x411_4_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x411_5_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x411_5_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x411_5_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x411_5_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x411_6_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x411_6_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x411_6_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x411_6_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x411_7_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x411_7_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x411_7_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x411_7_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x411_8_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x411_8_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x411_8_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x411_8_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x411_9_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x411_9_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x411_9_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x411_9_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x411_10_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x411_10_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x411_10_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x411_10_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x411_11_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x411_11_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x411_11_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x411_11_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x411_12_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x411_12_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x411_12_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x411_12_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x411_13_0 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x411_13_1 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x411_13_2 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x411_13_3 = _mm256_broadcast_ss(& ensemble157inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x413_0 = _mm256_load_ps(& ensemble157weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x413_1 = _mm256_load_ps(& ensemble157weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x413_2 = _mm256_load_ps(& ensemble157weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x413_3 = _mm256_load_ps(& ensemble157weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x412_0 = _mm256_fmadd_ps(___x411_0_0, ___x413_0, ___x412_0);
                            ___x412_0 = _mm256_fmadd_ps(___x411_0_1, ___x413_1, ___x412_0);
                            ___x412_0 = _mm256_fmadd_ps(___x411_0_2, ___x413_2, ___x412_0);
                            ___x412_0 = _mm256_fmadd_ps(___x411_0_3, ___x413_3, ___x412_0);
                            ___x412_1 = _mm256_fmadd_ps(___x411_1_0, ___x413_0, ___x412_1);
                            ___x412_1 = _mm256_fmadd_ps(___x411_1_1, ___x413_1, ___x412_1);
                            ___x412_1 = _mm256_fmadd_ps(___x411_1_2, ___x413_2, ___x412_1);
                            ___x412_1 = _mm256_fmadd_ps(___x411_1_3, ___x413_3, ___x412_1);
                            ___x412_2 = _mm256_fmadd_ps(___x411_2_0, ___x413_0, ___x412_2);
                            ___x412_2 = _mm256_fmadd_ps(___x411_2_1, ___x413_1, ___x412_2);
                            ___x412_2 = _mm256_fmadd_ps(___x411_2_2, ___x413_2, ___x412_2);
                            ___x412_2 = _mm256_fmadd_ps(___x411_2_3, ___x413_3, ___x412_2);
                            ___x412_3 = _mm256_fmadd_ps(___x411_3_0, ___x413_0, ___x412_3);
                            ___x412_3 = _mm256_fmadd_ps(___x411_3_1, ___x413_1, ___x412_3);
                            ___x412_3 = _mm256_fmadd_ps(___x411_3_2, ___x413_2, ___x412_3);
                            ___x412_3 = _mm256_fmadd_ps(___x411_3_3, ___x413_3, ___x412_3);
                            ___x412_4 = _mm256_fmadd_ps(___x411_4_0, ___x413_0, ___x412_4);
                            ___x412_4 = _mm256_fmadd_ps(___x411_4_1, ___x413_1, ___x412_4);
                            ___x412_4 = _mm256_fmadd_ps(___x411_4_2, ___x413_2, ___x412_4);
                            ___x412_4 = _mm256_fmadd_ps(___x411_4_3, ___x413_3, ___x412_4);
                            ___x412_5 = _mm256_fmadd_ps(___x411_5_0, ___x413_0, ___x412_5);
                            ___x412_5 = _mm256_fmadd_ps(___x411_5_1, ___x413_1, ___x412_5);
                            ___x412_5 = _mm256_fmadd_ps(___x411_5_2, ___x413_2, ___x412_5);
                            ___x412_5 = _mm256_fmadd_ps(___x411_5_3, ___x413_3, ___x412_5);
                            ___x412_6 = _mm256_fmadd_ps(___x411_6_0, ___x413_0, ___x412_6);
                            ___x412_6 = _mm256_fmadd_ps(___x411_6_1, ___x413_1, ___x412_6);
                            ___x412_6 = _mm256_fmadd_ps(___x411_6_2, ___x413_2, ___x412_6);
                            ___x412_6 = _mm256_fmadd_ps(___x411_6_3, ___x413_3, ___x412_6);
                            ___x412_7 = _mm256_fmadd_ps(___x411_7_0, ___x413_0, ___x412_7);
                            ___x412_7 = _mm256_fmadd_ps(___x411_7_1, ___x413_1, ___x412_7);
                            ___x412_7 = _mm256_fmadd_ps(___x411_7_2, ___x413_2, ___x412_7);
                            ___x412_7 = _mm256_fmadd_ps(___x411_7_3, ___x413_3, ___x412_7);
                            ___x412_8 = _mm256_fmadd_ps(___x411_8_0, ___x413_0, ___x412_8);
                            ___x412_8 = _mm256_fmadd_ps(___x411_8_1, ___x413_1, ___x412_8);
                            ___x412_8 = _mm256_fmadd_ps(___x411_8_2, ___x413_2, ___x412_8);
                            ___x412_8 = _mm256_fmadd_ps(___x411_8_3, ___x413_3, ___x412_8);
                            ___x412_9 = _mm256_fmadd_ps(___x411_9_0, ___x413_0, ___x412_9);
                            ___x412_9 = _mm256_fmadd_ps(___x411_9_1, ___x413_1, ___x412_9);
                            ___x412_9 = _mm256_fmadd_ps(___x411_9_2, ___x413_2, ___x412_9);
                            ___x412_9 = _mm256_fmadd_ps(___x411_9_3, ___x413_3, ___x412_9);
                            ___x412_10 = _mm256_fmadd_ps(___x411_10_0, ___x413_0, ___x412_10);
                            ___x412_10 = _mm256_fmadd_ps(___x411_10_1, ___x413_1, ___x412_10);
                            ___x412_10 = _mm256_fmadd_ps(___x411_10_2, ___x413_2, ___x412_10);
                            ___x412_10 = _mm256_fmadd_ps(___x411_10_3, ___x413_3, ___x412_10);
                            ___x412_11 = _mm256_fmadd_ps(___x411_11_0, ___x413_0, ___x412_11);
                            ___x412_11 = _mm256_fmadd_ps(___x411_11_1, ___x413_1, ___x412_11);
                            ___x412_11 = _mm256_fmadd_ps(___x411_11_2, ___x413_2, ___x412_11);
                            ___x412_11 = _mm256_fmadd_ps(___x411_11_3, ___x413_3, ___x412_11);
                            ___x412_12 = _mm256_fmadd_ps(___x411_12_0, ___x413_0, ___x412_12);
                            ___x412_12 = _mm256_fmadd_ps(___x411_12_1, ___x413_1, ___x412_12);
                            ___x412_12 = _mm256_fmadd_ps(___x411_12_2, ___x413_2, ___x412_12);
                            ___x412_12 = _mm256_fmadd_ps(___x411_12_3, ___x413_3, ___x412_12);
                            ___x412_13 = _mm256_fmadd_ps(___x411_13_0, ___x413_0, ___x412_13);
                            ___x412_13 = _mm256_fmadd_ps(___x411_13_1, ___x413_1, ___x412_13);
                            ___x412_13 = _mm256_fmadd_ps(___x411_13_2, ___x413_2, ___x412_13);
                            ___x412_13 = _mm256_fmadd_ps(___x411_13_3, ___x413_3, ___x412_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0], ___x412_0);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0], ___x412_1);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0], ___x412_2);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0], ___x412_3);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0], ___x412_4);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0], ___x412_5);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0], ___x412_6);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][0], ___x412_7);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][0], ___x412_8);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][0], ___x412_9);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][0], ___x412_10);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][0], ___x412_11);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][0], ___x412_12);
                _mm256_store_ps(& ensemble157value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][0], ___x412_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble158value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble158inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] + ensemble158bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble159value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble159inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 40,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 20; x1 ++) {
        for (int x2 = 0; x2 < 3; x2 ++) {
            for (int x3 = 0; x3 < 3; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble160weights[x0][x1][x2][x3][0][0], & ensemble160weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,40 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 20; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x422_0 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x422_1 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x422_2 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x422_3 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x422_4 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x422_5 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x422_6 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x422_7 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x422_8 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x422_9 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x422_10 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x422_11 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x422_12 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x422_13 = _mm256_load_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x420_0_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x420_0_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x420_0_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x420_0_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x420_1_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x420_1_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x420_1_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x420_1_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x420_2_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x420_2_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x420_2_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x420_2_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x420_3_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x420_3_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x420_3_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x420_3_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x420_4_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x420_4_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x420_4_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x420_4_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x420_5_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x420_5_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x420_5_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x420_5_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x420_6_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x420_6_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x420_6_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x420_6_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x420_7_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x420_7_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x420_7_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x420_7_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x420_8_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x420_8_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x420_8_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x420_8_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x420_9_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x420_9_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x420_9_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x420_9_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x420_10_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x420_10_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x420_10_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x420_10_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x420_11_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x420_11_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x420_11_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x420_11_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x420_12_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x420_12_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x420_12_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x420_12_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x420_13_0 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x420_13_1 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x420_13_2 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x420_13_3 = _mm256_broadcast_ss(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x421_0 = _mm256_load_ps(& ensemble160weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x421_1 = _mm256_load_ps(& ensemble160weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x421_2 = _mm256_load_ps(& ensemble160weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x421_3 = _mm256_load_ps(& ensemble160weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x422_0 = _mm256_fmadd_ps(___x420_0_0, ___x421_0, ___x422_0);
                            ___x422_0 = _mm256_fmadd_ps(___x420_0_1, ___x421_1, ___x422_0);
                            ___x422_0 = _mm256_fmadd_ps(___x420_0_2, ___x421_2, ___x422_0);
                            ___x422_0 = _mm256_fmadd_ps(___x420_0_3, ___x421_3, ___x422_0);
                            ___x422_1 = _mm256_fmadd_ps(___x420_1_0, ___x421_0, ___x422_1);
                            ___x422_1 = _mm256_fmadd_ps(___x420_1_1, ___x421_1, ___x422_1);
                            ___x422_1 = _mm256_fmadd_ps(___x420_1_2, ___x421_2, ___x422_1);
                            ___x422_1 = _mm256_fmadd_ps(___x420_1_3, ___x421_3, ___x422_1);
                            ___x422_2 = _mm256_fmadd_ps(___x420_2_0, ___x421_0, ___x422_2);
                            ___x422_2 = _mm256_fmadd_ps(___x420_2_1, ___x421_1, ___x422_2);
                            ___x422_2 = _mm256_fmadd_ps(___x420_2_2, ___x421_2, ___x422_2);
                            ___x422_2 = _mm256_fmadd_ps(___x420_2_3, ___x421_3, ___x422_2);
                            ___x422_3 = _mm256_fmadd_ps(___x420_3_0, ___x421_0, ___x422_3);
                            ___x422_3 = _mm256_fmadd_ps(___x420_3_1, ___x421_1, ___x422_3);
                            ___x422_3 = _mm256_fmadd_ps(___x420_3_2, ___x421_2, ___x422_3);
                            ___x422_3 = _mm256_fmadd_ps(___x420_3_3, ___x421_3, ___x422_3);
                            ___x422_4 = _mm256_fmadd_ps(___x420_4_0, ___x421_0, ___x422_4);
                            ___x422_4 = _mm256_fmadd_ps(___x420_4_1, ___x421_1, ___x422_4);
                            ___x422_4 = _mm256_fmadd_ps(___x420_4_2, ___x421_2, ___x422_4);
                            ___x422_4 = _mm256_fmadd_ps(___x420_4_3, ___x421_3, ___x422_4);
                            ___x422_5 = _mm256_fmadd_ps(___x420_5_0, ___x421_0, ___x422_5);
                            ___x422_5 = _mm256_fmadd_ps(___x420_5_1, ___x421_1, ___x422_5);
                            ___x422_5 = _mm256_fmadd_ps(___x420_5_2, ___x421_2, ___x422_5);
                            ___x422_5 = _mm256_fmadd_ps(___x420_5_3, ___x421_3, ___x422_5);
                            ___x422_6 = _mm256_fmadd_ps(___x420_6_0, ___x421_0, ___x422_6);
                            ___x422_6 = _mm256_fmadd_ps(___x420_6_1, ___x421_1, ___x422_6);
                            ___x422_6 = _mm256_fmadd_ps(___x420_6_2, ___x421_2, ___x422_6);
                            ___x422_6 = _mm256_fmadd_ps(___x420_6_3, ___x421_3, ___x422_6);
                            ___x422_7 = _mm256_fmadd_ps(___x420_7_0, ___x421_0, ___x422_7);
                            ___x422_7 = _mm256_fmadd_ps(___x420_7_1, ___x421_1, ___x422_7);
                            ___x422_7 = _mm256_fmadd_ps(___x420_7_2, ___x421_2, ___x422_7);
                            ___x422_7 = _mm256_fmadd_ps(___x420_7_3, ___x421_3, ___x422_7);
                            ___x422_8 = _mm256_fmadd_ps(___x420_8_0, ___x421_0, ___x422_8);
                            ___x422_8 = _mm256_fmadd_ps(___x420_8_1, ___x421_1, ___x422_8);
                            ___x422_8 = _mm256_fmadd_ps(___x420_8_2, ___x421_2, ___x422_8);
                            ___x422_8 = _mm256_fmadd_ps(___x420_8_3, ___x421_3, ___x422_8);
                            ___x422_9 = _mm256_fmadd_ps(___x420_9_0, ___x421_0, ___x422_9);
                            ___x422_9 = _mm256_fmadd_ps(___x420_9_1, ___x421_1, ___x422_9);
                            ___x422_9 = _mm256_fmadd_ps(___x420_9_2, ___x421_2, ___x422_9);
                            ___x422_9 = _mm256_fmadd_ps(___x420_9_3, ___x421_3, ___x422_9);
                            ___x422_10 = _mm256_fmadd_ps(___x420_10_0, ___x421_0, ___x422_10);
                            ___x422_10 = _mm256_fmadd_ps(___x420_10_1, ___x421_1, ___x422_10);
                            ___x422_10 = _mm256_fmadd_ps(___x420_10_2, ___x421_2, ___x422_10);
                            ___x422_10 = _mm256_fmadd_ps(___x420_10_3, ___x421_3, ___x422_10);
                            ___x422_11 = _mm256_fmadd_ps(___x420_11_0, ___x421_0, ___x422_11);
                            ___x422_11 = _mm256_fmadd_ps(___x420_11_1, ___x421_1, ___x422_11);
                            ___x422_11 = _mm256_fmadd_ps(___x420_11_2, ___x421_2, ___x422_11);
                            ___x422_11 = _mm256_fmadd_ps(___x420_11_3, ___x421_3, ___x422_11);
                            ___x422_12 = _mm256_fmadd_ps(___x420_12_0, ___x421_0, ___x422_12);
                            ___x422_12 = _mm256_fmadd_ps(___x420_12_1, ___x421_1, ___x422_12);
                            ___x422_12 = _mm256_fmadd_ps(___x420_12_2, ___x421_2, ___x422_12);
                            ___x422_12 = _mm256_fmadd_ps(___x420_12_3, ___x421_3, ___x422_12);
                            ___x422_13 = _mm256_fmadd_ps(___x420_13_0, ___x421_0, ___x422_13);
                            ___x422_13 = _mm256_fmadd_ps(___x420_13_1, ___x421_1, ___x422_13);
                            ___x422_13 = _mm256_fmadd_ps(___x420_13_2, ___x421_2, ___x422_13);
                            ___x422_13 = _mm256_fmadd_ps(___x420_13_3, ___x421_3, ___x422_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x422_0);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x422_1);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x422_2);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x422_3);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x422_4);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x422_5);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x422_6);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x422_7);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x422_8);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x422_9);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x422_10);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x422_11);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x422_12);
                _mm256_store_ps(& ensemble160value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x422_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble161value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble161inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble161bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble162value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble162inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 4,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 66; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble163weights[x0][x1][x2][x3][0][0], & ensemble163weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,4 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 66; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x430_0 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0]);
                __m256 ___x430_1 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0]);
                __m256 ___x430_2 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0]);
                __m256 ___x430_3 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0]);
                __m256 ___x430_4 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0]);
                __m256 ___x430_5 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0]);
                __m256 ___x430_6 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0]);
                __m256 ___x430_7 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0]);
                __m256 ___x430_8 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0]);
                __m256 ___x430_9 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0]);
                __m256 ___x430_10 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0]);
                __m256 ___x430_11 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0]);
                __m256 ___x430_12 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0]);
                __m256 ___x430_13 = _mm256_load_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x429_0 = _mm256_load_ps(& ensemble163weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x429_1 = _mm256_load_ps(& ensemble163weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x429_2 = _mm256_load_ps(& ensemble163weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x429_3 = _mm256_load_ps(& ensemble163weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x431_0_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x431_0_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x431_0_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x431_0_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x431_1_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x431_1_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x431_1_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x431_1_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x431_2_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x431_2_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x431_2_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x431_2_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x431_3_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x431_3_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x431_3_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x431_3_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x431_4_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x431_4_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x431_4_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x431_4_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x431_5_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x431_5_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x431_5_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x431_5_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x431_6_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x431_6_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x431_6_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x431_6_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x431_7_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x431_7_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x431_7_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x431_7_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x431_8_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x431_8_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x431_8_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x431_8_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x431_9_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x431_9_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x431_9_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x431_9_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x431_10_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x431_10_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x431_10_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x431_10_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x431_11_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x431_11_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x431_11_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x431_11_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x431_12_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x431_12_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x431_12_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x431_12_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x431_13_0 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x431_13_1 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x431_13_2 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x431_13_3 = _mm256_broadcast_ss(& ensemble163inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x430_0 = _mm256_fmadd_ps(___x431_0_0, ___x429_0, ___x430_0);
                            ___x430_0 = _mm256_fmadd_ps(___x431_0_1, ___x429_1, ___x430_0);
                            ___x430_0 = _mm256_fmadd_ps(___x431_0_2, ___x429_2, ___x430_0);
                            ___x430_0 = _mm256_fmadd_ps(___x431_0_3, ___x429_3, ___x430_0);
                            ___x430_1 = _mm256_fmadd_ps(___x431_1_0, ___x429_0, ___x430_1);
                            ___x430_1 = _mm256_fmadd_ps(___x431_1_1, ___x429_1, ___x430_1);
                            ___x430_1 = _mm256_fmadd_ps(___x431_1_2, ___x429_2, ___x430_1);
                            ___x430_1 = _mm256_fmadd_ps(___x431_1_3, ___x429_3, ___x430_1);
                            ___x430_2 = _mm256_fmadd_ps(___x431_2_0, ___x429_0, ___x430_2);
                            ___x430_2 = _mm256_fmadd_ps(___x431_2_1, ___x429_1, ___x430_2);
                            ___x430_2 = _mm256_fmadd_ps(___x431_2_2, ___x429_2, ___x430_2);
                            ___x430_2 = _mm256_fmadd_ps(___x431_2_3, ___x429_3, ___x430_2);
                            ___x430_3 = _mm256_fmadd_ps(___x431_3_0, ___x429_0, ___x430_3);
                            ___x430_3 = _mm256_fmadd_ps(___x431_3_1, ___x429_1, ___x430_3);
                            ___x430_3 = _mm256_fmadd_ps(___x431_3_2, ___x429_2, ___x430_3);
                            ___x430_3 = _mm256_fmadd_ps(___x431_3_3, ___x429_3, ___x430_3);
                            ___x430_4 = _mm256_fmadd_ps(___x431_4_0, ___x429_0, ___x430_4);
                            ___x430_4 = _mm256_fmadd_ps(___x431_4_1, ___x429_1, ___x430_4);
                            ___x430_4 = _mm256_fmadd_ps(___x431_4_2, ___x429_2, ___x430_4);
                            ___x430_4 = _mm256_fmadd_ps(___x431_4_3, ___x429_3, ___x430_4);
                            ___x430_5 = _mm256_fmadd_ps(___x431_5_0, ___x429_0, ___x430_5);
                            ___x430_5 = _mm256_fmadd_ps(___x431_5_1, ___x429_1, ___x430_5);
                            ___x430_5 = _mm256_fmadd_ps(___x431_5_2, ___x429_2, ___x430_5);
                            ___x430_5 = _mm256_fmadd_ps(___x431_5_3, ___x429_3, ___x430_5);
                            ___x430_6 = _mm256_fmadd_ps(___x431_6_0, ___x429_0, ___x430_6);
                            ___x430_6 = _mm256_fmadd_ps(___x431_6_1, ___x429_1, ___x430_6);
                            ___x430_6 = _mm256_fmadd_ps(___x431_6_2, ___x429_2, ___x430_6);
                            ___x430_6 = _mm256_fmadd_ps(___x431_6_3, ___x429_3, ___x430_6);
                            ___x430_7 = _mm256_fmadd_ps(___x431_7_0, ___x429_0, ___x430_7);
                            ___x430_7 = _mm256_fmadd_ps(___x431_7_1, ___x429_1, ___x430_7);
                            ___x430_7 = _mm256_fmadd_ps(___x431_7_2, ___x429_2, ___x430_7);
                            ___x430_7 = _mm256_fmadd_ps(___x431_7_3, ___x429_3, ___x430_7);
                            ___x430_8 = _mm256_fmadd_ps(___x431_8_0, ___x429_0, ___x430_8);
                            ___x430_8 = _mm256_fmadd_ps(___x431_8_1, ___x429_1, ___x430_8);
                            ___x430_8 = _mm256_fmadd_ps(___x431_8_2, ___x429_2, ___x430_8);
                            ___x430_8 = _mm256_fmadd_ps(___x431_8_3, ___x429_3, ___x430_8);
                            ___x430_9 = _mm256_fmadd_ps(___x431_9_0, ___x429_0, ___x430_9);
                            ___x430_9 = _mm256_fmadd_ps(___x431_9_1, ___x429_1, ___x430_9);
                            ___x430_9 = _mm256_fmadd_ps(___x431_9_2, ___x429_2, ___x430_9);
                            ___x430_9 = _mm256_fmadd_ps(___x431_9_3, ___x429_3, ___x430_9);
                            ___x430_10 = _mm256_fmadd_ps(___x431_10_0, ___x429_0, ___x430_10);
                            ___x430_10 = _mm256_fmadd_ps(___x431_10_1, ___x429_1, ___x430_10);
                            ___x430_10 = _mm256_fmadd_ps(___x431_10_2, ___x429_2, ___x430_10);
                            ___x430_10 = _mm256_fmadd_ps(___x431_10_3, ___x429_3, ___x430_10);
                            ___x430_11 = _mm256_fmadd_ps(___x431_11_0, ___x429_0, ___x430_11);
                            ___x430_11 = _mm256_fmadd_ps(___x431_11_1, ___x429_1, ___x430_11);
                            ___x430_11 = _mm256_fmadd_ps(___x431_11_2, ___x429_2, ___x430_11);
                            ___x430_11 = _mm256_fmadd_ps(___x431_11_3, ___x429_3, ___x430_11);
                            ___x430_12 = _mm256_fmadd_ps(___x431_12_0, ___x429_0, ___x430_12);
                            ___x430_12 = _mm256_fmadd_ps(___x431_12_1, ___x429_1, ___x430_12);
                            ___x430_12 = _mm256_fmadd_ps(___x431_12_2, ___x429_2, ___x430_12);
                            ___x430_12 = _mm256_fmadd_ps(___x431_12_3, ___x429_3, ___x430_12);
                            ___x430_13 = _mm256_fmadd_ps(___x431_13_0, ___x429_0, ___x430_13);
                            ___x430_13 = _mm256_fmadd_ps(___x431_13_1, ___x429_1, ___x430_13);
                            ___x430_13 = _mm256_fmadd_ps(___x431_13_2, ___x429_2, ___x430_13);
                            ___x430_13 = _mm256_fmadd_ps(___x431_13_3, ___x429_3, ___x430_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0], ___x430_0);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0], ___x430_1);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0], ___x430_2);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0], ___x430_3);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0], ___x430_4);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0], ___x430_5);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0], ___x430_6);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][0], ___x430_7);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][0], ___x430_8);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][0], ___x430_9);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][0], ___x430_10);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][0], ___x430_11);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][0], ___x430_12);
                _mm256_store_ps(& ensemble163value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][0], ___x430_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble164value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble164inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] + ensemble164bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble165value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble165inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 4; x1 ++) {
        for (int x2 = 0; x2 < 5; x2 ++) {
            for (int x3 = 0; x3 < 5; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble166weights[x0][x1][x2][x3][0][0], & ensemble166weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 4; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x438_0 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x438_1 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x438_2 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x438_3 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x438_4 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x438_5 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x438_6 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x438_7 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x438_8 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x438_9 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x438_10 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x438_11 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x438_12 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x438_13 = _mm256_load_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x439_0 = _mm256_load_ps(& ensemble166weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x439_1 = _mm256_load_ps(& ensemble166weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x439_2 = _mm256_load_ps(& ensemble166weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x439_3 = _mm256_load_ps(& ensemble166weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x440_0_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x440_0_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x440_0_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x440_0_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x440_1_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x440_1_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x440_1_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x440_1_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x440_2_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x440_2_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x440_2_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x440_2_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x440_3_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x440_3_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x440_3_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x440_3_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x440_4_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x440_4_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x440_4_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x440_4_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x440_5_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x440_5_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x440_5_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x440_5_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x440_6_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x440_6_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x440_6_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x440_6_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x440_7_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x440_7_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x440_7_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x440_7_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x440_8_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x440_8_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x440_8_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x440_8_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x440_9_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x440_9_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x440_9_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x440_9_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x440_10_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x440_10_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x440_10_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x440_10_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x440_11_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x440_11_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x440_11_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x440_11_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x440_12_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x440_12_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x440_12_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x440_12_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x440_13_0 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x440_13_1 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x440_13_2 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x440_13_3 = _mm256_broadcast_ss(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            ___x438_0 = _mm256_fmadd_ps(___x440_0_0, ___x439_0, ___x438_0);
                            ___x438_0 = _mm256_fmadd_ps(___x440_0_1, ___x439_1, ___x438_0);
                            ___x438_0 = _mm256_fmadd_ps(___x440_0_2, ___x439_2, ___x438_0);
                            ___x438_0 = _mm256_fmadd_ps(___x440_0_3, ___x439_3, ___x438_0);
                            ___x438_1 = _mm256_fmadd_ps(___x440_1_0, ___x439_0, ___x438_1);
                            ___x438_1 = _mm256_fmadd_ps(___x440_1_1, ___x439_1, ___x438_1);
                            ___x438_1 = _mm256_fmadd_ps(___x440_1_2, ___x439_2, ___x438_1);
                            ___x438_1 = _mm256_fmadd_ps(___x440_1_3, ___x439_3, ___x438_1);
                            ___x438_2 = _mm256_fmadd_ps(___x440_2_0, ___x439_0, ___x438_2);
                            ___x438_2 = _mm256_fmadd_ps(___x440_2_1, ___x439_1, ___x438_2);
                            ___x438_2 = _mm256_fmadd_ps(___x440_2_2, ___x439_2, ___x438_2);
                            ___x438_2 = _mm256_fmadd_ps(___x440_2_3, ___x439_3, ___x438_2);
                            ___x438_3 = _mm256_fmadd_ps(___x440_3_0, ___x439_0, ___x438_3);
                            ___x438_3 = _mm256_fmadd_ps(___x440_3_1, ___x439_1, ___x438_3);
                            ___x438_3 = _mm256_fmadd_ps(___x440_3_2, ___x439_2, ___x438_3);
                            ___x438_3 = _mm256_fmadd_ps(___x440_3_3, ___x439_3, ___x438_3);
                            ___x438_4 = _mm256_fmadd_ps(___x440_4_0, ___x439_0, ___x438_4);
                            ___x438_4 = _mm256_fmadd_ps(___x440_4_1, ___x439_1, ___x438_4);
                            ___x438_4 = _mm256_fmadd_ps(___x440_4_2, ___x439_2, ___x438_4);
                            ___x438_4 = _mm256_fmadd_ps(___x440_4_3, ___x439_3, ___x438_4);
                            ___x438_5 = _mm256_fmadd_ps(___x440_5_0, ___x439_0, ___x438_5);
                            ___x438_5 = _mm256_fmadd_ps(___x440_5_1, ___x439_1, ___x438_5);
                            ___x438_5 = _mm256_fmadd_ps(___x440_5_2, ___x439_2, ___x438_5);
                            ___x438_5 = _mm256_fmadd_ps(___x440_5_3, ___x439_3, ___x438_5);
                            ___x438_6 = _mm256_fmadd_ps(___x440_6_0, ___x439_0, ___x438_6);
                            ___x438_6 = _mm256_fmadd_ps(___x440_6_1, ___x439_1, ___x438_6);
                            ___x438_6 = _mm256_fmadd_ps(___x440_6_2, ___x439_2, ___x438_6);
                            ___x438_6 = _mm256_fmadd_ps(___x440_6_3, ___x439_3, ___x438_6);
                            ___x438_7 = _mm256_fmadd_ps(___x440_7_0, ___x439_0, ___x438_7);
                            ___x438_7 = _mm256_fmadd_ps(___x440_7_1, ___x439_1, ___x438_7);
                            ___x438_7 = _mm256_fmadd_ps(___x440_7_2, ___x439_2, ___x438_7);
                            ___x438_7 = _mm256_fmadd_ps(___x440_7_3, ___x439_3, ___x438_7);
                            ___x438_8 = _mm256_fmadd_ps(___x440_8_0, ___x439_0, ___x438_8);
                            ___x438_8 = _mm256_fmadd_ps(___x440_8_1, ___x439_1, ___x438_8);
                            ___x438_8 = _mm256_fmadd_ps(___x440_8_2, ___x439_2, ___x438_8);
                            ___x438_8 = _mm256_fmadd_ps(___x440_8_3, ___x439_3, ___x438_8);
                            ___x438_9 = _mm256_fmadd_ps(___x440_9_0, ___x439_0, ___x438_9);
                            ___x438_9 = _mm256_fmadd_ps(___x440_9_1, ___x439_1, ___x438_9);
                            ___x438_9 = _mm256_fmadd_ps(___x440_9_2, ___x439_2, ___x438_9);
                            ___x438_9 = _mm256_fmadd_ps(___x440_9_3, ___x439_3, ___x438_9);
                            ___x438_10 = _mm256_fmadd_ps(___x440_10_0, ___x439_0, ___x438_10);
                            ___x438_10 = _mm256_fmadd_ps(___x440_10_1, ___x439_1, ___x438_10);
                            ___x438_10 = _mm256_fmadd_ps(___x440_10_2, ___x439_2, ___x438_10);
                            ___x438_10 = _mm256_fmadd_ps(___x440_10_3, ___x439_3, ___x438_10);
                            ___x438_11 = _mm256_fmadd_ps(___x440_11_0, ___x439_0, ___x438_11);
                            ___x438_11 = _mm256_fmadd_ps(___x440_11_1, ___x439_1, ___x438_11);
                            ___x438_11 = _mm256_fmadd_ps(___x440_11_2, ___x439_2, ___x438_11);
                            ___x438_11 = _mm256_fmadd_ps(___x440_11_3, ___x439_3, ___x438_11);
                            ___x438_12 = _mm256_fmadd_ps(___x440_12_0, ___x439_0, ___x438_12);
                            ___x438_12 = _mm256_fmadd_ps(___x440_12_1, ___x439_1, ___x438_12);
                            ___x438_12 = _mm256_fmadd_ps(___x440_12_2, ___x439_2, ___x438_12);
                            ___x438_12 = _mm256_fmadd_ps(___x440_12_3, ___x439_3, ___x438_12);
                            ___x438_13 = _mm256_fmadd_ps(___x440_13_0, ___x439_0, ___x438_13);
                            ___x438_13 = _mm256_fmadd_ps(___x440_13_1, ___x439_1, ___x438_13);
                            ___x438_13 = _mm256_fmadd_ps(___x440_13_2, ___x439_2, ___x438_13);
                            ___x438_13 = _mm256_fmadd_ps(___x440_13_3, ___x439_3, ___x438_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x438_0);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x438_1);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x438_2);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x438_3);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x438_4);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x438_5);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x438_6);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x438_7);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x438_8);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x438_9);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x438_10);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x438_11);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x438_12);
                _mm256_store_ps(& ensemble166value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x438_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble167value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble167inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble167bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble168value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble168inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        
    parallel_for(0,66 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 1 - 1;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 1 - 1;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble169inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble169inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner];
                            ensemble169mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble169mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble169value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 66; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble170weights[x0][x1][x2][x3][0][0], & ensemble170weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 66; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int in_x_7 = (_neuron_index_3 + 7) * 1;
                int in_x_8 = (_neuron_index_3 + 8) * 1;
                int in_x_9 = (_neuron_index_3 + 9) * 1;
                int in_x_10 = (_neuron_index_3 + 10) * 1;
                int in_x_11 = (_neuron_index_3 + 11) * 1;
                int in_x_12 = (_neuron_index_3 + 12) * 1;
                int in_x_13 = (_neuron_index_3 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m256 ___x448_0 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x448_1 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x448_2 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x448_3 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x448_4 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x448_5 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x448_6 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                __m256 ___x448_7 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0]);
                __m256 ___x448_8 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0]);
                __m256 ___x448_9 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0]);
                __m256 ___x448_10 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0]);
                __m256 ___x448_11 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0]);
                __m256 ___x448_12 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0]);
                __m256 ___x448_13 = _mm256_load_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x447_0_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x447_0_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x447_0_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x447_0_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x447_1_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x447_1_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x447_1_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x447_1_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x447_2_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x447_2_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x447_2_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x447_2_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x447_3_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x447_3_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x447_3_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x447_3_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x447_4_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x447_4_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x447_4_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x447_4_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x447_5_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x447_5_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x447_5_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x447_5_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x447_6_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x447_6_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x447_6_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x447_6_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x447_7_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 0)]);
                            __m256 ___x447_7_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 1)]);
                            __m256 ___x447_7_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 2)]);
                            __m256 ___x447_7_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][(i_inner + 3)]);
                            __m256 ___x447_8_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 0)]);
                            __m256 ___x447_8_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 1)]);
                            __m256 ___x447_8_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 2)]);
                            __m256 ___x447_8_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][(i_inner + 3)]);
                            __m256 ___x447_9_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 0)]);
                            __m256 ___x447_9_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 1)]);
                            __m256 ___x447_9_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 2)]);
                            __m256 ___x447_9_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][(i_inner + 3)]);
                            __m256 ___x447_10_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 0)]);
                            __m256 ___x447_10_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 1)]);
                            __m256 ___x447_10_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 2)]);
                            __m256 ___x447_10_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][(i_inner + 3)]);
                            __m256 ___x447_11_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 0)]);
                            __m256 ___x447_11_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 1)]);
                            __m256 ___x447_11_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 2)]);
                            __m256 ___x447_11_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][(i_inner + 3)]);
                            __m256 ___x447_12_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 0)]);
                            __m256 ___x447_12_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 1)]);
                            __m256 ___x447_12_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 2)]);
                            __m256 ___x447_12_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][(i_inner + 3)]);
                            __m256 ___x447_13_0 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 0)]);
                            __m256 ___x447_13_1 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 1)]);
                            __m256 ___x447_13_2 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 2)]);
                            __m256 ___x447_13_3 = _mm256_broadcast_ss(& ensemble170inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][(i_inner + 3)]);
                            __m256 ___x449_0 = _mm256_load_ps(& ensemble170weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x449_1 = _mm256_load_ps(& ensemble170weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x449_2 = _mm256_load_ps(& ensemble170weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x449_3 = _mm256_load_ps(& ensemble170weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x448_0 = _mm256_fmadd_ps(___x447_0_0, ___x449_0, ___x448_0);
                            ___x448_0 = _mm256_fmadd_ps(___x447_0_1, ___x449_1, ___x448_0);
                            ___x448_0 = _mm256_fmadd_ps(___x447_0_2, ___x449_2, ___x448_0);
                            ___x448_0 = _mm256_fmadd_ps(___x447_0_3, ___x449_3, ___x448_0);
                            ___x448_1 = _mm256_fmadd_ps(___x447_1_0, ___x449_0, ___x448_1);
                            ___x448_1 = _mm256_fmadd_ps(___x447_1_1, ___x449_1, ___x448_1);
                            ___x448_1 = _mm256_fmadd_ps(___x447_1_2, ___x449_2, ___x448_1);
                            ___x448_1 = _mm256_fmadd_ps(___x447_1_3, ___x449_3, ___x448_1);
                            ___x448_2 = _mm256_fmadd_ps(___x447_2_0, ___x449_0, ___x448_2);
                            ___x448_2 = _mm256_fmadd_ps(___x447_2_1, ___x449_1, ___x448_2);
                            ___x448_2 = _mm256_fmadd_ps(___x447_2_2, ___x449_2, ___x448_2);
                            ___x448_2 = _mm256_fmadd_ps(___x447_2_3, ___x449_3, ___x448_2);
                            ___x448_3 = _mm256_fmadd_ps(___x447_3_0, ___x449_0, ___x448_3);
                            ___x448_3 = _mm256_fmadd_ps(___x447_3_1, ___x449_1, ___x448_3);
                            ___x448_3 = _mm256_fmadd_ps(___x447_3_2, ___x449_2, ___x448_3);
                            ___x448_3 = _mm256_fmadd_ps(___x447_3_3, ___x449_3, ___x448_3);
                            ___x448_4 = _mm256_fmadd_ps(___x447_4_0, ___x449_0, ___x448_4);
                            ___x448_4 = _mm256_fmadd_ps(___x447_4_1, ___x449_1, ___x448_4);
                            ___x448_4 = _mm256_fmadd_ps(___x447_4_2, ___x449_2, ___x448_4);
                            ___x448_4 = _mm256_fmadd_ps(___x447_4_3, ___x449_3, ___x448_4);
                            ___x448_5 = _mm256_fmadd_ps(___x447_5_0, ___x449_0, ___x448_5);
                            ___x448_5 = _mm256_fmadd_ps(___x447_5_1, ___x449_1, ___x448_5);
                            ___x448_5 = _mm256_fmadd_ps(___x447_5_2, ___x449_2, ___x448_5);
                            ___x448_5 = _mm256_fmadd_ps(___x447_5_3, ___x449_3, ___x448_5);
                            ___x448_6 = _mm256_fmadd_ps(___x447_6_0, ___x449_0, ___x448_6);
                            ___x448_6 = _mm256_fmadd_ps(___x447_6_1, ___x449_1, ___x448_6);
                            ___x448_6 = _mm256_fmadd_ps(___x447_6_2, ___x449_2, ___x448_6);
                            ___x448_6 = _mm256_fmadd_ps(___x447_6_3, ___x449_3, ___x448_6);
                            ___x448_7 = _mm256_fmadd_ps(___x447_7_0, ___x449_0, ___x448_7);
                            ___x448_7 = _mm256_fmadd_ps(___x447_7_1, ___x449_1, ___x448_7);
                            ___x448_7 = _mm256_fmadd_ps(___x447_7_2, ___x449_2, ___x448_7);
                            ___x448_7 = _mm256_fmadd_ps(___x447_7_3, ___x449_3, ___x448_7);
                            ___x448_8 = _mm256_fmadd_ps(___x447_8_0, ___x449_0, ___x448_8);
                            ___x448_8 = _mm256_fmadd_ps(___x447_8_1, ___x449_1, ___x448_8);
                            ___x448_8 = _mm256_fmadd_ps(___x447_8_2, ___x449_2, ___x448_8);
                            ___x448_8 = _mm256_fmadd_ps(___x447_8_3, ___x449_3, ___x448_8);
                            ___x448_9 = _mm256_fmadd_ps(___x447_9_0, ___x449_0, ___x448_9);
                            ___x448_9 = _mm256_fmadd_ps(___x447_9_1, ___x449_1, ___x448_9);
                            ___x448_9 = _mm256_fmadd_ps(___x447_9_2, ___x449_2, ___x448_9);
                            ___x448_9 = _mm256_fmadd_ps(___x447_9_3, ___x449_3, ___x448_9);
                            ___x448_10 = _mm256_fmadd_ps(___x447_10_0, ___x449_0, ___x448_10);
                            ___x448_10 = _mm256_fmadd_ps(___x447_10_1, ___x449_1, ___x448_10);
                            ___x448_10 = _mm256_fmadd_ps(___x447_10_2, ___x449_2, ___x448_10);
                            ___x448_10 = _mm256_fmadd_ps(___x447_10_3, ___x449_3, ___x448_10);
                            ___x448_11 = _mm256_fmadd_ps(___x447_11_0, ___x449_0, ___x448_11);
                            ___x448_11 = _mm256_fmadd_ps(___x447_11_1, ___x449_1, ___x448_11);
                            ___x448_11 = _mm256_fmadd_ps(___x447_11_2, ___x449_2, ___x448_11);
                            ___x448_11 = _mm256_fmadd_ps(___x447_11_3, ___x449_3, ___x448_11);
                            ___x448_12 = _mm256_fmadd_ps(___x447_12_0, ___x449_0, ___x448_12);
                            ___x448_12 = _mm256_fmadd_ps(___x447_12_1, ___x449_1, ___x448_12);
                            ___x448_12 = _mm256_fmadd_ps(___x447_12_2, ___x449_2, ___x448_12);
                            ___x448_12 = _mm256_fmadd_ps(___x447_12_3, ___x449_3, ___x448_12);
                            ___x448_13 = _mm256_fmadd_ps(___x447_13_0, ___x449_0, ___x448_13);
                            ___x448_13 = _mm256_fmadd_ps(___x447_13_1, ___x449_1, ___x448_13);
                            ___x448_13 = _mm256_fmadd_ps(___x447_13_2, ___x449_2, ___x448_13);
                            ___x448_13 = _mm256_fmadd_ps(___x447_13_3, ___x449_3, ___x448_13);
                        }
                    }
                }
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x448_0);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x448_1);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x448_2);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x448_3);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x448_4);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x448_5);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x448_6);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][0], ___x448_7);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][0], ___x448_8);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][0], ___x448_9);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][0], ___x448_10);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][0], ___x448_11);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][0], ___x448_12);
                _mm256_store_ps(& ensemble170value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][0], ___x448_13);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble171value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble171inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble171bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble172value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble172inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 32; _neuron_index_1_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble173value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble173inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 40; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble173value[_neuron_index_0][(_neuron_index_1_outer + 32)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble173inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble173value[_neuron_index_0][(_neuron_index_1_outer + 72)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble173inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    ensemble173value[_neuron_index_0][(_neuron_index_1_outer + 88)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble173inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        
    parallel_for(0,104 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 2 - 0;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 2 - 0;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble174inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble174inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner];
                            ensemble174mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble174mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble174value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 32,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 104; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble175weights[x0][x1][x2][x3][0][0], & ensemble175weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,32 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 104; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x456_0 = _mm256_load_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x456_1 = _mm256_load_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x456_2 = _mm256_load_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x456_3 = _mm256_load_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x456_4 = _mm256_load_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x456_5 = _mm256_load_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x456_6 = _mm256_load_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x457_0 = _mm256_load_ps(& ensemble175weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x457_1 = _mm256_load_ps(& ensemble175weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x457_2 = _mm256_load_ps(& ensemble175weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x457_3 = _mm256_load_ps(& ensemble175weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x458_0_0 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x458_0_1 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x458_0_2 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x458_0_3 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x458_1_0 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x458_1_1 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x458_1_2 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x458_1_3 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x458_2_0 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x458_2_1 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x458_2_2 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x458_2_3 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x458_3_0 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x458_3_1 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x458_3_2 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x458_3_3 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x458_4_0 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x458_4_1 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x458_4_2 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x458_4_3 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x458_5_0 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x458_5_1 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x458_5_2 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x458_5_3 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x458_6_0 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x458_6_1 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x458_6_2 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x458_6_3 = _mm256_broadcast_ss(& ensemble175inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            ___x456_0 = _mm256_fmadd_ps(___x458_0_0, ___x457_0, ___x456_0);
                            ___x456_0 = _mm256_fmadd_ps(___x458_0_1, ___x457_1, ___x456_0);
                            ___x456_0 = _mm256_fmadd_ps(___x458_0_2, ___x457_2, ___x456_0);
                            ___x456_0 = _mm256_fmadd_ps(___x458_0_3, ___x457_3, ___x456_0);
                            ___x456_1 = _mm256_fmadd_ps(___x458_1_0, ___x457_0, ___x456_1);
                            ___x456_1 = _mm256_fmadd_ps(___x458_1_1, ___x457_1, ___x456_1);
                            ___x456_1 = _mm256_fmadd_ps(___x458_1_2, ___x457_2, ___x456_1);
                            ___x456_1 = _mm256_fmadd_ps(___x458_1_3, ___x457_3, ___x456_1);
                            ___x456_2 = _mm256_fmadd_ps(___x458_2_0, ___x457_0, ___x456_2);
                            ___x456_2 = _mm256_fmadd_ps(___x458_2_1, ___x457_1, ___x456_2);
                            ___x456_2 = _mm256_fmadd_ps(___x458_2_2, ___x457_2, ___x456_2);
                            ___x456_2 = _mm256_fmadd_ps(___x458_2_3, ___x457_3, ___x456_2);
                            ___x456_3 = _mm256_fmadd_ps(___x458_3_0, ___x457_0, ___x456_3);
                            ___x456_3 = _mm256_fmadd_ps(___x458_3_1, ___x457_1, ___x456_3);
                            ___x456_3 = _mm256_fmadd_ps(___x458_3_2, ___x457_2, ___x456_3);
                            ___x456_3 = _mm256_fmadd_ps(___x458_3_3, ___x457_3, ___x456_3);
                            ___x456_4 = _mm256_fmadd_ps(___x458_4_0, ___x457_0, ___x456_4);
                            ___x456_4 = _mm256_fmadd_ps(___x458_4_1, ___x457_1, ___x456_4);
                            ___x456_4 = _mm256_fmadd_ps(___x458_4_2, ___x457_2, ___x456_4);
                            ___x456_4 = _mm256_fmadd_ps(___x458_4_3, ___x457_3, ___x456_4);
                            ___x456_5 = _mm256_fmadd_ps(___x458_5_0, ___x457_0, ___x456_5);
                            ___x456_5 = _mm256_fmadd_ps(___x458_5_1, ___x457_1, ___x456_5);
                            ___x456_5 = _mm256_fmadd_ps(___x458_5_2, ___x457_2, ___x456_5);
                            ___x456_5 = _mm256_fmadd_ps(___x458_5_3, ___x457_3, ___x456_5);
                            ___x456_6 = _mm256_fmadd_ps(___x458_6_0, ___x457_0, ___x456_6);
                            ___x456_6 = _mm256_fmadd_ps(___x458_6_1, ___x457_1, ___x456_6);
                            ___x456_6 = _mm256_fmadd_ps(___x458_6_2, ___x457_2, ___x456_6);
                            ___x456_6 = _mm256_fmadd_ps(___x458_6_3, ___x457_3, ___x456_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x456_0);
                _mm256_store_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x456_1);
                _mm256_store_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x456_2);
                _mm256_store_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x456_3);
                _mm256_store_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x456_4);
                _mm256_store_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x456_5);
                _mm256_store_ps(& ensemble175value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x456_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble176value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble176inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble176bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble177value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble177inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 20,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 104; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble178weights[x0][x1][x2][x3][0][0], & ensemble178weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,20 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 104; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x465_0 = _mm256_load_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0]);
                __m256 ___x465_1 = _mm256_load_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0]);
                __m256 ___x465_2 = _mm256_load_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0]);
                __m256 ___x465_3 = _mm256_load_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0]);
                __m256 ___x465_4 = _mm256_load_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0]);
                __m256 ___x465_5 = _mm256_load_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0]);
                __m256 ___x465_6 = _mm256_load_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x466_0_0 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x466_0_1 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x466_0_2 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x466_0_3 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x466_1_0 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x466_1_1 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x466_1_2 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x466_1_3 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x466_2_0 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x466_2_1 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x466_2_2 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x466_2_3 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x466_3_0 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x466_3_1 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x466_3_2 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x466_3_3 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x466_4_0 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x466_4_1 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x466_4_2 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x466_4_3 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x466_5_0 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x466_5_1 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x466_5_2 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x466_5_3 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x466_6_0 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x466_6_1 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x466_6_2 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x466_6_3 = _mm256_broadcast_ss(& ensemble178inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x467_0 = _mm256_load_ps(& ensemble178weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x467_1 = _mm256_load_ps(& ensemble178weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x467_2 = _mm256_load_ps(& ensemble178weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x467_3 = _mm256_load_ps(& ensemble178weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x465_0 = _mm256_fmadd_ps(___x466_0_0, ___x467_0, ___x465_0);
                            ___x465_0 = _mm256_fmadd_ps(___x466_0_1, ___x467_1, ___x465_0);
                            ___x465_0 = _mm256_fmadd_ps(___x466_0_2, ___x467_2, ___x465_0);
                            ___x465_0 = _mm256_fmadd_ps(___x466_0_3, ___x467_3, ___x465_0);
                            ___x465_1 = _mm256_fmadd_ps(___x466_1_0, ___x467_0, ___x465_1);
                            ___x465_1 = _mm256_fmadd_ps(___x466_1_1, ___x467_1, ___x465_1);
                            ___x465_1 = _mm256_fmadd_ps(___x466_1_2, ___x467_2, ___x465_1);
                            ___x465_1 = _mm256_fmadd_ps(___x466_1_3, ___x467_3, ___x465_1);
                            ___x465_2 = _mm256_fmadd_ps(___x466_2_0, ___x467_0, ___x465_2);
                            ___x465_2 = _mm256_fmadd_ps(___x466_2_1, ___x467_1, ___x465_2);
                            ___x465_2 = _mm256_fmadd_ps(___x466_2_2, ___x467_2, ___x465_2);
                            ___x465_2 = _mm256_fmadd_ps(___x466_2_3, ___x467_3, ___x465_2);
                            ___x465_3 = _mm256_fmadd_ps(___x466_3_0, ___x467_0, ___x465_3);
                            ___x465_3 = _mm256_fmadd_ps(___x466_3_1, ___x467_1, ___x465_3);
                            ___x465_3 = _mm256_fmadd_ps(___x466_3_2, ___x467_2, ___x465_3);
                            ___x465_3 = _mm256_fmadd_ps(___x466_3_3, ___x467_3, ___x465_3);
                            ___x465_4 = _mm256_fmadd_ps(___x466_4_0, ___x467_0, ___x465_4);
                            ___x465_4 = _mm256_fmadd_ps(___x466_4_1, ___x467_1, ___x465_4);
                            ___x465_4 = _mm256_fmadd_ps(___x466_4_2, ___x467_2, ___x465_4);
                            ___x465_4 = _mm256_fmadd_ps(___x466_4_3, ___x467_3, ___x465_4);
                            ___x465_5 = _mm256_fmadd_ps(___x466_5_0, ___x467_0, ___x465_5);
                            ___x465_5 = _mm256_fmadd_ps(___x466_5_1, ___x467_1, ___x465_5);
                            ___x465_5 = _mm256_fmadd_ps(___x466_5_2, ___x467_2, ___x465_5);
                            ___x465_5 = _mm256_fmadd_ps(___x466_5_3, ___x467_3, ___x465_5);
                            ___x465_6 = _mm256_fmadd_ps(___x466_6_0, ___x467_0, ___x465_6);
                            ___x465_6 = _mm256_fmadd_ps(___x466_6_1, ___x467_1, ___x465_6);
                            ___x465_6 = _mm256_fmadd_ps(___x466_6_2, ___x467_2, ___x465_6);
                            ___x465_6 = _mm256_fmadd_ps(___x466_6_3, ___x467_3, ___x465_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0], ___x465_0);
                _mm256_store_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0], ___x465_1);
                _mm256_store_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0], ___x465_2);
                _mm256_store_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0], ___x465_3);
                _mm256_store_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0], ___x465_4);
                _mm256_store_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0], ___x465_5);
                _mm256_store_ps(& ensemble178value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0], ___x465_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble179value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble179inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] + ensemble179bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble180value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble180inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 40,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 20; x1 ++) {
        for (int x2 = 0; x2 < 3; x2 ++) {
            for (int x3 = 0; x3 < 3; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble181weights[x0][x1][x2][x3][0][0], & ensemble181weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,40 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 20; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x476_0 = _mm256_load_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x476_1 = _mm256_load_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x476_2 = _mm256_load_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x476_3 = _mm256_load_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x476_4 = _mm256_load_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x476_5 = _mm256_load_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x476_6 = _mm256_load_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x474_0 = _mm256_load_ps(& ensemble181weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x474_1 = _mm256_load_ps(& ensemble181weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x474_2 = _mm256_load_ps(& ensemble181weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x474_3 = _mm256_load_ps(& ensemble181weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x475_0_0 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x475_0_1 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x475_0_2 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x475_0_3 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x475_1_0 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x475_1_1 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x475_1_2 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x475_1_3 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x475_2_0 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x475_2_1 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x475_2_2 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x475_2_3 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x475_3_0 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x475_3_1 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x475_3_2 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x475_3_3 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x475_4_0 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x475_4_1 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x475_4_2 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x475_4_3 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x475_5_0 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x475_5_1 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x475_5_2 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x475_5_3 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x475_6_0 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x475_6_1 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x475_6_2 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x475_6_3 = _mm256_broadcast_ss(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            ___x476_0 = _mm256_fmadd_ps(___x475_0_0, ___x474_0, ___x476_0);
                            ___x476_0 = _mm256_fmadd_ps(___x475_0_1, ___x474_1, ___x476_0);
                            ___x476_0 = _mm256_fmadd_ps(___x475_0_2, ___x474_2, ___x476_0);
                            ___x476_0 = _mm256_fmadd_ps(___x475_0_3, ___x474_3, ___x476_0);
                            ___x476_1 = _mm256_fmadd_ps(___x475_1_0, ___x474_0, ___x476_1);
                            ___x476_1 = _mm256_fmadd_ps(___x475_1_1, ___x474_1, ___x476_1);
                            ___x476_1 = _mm256_fmadd_ps(___x475_1_2, ___x474_2, ___x476_1);
                            ___x476_1 = _mm256_fmadd_ps(___x475_1_3, ___x474_3, ___x476_1);
                            ___x476_2 = _mm256_fmadd_ps(___x475_2_0, ___x474_0, ___x476_2);
                            ___x476_2 = _mm256_fmadd_ps(___x475_2_1, ___x474_1, ___x476_2);
                            ___x476_2 = _mm256_fmadd_ps(___x475_2_2, ___x474_2, ___x476_2);
                            ___x476_2 = _mm256_fmadd_ps(___x475_2_3, ___x474_3, ___x476_2);
                            ___x476_3 = _mm256_fmadd_ps(___x475_3_0, ___x474_0, ___x476_3);
                            ___x476_3 = _mm256_fmadd_ps(___x475_3_1, ___x474_1, ___x476_3);
                            ___x476_3 = _mm256_fmadd_ps(___x475_3_2, ___x474_2, ___x476_3);
                            ___x476_3 = _mm256_fmadd_ps(___x475_3_3, ___x474_3, ___x476_3);
                            ___x476_4 = _mm256_fmadd_ps(___x475_4_0, ___x474_0, ___x476_4);
                            ___x476_4 = _mm256_fmadd_ps(___x475_4_1, ___x474_1, ___x476_4);
                            ___x476_4 = _mm256_fmadd_ps(___x475_4_2, ___x474_2, ___x476_4);
                            ___x476_4 = _mm256_fmadd_ps(___x475_4_3, ___x474_3, ___x476_4);
                            ___x476_5 = _mm256_fmadd_ps(___x475_5_0, ___x474_0, ___x476_5);
                            ___x476_5 = _mm256_fmadd_ps(___x475_5_1, ___x474_1, ___x476_5);
                            ___x476_5 = _mm256_fmadd_ps(___x475_5_2, ___x474_2, ___x476_5);
                            ___x476_5 = _mm256_fmadd_ps(___x475_5_3, ___x474_3, ___x476_5);
                            ___x476_6 = _mm256_fmadd_ps(___x475_6_0, ___x474_0, ___x476_6);
                            ___x476_6 = _mm256_fmadd_ps(___x475_6_1, ___x474_1, ___x476_6);
                            ___x476_6 = _mm256_fmadd_ps(___x475_6_2, ___x474_2, ___x476_6);
                            ___x476_6 = _mm256_fmadd_ps(___x475_6_3, ___x474_3, ___x476_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x476_0);
                _mm256_store_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x476_1);
                _mm256_store_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x476_2);
                _mm256_store_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x476_3);
                _mm256_store_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x476_4);
                _mm256_store_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x476_5);
                _mm256_store_ps(& ensemble181value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x476_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble182value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble182inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble182bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble183value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble183inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 4,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 104; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble184weights[x0][x1][x2][x3][0][0], & ensemble184weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,4 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 104; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x484_0 = _mm256_load_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0]);
                __m256 ___x484_1 = _mm256_load_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0]);
                __m256 ___x484_2 = _mm256_load_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0]);
                __m256 ___x484_3 = _mm256_load_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0]);
                __m256 ___x484_4 = _mm256_load_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0]);
                __m256 ___x484_5 = _mm256_load_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0]);
                __m256 ___x484_6 = _mm256_load_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x483_0 = _mm256_load_ps(& ensemble184weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x483_1 = _mm256_load_ps(& ensemble184weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x483_2 = _mm256_load_ps(& ensemble184weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x483_3 = _mm256_load_ps(& ensemble184weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x485_0_0 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x485_0_1 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x485_0_2 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x485_0_3 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x485_1_0 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x485_1_1 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x485_1_2 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x485_1_3 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x485_2_0 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x485_2_1 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x485_2_2 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x485_2_3 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x485_3_0 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x485_3_1 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x485_3_2 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x485_3_3 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x485_4_0 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x485_4_1 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x485_4_2 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x485_4_3 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x485_5_0 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x485_5_1 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x485_5_2 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x485_5_3 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x485_6_0 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x485_6_1 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x485_6_2 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x485_6_3 = _mm256_broadcast_ss(& ensemble184inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            ___x484_0 = _mm256_fmadd_ps(___x485_0_0, ___x483_0, ___x484_0);
                            ___x484_0 = _mm256_fmadd_ps(___x485_0_1, ___x483_1, ___x484_0);
                            ___x484_0 = _mm256_fmadd_ps(___x485_0_2, ___x483_2, ___x484_0);
                            ___x484_0 = _mm256_fmadd_ps(___x485_0_3, ___x483_3, ___x484_0);
                            ___x484_1 = _mm256_fmadd_ps(___x485_1_0, ___x483_0, ___x484_1);
                            ___x484_1 = _mm256_fmadd_ps(___x485_1_1, ___x483_1, ___x484_1);
                            ___x484_1 = _mm256_fmadd_ps(___x485_1_2, ___x483_2, ___x484_1);
                            ___x484_1 = _mm256_fmadd_ps(___x485_1_3, ___x483_3, ___x484_1);
                            ___x484_2 = _mm256_fmadd_ps(___x485_2_0, ___x483_0, ___x484_2);
                            ___x484_2 = _mm256_fmadd_ps(___x485_2_1, ___x483_1, ___x484_2);
                            ___x484_2 = _mm256_fmadd_ps(___x485_2_2, ___x483_2, ___x484_2);
                            ___x484_2 = _mm256_fmadd_ps(___x485_2_3, ___x483_3, ___x484_2);
                            ___x484_3 = _mm256_fmadd_ps(___x485_3_0, ___x483_0, ___x484_3);
                            ___x484_3 = _mm256_fmadd_ps(___x485_3_1, ___x483_1, ___x484_3);
                            ___x484_3 = _mm256_fmadd_ps(___x485_3_2, ___x483_2, ___x484_3);
                            ___x484_3 = _mm256_fmadd_ps(___x485_3_3, ___x483_3, ___x484_3);
                            ___x484_4 = _mm256_fmadd_ps(___x485_4_0, ___x483_0, ___x484_4);
                            ___x484_4 = _mm256_fmadd_ps(___x485_4_1, ___x483_1, ___x484_4);
                            ___x484_4 = _mm256_fmadd_ps(___x485_4_2, ___x483_2, ___x484_4);
                            ___x484_4 = _mm256_fmadd_ps(___x485_4_3, ___x483_3, ___x484_4);
                            ___x484_5 = _mm256_fmadd_ps(___x485_5_0, ___x483_0, ___x484_5);
                            ___x484_5 = _mm256_fmadd_ps(___x485_5_1, ___x483_1, ___x484_5);
                            ___x484_5 = _mm256_fmadd_ps(___x485_5_2, ___x483_2, ___x484_5);
                            ___x484_5 = _mm256_fmadd_ps(___x485_5_3, ___x483_3, ___x484_5);
                            ___x484_6 = _mm256_fmadd_ps(___x485_6_0, ___x483_0, ___x484_6);
                            ___x484_6 = _mm256_fmadd_ps(___x485_6_1, ___x483_1, ___x484_6);
                            ___x484_6 = _mm256_fmadd_ps(___x485_6_2, ___x483_2, ___x484_6);
                            ___x484_6 = _mm256_fmadd_ps(___x485_6_3, ___x483_3, ___x484_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0], ___x484_0);
                _mm256_store_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0], ___x484_1);
                _mm256_store_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0], ___x484_2);
                _mm256_store_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0], ___x484_3);
                _mm256_store_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0], ___x484_4);
                _mm256_store_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0], ___x484_5);
                _mm256_store_ps(& ensemble184value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0], ___x484_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble185value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble185inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] + ensemble185bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble186value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble186inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 4; x1 ++) {
        for (int x2 = 0; x2 < 5; x2 ++) {
            for (int x3 = 0; x3 < 5; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble187weights[x0][x1][x2][x3][0][0], & ensemble187weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 4; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x492_0 = _mm256_load_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x492_1 = _mm256_load_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x492_2 = _mm256_load_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x492_3 = _mm256_load_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x492_4 = _mm256_load_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x492_5 = _mm256_load_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x492_6 = _mm256_load_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x493_0 = _mm256_load_ps(& ensemble187weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x493_1 = _mm256_load_ps(& ensemble187weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x493_2 = _mm256_load_ps(& ensemble187weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x493_3 = _mm256_load_ps(& ensemble187weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x494_0_0 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x494_0_1 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x494_0_2 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x494_0_3 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x494_1_0 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x494_1_1 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x494_1_2 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x494_1_3 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x494_2_0 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x494_2_1 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x494_2_2 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x494_2_3 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x494_3_0 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x494_3_1 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x494_3_2 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x494_3_3 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x494_4_0 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x494_4_1 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x494_4_2 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x494_4_3 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x494_5_0 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x494_5_1 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x494_5_2 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x494_5_3 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x494_6_0 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x494_6_1 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x494_6_2 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x494_6_3 = _mm256_broadcast_ss(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            ___x492_0 = _mm256_fmadd_ps(___x494_0_0, ___x493_0, ___x492_0);
                            ___x492_0 = _mm256_fmadd_ps(___x494_0_1, ___x493_1, ___x492_0);
                            ___x492_0 = _mm256_fmadd_ps(___x494_0_2, ___x493_2, ___x492_0);
                            ___x492_0 = _mm256_fmadd_ps(___x494_0_3, ___x493_3, ___x492_0);
                            ___x492_1 = _mm256_fmadd_ps(___x494_1_0, ___x493_0, ___x492_1);
                            ___x492_1 = _mm256_fmadd_ps(___x494_1_1, ___x493_1, ___x492_1);
                            ___x492_1 = _mm256_fmadd_ps(___x494_1_2, ___x493_2, ___x492_1);
                            ___x492_1 = _mm256_fmadd_ps(___x494_1_3, ___x493_3, ___x492_1);
                            ___x492_2 = _mm256_fmadd_ps(___x494_2_0, ___x493_0, ___x492_2);
                            ___x492_2 = _mm256_fmadd_ps(___x494_2_1, ___x493_1, ___x492_2);
                            ___x492_2 = _mm256_fmadd_ps(___x494_2_2, ___x493_2, ___x492_2);
                            ___x492_2 = _mm256_fmadd_ps(___x494_2_3, ___x493_3, ___x492_2);
                            ___x492_3 = _mm256_fmadd_ps(___x494_3_0, ___x493_0, ___x492_3);
                            ___x492_3 = _mm256_fmadd_ps(___x494_3_1, ___x493_1, ___x492_3);
                            ___x492_3 = _mm256_fmadd_ps(___x494_3_2, ___x493_2, ___x492_3);
                            ___x492_3 = _mm256_fmadd_ps(___x494_3_3, ___x493_3, ___x492_3);
                            ___x492_4 = _mm256_fmadd_ps(___x494_4_0, ___x493_0, ___x492_4);
                            ___x492_4 = _mm256_fmadd_ps(___x494_4_1, ___x493_1, ___x492_4);
                            ___x492_4 = _mm256_fmadd_ps(___x494_4_2, ___x493_2, ___x492_4);
                            ___x492_4 = _mm256_fmadd_ps(___x494_4_3, ___x493_3, ___x492_4);
                            ___x492_5 = _mm256_fmadd_ps(___x494_5_0, ___x493_0, ___x492_5);
                            ___x492_5 = _mm256_fmadd_ps(___x494_5_1, ___x493_1, ___x492_5);
                            ___x492_5 = _mm256_fmadd_ps(___x494_5_2, ___x493_2, ___x492_5);
                            ___x492_5 = _mm256_fmadd_ps(___x494_5_3, ___x493_3, ___x492_5);
                            ___x492_6 = _mm256_fmadd_ps(___x494_6_0, ___x493_0, ___x492_6);
                            ___x492_6 = _mm256_fmadd_ps(___x494_6_1, ___x493_1, ___x492_6);
                            ___x492_6 = _mm256_fmadd_ps(___x494_6_2, ___x493_2, ___x492_6);
                            ___x492_6 = _mm256_fmadd_ps(___x494_6_3, ___x493_3, ___x492_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x492_0);
                _mm256_store_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x492_1);
                _mm256_store_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x492_2);
                _mm256_store_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x492_3);
                _mm256_store_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x492_4);
                _mm256_store_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x492_5);
                _mm256_store_ps(& ensemble187value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x492_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble188value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble188inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble188bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble189value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble189inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        
    parallel_for(0,104 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 1 - 1;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 1 - 1;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble190inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 6)][MIN(MAX(k * 1 + _input_offset_3, 0), 6)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble190inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 6)][MIN(MAX(k * 1 + _input_offset_3, 0), 6)][_input_offset_1_inner];
                            ensemble190mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble190mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble190value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 104; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble191weights[x0][x1][x2][x3][0][0], & ensemble191weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 104; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x501_0 = _mm256_load_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x501_1 = _mm256_load_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x501_2 = _mm256_load_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x501_3 = _mm256_load_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x501_4 = _mm256_load_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x501_5 = _mm256_load_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x501_6 = _mm256_load_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x502_0_0 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x502_0_1 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x502_0_2 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x502_0_3 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x502_1_0 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x502_1_1 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x502_1_2 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x502_1_3 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x502_2_0 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x502_2_1 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x502_2_2 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x502_2_3 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x502_3_0 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x502_3_1 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x502_3_2 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x502_3_3 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x502_4_0 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x502_4_1 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x502_4_2 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x502_4_3 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x502_5_0 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x502_5_1 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x502_5_2 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x502_5_3 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x502_6_0 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x502_6_1 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x502_6_2 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x502_6_3 = _mm256_broadcast_ss(& ensemble191inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x503_0 = _mm256_load_ps(& ensemble191weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x503_1 = _mm256_load_ps(& ensemble191weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x503_2 = _mm256_load_ps(& ensemble191weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x503_3 = _mm256_load_ps(& ensemble191weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x501_0 = _mm256_fmadd_ps(___x502_0_0, ___x503_0, ___x501_0);
                            ___x501_0 = _mm256_fmadd_ps(___x502_0_1, ___x503_1, ___x501_0);
                            ___x501_0 = _mm256_fmadd_ps(___x502_0_2, ___x503_2, ___x501_0);
                            ___x501_0 = _mm256_fmadd_ps(___x502_0_3, ___x503_3, ___x501_0);
                            ___x501_1 = _mm256_fmadd_ps(___x502_1_0, ___x503_0, ___x501_1);
                            ___x501_1 = _mm256_fmadd_ps(___x502_1_1, ___x503_1, ___x501_1);
                            ___x501_1 = _mm256_fmadd_ps(___x502_1_2, ___x503_2, ___x501_1);
                            ___x501_1 = _mm256_fmadd_ps(___x502_1_3, ___x503_3, ___x501_1);
                            ___x501_2 = _mm256_fmadd_ps(___x502_2_0, ___x503_0, ___x501_2);
                            ___x501_2 = _mm256_fmadd_ps(___x502_2_1, ___x503_1, ___x501_2);
                            ___x501_2 = _mm256_fmadd_ps(___x502_2_2, ___x503_2, ___x501_2);
                            ___x501_2 = _mm256_fmadd_ps(___x502_2_3, ___x503_3, ___x501_2);
                            ___x501_3 = _mm256_fmadd_ps(___x502_3_0, ___x503_0, ___x501_3);
                            ___x501_3 = _mm256_fmadd_ps(___x502_3_1, ___x503_1, ___x501_3);
                            ___x501_3 = _mm256_fmadd_ps(___x502_3_2, ___x503_2, ___x501_3);
                            ___x501_3 = _mm256_fmadd_ps(___x502_3_3, ___x503_3, ___x501_3);
                            ___x501_4 = _mm256_fmadd_ps(___x502_4_0, ___x503_0, ___x501_4);
                            ___x501_4 = _mm256_fmadd_ps(___x502_4_1, ___x503_1, ___x501_4);
                            ___x501_4 = _mm256_fmadd_ps(___x502_4_2, ___x503_2, ___x501_4);
                            ___x501_4 = _mm256_fmadd_ps(___x502_4_3, ___x503_3, ___x501_4);
                            ___x501_5 = _mm256_fmadd_ps(___x502_5_0, ___x503_0, ___x501_5);
                            ___x501_5 = _mm256_fmadd_ps(___x502_5_1, ___x503_1, ___x501_5);
                            ___x501_5 = _mm256_fmadd_ps(___x502_5_2, ___x503_2, ___x501_5);
                            ___x501_5 = _mm256_fmadd_ps(___x502_5_3, ___x503_3, ___x501_5);
                            ___x501_6 = _mm256_fmadd_ps(___x502_6_0, ___x503_0, ___x501_6);
                            ___x501_6 = _mm256_fmadd_ps(___x502_6_1, ___x503_1, ___x501_6);
                            ___x501_6 = _mm256_fmadd_ps(___x502_6_2, ___x503_2, ___x501_6);
                            ___x501_6 = _mm256_fmadd_ps(___x502_6_3, ___x503_3, ___x501_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x501_0);
                _mm256_store_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x501_1);
                _mm256_store_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x501_2);
                _mm256_store_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x501_3);
                _mm256_store_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x501_4);
                _mm256_store_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x501_5);
                _mm256_store_ps(& ensemble191value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x501_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble192value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble192inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble192bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble193value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble193inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 32; _neuron_index_1_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble194value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble194inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 40; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble194value[_neuron_index_0][(_neuron_index_1_outer + 32)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble194inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble194value[_neuron_index_0][(_neuron_index_1_outer + 72)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble194inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    ensemble194value[_neuron_index_0][(_neuron_index_1_outer + 88)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble194inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
    ;
        }
      }
    );
    
    parallel_for(0, 48,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 104; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble195weights[x0][x1][x2][x3][0][0], & ensemble195weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,48 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 104; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x510_0 = _mm256_load_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x510_1 = _mm256_load_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x510_2 = _mm256_load_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x510_3 = _mm256_load_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x510_4 = _mm256_load_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x510_5 = _mm256_load_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x510_6 = _mm256_load_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x511_0_0 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x511_0_1 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x511_0_2 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x511_0_3 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x511_1_0 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x511_1_1 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x511_1_2 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x511_1_3 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x511_2_0 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x511_2_1 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x511_2_2 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x511_2_3 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x511_3_0 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x511_3_1 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x511_3_2 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x511_3_3 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x511_4_0 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x511_4_1 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x511_4_2 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x511_4_3 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x511_5_0 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x511_5_1 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x511_5_2 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x511_5_3 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x511_6_0 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x511_6_1 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x511_6_2 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x511_6_3 = _mm256_broadcast_ss(& ensemble195inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x512_0 = _mm256_load_ps(& ensemble195weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x512_1 = _mm256_load_ps(& ensemble195weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x512_2 = _mm256_load_ps(& ensemble195weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x512_3 = _mm256_load_ps(& ensemble195weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x510_0 = _mm256_fmadd_ps(___x511_0_0, ___x512_0, ___x510_0);
                            ___x510_0 = _mm256_fmadd_ps(___x511_0_1, ___x512_1, ___x510_0);
                            ___x510_0 = _mm256_fmadd_ps(___x511_0_2, ___x512_2, ___x510_0);
                            ___x510_0 = _mm256_fmadd_ps(___x511_0_3, ___x512_3, ___x510_0);
                            ___x510_1 = _mm256_fmadd_ps(___x511_1_0, ___x512_0, ___x510_1);
                            ___x510_1 = _mm256_fmadd_ps(___x511_1_1, ___x512_1, ___x510_1);
                            ___x510_1 = _mm256_fmadd_ps(___x511_1_2, ___x512_2, ___x510_1);
                            ___x510_1 = _mm256_fmadd_ps(___x511_1_3, ___x512_3, ___x510_1);
                            ___x510_2 = _mm256_fmadd_ps(___x511_2_0, ___x512_0, ___x510_2);
                            ___x510_2 = _mm256_fmadd_ps(___x511_2_1, ___x512_1, ___x510_2);
                            ___x510_2 = _mm256_fmadd_ps(___x511_2_2, ___x512_2, ___x510_2);
                            ___x510_2 = _mm256_fmadd_ps(___x511_2_3, ___x512_3, ___x510_2);
                            ___x510_3 = _mm256_fmadd_ps(___x511_3_0, ___x512_0, ___x510_3);
                            ___x510_3 = _mm256_fmadd_ps(___x511_3_1, ___x512_1, ___x510_3);
                            ___x510_3 = _mm256_fmadd_ps(___x511_3_2, ___x512_2, ___x510_3);
                            ___x510_3 = _mm256_fmadd_ps(___x511_3_3, ___x512_3, ___x510_3);
                            ___x510_4 = _mm256_fmadd_ps(___x511_4_0, ___x512_0, ___x510_4);
                            ___x510_4 = _mm256_fmadd_ps(___x511_4_1, ___x512_1, ___x510_4);
                            ___x510_4 = _mm256_fmadd_ps(___x511_4_2, ___x512_2, ___x510_4);
                            ___x510_4 = _mm256_fmadd_ps(___x511_4_3, ___x512_3, ___x510_4);
                            ___x510_5 = _mm256_fmadd_ps(___x511_5_0, ___x512_0, ___x510_5);
                            ___x510_5 = _mm256_fmadd_ps(___x511_5_1, ___x512_1, ___x510_5);
                            ___x510_5 = _mm256_fmadd_ps(___x511_5_2, ___x512_2, ___x510_5);
                            ___x510_5 = _mm256_fmadd_ps(___x511_5_3, ___x512_3, ___x510_5);
                            ___x510_6 = _mm256_fmadd_ps(___x511_6_0, ___x512_0, ___x510_6);
                            ___x510_6 = _mm256_fmadd_ps(___x511_6_1, ___x512_1, ___x510_6);
                            ___x510_6 = _mm256_fmadd_ps(___x511_6_2, ___x512_2, ___x510_6);
                            ___x510_6 = _mm256_fmadd_ps(___x511_6_3, ___x512_3, ___x510_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x510_0);
                _mm256_store_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x510_1);
                _mm256_store_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x510_2);
                _mm256_store_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x510_3);
                _mm256_store_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x510_4);
                _mm256_store_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x510_5);
                _mm256_store_ps(& ensemble195value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x510_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble196value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble196inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble196bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble197value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble197inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 24,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 104; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble198weights[x0][x1][x2][x3][0][0], & ensemble198weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,24 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 104; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x519_0 = _mm256_load_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0]);
                __m256 ___x519_1 = _mm256_load_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0]);
                __m256 ___x519_2 = _mm256_load_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0]);
                __m256 ___x519_3 = _mm256_load_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0]);
                __m256 ___x519_4 = _mm256_load_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0]);
                __m256 ___x519_5 = _mm256_load_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0]);
                __m256 ___x519_6 = _mm256_load_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x520_0 = _mm256_load_ps(& ensemble198weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x520_1 = _mm256_load_ps(& ensemble198weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x520_2 = _mm256_load_ps(& ensemble198weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x520_3 = _mm256_load_ps(& ensemble198weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x521_0_0 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x521_0_1 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x521_0_2 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x521_0_3 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x521_1_0 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x521_1_1 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x521_1_2 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x521_1_3 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x521_2_0 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x521_2_1 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x521_2_2 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x521_2_3 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x521_3_0 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x521_3_1 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x521_3_2 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x521_3_3 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x521_4_0 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x521_4_1 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x521_4_2 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x521_4_3 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x521_5_0 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x521_5_1 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x521_5_2 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x521_5_3 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x521_6_0 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x521_6_1 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x521_6_2 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x521_6_3 = _mm256_broadcast_ss(& ensemble198inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            ___x519_0 = _mm256_fmadd_ps(___x521_0_0, ___x520_0, ___x519_0);
                            ___x519_0 = _mm256_fmadd_ps(___x521_0_1, ___x520_1, ___x519_0);
                            ___x519_0 = _mm256_fmadd_ps(___x521_0_2, ___x520_2, ___x519_0);
                            ___x519_0 = _mm256_fmadd_ps(___x521_0_3, ___x520_3, ___x519_0);
                            ___x519_1 = _mm256_fmadd_ps(___x521_1_0, ___x520_0, ___x519_1);
                            ___x519_1 = _mm256_fmadd_ps(___x521_1_1, ___x520_1, ___x519_1);
                            ___x519_1 = _mm256_fmadd_ps(___x521_1_2, ___x520_2, ___x519_1);
                            ___x519_1 = _mm256_fmadd_ps(___x521_1_3, ___x520_3, ___x519_1);
                            ___x519_2 = _mm256_fmadd_ps(___x521_2_0, ___x520_0, ___x519_2);
                            ___x519_2 = _mm256_fmadd_ps(___x521_2_1, ___x520_1, ___x519_2);
                            ___x519_2 = _mm256_fmadd_ps(___x521_2_2, ___x520_2, ___x519_2);
                            ___x519_2 = _mm256_fmadd_ps(___x521_2_3, ___x520_3, ___x519_2);
                            ___x519_3 = _mm256_fmadd_ps(___x521_3_0, ___x520_0, ___x519_3);
                            ___x519_3 = _mm256_fmadd_ps(___x521_3_1, ___x520_1, ___x519_3);
                            ___x519_3 = _mm256_fmadd_ps(___x521_3_2, ___x520_2, ___x519_3);
                            ___x519_3 = _mm256_fmadd_ps(___x521_3_3, ___x520_3, ___x519_3);
                            ___x519_4 = _mm256_fmadd_ps(___x521_4_0, ___x520_0, ___x519_4);
                            ___x519_4 = _mm256_fmadd_ps(___x521_4_1, ___x520_1, ___x519_4);
                            ___x519_4 = _mm256_fmadd_ps(___x521_4_2, ___x520_2, ___x519_4);
                            ___x519_4 = _mm256_fmadd_ps(___x521_4_3, ___x520_3, ___x519_4);
                            ___x519_5 = _mm256_fmadd_ps(___x521_5_0, ___x520_0, ___x519_5);
                            ___x519_5 = _mm256_fmadd_ps(___x521_5_1, ___x520_1, ___x519_5);
                            ___x519_5 = _mm256_fmadd_ps(___x521_5_2, ___x520_2, ___x519_5);
                            ___x519_5 = _mm256_fmadd_ps(___x521_5_3, ___x520_3, ___x519_5);
                            ___x519_6 = _mm256_fmadd_ps(___x521_6_0, ___x520_0, ___x519_6);
                            ___x519_6 = _mm256_fmadd_ps(___x521_6_1, ___x520_1, ___x519_6);
                            ___x519_6 = _mm256_fmadd_ps(___x521_6_2, ___x520_2, ___x519_6);
                            ___x519_6 = _mm256_fmadd_ps(___x521_6_3, ___x520_3, ___x519_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][0], ___x519_0);
                _mm256_store_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][0], ___x519_1);
                _mm256_store_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][0], ___x519_2);
                _mm256_store_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][0], ___x519_3);
                _mm256_store_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][0], ___x519_4);
                _mm256_store_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][0], ___x519_5);
                _mm256_store_ps(& ensemble198value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][0], ___x519_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble199value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble199inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] + ensemble199bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble200value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble200inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 48,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 24; x1 ++) {
        for (int x2 = 0; x2 < 3; x2 ++) {
            for (int x3 = 0; x3 < 3; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble201weights[x0][x1][x2][x3][0][0], & ensemble201weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,48 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 24; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x530_0 = _mm256_load_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x530_1 = _mm256_load_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x530_2 = _mm256_load_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x530_3 = _mm256_load_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x530_4 = _mm256_load_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x530_5 = _mm256_load_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x530_6 = _mm256_load_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x528_0_0 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x528_0_1 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x528_0_2 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x528_0_3 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x528_1_0 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x528_1_1 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x528_1_2 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x528_1_3 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x528_2_0 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x528_2_1 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x528_2_2 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x528_2_3 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x528_3_0 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x528_3_1 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x528_3_2 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x528_3_3 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x528_4_0 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x528_4_1 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x528_4_2 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x528_4_3 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x528_5_0 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x528_5_1 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x528_5_2 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x528_5_3 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x528_6_0 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x528_6_1 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x528_6_2 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x528_6_3 = _mm256_broadcast_ss(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x529_0 = _mm256_load_ps(& ensemble201weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x529_1 = _mm256_load_ps(& ensemble201weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x529_2 = _mm256_load_ps(& ensemble201weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x529_3 = _mm256_load_ps(& ensemble201weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x530_0 = _mm256_fmadd_ps(___x528_0_0, ___x529_0, ___x530_0);
                            ___x530_0 = _mm256_fmadd_ps(___x528_0_1, ___x529_1, ___x530_0);
                            ___x530_0 = _mm256_fmadd_ps(___x528_0_2, ___x529_2, ___x530_0);
                            ___x530_0 = _mm256_fmadd_ps(___x528_0_3, ___x529_3, ___x530_0);
                            ___x530_1 = _mm256_fmadd_ps(___x528_1_0, ___x529_0, ___x530_1);
                            ___x530_1 = _mm256_fmadd_ps(___x528_1_1, ___x529_1, ___x530_1);
                            ___x530_1 = _mm256_fmadd_ps(___x528_1_2, ___x529_2, ___x530_1);
                            ___x530_1 = _mm256_fmadd_ps(___x528_1_3, ___x529_3, ___x530_1);
                            ___x530_2 = _mm256_fmadd_ps(___x528_2_0, ___x529_0, ___x530_2);
                            ___x530_2 = _mm256_fmadd_ps(___x528_2_1, ___x529_1, ___x530_2);
                            ___x530_2 = _mm256_fmadd_ps(___x528_2_2, ___x529_2, ___x530_2);
                            ___x530_2 = _mm256_fmadd_ps(___x528_2_3, ___x529_3, ___x530_2);
                            ___x530_3 = _mm256_fmadd_ps(___x528_3_0, ___x529_0, ___x530_3);
                            ___x530_3 = _mm256_fmadd_ps(___x528_3_1, ___x529_1, ___x530_3);
                            ___x530_3 = _mm256_fmadd_ps(___x528_3_2, ___x529_2, ___x530_3);
                            ___x530_3 = _mm256_fmadd_ps(___x528_3_3, ___x529_3, ___x530_3);
                            ___x530_4 = _mm256_fmadd_ps(___x528_4_0, ___x529_0, ___x530_4);
                            ___x530_4 = _mm256_fmadd_ps(___x528_4_1, ___x529_1, ___x530_4);
                            ___x530_4 = _mm256_fmadd_ps(___x528_4_2, ___x529_2, ___x530_4);
                            ___x530_4 = _mm256_fmadd_ps(___x528_4_3, ___x529_3, ___x530_4);
                            ___x530_5 = _mm256_fmadd_ps(___x528_5_0, ___x529_0, ___x530_5);
                            ___x530_5 = _mm256_fmadd_ps(___x528_5_1, ___x529_1, ___x530_5);
                            ___x530_5 = _mm256_fmadd_ps(___x528_5_2, ___x529_2, ___x530_5);
                            ___x530_5 = _mm256_fmadd_ps(___x528_5_3, ___x529_3, ___x530_5);
                            ___x530_6 = _mm256_fmadd_ps(___x528_6_0, ___x529_0, ___x530_6);
                            ___x530_6 = _mm256_fmadd_ps(___x528_6_1, ___x529_1, ___x530_6);
                            ___x530_6 = _mm256_fmadd_ps(___x528_6_2, ___x529_2, ___x530_6);
                            ___x530_6 = _mm256_fmadd_ps(___x528_6_3, ___x529_3, ___x530_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x530_0);
                _mm256_store_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x530_1);
                _mm256_store_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x530_2);
                _mm256_store_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x530_3);
                _mm256_store_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x530_4);
                _mm256_store_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x530_5);
                _mm256_store_ps(& ensemble201value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x530_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble202value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble202inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble202bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble203value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble203inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 6,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 104; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble204weights[x0][x1][x2][x3][0][0], & ensemble204weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,6 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 104; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x538_0 = _mm256_load_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0]);
                __m256 ___x538_1 = _mm256_load_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0]);
                __m256 ___x538_2 = _mm256_load_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0]);
                __m256 ___x538_3 = _mm256_load_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0]);
                __m256 ___x538_4 = _mm256_load_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0]);
                __m256 ___x538_5 = _mm256_load_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0]);
                __m256 ___x538_6 = _mm256_load_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x537_0_0 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x537_0_1 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x537_0_2 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x537_0_3 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x537_1_0 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x537_1_1 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x537_1_2 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x537_1_3 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x537_2_0 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x537_2_1 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x537_2_2 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x537_2_3 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x537_3_0 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x537_3_1 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x537_3_2 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x537_3_3 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x537_4_0 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x537_4_1 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x537_4_2 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x537_4_3 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x537_5_0 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x537_5_1 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x537_5_2 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x537_5_3 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x537_6_0 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x537_6_1 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x537_6_2 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x537_6_3 = _mm256_broadcast_ss(& ensemble204inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x539_0 = _mm256_load_ps(& ensemble204weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x539_1 = _mm256_load_ps(& ensemble204weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x539_2 = _mm256_load_ps(& ensemble204weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x539_3 = _mm256_load_ps(& ensemble204weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x538_0 = _mm256_fmadd_ps(___x537_0_0, ___x539_0, ___x538_0);
                            ___x538_0 = _mm256_fmadd_ps(___x537_0_1, ___x539_1, ___x538_0);
                            ___x538_0 = _mm256_fmadd_ps(___x537_0_2, ___x539_2, ___x538_0);
                            ___x538_0 = _mm256_fmadd_ps(___x537_0_3, ___x539_3, ___x538_0);
                            ___x538_1 = _mm256_fmadd_ps(___x537_1_0, ___x539_0, ___x538_1);
                            ___x538_1 = _mm256_fmadd_ps(___x537_1_1, ___x539_1, ___x538_1);
                            ___x538_1 = _mm256_fmadd_ps(___x537_1_2, ___x539_2, ___x538_1);
                            ___x538_1 = _mm256_fmadd_ps(___x537_1_3, ___x539_3, ___x538_1);
                            ___x538_2 = _mm256_fmadd_ps(___x537_2_0, ___x539_0, ___x538_2);
                            ___x538_2 = _mm256_fmadd_ps(___x537_2_1, ___x539_1, ___x538_2);
                            ___x538_2 = _mm256_fmadd_ps(___x537_2_2, ___x539_2, ___x538_2);
                            ___x538_2 = _mm256_fmadd_ps(___x537_2_3, ___x539_3, ___x538_2);
                            ___x538_3 = _mm256_fmadd_ps(___x537_3_0, ___x539_0, ___x538_3);
                            ___x538_3 = _mm256_fmadd_ps(___x537_3_1, ___x539_1, ___x538_3);
                            ___x538_3 = _mm256_fmadd_ps(___x537_3_2, ___x539_2, ___x538_3);
                            ___x538_3 = _mm256_fmadd_ps(___x537_3_3, ___x539_3, ___x538_3);
                            ___x538_4 = _mm256_fmadd_ps(___x537_4_0, ___x539_0, ___x538_4);
                            ___x538_4 = _mm256_fmadd_ps(___x537_4_1, ___x539_1, ___x538_4);
                            ___x538_4 = _mm256_fmadd_ps(___x537_4_2, ___x539_2, ___x538_4);
                            ___x538_4 = _mm256_fmadd_ps(___x537_4_3, ___x539_3, ___x538_4);
                            ___x538_5 = _mm256_fmadd_ps(___x537_5_0, ___x539_0, ___x538_5);
                            ___x538_5 = _mm256_fmadd_ps(___x537_5_1, ___x539_1, ___x538_5);
                            ___x538_5 = _mm256_fmadd_ps(___x537_5_2, ___x539_2, ___x538_5);
                            ___x538_5 = _mm256_fmadd_ps(___x537_5_3, ___x539_3, ___x538_5);
                            ___x538_6 = _mm256_fmadd_ps(___x537_6_0, ___x539_0, ___x538_6);
                            ___x538_6 = _mm256_fmadd_ps(___x537_6_1, ___x539_1, ___x538_6);
                            ___x538_6 = _mm256_fmadd_ps(___x537_6_2, ___x539_2, ___x538_6);
                            ___x538_6 = _mm256_fmadd_ps(___x537_6_3, ___x539_3, ___x538_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][0], ___x538_0);
                _mm256_store_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][0], ___x538_1);
                _mm256_store_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][0], ___x538_2);
                _mm256_store_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][0], ___x538_3);
                _mm256_store_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][0], ___x538_4);
                _mm256_store_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][0], ___x538_5);
                _mm256_store_ps(& ensemble204value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][0], ___x538_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble205value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble205inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] + ensemble205bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble206value[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble206inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 6; x1 ++) {
        for (int x2 = 0; x2 < 5; x2 ++) {
            for (int x3 = 0; x3 < 5; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble207weights[x0][x1][x2][x3][0][0], & ensemble207weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 6; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x546_0 = _mm256_load_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x546_1 = _mm256_load_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x546_2 = _mm256_load_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x546_3 = _mm256_load_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x546_4 = _mm256_load_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x546_5 = _mm256_load_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x546_6 = _mm256_load_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x547_0_0 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x547_0_1 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x547_0_2 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x547_0_3 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x547_1_0 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x547_1_1 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x547_1_2 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x547_1_3 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x547_2_0 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x547_2_1 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x547_2_2 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x547_2_3 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x547_3_0 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x547_3_1 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x547_3_2 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x547_3_3 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x547_4_0 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x547_4_1 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x547_4_2 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x547_4_3 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x547_5_0 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x547_5_1 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x547_5_2 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x547_5_3 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x547_6_0 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x547_6_1 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x547_6_2 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x547_6_3 = _mm256_broadcast_ss(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            __m256 ___x548_0 = _mm256_load_ps(& ensemble207weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x548_1 = _mm256_load_ps(& ensemble207weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x548_2 = _mm256_load_ps(& ensemble207weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x548_3 = _mm256_load_ps(& ensemble207weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            ___x546_0 = _mm256_fmadd_ps(___x547_0_0, ___x548_0, ___x546_0);
                            ___x546_0 = _mm256_fmadd_ps(___x547_0_1, ___x548_1, ___x546_0);
                            ___x546_0 = _mm256_fmadd_ps(___x547_0_2, ___x548_2, ___x546_0);
                            ___x546_0 = _mm256_fmadd_ps(___x547_0_3, ___x548_3, ___x546_0);
                            ___x546_1 = _mm256_fmadd_ps(___x547_1_0, ___x548_0, ___x546_1);
                            ___x546_1 = _mm256_fmadd_ps(___x547_1_1, ___x548_1, ___x546_1);
                            ___x546_1 = _mm256_fmadd_ps(___x547_1_2, ___x548_2, ___x546_1);
                            ___x546_1 = _mm256_fmadd_ps(___x547_1_3, ___x548_3, ___x546_1);
                            ___x546_2 = _mm256_fmadd_ps(___x547_2_0, ___x548_0, ___x546_2);
                            ___x546_2 = _mm256_fmadd_ps(___x547_2_1, ___x548_1, ___x546_2);
                            ___x546_2 = _mm256_fmadd_ps(___x547_2_2, ___x548_2, ___x546_2);
                            ___x546_2 = _mm256_fmadd_ps(___x547_2_3, ___x548_3, ___x546_2);
                            ___x546_3 = _mm256_fmadd_ps(___x547_3_0, ___x548_0, ___x546_3);
                            ___x546_3 = _mm256_fmadd_ps(___x547_3_1, ___x548_1, ___x546_3);
                            ___x546_3 = _mm256_fmadd_ps(___x547_3_2, ___x548_2, ___x546_3);
                            ___x546_3 = _mm256_fmadd_ps(___x547_3_3, ___x548_3, ___x546_3);
                            ___x546_4 = _mm256_fmadd_ps(___x547_4_0, ___x548_0, ___x546_4);
                            ___x546_4 = _mm256_fmadd_ps(___x547_4_1, ___x548_1, ___x546_4);
                            ___x546_4 = _mm256_fmadd_ps(___x547_4_2, ___x548_2, ___x546_4);
                            ___x546_4 = _mm256_fmadd_ps(___x547_4_3, ___x548_3, ___x546_4);
                            ___x546_5 = _mm256_fmadd_ps(___x547_5_0, ___x548_0, ___x546_5);
                            ___x546_5 = _mm256_fmadd_ps(___x547_5_1, ___x548_1, ___x546_5);
                            ___x546_5 = _mm256_fmadd_ps(___x547_5_2, ___x548_2, ___x546_5);
                            ___x546_5 = _mm256_fmadd_ps(___x547_5_3, ___x548_3, ___x546_5);
                            ___x546_6 = _mm256_fmadd_ps(___x547_6_0, ___x548_0, ___x546_6);
                            ___x546_6 = _mm256_fmadd_ps(___x547_6_1, ___x548_1, ___x546_6);
                            ___x546_6 = _mm256_fmadd_ps(___x547_6_2, ___x548_2, ___x546_6);
                            ___x546_6 = _mm256_fmadd_ps(___x547_6_3, ___x548_3, ___x546_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x546_0);
                _mm256_store_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x546_1);
                _mm256_store_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x546_2);
                _mm256_store_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x546_3);
                _mm256_store_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x546_4);
                _mm256_store_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x546_5);
                _mm256_store_ps(& ensemble207value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x546_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble208value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble208inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble208bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble209value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble209inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        
    parallel_for(0,104 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 1 - 1;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 1 - 1;
                int _input_offset_3 = in_x;
                float max_value = - INFINITY;
                for (int j = 0; j < 3; j += 1) {
                    for (int k = 0; k < 3; k += 1) {
                        if (ensemble210inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 6)][MIN(MAX(k * 1 + _input_offset_3, 0), 6)][_input_offset_1_inner] > max_value) {
                            max_value = ensemble210inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 6)][MIN(MAX(k * 1 + _input_offset_3, 0), 6)][_input_offset_1_inner];
                            ensemble210mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = j;
                            ensemble210mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = k;
                        };
                    }
                }
                ensemble210value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = max_value;
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 16,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 104; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble211weights[x0][x1][x2][x3][0][0], & ensemble211weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
              
    parallel_for(0,16 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int i_outer = 0; i_outer < 104; i_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            int in_y = _neuron_index_2 * 1;
            int _input_offset_2 = in_y;
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 7) {
                int in_x_0 = (_neuron_index_3 + 0) * 1;
                int in_x_1 = (_neuron_index_3 + 1) * 1;
                int in_x_2 = (_neuron_index_3 + 2) * 1;
                int in_x_3 = (_neuron_index_3 + 3) * 1;
                int in_x_4 = (_neuron_index_3 + 4) * 1;
                int in_x_5 = (_neuron_index_3 + 5) * 1;
                int in_x_6 = (_neuron_index_3 + 6) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                __m256 ___x556_0 = _mm256_load_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0]);
                __m256 ___x556_1 = _mm256_load_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0]);
                __m256 ___x556_2 = _mm256_load_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0]);
                __m256 ___x556_3 = _mm256_load_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0]);
                __m256 ___x556_4 = _mm256_load_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0]);
                __m256 ___x556_5 = _mm256_load_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0]);
                __m256 ___x556_6 = _mm256_load_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0]);
                for (int j = 0; j < 1; j += 1) {
                    for (int k = 0; k < 1; k += 1) {
                        for (int i_inner = 0; i_inner < 8; i_inner += 4) {
                            __m256 ___x555_0 = _mm256_load_ps(& ensemble211weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 0)][0]);
                            __m256 ___x555_1 = _mm256_load_ps(& ensemble211weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 1)][0]);
                            __m256 ___x555_2 = _mm256_load_ps(& ensemble211weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 2)][0]);
                            __m256 ___x555_3 = _mm256_load_ps(& ensemble211weights_transposed[_neuron_index_1_outer][i_outer][j][k][(i_inner + 3)][0]);
                            __m256 ___x557_0_0 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 0)]);
                            __m256 ___x557_0_1 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 1)]);
                            __m256 ___x557_0_2 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 2)]);
                            __m256 ___x557_0_3 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][(i_inner + 3)]);
                            __m256 ___x557_1_0 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 0)]);
                            __m256 ___x557_1_1 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 1)]);
                            __m256 ___x557_1_2 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 2)]);
                            __m256 ___x557_1_3 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][(i_inner + 3)]);
                            __m256 ___x557_2_0 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 0)]);
                            __m256 ___x557_2_1 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 1)]);
                            __m256 ___x557_2_2 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 2)]);
                            __m256 ___x557_2_3 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][(i_inner + 3)]);
                            __m256 ___x557_3_0 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 0)]);
                            __m256 ___x557_3_1 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 1)]);
                            __m256 ___x557_3_2 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 2)]);
                            __m256 ___x557_3_3 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][(i_inner + 3)]);
                            __m256 ___x557_4_0 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 0)]);
                            __m256 ___x557_4_1 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 1)]);
                            __m256 ___x557_4_2 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 2)]);
                            __m256 ___x557_4_3 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][(i_inner + 3)]);
                            __m256 ___x557_5_0 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 0)]);
                            __m256 ___x557_5_1 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 1)]);
                            __m256 ___x557_5_2 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 2)]);
                            __m256 ___x557_5_3 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][(i_inner + 3)]);
                            __m256 ___x557_6_0 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 0)]);
                            __m256 ___x557_6_1 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 1)]);
                            __m256 ___x557_6_2 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 2)]);
                            __m256 ___x557_6_3 = _mm256_broadcast_ss(& ensemble211inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][(i_inner + 3)]);
                            ___x556_0 = _mm256_fmadd_ps(___x557_0_0, ___x555_0, ___x556_0);
                            ___x556_0 = _mm256_fmadd_ps(___x557_0_1, ___x555_1, ___x556_0);
                            ___x556_0 = _mm256_fmadd_ps(___x557_0_2, ___x555_2, ___x556_0);
                            ___x556_0 = _mm256_fmadd_ps(___x557_0_3, ___x555_3, ___x556_0);
                            ___x556_1 = _mm256_fmadd_ps(___x557_1_0, ___x555_0, ___x556_1);
                            ___x556_1 = _mm256_fmadd_ps(___x557_1_1, ___x555_1, ___x556_1);
                            ___x556_1 = _mm256_fmadd_ps(___x557_1_2, ___x555_2, ___x556_1);
                            ___x556_1 = _mm256_fmadd_ps(___x557_1_3, ___x555_3, ___x556_1);
                            ___x556_2 = _mm256_fmadd_ps(___x557_2_0, ___x555_0, ___x556_2);
                            ___x556_2 = _mm256_fmadd_ps(___x557_2_1, ___x555_1, ___x556_2);
                            ___x556_2 = _mm256_fmadd_ps(___x557_2_2, ___x555_2, ___x556_2);
                            ___x556_2 = _mm256_fmadd_ps(___x557_2_3, ___x555_3, ___x556_2);
                            ___x556_3 = _mm256_fmadd_ps(___x557_3_0, ___x555_0, ___x556_3);
                            ___x556_3 = _mm256_fmadd_ps(___x557_3_1, ___x555_1, ___x556_3);
                            ___x556_3 = _mm256_fmadd_ps(___x557_3_2, ___x555_2, ___x556_3);
                            ___x556_3 = _mm256_fmadd_ps(___x557_3_3, ___x555_3, ___x556_3);
                            ___x556_4 = _mm256_fmadd_ps(___x557_4_0, ___x555_0, ___x556_4);
                            ___x556_4 = _mm256_fmadd_ps(___x557_4_1, ___x555_1, ___x556_4);
                            ___x556_4 = _mm256_fmadd_ps(___x557_4_2, ___x555_2, ___x556_4);
                            ___x556_4 = _mm256_fmadd_ps(___x557_4_3, ___x555_3, ___x556_4);
                            ___x556_5 = _mm256_fmadd_ps(___x557_5_0, ___x555_0, ___x556_5);
                            ___x556_5 = _mm256_fmadd_ps(___x557_5_1, ___x555_1, ___x556_5);
                            ___x556_5 = _mm256_fmadd_ps(___x557_5_2, ___x555_2, ___x556_5);
                            ___x556_5 = _mm256_fmadd_ps(___x557_5_3, ___x555_3, ___x556_5);
                            ___x556_6 = _mm256_fmadd_ps(___x557_6_0, ___x555_0, ___x556_6);
                            ___x556_6 = _mm256_fmadd_ps(___x557_6_1, ___x555_1, ___x556_6);
                            ___x556_6 = _mm256_fmadd_ps(___x557_6_2, ___x555_2, ___x556_6);
                            ___x556_6 = _mm256_fmadd_ps(___x557_6_3, ___x555_3, ___x556_6);
                        }
                    }
                }
                _mm256_store_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][0], ___x556_0);
                _mm256_store_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][0], ___x556_1);
                _mm256_store_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][0], ___x556_2);
                _mm256_store_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][0], ___x556_3);
                _mm256_store_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][0], ___x556_4);
                _mm256_store_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][0], ___x556_5);
                _mm256_store_ps(& ensemble211value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][0], ___x556_6);
            }
        }
    }
    for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                ensemble212value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble212inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + ensemble212bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
                ensemble213value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble213inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    ;
        }
      }
    );
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 48; _neuron_index_1_outer += 1) {
        for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble214value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble214inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 48; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble214value[_neuron_index_0][(_neuron_index_1_outer + 48)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble214inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
        for (long _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
            for (long _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                    ensemble214value[_neuron_index_0][(_neuron_index_1_outer + 96)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble214inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    ensemble214value[_neuron_index_0][(_neuron_index_1_outer + 112)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble214inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                }
            }
        }
    }
        
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_2 = 0; _neuron_index_2 < 1; _neuron_index_2 += 1) {
        for (int _neuron_index_3 = 0; _neuron_index_3 < 1; _neuron_index_3 += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) / 8;
                int _input_offset_1_inner = (_neuron_index_1_outer * 8 + _neuron_index_1_inner) % 8;
                int in_y = _neuron_index_2 * 1 - 0;
                int _input_offset_2 = in_y;
                int in_x = _neuron_index_3 * 1 - 0;
                int _input_offset_3 = in_x;
                for (int j = 0; j < 7; j += 1) {
                    for (int k = 0; k < 7; k += 1) {
                        ensemble215value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] += ensemble215inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 6)][MIN(MAX(k * 1 + _input_offset_3, 0), 6)][_input_offset_1_inner];
                    }
                }
                ensemble215value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble215value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / ensemble215kernel[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
            }
        }
    };
        }
      }
    );
    ;
        }
      }
    );
    
    parallel_for(0, 126,
      [=](int low, int high) {
        for (int x0 = low; x0 < high; x0++) {
          for (int x1 = 0; x1 < 128; x1 ++) {
        for (int x2 = 0; x2 < 1; x2 ++) {
            for (int x3 = 0; x3 < 1; x3 ++) {
                transpose<SIMDWIDTH,SIMDWIDTH>(& ensemble216weights[x0][x1][x2][x3][0][0], & ensemble216weights_transposed[x0][x1][x2][x3][0][0]);
            }
        }
    }
        } 
      }
    );
    
    parallel_for(0,128 / 16,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 16;
          
    parallel_for(0,126 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          __m256 ___x565_0 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 0)][_neuron_index_1_outer][0]);
    __m256 ___x565_1 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 1)][_neuron_index_1_outer][0]);
    __m256 ___x565_2 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 2)][_neuron_index_1_outer][0]);
    __m256 ___x565_3 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 3)][_neuron_index_1_outer][0]);
    __m256 ___x565_4 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 4)][_neuron_index_1_outer][0]);
    __m256 ___x565_5 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 5)][_neuron_index_1_outer][0]);
    __m256 ___x565_6 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 6)][_neuron_index_1_outer][0]);
    __m256 ___x565_7 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 7)][_neuron_index_1_outer][0]);
    __m256 ___x565_8 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 8)][_neuron_index_1_outer][0]);
    __m256 ___x565_9 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 9)][_neuron_index_1_outer][0]);
    __m256 ___x565_10 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 10)][_neuron_index_1_outer][0]);
    __m256 ___x565_11 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 11)][_neuron_index_1_outer][0]);
    __m256 ___x565_12 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 12)][_neuron_index_1_outer][0]);
    __m256 ___x565_13 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 13)][_neuron_index_1_outer][0]);
    __m256 ___x565_14 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 14)][_neuron_index_1_outer][0]);
    __m256 ___x565_15 = _mm256_load_ps(& ensemble216value[(_neuron_index_0 + 15)][_neuron_index_1_outer][0]);
    for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 128; __unique_loopvar0_outer += 1) {
        for (int __unique_loopvar0_inner = 0; __unique_loopvar0_inner < 8; __unique_loopvar0_inner += 1) {
            for (int __unique_loopvar1 = 0; __unique_loopvar1 < 1; __unique_loopvar1 += 1) {
                for (int __unique_loopvar2 = 0; __unique_loopvar2 < 1; __unique_loopvar2 += 1) {
                    __m256 ___x564_0 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_1 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_2 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_3 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_4 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_5 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_6 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_7 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_8 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_9 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_10 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_11 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_12 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_13 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_14 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x564_15 = _mm256_broadcast_ss(& ensemble216inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][__unique_loopvar0_inner]);
                    __m256 ___x566 = _mm256_load_ps(& ensemble216weights_transposed[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][__unique_loopvar0_inner][0]);
                    ___x565_0 = _mm256_fmadd_ps(___x564_0, ___x566, ___x565_0);
                    ___x565_1 = _mm256_fmadd_ps(___x564_1, ___x566, ___x565_1);
                    ___x565_2 = _mm256_fmadd_ps(___x564_2, ___x566, ___x565_2);
                    ___x565_3 = _mm256_fmadd_ps(___x564_3, ___x566, ___x565_3);
                    ___x565_4 = _mm256_fmadd_ps(___x564_4, ___x566, ___x565_4);
                    ___x565_5 = _mm256_fmadd_ps(___x564_5, ___x566, ___x565_5);
                    ___x565_6 = _mm256_fmadd_ps(___x564_6, ___x566, ___x565_6);
                    ___x565_7 = _mm256_fmadd_ps(___x564_7, ___x566, ___x565_7);
                    ___x565_8 = _mm256_fmadd_ps(___x564_8, ___x566, ___x565_8);
                    ___x565_9 = _mm256_fmadd_ps(___x564_9, ___x566, ___x565_9);
                    ___x565_10 = _mm256_fmadd_ps(___x564_10, ___x566, ___x565_10);
                    ___x565_11 = _mm256_fmadd_ps(___x564_11, ___x566, ___x565_11);
                    ___x565_12 = _mm256_fmadd_ps(___x564_12, ___x566, ___x565_12);
                    ___x565_13 = _mm256_fmadd_ps(___x564_13, ___x566, ___x565_13);
                    ___x565_14 = _mm256_fmadd_ps(___x564_14, ___x566, ___x565_14);
                    ___x565_15 = _mm256_fmadd_ps(___x564_15, ___x566, ___x565_15);
                }
            }
        }
    }
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 0)][_neuron_index_1_outer][0], ___x565_0);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 1)][_neuron_index_1_outer][0], ___x565_1);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 2)][_neuron_index_1_outer][0], ___x565_2);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 3)][_neuron_index_1_outer][0], ___x565_3);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 4)][_neuron_index_1_outer][0], ___x565_4);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 5)][_neuron_index_1_outer][0], ___x565_5);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 6)][_neuron_index_1_outer][0], ___x565_6);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 7)][_neuron_index_1_outer][0], ___x565_7);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 8)][_neuron_index_1_outer][0], ___x565_8);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 9)][_neuron_index_1_outer][0], ___x565_9);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 10)][_neuron_index_1_outer][0], ___x565_10);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 11)][_neuron_index_1_outer][0], ___x565_11);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 12)][_neuron_index_1_outer][0], ___x565_12);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 13)][_neuron_index_1_outer][0], ___x565_13);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 14)][_neuron_index_1_outer][0], ___x565_14);
    _mm256_store_ps(& ensemble216value[(_neuron_index_0 + 15)][_neuron_index_1_outer][0], ___x565_15);
    ;
        }
      }
    );;
        }
      }
    );
    
    parallel_for(0,128 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_0 = low; tmp__neuron_index_0 < high; tmp__neuron_index_0++) {
          int _neuron_index_0 = tmp__neuron_index_0 * 1;
          
    parallel_for(0,126 / 1,
      [=](int low, int high) {
        for (int tmp__neuron_index_1_outer = low; tmp__neuron_index_1_outer < high; tmp__neuron_index_1_outer++) {
          int _neuron_index_1_outer = tmp__neuron_index_1_outer * 1;
          for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 8; _neuron_index_1_inner += 1) {
        ensemble217value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = ensemble217inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] + ensemble217bias[_neuron_index_1_outer][0][_neuron_index_1_inner];
    };
        }
      }
    );;
        }
      }
    );
};
