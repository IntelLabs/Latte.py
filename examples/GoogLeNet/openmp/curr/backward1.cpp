// <file: backward1.cpp>
#include <immintrin.h>
#include <mkl.h>
#include <stdio.h>
#include <cmath>
#include <omp.h>
#include <unistd.h>
#if 0
#include "/data/nfs_home/avenkat/latte/latte/runtime/runtime.h"
#endif
#define SIMDWIDTH 16
#define MIN(x, y) (((x) < (y)) ? (x) : (y))
#define MAX(x, y) (((x) > (y)) ? (x) : (y))

#if 0
#ifdef APPLE
#include <OpenCL/opencl.h>
#else
#include <CL/cl.h>
#endif
#endif

#if 0
#include <libxsmm.h>
#include <libxsmm_dnn.h>
#endif

inline void __mm_prefetch_t0(float const *a) {
  _mm_prefetch((char const *)a, _MM_HINT_T0);
}

inline void __mm_prefetch_t1(float const *a) {
  _mm_prefetch((char const *)a, _MM_HINT_T1);
}

template<int in_width, int out_width>
void transpose(float *in, float *out)
{
	__m512i r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, ra, rb, rc, rd, re, rf;
	__m512i t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, ta, tb, tc, td, te, tf;
	//const int in_width=32, out_width=32;
	if((in_width & 0xf != 0)  || (out_width & 0xf != 0)) {printf("Transpose16x16: Invalid in or out width\n"); return;}

	r0 = _mm512_load_epi32(in + 0*in_width);
	r1 = _mm512_load_epi32(in + 1*in_width);
	r2 = _mm512_load_epi32(in + 2*in_width);
	r3 = _mm512_load_epi32(in + 3*in_width);
	r4 = _mm512_load_epi32(in + 4*in_width);
	r5 = _mm512_load_epi32(in + 5*in_width);
	r6 = _mm512_load_epi32(in + 6*in_width);
	r7 = _mm512_load_epi32(in + 7*in_width);
	r8 = _mm512_load_epi32(in + 8*in_width);
	r9 = _mm512_load_epi32(in + 9*in_width);
	ra = _mm512_load_epi32(in + 10*in_width);
	rb = _mm512_load_epi32(in + 11*in_width);
	rc = _mm512_load_epi32(in + 12*in_width);
	rd = _mm512_load_epi32(in + 13*in_width);
	re = _mm512_load_epi32(in + 14*in_width);
	rf = _mm512_load_epi32(in + 15*in_width);

    t0 = _mm512_unpacklo_epi32(r0,r1); //   0  16   1  17   4  20   5  21   8  24   9  25  12  28  13  29 
    t1 = _mm512_unpackhi_epi32(r0,r1); //   2  18   3  19   6  22   7  23  10  26  11  27  14  30  15  31
    t2 = _mm512_unpacklo_epi32(r2,r3); //  32  48  33  49 ...
    t3 = _mm512_unpackhi_epi32(r2,r3); //  34  50  35  51 ...
    t4 = _mm512_unpacklo_epi32(r4,r5); //  64  80  65  81 ...  
    t5 = _mm512_unpackhi_epi32(r4,r5); //  66  82  67  83 ...
    t6 = _mm512_unpacklo_epi32(r6,r7); //  96 112  97 113 ...
    t7 = _mm512_unpackhi_epi32(r6,r7); //  98 114  99 115 ...
    t8 = _mm512_unpacklo_epi32(r8,r9); // 128 ...
    t9 = _mm512_unpackhi_epi32(r8,r9); // 130 ...
    ta = _mm512_unpacklo_epi32(ra,rb); // 160 ...
    tb = _mm512_unpackhi_epi32(ra,rb); // 162 ...
    tc = _mm512_unpacklo_epi32(rc,rd); // 196 ...
    td = _mm512_unpackhi_epi32(rc,rd); // 198 ...
    te = _mm512_unpacklo_epi32(re,rf); // 228 ...
    tf = _mm512_unpackhi_epi32(re,rf); // 230 ...

    r0 = _mm512_unpacklo_epi64(t0,t2); //   0  16  32  48 ...
    r1 = _mm512_unpackhi_epi64(t0,t2); //   1  17  33  49 ...
    r2 = _mm512_unpacklo_epi64(t1,t3); //   2  18  34  49 ...
    r3 = _mm512_unpackhi_epi64(t1,t3); //   3  19  35  51 ...
    r4 = _mm512_unpacklo_epi64(t4,t6); //  64  80  96 112 ...  
    r5 = _mm512_unpackhi_epi64(t4,t6); //  65  81  97 114 ...
    r6 = _mm512_unpacklo_epi64(t5,t7); //  66  82  98 113 ...
    r7 = _mm512_unpackhi_epi64(t5,t7); //  67  83  99 115 ...
    r8 = _mm512_unpacklo_epi64(t8,ta); // 128 144 160 176 ...  
    r9 = _mm512_unpackhi_epi64(t8,ta); // 129 145 161 178 ...
    ra = _mm512_unpacklo_epi64(t9,tb); // 130 146 162 177 ... 
    rb = _mm512_unpackhi_epi64(t9,tb); // 131 147 163 179 ...
    rc = _mm512_unpacklo_epi64(tc,te); // 192 208 228 240 ... 
    rd = _mm512_unpackhi_epi64(tc,te); // 193 209 229 241 ...
    re = _mm512_unpacklo_epi64(td,tf); // 194 210 230 242 ...
    rf = _mm512_unpackhi_epi64(td,tf); // 195 211 231 243 ...

    t0 = _mm512_shuffle_i32x4(r0, r4, 0x88); //   0  16  32  48   8  24  40  56  64  80  96  112 ...
    t1 = _mm512_shuffle_i32x4(r1, r5, 0x88); //   1  17  33  49 ...
    t2 = _mm512_shuffle_i32x4(r2, r6, 0x88); //   2  18  34  50 ...
    t3 = _mm512_shuffle_i32x4(r3, r7, 0x88); //   3  19  35  51 ...
    t4 = _mm512_shuffle_i32x4(r0, r4, 0xdd); //   4  20  36  52 ...
    t5 = _mm512_shuffle_i32x4(r1, r5, 0xdd); //   5  21  37  53 ...
    t6 = _mm512_shuffle_i32x4(r2, r6, 0xdd); //   6  22  38  54 ...
    t7 = _mm512_shuffle_i32x4(r3, r7, 0xdd); //   7  23  39  55 ...
    t8 = _mm512_shuffle_i32x4(r8, rc, 0x88); // 128 144 160 176 ...
    t9 = _mm512_shuffle_i32x4(r9, rd, 0x88); // 129 145 161 177 ...
    ta = _mm512_shuffle_i32x4(ra, re, 0x88); // 130 146 162 178 ...
    tb = _mm512_shuffle_i32x4(rb, rf, 0x88); // 131 147 163 179 ...
    tc = _mm512_shuffle_i32x4(r8, rc, 0xdd); // 132 148 164 180 ...
    td = _mm512_shuffle_i32x4(r9, rd, 0xdd); // 133 149 165 181 ...
    te = _mm512_shuffle_i32x4(ra, re, 0xdd); // 134 150 166 182 ...
    tf = _mm512_shuffle_i32x4(rb, rf, 0xdd); // 135 151 167 183 ...

    r0 = _mm512_shuffle_i32x4(t0, t8, 0x88); //   0  16  32  48  64  80  96 112 ... 240
    r1 = _mm512_shuffle_i32x4(t1, t9, 0x88); //   1  17  33  49  66  81  97 113 ... 241
    r2 = _mm512_shuffle_i32x4(t2, ta, 0x88); //   2  18  34  50  67  82  98 114 ... 242
    r3 = _mm512_shuffle_i32x4(t3, tb, 0x88); //   3  19  35  51  68  83  99 115 ... 243
    r4 = _mm512_shuffle_i32x4(t4, tc, 0x88); //   4 ...
    r5 = _mm512_shuffle_i32x4(t5, td, 0x88); //   5 ...
    r6 = _mm512_shuffle_i32x4(t6, te, 0x88); //   6 ...
    r7 = _mm512_shuffle_i32x4(t7, tf, 0x88); //   7 ...
    r8 = _mm512_shuffle_i32x4(t0, t8, 0xdd); //   8 ...
    r9 = _mm512_shuffle_i32x4(t1, t9, 0xdd); //   9 ...
    ra = _mm512_shuffle_i32x4(t2, ta, 0xdd); //  10 ...
    rb = _mm512_shuffle_i32x4(t3, tb, 0xdd); //  11 ...
    rc = _mm512_shuffle_i32x4(t4, tc, 0xdd); //  12 ...
    rd = _mm512_shuffle_i32x4(t5, td, 0xdd); //  13 ...
    re = _mm512_shuffle_i32x4(t6, te, 0xdd); //  14 ...
    rf = _mm512_shuffle_i32x4(t7, tf, 0xdd); //  15  31  47  63  79  96 111 127 ... 255

	_mm512_store_epi32(out + 0*out_width, r0);
	_mm512_store_epi32(out + 1*out_width, r1);
	_mm512_store_epi32(out + 2*out_width, r2);
	_mm512_store_epi32(out + 3*out_width, r3);
	_mm512_store_epi32(out + 4*out_width, r4);
	_mm512_store_epi32(out + 5*out_width, r5);
	_mm512_store_epi32(out + 6*out_width, r6);
	_mm512_store_epi32(out + 7*out_width, r7);
	_mm512_store_epi32(out + 8*out_width, r8);
	_mm512_store_epi32(out + 9*out_width, r9);
	_mm512_store_epi32(out + 10*out_width, ra);
	_mm512_store_epi32(out + 11*out_width, rb);
	_mm512_store_epi32(out + 12*out_width, rc);
	_mm512_store_epi32(out + 13*out_width, rd);
	_mm512_store_epi32(out + 14*out_width, re);
	_mm512_store_epi32(out + 15*out_width, rf);
}

extern "C"
void backward1(float* _ensemble100grad, float* _ensemble100grad_bias, float* _ensemble101grad, float* _ensemble101grad_inputs, float* _ensemble102grad, float* _ensemble102grad_inputs, float* _ensemble102grad_inputs1, float* _ensemble102grad_inputs2, float* _ensemble102grad_inputs3, float* _ensemble103grad, float* _ensemble103grad_inputs, float* _ensemble103grad_weights, float* _ensemble103inputs, float* _ensemble103weights, float* _ensemble104grad, float* _ensemble104grad_bias, float* _ensemble105grad, float* _ensemble105grad_inputs, float* _ensemble106grad, float* _ensemble106grad_inputs, float* _ensemble106grad_weights, float* _ensemble106inputs, float* _ensemble106weights, float* _ensemble107grad, float* _ensemble107grad_bias, float* _ensemble108grad, float* _ensemble108grad_inputs, float* _ensemble109grad, float* _ensemble109grad_inputs, float* _ensemble109grad_weights, float* _ensemble109inputs, float* _ensemble109weights, float* _ensemble10grad, float* _ensemble10grad_bias, float* _ensemble110grad, float* _ensemble110grad_bias, float* _ensemble111grad, float* _ensemble111grad_inputs, float* _ensemble112grad, float* _ensemble112grad_inputs, float* _ensemble112grad_weights, float* _ensemble112inputs, float* _ensemble112weights, float* _ensemble113grad, float* _ensemble113grad_bias, float* _ensemble114grad, float* _ensemble114grad_inputs, float* _ensemble115grad, float* _ensemble115grad_inputs, float* _ensemble115grad_weights, float* _ensemble115inputs, float* _ensemble115weights, float* _ensemble116grad, float* _ensemble116grad_bias, float* _ensemble117grad, float* _ensemble117grad_inputs, float* _ensemble11grad, float* _ensemble11grad_inputs, float* _ensemble12grad, float* _ensemble12grad_inputs, long* _ensemble12mask_j, long* _ensemble12mask_k, float* _ensemble13grad, float* _ensemble13grad_inputs, float* _ensemble13grad_weights, float* _ensemble13inputs, float* _ensemble13weights, float* _ensemble14grad, float* _ensemble14grad_bias, float* _ensemble15grad, float* _ensemble15grad_inputs, float* _ensemble16grad, float* _ensemble16grad_inputs, float* _ensemble16grad_weights, float* _ensemble16inputs, float* _ensemble16weights, float* _ensemble17grad, float* _ensemble17grad_bias, float* _ensemble18grad, float* _ensemble18grad_inputs, float* _ensemble19grad, float* _ensemble19grad_inputs, float* _ensemble19grad_weights, float* _ensemble19inputs, float* _ensemble19weights, float* _ensemble20grad, float* _ensemble20grad_bias, float* _ensemble21grad, float* _ensemble21grad_inputs, float* _ensemble22grad, float* _ensemble22grad_inputs, float* _ensemble22grad_weights, float* _ensemble22inputs, float* _ensemble22weights, float* _ensemble23grad, float* _ensemble23grad_bias, float* _ensemble24grad, float* _ensemble24grad_inputs, float* _ensemble25grad, float* _ensemble25grad_inputs, float* _ensemble25grad_weights, float* _ensemble25inputs, float* _ensemble25weights, float* _ensemble26grad, float* _ensemble26grad_bias, float* _ensemble27grad, float* _ensemble27grad_inputs, float* _ensemble28grad, float* _ensemble28grad_inputs, long* _ensemble28mask_j, long* _ensemble28mask_k, float* _ensemble29grad, float* _ensemble29grad_inputs, float* _ensemble29grad_weights, float* _ensemble29inputs, float* _ensemble29weights, float* _ensemble2grad, float* _ensemble2grad_weights, float* _ensemble2inputs, float* _ensemble30grad, float* _ensemble30grad_bias, float* _ensemble31grad, float* _ensemble31grad_inputs, float* _ensemble32grad, float* _ensemble32grad_inputs, float* _ensemble32grad_inputs1, float* _ensemble32grad_inputs2, float* _ensemble32grad_inputs3, float* _ensemble33grad, float* _ensemble33grad_inputs, float* _ensemble33grad_weights, float* _ensemble33inputs, float* _ensemble33weights, float* _ensemble34grad, float* _ensemble34grad_bias, float* _ensemble35grad, float* _ensemble35grad_inputs, float* _ensemble36grad, float* _ensemble36grad_inputs, float* _ensemble36grad_weights, float* _ensemble36inputs, float* _ensemble36weights, float* _ensemble37grad, float* _ensemble37grad_bias, float* _ensemble38grad, float* _ensemble38grad_inputs, float* _ensemble39grad, float* _ensemble39grad_inputs, float* _ensemble39grad_weights, float* _ensemble39inputs, float* _ensemble39weights, float* _ensemble3grad, float* _ensemble3grad_bias, float* _ensemble40grad, float* _ensemble40grad_bias, float* _ensemble41grad, float* _ensemble41grad_inputs, float* _ensemble42grad, float* _ensemble42grad_inputs, float* _ensemble42grad_weights, float* _ensemble42inputs, float* _ensemble42weights, float* _ensemble43grad, float* _ensemble43grad_bias, float* _ensemble44grad, float* _ensemble44grad_inputs, float* _ensemble45grad, float* _ensemble45grad_inputs, float* _ensemble45grad_weights, float* _ensemble45inputs, float* _ensemble45weights, float* _ensemble46grad, float* _ensemble46grad_bias, float* _ensemble47grad, float* _ensemble47grad_inputs, float* _ensemble48grad, float* _ensemble48grad_inputs, long* _ensemble48mask_j, long* _ensemble48mask_k, float* _ensemble49grad, float* _ensemble49grad_inputs, float* _ensemble49grad_weights, float* _ensemble49inputs, float* _ensemble49weights, float* _ensemble4grad, float* _ensemble4grad_inputs, float* _ensemble50grad, float* _ensemble50grad_bias, float* _ensemble51grad, float* _ensemble51grad_inputs, float* _ensemble52grad, float* _ensemble52grad_inputs, float* _ensemble52grad_inputs1, float* _ensemble52grad_inputs2, float* _ensemble52grad_inputs3, float* _ensemble53grad, float* _ensemble53grad_inputs, long* _ensemble53mask_j, long* _ensemble53mask_k, float* _ensemble54grad, float* _ensemble54grad_inputs, float* _ensemble54grad_weights, float* _ensemble54inputs, float* _ensemble54weights, float* _ensemble55grad, float* _ensemble55grad_bias, float* _ensemble56grad, float* _ensemble56grad_inputs, float* _ensemble57grad, float* _ensemble57grad_inputs, float* _ensemble57grad_weights, float* _ensemble57inputs, float* _ensemble57weights, float* _ensemble58grad, float* _ensemble58grad_bias, float* _ensemble59grad, float* _ensemble59grad_inputs, float* _ensemble5grad, float* _ensemble5grad_inputs, long* _ensemble5mask_j, long* _ensemble5mask_k, float* _ensemble60grad, float* _ensemble60grad_inputs, float* _ensemble60grad_weights, float* _ensemble60inputs, float* _ensemble60weights, float* _ensemble61grad, float* _ensemble61grad_bias, float* _ensemble62grad, float* _ensemble62grad_inputs, float* _ensemble63grad, float* _ensemble63grad_inputs, float* _ensemble63grad_weights, float* _ensemble63inputs, float* _ensemble63weights, float* _ensemble64grad, float* _ensemble64grad_bias, float* _ensemble65grad, float* _ensemble65grad_inputs, float* _ensemble66grad, float* _ensemble66grad_inputs, float* _ensemble66grad_weights, float* _ensemble66inputs, float* _ensemble66weights, float* _ensemble67grad, float* _ensemble67grad_bias, float* _ensemble68grad, float* _ensemble68grad_inputs, float* _ensemble69grad, float* _ensemble69grad_inputs, long* _ensemble69mask_j, long* _ensemble69mask_k, float* _ensemble6grad, float* _ensemble6grad_inputs, float* _ensemble6grad_weights, float* _ensemble6inputs, float* _ensemble6weights, float* _ensemble70grad, float* _ensemble70grad_inputs, float* _ensemble70grad_weights, float* _ensemble70inputs, float* _ensemble70weights, float* _ensemble71grad, float* _ensemble71grad_bias, float* _ensemble72grad, float* _ensemble72grad_inputs, float* _ensemble73grad, float* _ensemble73grad_inputs, float* _ensemble73grad_inputs1, float* _ensemble73grad_inputs2, float* _ensemble73grad_inputs3, float* _ensemble74grad, float* _ensemble74grad_inputs, long* _ensemble74kernel, float* _ensemble75grad, float* _ensemble75grad_inputs, float* _ensemble75grad_weights, float* _ensemble75inputs, float* _ensemble75weights, float* _ensemble76grad, float* _ensemble76grad_bias, float* _ensemble77grad, float* _ensemble77grad_inputs, float* _ensemble78grad, float* _ensemble78grad_inputs, float* _ensemble78grad_weights, float* _ensemble78inputs, float* _ensemble78weights, float* _ensemble79grad, float* _ensemble79grad_bias, float* _ensemble7grad, float* _ensemble7grad_bias, float* _ensemble80grad, float* _ensemble80grad_inputs, float* _ensemble81grad, float* _ensemble81grad_inputs, float* _ensemble81grad_weights, float* _ensemble81inputs, float* _ensemble81weights, float* _ensemble82grad, float* _ensemble82grad_bias, float* _ensemble83grad, float* _ensemble83grad_inputs, float* _ensemble83grad_weights, float* _ensemble83inputs, float* _ensemble83weights, float* _ensemble84grad, float* _ensemble84grad_bias, float* _ensemble85grad, float* _ensemble85grad_inputs, float* _ensemble86grad, float* _ensemble86grad_inputs, float* _ensemble86grad_weights, float* _ensemble86inputs, float* _ensemble86weights, float* _ensemble87grad, float* _ensemble87grad_bias, float* _ensemble88grad, float* _ensemble88grad_inputs, float* _ensemble89grad, float* _ensemble89grad_inputs, float* _ensemble89grad_weights, float* _ensemble89inputs, float* _ensemble89weights, float* _ensemble8grad, float* _ensemble8grad_inputs, float* _ensemble90grad, float* _ensemble90grad_bias, float* _ensemble91grad, float* _ensemble91grad_inputs, float* _ensemble92grad, float* _ensemble92grad_inputs, float* _ensemble92grad_weights, float* _ensemble92inputs, float* _ensemble92weights, float* _ensemble93grad, float* _ensemble93grad_bias, float* _ensemble94grad, float* _ensemble94grad_inputs, float* _ensemble95grad, float* _ensemble95grad_inputs, float* _ensemble95grad_weights, float* _ensemble95inputs, float* _ensemble95weights, float* _ensemble96grad, float* _ensemble96grad_bias, float* _ensemble97grad, float* _ensemble97grad_inputs, float* _ensemble98grad, float* _ensemble98grad_inputs, long* _ensemble98mask_j, long* _ensemble98mask_k, float* _ensemble99grad, float* _ensemble99grad_inputs, float* _ensemble99grad_weights, float* _ensemble99inputs, float* _ensemble99weights, float* _ensemble9grad, float* _ensemble9grad_inputs, float* _ensemble9grad_weights, float* _ensemble9inputs, float* _ensemble9weights) {
    float (* ensemble9weights)[4][3][3][16][16] = (float (*)[4][3][3][16][16]) _ensemble9weights;
    __assume_aligned(ensemble9weights, 64);
    float (* ensemble9inputs)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble9inputs;
    __assume_aligned(ensemble9inputs, 64);
    float (* ensemble9grad_weights)[4][3][3][16][16] = (float (*)[4][3][3][16][16]) _ensemble9grad_weights;
    __assume_aligned(ensemble9grad_weights, 64);
    float (* ensemble9grad_inputs)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble9grad_inputs;
    __assume_aligned(ensemble9grad_inputs, 64);
    float (* ensemble9grad)[12][56][56][16] = (float (*)[12][56][56][16]) _ensemble9grad;
    __assume_aligned(ensemble9grad, 64);
    float (* ensemble99weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble99weights;
    __assume_aligned(ensemble99weights, 64);
    float (* ensemble99inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble99inputs;
    __assume_aligned(ensemble99inputs, 64);
    float (* ensemble99grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble99grad_weights;
    __assume_aligned(ensemble99grad_weights, 64);
    float (* ensemble99grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble99grad_inputs;
    __assume_aligned(ensemble99grad_inputs, 64);
    float (* ensemble99grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble99grad;
    __assume_aligned(ensemble99grad, 64);
    long (* ensemble98mask_k)[32][14][14][16] = (long (*)[32][14][14][16]) _ensemble98mask_k;
    __assume_aligned(ensemble98mask_k, 64);
    long (* ensemble98mask_j)[32][14][14][16] = (long (*)[32][14][14][16]) _ensemble98mask_j;
    __assume_aligned(ensemble98mask_j, 64);
    float (* ensemble98grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble98grad_inputs;
    __assume_aligned(ensemble98grad_inputs, 64);
    float (* ensemble98grad)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble98grad;
    __assume_aligned(ensemble98grad, 64);
    float (* ensemble97grad_inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble97grad_inputs;
    __assume_aligned(ensemble97grad_inputs, 64);
    float (* ensemble97grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble97grad;
    __assume_aligned(ensemble97grad, 64);
    float (* ensemble96grad_bias)[1][16] = (float (*)[1][16]) _ensemble96grad_bias;
    __assume_aligned(ensemble96grad_bias, 64);
    float (* ensemble96grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble96grad;
    __assume_aligned(ensemble96grad, 64);
    float (* ensemble95weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble95weights;
    __assume_aligned(ensemble95weights, 64);
    float (* ensemble95inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble95inputs;
    __assume_aligned(ensemble95inputs, 64);
    float (* ensemble95grad_weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble95grad_weights;
    __assume_aligned(ensemble95grad_weights, 64);
    float (* ensemble95grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble95grad_inputs;
    __assume_aligned(ensemble95grad_inputs, 64);
    float (* ensemble95grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble95grad;
    __assume_aligned(ensemble95grad, 64);
    float (* ensemble94grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble94grad_inputs;
    __assume_aligned(ensemble94grad_inputs, 64);
    float (* ensemble94grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble94grad;
    __assume_aligned(ensemble94grad, 64);
    float (* ensemble93grad_bias)[1][16] = (float (*)[1][16]) _ensemble93grad_bias;
    __assume_aligned(ensemble93grad_bias, 64);
    float (* ensemble93grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble93grad;
    __assume_aligned(ensemble93grad, 64);
    float (* ensemble92weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble92weights;
    __assume_aligned(ensemble92weights, 64);
    float (* ensemble92inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble92inputs;
    __assume_aligned(ensemble92inputs, 64);
    float (* ensemble92grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble92grad_weights;
    __assume_aligned(ensemble92grad_weights, 64);
    float (* ensemble92grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble92grad_inputs;
    __assume_aligned(ensemble92grad_inputs, 64);
    float (* ensemble92grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble92grad;
    __assume_aligned(ensemble92grad, 64);
    float (* ensemble91grad_inputs)[14][14][14][16] = (float (*)[14][14][14][16]) _ensemble91grad_inputs;
    __assume_aligned(ensemble91grad_inputs, 64);
    float (* ensemble91grad)[14][14][14][16] = (float (*)[14][14][14][16]) _ensemble91grad;
    __assume_aligned(ensemble91grad, 64);
    float (* ensemble90grad_bias)[1][16] = (float (*)[1][16]) _ensemble90grad_bias;
    __assume_aligned(ensemble90grad_bias, 64);
    float (* ensemble90grad)[14][14][14][16] = (float (*)[14][14][14][16]) _ensemble90grad;
    __assume_aligned(ensemble90grad, 64);
    float (* ensemble8grad_inputs)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble8grad_inputs;
    __assume_aligned(ensemble8grad_inputs, 64);
    float (* ensemble8grad)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble8grad;
    __assume_aligned(ensemble8grad, 64);
    float (* ensemble89weights)[7][3][3][16][16] = (float (*)[7][3][3][16][16]) _ensemble89weights;
    __assume_aligned(ensemble89weights, 64);
    float (* ensemble89inputs)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble89inputs;
    __assume_aligned(ensemble89inputs, 64);
    float (* ensemble89grad_weights)[7][3][3][16][16] = (float (*)[7][3][3][16][16]) _ensemble89grad_weights;
    __assume_aligned(ensemble89grad_weights, 64);
    float (* ensemble89grad_inputs)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble89grad_inputs;
    __assume_aligned(ensemble89grad_inputs, 64);
    float (* ensemble89grad)[14][14][14][16] = (float (*)[14][14][14][16]) _ensemble89grad;
    __assume_aligned(ensemble89grad, 64);
    float (* ensemble88grad_inputs)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble88grad_inputs;
    __assume_aligned(ensemble88grad_inputs, 64);
    float (* ensemble88grad)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble88grad;
    __assume_aligned(ensemble88grad, 64);
    float (* ensemble87grad_bias)[1][16] = (float (*)[1][16]) _ensemble87grad_bias;
    __assume_aligned(ensemble87grad_bias, 64);
    float (* ensemble87grad)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble87grad;
    __assume_aligned(ensemble87grad, 64);
    float (* ensemble86weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble86weights;
    __assume_aligned(ensemble86weights, 64);
    float (* ensemble86inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble86inputs;
    __assume_aligned(ensemble86inputs, 64);
    float (* ensemble86grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble86grad_weights;
    __assume_aligned(ensemble86grad_weights, 64);
    float (* ensemble86grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble86grad_inputs;
    __assume_aligned(ensemble86grad_inputs, 64);
    float (* ensemble86grad)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble86grad;
    __assume_aligned(ensemble86grad, 64);
    float (* ensemble85grad_inputs)[10][14][14][16] = (float (*)[10][14][14][16]) _ensemble85grad_inputs;
    __assume_aligned(ensemble85grad_inputs, 64);
    float (* ensemble85grad)[10][14][14][16] = (float (*)[10][14][14][16]) _ensemble85grad;
    __assume_aligned(ensemble85grad, 64);
    float (* ensemble84grad_bias)[1][16] = (float (*)[1][16]) _ensemble84grad_bias;
    __assume_aligned(ensemble84grad_bias, 64);
    float (* ensemble84grad)[10][14][14][16] = (float (*)[10][14][14][16]) _ensemble84grad;
    __assume_aligned(ensemble84grad, 64);
    float (* ensemble83weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble83weights;
    __assume_aligned(ensemble83weights, 64);
    float (* ensemble83inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble83inputs;
    __assume_aligned(ensemble83inputs, 64);
    float (* ensemble83grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble83grad_weights;
    __assume_aligned(ensemble83grad_weights, 64);
    float (* ensemble83grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble83grad_inputs;
    __assume_aligned(ensemble83grad_inputs, 64);
    float (* ensemble83grad)[10][14][14][16] = (float (*)[10][14][14][16]) _ensemble83grad;
    __assume_aligned(ensemble83grad, 64);
    float (* ensemble82grad_bias)[63][1][16] = (float (*)[63][1][16]) _ensemble82grad_bias;
    __assume_aligned(ensemble82grad_bias, 64);
    float (* ensemble82grad)[63][16] = (float (*)[63][16]) _ensemble82grad;
    __assume_aligned(ensemble82grad, 64);
    float (* ensemble81weights)[64][16][16] = (float (*)[64][16][16]) _ensemble81weights;
    __assume_aligned(ensemble81weights, 64);
    float (* ensemble81inputs)[64][16] = (float (*)[64][16]) _ensemble81inputs;
    __assume_aligned(ensemble81inputs, 64);
    float (* ensemble81grad_weights)[64][16][16] = (float (*)[64][16][16]) _ensemble81grad_weights;
    __assume_aligned(ensemble81grad_weights, 64);
    float (* ensemble81grad_inputs)[64][16] = (float (*)[64][16]) _ensemble81grad_inputs;
    __assume_aligned(ensemble81grad_inputs, 64);
    float (* ensemble81grad)[63][16] = (float (*)[63][16]) _ensemble81grad;
    __assume_aligned(ensemble81grad, 64);
    float (* ensemble80grad_inputs)[64][16] = (float (*)[64][16]) _ensemble80grad_inputs;
    __assume_aligned(ensemble80grad_inputs, 64);
    float (* ensemble80grad)[64][16] = (float (*)[64][16]) _ensemble80grad;
    __assume_aligned(ensemble80grad, 64);
    float (* ensemble7grad_bias)[1][16] = (float (*)[1][16]) _ensemble7grad_bias;
    __assume_aligned(ensemble7grad_bias, 64);
    float (* ensemble7grad)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble7grad;
    __assume_aligned(ensemble7grad, 64);
    float (* ensemble79grad_bias)[64][1][16] = (float (*)[64][1][16]) _ensemble79grad_bias;
    __assume_aligned(ensemble79grad_bias, 64);
    float (* ensemble79grad)[64][16] = (float (*)[64][16]) _ensemble79grad;
    __assume_aligned(ensemble79grad, 64);
    float (* ensemble78weights)[8][4][4][16][16] = (float (*)[8][4][4][16][16]) _ensemble78weights;
    __assume_aligned(ensemble78weights, 64);
    float (* ensemble78inputs)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble78inputs;
    __assume_aligned(ensemble78inputs, 64);
    float (* ensemble78grad_weights)[8][4][4][16][16] = (float (*)[8][4][4][16][16]) _ensemble78grad_weights;
    __assume_aligned(ensemble78grad_weights, 64);
    float (* ensemble78grad_inputs)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble78grad_inputs;
    __assume_aligned(ensemble78grad_inputs, 64);
    float (* ensemble78grad)[64][16] = (float (*)[64][16]) _ensemble78grad;
    __assume_aligned(ensemble78grad, 64);
    float (* ensemble77grad_inputs)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble77grad_inputs;
    __assume_aligned(ensemble77grad_inputs, 64);
    float (* ensemble77grad)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble77grad;
    __assume_aligned(ensemble77grad, 64);
    float (* ensemble76grad_bias)[1][16] = (float (*)[1][16]) _ensemble76grad_bias;
    __assume_aligned(ensemble76grad_bias, 64);
    float (* ensemble76grad)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble76grad;
    __assume_aligned(ensemble76grad, 64);
    float (* ensemble75weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble75weights;
    __assume_aligned(ensemble75weights, 64);
    float (* ensemble75inputs)[32][4][4][16] = (float (*)[32][4][4][16]) _ensemble75inputs;
    __assume_aligned(ensemble75inputs, 64);
    float (* ensemble75grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble75grad_weights;
    __assume_aligned(ensemble75grad_weights, 64);
    float (* ensemble75grad_inputs)[32][4][4][16] = (float (*)[32][4][4][16]) _ensemble75grad_inputs;
    __assume_aligned(ensemble75grad_inputs, 64);
    float (* ensemble75grad)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble75grad;
    __assume_aligned(ensemble75grad, 64);
    long (* ensemble74kernel)[32][4][4][16] = (long (*)[32][4][4][16]) _ensemble74kernel;
    __assume_aligned(ensemble74kernel, 64);
    float (* ensemble74grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble74grad_inputs;
    __assume_aligned(ensemble74grad_inputs, 64);
    float (* ensemble74grad)[32][4][4][16] = (float (*)[32][4][4][16]) _ensemble74grad;
    __assume_aligned(ensemble74grad, 64);
    float (* ensemble73grad_inputs3)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble73grad_inputs3;
    __assume_aligned(ensemble73grad_inputs3, 64);
    float (* ensemble73grad_inputs2)[3][14][14][16] = (float (*)[3][14][14][16]) _ensemble73grad_inputs2;
    __assume_aligned(ensemble73grad_inputs2, 64);
    float (* ensemble73grad_inputs1)[13][14][14][16] = (float (*)[13][14][14][16]) _ensemble73grad_inputs1;
    __assume_aligned(ensemble73grad_inputs1, 64);
    float (* ensemble73grad_inputs)[12][14][14][16] = (float (*)[12][14][14][16]) _ensemble73grad_inputs;
    __assume_aligned(ensemble73grad_inputs, 64);
    float (* ensemble73grad)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble73grad;
    __assume_aligned(ensemble73grad, 64);
    float (* ensemble72grad_inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble72grad_inputs;
    __assume_aligned(ensemble72grad_inputs, 64);
    float (* ensemble72grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble72grad;
    __assume_aligned(ensemble72grad, 64);
    float (* ensemble71grad_bias)[1][16] = (float (*)[1][16]) _ensemble71grad_bias;
    __assume_aligned(ensemble71grad_bias, 64);
    float (* ensemble71grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble71grad;
    __assume_aligned(ensemble71grad, 64);
    float (* ensemble70weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble70weights;
    __assume_aligned(ensemble70weights, 64);
    float (* ensemble70inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble70inputs;
    __assume_aligned(ensemble70inputs, 64);
    float (* ensemble70grad_weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble70grad_weights;
    __assume_aligned(ensemble70grad_weights, 64);
    float (* ensemble70grad_inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble70grad_inputs;
    __assume_aligned(ensemble70grad_inputs, 64);
    float (* ensemble70grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble70grad;
    __assume_aligned(ensemble70grad, 64);
    float (* ensemble6weights)[4][1][1][16][16] = (float (*)[4][1][1][16][16]) _ensemble6weights;
    __assume_aligned(ensemble6weights, 64);
    float (* ensemble6inputs)[4][56][56][16] = (float (*)[4][56][56][16]) _ensemble6inputs;
    __assume_aligned(ensemble6inputs, 64);
    float (* ensemble6grad_weights)[4][1][1][16][16] = (float (*)[4][1][1][16][16]) _ensemble6grad_weights;
    __assume_aligned(ensemble6grad_weights, 64);
    float (* ensemble6grad_inputs)[4][56][56][16] = (float (*)[4][56][56][16]) _ensemble6grad_inputs;
    __assume_aligned(ensemble6grad_inputs, 64);
    float (* ensemble6grad)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble6grad;
    __assume_aligned(ensemble6grad, 64);
    long (* ensemble69mask_k)[30][14][14][16] = (long (*)[30][14][14][16]) _ensemble69mask_k;
    __assume_aligned(ensemble69mask_k, 64);
    long (* ensemble69mask_j)[30][14][14][16] = (long (*)[30][14][14][16]) _ensemble69mask_j;
    __assume_aligned(ensemble69mask_j, 64);
    float (* ensemble69grad_inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble69grad_inputs;
    __assume_aligned(ensemble69grad_inputs, 64);
    float (* ensemble69grad)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble69grad;
    __assume_aligned(ensemble69grad, 64);
    float (* ensemble68grad_inputs)[3][14][14][16] = (float (*)[3][14][14][16]) _ensemble68grad_inputs;
    __assume_aligned(ensemble68grad_inputs, 64);
    float (* ensemble68grad)[3][14][14][16] = (float (*)[3][14][14][16]) _ensemble68grad;
    __assume_aligned(ensemble68grad, 64);
    float (* ensemble67grad_bias)[1][16] = (float (*)[1][16]) _ensemble67grad_bias;
    __assume_aligned(ensemble67grad_bias, 64);
    float (* ensemble67grad)[3][14][14][16] = (float (*)[3][14][14][16]) _ensemble67grad;
    __assume_aligned(ensemble67grad, 64);
    float (* ensemble66weights)[1][5][5][16][16] = (float (*)[1][5][5][16][16]) _ensemble66weights;
    __assume_aligned(ensemble66weights, 64);
    float (* ensemble66inputs)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble66inputs;
    __assume_aligned(ensemble66inputs, 64);
    float (* ensemble66grad_weights)[1][5][5][16][16] = (float (*)[1][5][5][16][16]) _ensemble66grad_weights;
    __assume_aligned(ensemble66grad_weights, 64);
    float (* ensemble66grad_inputs)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble66grad_inputs;
    __assume_aligned(ensemble66grad_inputs, 64);
    float (* ensemble66grad)[3][14][14][16] = (float (*)[3][14][14][16]) _ensemble66grad;
    __assume_aligned(ensemble66grad, 64);
    float (* ensemble65grad_inputs)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble65grad_inputs;
    __assume_aligned(ensemble65grad_inputs, 64);
    float (* ensemble65grad)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble65grad;
    __assume_aligned(ensemble65grad, 64);
    float (* ensemble64grad_bias)[1][16] = (float (*)[1][16]) _ensemble64grad_bias;
    __assume_aligned(ensemble64grad_bias, 64);
    float (* ensemble64grad)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble64grad;
    __assume_aligned(ensemble64grad, 64);
    float (* ensemble63weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble63weights;
    __assume_aligned(ensemble63weights, 64);
    float (* ensemble63inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble63inputs;
    __assume_aligned(ensemble63inputs, 64);
    float (* ensemble63grad_weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble63grad_weights;
    __assume_aligned(ensemble63grad_weights, 64);
    float (* ensemble63grad_inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble63grad_inputs;
    __assume_aligned(ensemble63grad_inputs, 64);
    float (* ensemble63grad)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble63grad;
    __assume_aligned(ensemble63grad, 64);
    float (* ensemble62grad_inputs)[13][14][14][16] = (float (*)[13][14][14][16]) _ensemble62grad_inputs;
    __assume_aligned(ensemble62grad_inputs, 64);
    float (* ensemble62grad)[13][14][14][16] = (float (*)[13][14][14][16]) _ensemble62grad;
    __assume_aligned(ensemble62grad, 64);
    float (* ensemble61grad_bias)[1][16] = (float (*)[1][16]) _ensemble61grad_bias;
    __assume_aligned(ensemble61grad_bias, 64);
    float (* ensemble61grad)[13][14][14][16] = (float (*)[13][14][14][16]) _ensemble61grad;
    __assume_aligned(ensemble61grad, 64);
    float (* ensemble60weights)[6][3][3][16][16] = (float (*)[6][3][3][16][16]) _ensemble60weights;
    __assume_aligned(ensemble60weights, 64);
    float (* ensemble60inputs)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble60inputs;
    __assume_aligned(ensemble60inputs, 64);
    float (* ensemble60grad_weights)[6][3][3][16][16] = (float (*)[6][3][3][16][16]) _ensemble60grad_weights;
    __assume_aligned(ensemble60grad_weights, 64);
    float (* ensemble60grad_inputs)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble60grad_inputs;
    __assume_aligned(ensemble60grad_inputs, 64);
    float (* ensemble60grad)[13][14][14][16] = (float (*)[13][14][14][16]) _ensemble60grad;
    __assume_aligned(ensemble60grad, 64);
    long (* ensemble5mask_k)[4][56][56][16] = (long (*)[4][56][56][16]) _ensemble5mask_k;
    __assume_aligned(ensemble5mask_k, 64);
    long (* ensemble5mask_j)[4][56][56][16] = (long (*)[4][56][56][16]) _ensemble5mask_j;
    __assume_aligned(ensemble5mask_j, 64);
    float (* ensemble5grad_inputs)[4][112][112][16] = (float (*)[4][112][112][16]) _ensemble5grad_inputs;
    __assume_aligned(ensemble5grad_inputs, 64);
    float (* ensemble5grad)[4][56][56][16] = (float (*)[4][56][56][16]) _ensemble5grad;
    __assume_aligned(ensemble5grad, 64);
    float (* ensemble59grad_inputs)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble59grad_inputs;
    __assume_aligned(ensemble59grad_inputs, 64);
    float (* ensemble59grad)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble59grad;
    __assume_aligned(ensemble59grad, 64);
    float (* ensemble58grad_bias)[1][16] = (float (*)[1][16]) _ensemble58grad_bias;
    __assume_aligned(ensemble58grad_bias, 64);
    float (* ensemble58grad)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble58grad;
    __assume_aligned(ensemble58grad, 64);
    float (* ensemble57weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble57weights;
    __assume_aligned(ensemble57weights, 64);
    float (* ensemble57inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble57inputs;
    __assume_aligned(ensemble57inputs, 64);
    float (* ensemble57grad_weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble57grad_weights;
    __assume_aligned(ensemble57grad_weights, 64);
    float (* ensemble57grad_inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble57grad_inputs;
    __assume_aligned(ensemble57grad_inputs, 64);
    float (* ensemble57grad)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble57grad;
    __assume_aligned(ensemble57grad, 64);
    float (* ensemble56grad_inputs)[12][14][14][16] = (float (*)[12][14][14][16]) _ensemble56grad_inputs;
    __assume_aligned(ensemble56grad_inputs, 64);
    float (* ensemble56grad)[12][14][14][16] = (float (*)[12][14][14][16]) _ensemble56grad;
    __assume_aligned(ensemble56grad, 64);
    float (* ensemble55grad_bias)[1][16] = (float (*)[1][16]) _ensemble55grad_bias;
    __assume_aligned(ensemble55grad_bias, 64);
    float (* ensemble55grad)[12][14][14][16] = (float (*)[12][14][14][16]) _ensemble55grad;
    __assume_aligned(ensemble55grad, 64);
    float (* ensemble54weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble54weights;
    __assume_aligned(ensemble54weights, 64);
    float (* ensemble54inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble54inputs;
    __assume_aligned(ensemble54inputs, 64);
    float (* ensemble54grad_weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble54grad_weights;
    __assume_aligned(ensemble54grad_weights, 64);
    float (* ensemble54grad_inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble54grad_inputs;
    __assume_aligned(ensemble54grad_inputs, 64);
    float (* ensemble54grad)[12][14][14][16] = (float (*)[12][14][14][16]) _ensemble54grad;
    __assume_aligned(ensemble54grad, 64);
    long (* ensemble53mask_k)[30][14][14][16] = (long (*)[30][14][14][16]) _ensemble53mask_k;
    __assume_aligned(ensemble53mask_k, 64);
    long (* ensemble53mask_j)[30][14][14][16] = (long (*)[30][14][14][16]) _ensemble53mask_j;
    __assume_aligned(ensemble53mask_j, 64);
    float (* ensemble53grad_inputs)[30][28][28][16] = (float (*)[30][28][28][16]) _ensemble53grad_inputs;
    __assume_aligned(ensemble53grad_inputs, 64);
    float (* ensemble53grad)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble53grad;
    __assume_aligned(ensemble53grad, 64);
    float (* ensemble52grad_inputs3)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble52grad_inputs3;
    __assume_aligned(ensemble52grad_inputs3, 64);
    float (* ensemble52grad_inputs2)[6][28][28][16] = (float (*)[6][28][28][16]) _ensemble52grad_inputs2;
    __assume_aligned(ensemble52grad_inputs2, 64);
    float (* ensemble52grad_inputs1)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble52grad_inputs1;
    __assume_aligned(ensemble52grad_inputs1, 64);
    float (* ensemble52grad_inputs)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble52grad_inputs;
    __assume_aligned(ensemble52grad_inputs, 64);
    float (* ensemble52grad)[30][28][28][16] = (float (*)[30][28][28][16]) _ensemble52grad;
    __assume_aligned(ensemble52grad, 64);
    float (* ensemble51grad_inputs)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble51grad_inputs;
    __assume_aligned(ensemble51grad_inputs, 64);
    float (* ensemble51grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble51grad;
    __assume_aligned(ensemble51grad, 64);
    float (* ensemble50grad_bias)[1][16] = (float (*)[1][16]) _ensemble50grad_bias;
    __assume_aligned(ensemble50grad_bias, 64);
    float (* ensemble50grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble50grad;
    __assume_aligned(ensemble50grad, 64);
    float (* ensemble4grad_inputs)[4][112][112][16] = (float (*)[4][112][112][16]) _ensemble4grad_inputs;
    __assume_aligned(ensemble4grad_inputs, 64);
    float (* ensemble4grad)[4][112][112][16] = (float (*)[4][112][112][16]) _ensemble4grad;
    __assume_aligned(ensemble4grad, 64);
    float (* ensemble49weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble49weights;
    __assume_aligned(ensemble49weights, 64);
    float (* ensemble49inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble49inputs;
    __assume_aligned(ensemble49inputs, 64);
    float (* ensemble49grad_weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble49grad_weights;
    __assume_aligned(ensemble49grad_weights, 64);
    float (* ensemble49grad_inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble49grad_inputs;
    __assume_aligned(ensemble49grad_inputs, 64);
    float (* ensemble49grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble49grad;
    __assume_aligned(ensemble49grad, 64);
    long (* ensemble48mask_k)[16][28][28][16] = (long (*)[16][28][28][16]) _ensemble48mask_k;
    __assume_aligned(ensemble48mask_k, 64);
    long (* ensemble48mask_j)[16][28][28][16] = (long (*)[16][28][28][16]) _ensemble48mask_j;
    __assume_aligned(ensemble48mask_j, 64);
    float (* ensemble48grad_inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble48grad_inputs;
    __assume_aligned(ensemble48grad_inputs, 64);
    float (* ensemble48grad)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble48grad;
    __assume_aligned(ensemble48grad, 64);
    float (* ensemble47grad_inputs)[6][28][28][16] = (float (*)[6][28][28][16]) _ensemble47grad_inputs;
    __assume_aligned(ensemble47grad_inputs, 64);
    float (* ensemble47grad)[6][28][28][16] = (float (*)[6][28][28][16]) _ensemble47grad;
    __assume_aligned(ensemble47grad, 64);
    float (* ensemble46grad_bias)[1][16] = (float (*)[1][16]) _ensemble46grad_bias;
    __assume_aligned(ensemble46grad_bias, 64);
    float (* ensemble46grad)[6][28][28][16] = (float (*)[6][28][28][16]) _ensemble46grad;
    __assume_aligned(ensemble46grad, 64);
    float (* ensemble45weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble45weights;
    __assume_aligned(ensemble45weights, 64);
    float (* ensemble45inputs)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble45inputs;
    __assume_aligned(ensemble45inputs, 64);
    float (* ensemble45grad_weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble45grad_weights;
    __assume_aligned(ensemble45grad_weights, 64);
    float (* ensemble45grad_inputs)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble45grad_inputs;
    __assume_aligned(ensemble45grad_inputs, 64);
    float (* ensemble45grad)[6][28][28][16] = (float (*)[6][28][28][16]) _ensemble45grad;
    __assume_aligned(ensemble45grad, 64);
    float (* ensemble44grad_inputs)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble44grad_inputs;
    __assume_aligned(ensemble44grad_inputs, 64);
    float (* ensemble44grad)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble44grad;
    __assume_aligned(ensemble44grad, 64);
    float (* ensemble43grad_bias)[1][16] = (float (*)[1][16]) _ensemble43grad_bias;
    __assume_aligned(ensemble43grad_bias, 64);
    float (* ensemble43grad)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble43grad;
    __assume_aligned(ensemble43grad, 64);
    float (* ensemble42weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble42weights;
    __assume_aligned(ensemble42weights, 64);
    float (* ensemble42inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble42inputs;
    __assume_aligned(ensemble42inputs, 64);
    float (* ensemble42grad_weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble42grad_weights;
    __assume_aligned(ensemble42grad_weights, 64);
    float (* ensemble42grad_inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble42grad_inputs;
    __assume_aligned(ensemble42grad_inputs, 64);
    float (* ensemble42grad)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble42grad;
    __assume_aligned(ensemble42grad, 64);
    float (* ensemble41grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble41grad_inputs;
    __assume_aligned(ensemble41grad_inputs, 64);
    float (* ensemble41grad)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble41grad;
    __assume_aligned(ensemble41grad, 64);
    float (* ensemble40grad_bias)[1][16] = (float (*)[1][16]) _ensemble40grad_bias;
    __assume_aligned(ensemble40grad_bias, 64);
    float (* ensemble40grad)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble40grad;
    __assume_aligned(ensemble40grad, 64);
    float (* ensemble3grad_bias)[1][16] = (float (*)[1][16]) _ensemble3grad_bias;
    __assume_aligned(ensemble3grad_bias, 64);
    float (* ensemble3grad)[4][112][112][16] = (float (*)[4][112][112][16]) _ensemble3grad;
    __assume_aligned(ensemble3grad, 64);
    float (* ensemble39weights)[8][3][3][16][16] = (float (*)[8][3][3][16][16]) _ensemble39weights;
    __assume_aligned(ensemble39weights, 64);
    float (* ensemble39inputs)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble39inputs;
    __assume_aligned(ensemble39inputs, 64);
    float (* ensemble39grad_weights)[8][3][3][16][16] = (float (*)[8][3][3][16][16]) _ensemble39grad_weights;
    __assume_aligned(ensemble39grad_weights, 64);
    float (* ensemble39grad_inputs)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble39grad_inputs;
    __assume_aligned(ensemble39grad_inputs, 64);
    float (* ensemble39grad)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble39grad;
    __assume_aligned(ensemble39grad, 64);
    float (* ensemble38grad_inputs)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble38grad_inputs;
    __assume_aligned(ensemble38grad_inputs, 64);
    float (* ensemble38grad)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble38grad;
    __assume_aligned(ensemble38grad, 64);
    float (* ensemble37grad_bias)[1][16] = (float (*)[1][16]) _ensemble37grad_bias;
    __assume_aligned(ensemble37grad_bias, 64);
    float (* ensemble37grad)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble37grad;
    __assume_aligned(ensemble37grad, 64);
    float (* ensemble36weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble36weights;
    __assume_aligned(ensemble36weights, 64);
    float (* ensemble36inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble36inputs;
    __assume_aligned(ensemble36inputs, 64);
    float (* ensemble36grad_weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble36grad_weights;
    __assume_aligned(ensemble36grad_weights, 64);
    float (* ensemble36grad_inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble36grad_inputs;
    __assume_aligned(ensemble36grad_inputs, 64);
    float (* ensemble36grad)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble36grad;
    __assume_aligned(ensemble36grad, 64);
    float (* ensemble35grad_inputs)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble35grad_inputs;
    __assume_aligned(ensemble35grad_inputs, 64);
    float (* ensemble35grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble35grad;
    __assume_aligned(ensemble35grad, 64);
    float (* ensemble34grad_bias)[1][16] = (float (*)[1][16]) _ensemble34grad_bias;
    __assume_aligned(ensemble34grad_bias, 64);
    float (* ensemble34grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble34grad;
    __assume_aligned(ensemble34grad, 64);
    float (* ensemble33weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble33weights;
    __assume_aligned(ensemble33weights, 64);
    float (* ensemble33inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble33inputs;
    __assume_aligned(ensemble33inputs, 64);
    float (* ensemble33grad_weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble33grad_weights;
    __assume_aligned(ensemble33grad_weights, 64);
    float (* ensemble33grad_inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble33grad_inputs;
    __assume_aligned(ensemble33grad_inputs, 64);
    float (* ensemble33grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble33grad;
    __assume_aligned(ensemble33grad, 64);
    float (* ensemble32grad_inputs3)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble32grad_inputs3;
    __assume_aligned(ensemble32grad_inputs3, 64);
    float (* ensemble32grad_inputs2)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble32grad_inputs2;
    __assume_aligned(ensemble32grad_inputs2, 64);
    float (* ensemble32grad_inputs1)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble32grad_inputs1;
    __assume_aligned(ensemble32grad_inputs1, 64);
    float (* ensemble32grad_inputs)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble32grad_inputs;
    __assume_aligned(ensemble32grad_inputs, 64);
    float (* ensemble32grad)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble32grad;
    __assume_aligned(ensemble32grad, 64);
    float (* ensemble31grad_inputs)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble31grad_inputs;
    __assume_aligned(ensemble31grad_inputs, 64);
    float (* ensemble31grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble31grad;
    __assume_aligned(ensemble31grad, 64);
    float (* ensemble30grad_bias)[1][16] = (float (*)[1][16]) _ensemble30grad_bias;
    __assume_aligned(ensemble30grad_bias, 64);
    float (* ensemble30grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble30grad;
    __assume_aligned(ensemble30grad, 64);
    float (* ensemble2inputs)[1][230][230][16] = (float (*)[1][230][230][16]) _ensemble2inputs;
    __assume_aligned(ensemble2inputs, 64);
    float (* ensemble2grad_weights)[1][7][7][16][16] = (float (*)[1][7][7][16][16]) _ensemble2grad_weights;
    __assume_aligned(ensemble2grad_weights, 64);
    float (* ensemble2grad)[4][112][112][16] = (float (*)[4][112][112][16]) _ensemble2grad;
    __assume_aligned(ensemble2grad, 64);
    float (* ensemble29weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble29weights;
    __assume_aligned(ensemble29weights, 64);
    float (* ensemble29inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble29inputs;
    __assume_aligned(ensemble29inputs, 64);
    float (* ensemble29grad_weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble29grad_weights;
    __assume_aligned(ensemble29grad_weights, 64);
    float (* ensemble29grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble29grad_inputs;
    __assume_aligned(ensemble29grad_inputs, 64);
    float (* ensemble29grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble29grad;
    __assume_aligned(ensemble29grad, 64);
    long (* ensemble28mask_k)[12][28][28][16] = (long (*)[12][28][28][16]) _ensemble28mask_k;
    __assume_aligned(ensemble28mask_k, 64);
    long (* ensemble28mask_j)[12][28][28][16] = (long (*)[12][28][28][16]) _ensemble28mask_j;
    __assume_aligned(ensemble28mask_j, 64);
    float (* ensemble28grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble28grad_inputs;
    __assume_aligned(ensemble28grad_inputs, 64);
    float (* ensemble28grad)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble28grad;
    __assume_aligned(ensemble28grad, 64);
    float (* ensemble27grad_inputs)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble27grad_inputs;
    __assume_aligned(ensemble27grad_inputs, 64);
    float (* ensemble27grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble27grad;
    __assume_aligned(ensemble27grad, 64);
    float (* ensemble26grad_bias)[1][16] = (float (*)[1][16]) _ensemble26grad_bias;
    __assume_aligned(ensemble26grad_bias, 64);
    float (* ensemble26grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble26grad;
    __assume_aligned(ensemble26grad, 64);
    float (* ensemble25weights)[1][5][5][16][16] = (float (*)[1][5][5][16][16]) _ensemble25weights;
    __assume_aligned(ensemble25weights, 64);
    float (* ensemble25inputs)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble25inputs;
    __assume_aligned(ensemble25inputs, 64);
    float (* ensemble25grad_weights)[1][5][5][16][16] = (float (*)[1][5][5][16][16]) _ensemble25grad_weights;
    __assume_aligned(ensemble25grad_weights, 64);
    float (* ensemble25grad_inputs)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble25grad_inputs;
    __assume_aligned(ensemble25grad_inputs, 64);
    float (* ensemble25grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble25grad;
    __assume_aligned(ensemble25grad, 64);
    float (* ensemble24grad_inputs)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble24grad_inputs;
    __assume_aligned(ensemble24grad_inputs, 64);
    float (* ensemble24grad)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble24grad;
    __assume_aligned(ensemble24grad, 64);
    float (* ensemble23grad_bias)[1][16] = (float (*)[1][16]) _ensemble23grad_bias;
    __assume_aligned(ensemble23grad_bias, 64);
    float (* ensemble23grad)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble23grad;
    __assume_aligned(ensemble23grad, 64);
    float (* ensemble22weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble22weights;
    __assume_aligned(ensemble22weights, 64);
    float (* ensemble22inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble22inputs;
    __assume_aligned(ensemble22inputs, 64);
    float (* ensemble22grad_weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble22grad_weights;
    __assume_aligned(ensemble22grad_weights, 64);
    float (* ensemble22grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble22grad_inputs;
    __assume_aligned(ensemble22grad_inputs, 64);
    float (* ensemble22grad)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble22grad;
    __assume_aligned(ensemble22grad, 64);
    float (* ensemble21grad_inputs)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble21grad_inputs;
    __assume_aligned(ensemble21grad_inputs, 64);
    float (* ensemble21grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble21grad;
    __assume_aligned(ensemble21grad, 64);
    float (* ensemble20grad_bias)[1][16] = (float (*)[1][16]) _ensemble20grad_bias;
    __assume_aligned(ensemble20grad_bias, 64);
    float (* ensemble20grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble20grad;
    __assume_aligned(ensemble20grad, 64);
    float (* ensemble19weights)[6][3][3][16][16] = (float (*)[6][3][3][16][16]) _ensemble19weights;
    __assume_aligned(ensemble19weights, 64);
    float (* ensemble19inputs)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble19inputs;
    __assume_aligned(ensemble19inputs, 64);
    float (* ensemble19grad_weights)[6][3][3][16][16] = (float (*)[6][3][3][16][16]) _ensemble19grad_weights;
    __assume_aligned(ensemble19grad_weights, 64);
    float (* ensemble19grad_inputs)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble19grad_inputs;
    __assume_aligned(ensemble19grad_inputs, 64);
    float (* ensemble19grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble19grad;
    __assume_aligned(ensemble19grad, 64);
    float (* ensemble18grad_inputs)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble18grad_inputs;
    __assume_aligned(ensemble18grad_inputs, 64);
    float (* ensemble18grad)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble18grad;
    __assume_aligned(ensemble18grad, 64);
    float (* ensemble17grad_bias)[1][16] = (float (*)[1][16]) _ensemble17grad_bias;
    __assume_aligned(ensemble17grad_bias, 64);
    float (* ensemble17grad)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble17grad;
    __assume_aligned(ensemble17grad, 64);
    float (* ensemble16weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble16weights;
    __assume_aligned(ensemble16weights, 64);
    float (* ensemble16inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble16inputs;
    __assume_aligned(ensemble16inputs, 64);
    float (* ensemble16grad_weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble16grad_weights;
    __assume_aligned(ensemble16grad_weights, 64);
    float (* ensemble16grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble16grad_inputs;
    __assume_aligned(ensemble16grad_inputs, 64);
    float (* ensemble16grad)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble16grad;
    __assume_aligned(ensemble16grad, 64);
    float (* ensemble15grad_inputs)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble15grad_inputs;
    __assume_aligned(ensemble15grad_inputs, 64);
    float (* ensemble15grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble15grad;
    __assume_aligned(ensemble15grad, 64);
    float (* ensemble14grad_bias)[1][16] = (float (*)[1][16]) _ensemble14grad_bias;
    __assume_aligned(ensemble14grad_bias, 64);
    float (* ensemble14grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble14grad;
    __assume_aligned(ensemble14grad, 64);
    float (* ensemble13weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble13weights;
    __assume_aligned(ensemble13weights, 64);
    float (* ensemble13inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble13inputs;
    __assume_aligned(ensemble13inputs, 64);
    float (* ensemble13grad_weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble13grad_weights;
    __assume_aligned(ensemble13grad_weights, 64);
    float (* ensemble13grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble13grad_inputs;
    __assume_aligned(ensemble13grad_inputs, 64);
    float (* ensemble13grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble13grad;
    __assume_aligned(ensemble13grad, 64);
    long (* ensemble12mask_k)[12][28][28][16] = (long (*)[12][28][28][16]) _ensemble12mask_k;
    __assume_aligned(ensemble12mask_k, 64);
    long (* ensemble12mask_j)[12][28][28][16] = (long (*)[12][28][28][16]) _ensemble12mask_j;
    __assume_aligned(ensemble12mask_j, 64);
    float (* ensemble12grad_inputs)[12][56][56][16] = (float (*)[12][56][56][16]) _ensemble12grad_inputs;
    __assume_aligned(ensemble12grad_inputs, 64);
    float (* ensemble12grad)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble12grad;
    __assume_aligned(ensemble12grad, 64);
    float (* ensemble11grad_inputs)[12][56][56][16] = (float (*)[12][56][56][16]) _ensemble11grad_inputs;
    __assume_aligned(ensemble11grad_inputs, 64);
    float (* ensemble11grad)[12][56][56][16] = (float (*)[12][56][56][16]) _ensemble11grad;
    __assume_aligned(ensemble11grad, 64);
    float (* ensemble117grad_inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble117grad_inputs;
    __assume_aligned(ensemble117grad_inputs, 64);
    float (* ensemble117grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble117grad;
    __assume_aligned(ensemble117grad, 64);
    float (* ensemble116grad_bias)[1][16] = (float (*)[1][16]) _ensemble116grad_bias;
    __assume_aligned(ensemble116grad_bias, 64);
    float (* ensemble116grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble116grad;
    __assume_aligned(ensemble116grad, 64);
    float (* ensemble115weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble115weights;
    __assume_aligned(ensemble115weights, 64);
    float (* ensemble115inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble115inputs;
    __assume_aligned(ensemble115inputs, 64);
    float (* ensemble115grad_weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble115grad_weights;
    __assume_aligned(ensemble115grad_weights, 64);
    float (* ensemble115grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble115grad_inputs;
    __assume_aligned(ensemble115grad_inputs, 64);
    float (* ensemble115grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble115grad;
    __assume_aligned(ensemble115grad, 64);
    float (* ensemble114grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble114grad_inputs;
    __assume_aligned(ensemble114grad_inputs, 64);
    float (* ensemble114grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble114grad;
    __assume_aligned(ensemble114grad, 64);
    float (* ensemble113grad_bias)[1][16] = (float (*)[1][16]) _ensemble113grad_bias;
    __assume_aligned(ensemble113grad_bias, 64);
    float (* ensemble113grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble113grad;
    __assume_aligned(ensemble113grad, 64);
    float (* ensemble112weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble112weights;
    __assume_aligned(ensemble112weights, 64);
    float (* ensemble112inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble112inputs;
    __assume_aligned(ensemble112inputs, 64);
    float (* ensemble112grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble112grad_weights;
    __assume_aligned(ensemble112grad_weights, 64);
    float (* ensemble112grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble112grad_inputs;
    __assume_aligned(ensemble112grad_inputs, 64);
    float (* ensemble112grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble112grad;
    __assume_aligned(ensemble112grad, 64);
    float (* ensemble111grad_inputs)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble111grad_inputs;
    __assume_aligned(ensemble111grad_inputs, 64);
    float (* ensemble111grad)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble111grad;
    __assume_aligned(ensemble111grad, 64);
    float (* ensemble110grad_bias)[1][16] = (float (*)[1][16]) _ensemble110grad_bias;
    __assume_aligned(ensemble110grad_bias, 64);
    float (* ensemble110grad)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble110grad;
    __assume_aligned(ensemble110grad, 64);
    float (* ensemble10grad_bias)[1][16] = (float (*)[1][16]) _ensemble10grad_bias;
    __assume_aligned(ensemble10grad_bias, 64);
    float (* ensemble10grad)[12][56][56][16] = (float (*)[12][56][56][16]) _ensemble10grad;
    __assume_aligned(ensemble10grad, 64);
    float (* ensemble109weights)[8][3][3][16][16] = (float (*)[8][3][3][16][16]) _ensemble109weights;
    __assume_aligned(ensemble109weights, 64);
    float (* ensemble109inputs)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble109inputs;
    __assume_aligned(ensemble109inputs, 64);
    float (* ensemble109grad_weights)[8][3][3][16][16] = (float (*)[8][3][3][16][16]) _ensemble109grad_weights;
    __assume_aligned(ensemble109grad_weights, 64);
    float (* ensemble109grad_inputs)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble109grad_inputs;
    __assume_aligned(ensemble109grad_inputs, 64);
    float (* ensemble109grad)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble109grad;
    __assume_aligned(ensemble109grad, 64);
    float (* ensemble108grad_inputs)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble108grad_inputs;
    __assume_aligned(ensemble108grad_inputs, 64);
    float (* ensemble108grad)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble108grad;
    __assume_aligned(ensemble108grad, 64);
    float (* ensemble107grad_bias)[1][16] = (float (*)[1][16]) _ensemble107grad_bias;
    __assume_aligned(ensemble107grad_bias, 64);
    float (* ensemble107grad)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble107grad;
    __assume_aligned(ensemble107grad, 64);
    float (* ensemble106weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble106weights;
    __assume_aligned(ensemble106weights, 64);
    float (* ensemble106inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble106inputs;
    __assume_aligned(ensemble106inputs, 64);
    float (* ensemble106grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble106grad_weights;
    __assume_aligned(ensemble106grad_weights, 64);
    float (* ensemble106grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble106grad_inputs;
    __assume_aligned(ensemble106grad_inputs, 64);
    float (* ensemble106grad)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble106grad;
    __assume_aligned(ensemble106grad, 64);
    float (* ensemble105grad_inputs)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble105grad_inputs;
    __assume_aligned(ensemble105grad_inputs, 64);
    float (* ensemble105grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble105grad;
    __assume_aligned(ensemble105grad, 64);
    float (* ensemble104grad_bias)[1][16] = (float (*)[1][16]) _ensemble104grad_bias;
    __assume_aligned(ensemble104grad_bias, 64);
    float (* ensemble104grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble104grad;
    __assume_aligned(ensemble104grad, 64);
    float (* ensemble103weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble103weights;
    __assume_aligned(ensemble103weights, 64);
    float (* ensemble103inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble103inputs;
    __assume_aligned(ensemble103inputs, 64);
    float (* ensemble103grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble103grad_weights;
    __assume_aligned(ensemble103grad_weights, 64);
    float (* ensemble103grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble103grad_inputs;
    __assume_aligned(ensemble103grad_inputs, 64);
    float (* ensemble103grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble103grad;
    __assume_aligned(ensemble103grad, 64);
    float (* ensemble102grad_inputs3)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble102grad_inputs3;
    __assume_aligned(ensemble102grad_inputs3, 64);
    float (* ensemble102grad_inputs2)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble102grad_inputs2;
    __assume_aligned(ensemble102grad_inputs2, 64);
    float (* ensemble102grad_inputs1)[14][14][14][16] = (float (*)[14][14][14][16]) _ensemble102grad_inputs1;
    __assume_aligned(ensemble102grad_inputs1, 64);
    float (* ensemble102grad_inputs)[10][14][14][16] = (float (*)[10][14][14][16]) _ensemble102grad_inputs;
    __assume_aligned(ensemble102grad_inputs, 64);
    float (* ensemble102grad)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble102grad;
    __assume_aligned(ensemble102grad, 64);
    float (* ensemble101grad_inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble101grad_inputs;
    __assume_aligned(ensemble101grad_inputs, 64);
    float (* ensemble101grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble101grad;
    __assume_aligned(ensemble101grad, 64);
    float (* ensemble100grad_bias)[1][16] = (float (*)[1][16]) _ensemble100grad_bias;
    __assume_aligned(ensemble100grad_bias, 64);
    float (* ensemble100grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble100grad;
    __assume_aligned(ensemble100grad, 64);
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble117grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble116grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble116grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                __m512 ___x341_0 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x341_1 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x341_2 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x341_3 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x341_4 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x341_5 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x341_6 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x341_7 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x341_8 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x341_9 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x341_10 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x341_11 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x341_12 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x341_13 = _mm512_load_ps(& ensemble115inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x342 = _mm512_load_ps(& ensemble115grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x343_0 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x343_1 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x343_2 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x343_3 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x343_4 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x343_5 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x343_6 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x343_7 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x343_8 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x343_9 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x343_10 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x343_11 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x343_12 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x343_13 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x342 = _mm512_fmadd_ps(___x343_0, ___x341_0, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_1, ___x341_1, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_2, ___x341_2, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_3, ___x341_3, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_4, ___x341_4, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_5, ___x341_5, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_6, ___x341_6, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_7, ___x341_7, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_8, ___x341_8, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_9, ___x341_9, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_10, ___x341_10, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_11, ___x341_11, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_12, ___x341_12, ___x342);
                                    ___x342 = _mm512_fmadd_ps(___x343_13, ___x341_13, ___x342);
                                    _mm512_store_ps(& ensemble115grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x342);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                __m512 ___x339_0 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x339_1 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x339_2 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x339_3 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x339_4 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x339_5 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x339_6 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x339_7 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x339_8 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x339_9 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x339_10 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x339_11 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x339_12 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x339_13 = _mm512_load_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x338_0 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x338_1 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x338_2 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x338_3 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x338_4 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x338_5 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x338_6 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x338_7 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x338_8 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x338_9 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x338_10 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x338_11 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x338_12 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x338_13 = _mm512_set1_ps(ensemble115grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x340 = _mm512_load_ps(& ensemble115weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x339_0 = _mm512_fmadd_ps(___x338_0, ___x340, ___x339_0);
                                    ___x339_1 = _mm512_fmadd_ps(___x338_1, ___x340, ___x339_1);
                                    ___x339_2 = _mm512_fmadd_ps(___x338_2, ___x340, ___x339_2);
                                    ___x339_3 = _mm512_fmadd_ps(___x338_3, ___x340, ___x339_3);
                                    ___x339_4 = _mm512_fmadd_ps(___x338_4, ___x340, ___x339_4);
                                    ___x339_5 = _mm512_fmadd_ps(___x338_5, ___x340, ___x339_5);
                                    ___x339_6 = _mm512_fmadd_ps(___x338_6, ___x340, ___x339_6);
                                    ___x339_7 = _mm512_fmadd_ps(___x338_7, ___x340, ___x339_7);
                                    ___x339_8 = _mm512_fmadd_ps(___x338_8, ___x340, ___x339_8);
                                    ___x339_9 = _mm512_fmadd_ps(___x338_9, ___x340, ___x339_9);
                                    ___x339_10 = _mm512_fmadd_ps(___x338_10, ___x340, ___x339_10);
                                    ___x339_11 = _mm512_fmadd_ps(___x338_11, ___x340, ___x339_11);
                                    ___x339_12 = _mm512_fmadd_ps(___x338_12, ___x340, ___x339_12);
                                    ___x339_13 = _mm512_fmadd_ps(___x338_13, ___x340, ___x339_13);
                                }
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x339_0);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x339_1);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x339_2);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x339_3);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x339_4);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x339_5);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x339_6);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x339_7);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x339_8);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x339_9);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x339_10);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x339_11);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x339_12);
                                _mm512_store_ps(& ensemble115grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x339_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble114grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble113grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble113grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x334_0 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x334_1 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x334_2 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x334_3 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x334_4 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x334_5 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x334_6 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x334_7 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x334_8 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x334_9 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x334_10 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x334_11 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x334_12 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x334_13 = _mm512_load_ps(& ensemble112inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x332 = _mm512_load_ps(& ensemble112grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x333_0 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_1 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_2 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_3 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_4 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_5 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_6 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_7 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_8 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_9 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_10 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_11 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_12 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x333_13 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][_neuron_index_1_inner]);
                                    ___x332 = _mm512_fmadd_ps(___x333_0, ___x334_0, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_1, ___x334_1, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_2, ___x334_2, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_3, ___x334_3, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_4, ___x334_4, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_5, ___x334_5, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_6, ___x334_6, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_7, ___x334_7, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_8, ___x334_8, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_9, ___x334_9, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_10, ___x334_10, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_11, ___x334_11, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_12, ___x334_12, ___x332);
                                    ___x332 = _mm512_fmadd_ps(___x333_13, ___x334_13, ___x332);
                                    _mm512_store_ps(& ensemble112grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x332);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x331_0 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x331_1 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x331_2 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x331_3 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x331_4 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x331_5 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x331_6 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x331_7 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x331_8 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x331_9 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x331_10 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x331_11 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x331_12 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x331_13 = _mm512_load_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x329 = _mm512_load_ps(& ensemble112weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x330_0 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_1 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_2 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_3 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_4 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_5 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_6 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_7 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_8 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_9 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_10 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_11 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_12 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x330_13 = _mm512_set1_ps(ensemble112grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][_neuron_index_1_inner]);
                                    ___x331_0 = _mm512_fmadd_ps(___x330_0, ___x329, ___x331_0);
                                    ___x331_1 = _mm512_fmadd_ps(___x330_1, ___x329, ___x331_1);
                                    ___x331_2 = _mm512_fmadd_ps(___x330_2, ___x329, ___x331_2);
                                    ___x331_3 = _mm512_fmadd_ps(___x330_3, ___x329, ___x331_3);
                                    ___x331_4 = _mm512_fmadd_ps(___x330_4, ___x329, ___x331_4);
                                    ___x331_5 = _mm512_fmadd_ps(___x330_5, ___x329, ___x331_5);
                                    ___x331_6 = _mm512_fmadd_ps(___x330_6, ___x329, ___x331_6);
                                    ___x331_7 = _mm512_fmadd_ps(___x330_7, ___x329, ___x331_7);
                                    ___x331_8 = _mm512_fmadd_ps(___x330_8, ___x329, ___x331_8);
                                    ___x331_9 = _mm512_fmadd_ps(___x330_9, ___x329, ___x331_9);
                                    ___x331_10 = _mm512_fmadd_ps(___x330_10, ___x329, ___x331_10);
                                    ___x331_11 = _mm512_fmadd_ps(___x330_11, ___x329, ___x331_11);
                                    ___x331_12 = _mm512_fmadd_ps(___x330_12, ___x329, ___x331_12);
                                    ___x331_13 = _mm512_fmadd_ps(___x330_13, ___x329, ___x331_13);
                                }
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x331_0);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x331_1);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x331_2);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x331_3);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x331_4);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x331_5);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x331_6);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x331_7);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x331_8);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x331_9);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x331_10);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x331_11);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x331_12);
                                _mm512_store_ps(& ensemble112grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x331_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble111grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble110grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble110grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 8; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x323_0 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x323_1 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x323_2 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x323_3 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x323_4 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x323_5 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x323_6 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x323_7 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x323_8 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x323_9 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x323_10 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x323_11 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x323_12 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x323_13 = _mm512_load_ps(& ensemble109inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x324_0 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x324_1 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x324_2 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x324_3 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x324_4 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x324_5 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x324_6 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x324_7 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x324_8 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x324_9 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x324_10 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x324_11 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x324_12 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x324_13 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x325 = _mm512_load_ps(& ensemble109grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x325 = _mm512_fmadd_ps(___x324_0, ___x323_0, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_1, ___x323_1, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_2, ___x323_2, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_3, ___x323_3, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_4, ___x323_4, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_5, ___x323_5, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_6, ___x323_6, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_7, ___x323_7, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_8, ___x323_8, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_9, ___x323_9, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_10, ___x323_10, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_11, ___x323_11, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_12, ___x323_12, ___x325);
                                    ___x325 = _mm512_fmadd_ps(___x324_13, ___x323_13, ___x325);
                                    _mm512_store_ps(& ensemble109grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x325);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 8; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x322_0 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x322_1 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x322_2 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x322_3 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x322_4 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x322_5 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x322_6 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x322_7 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x322_8 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x322_9 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x322_10 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x322_11 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x322_12 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x322_13 = _mm512_load_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x320_0 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x320_1 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x320_2 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x320_3 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x320_4 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x320_5 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x320_6 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x320_7 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x320_8 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x320_9 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x320_10 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x320_11 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x320_12 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x320_13 = _mm512_set1_ps(ensemble109grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x321 = _mm512_load_ps(& ensemble109weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x322_0 = _mm512_fmadd_ps(___x320_0, ___x321, ___x322_0);
                                    ___x322_1 = _mm512_fmadd_ps(___x320_1, ___x321, ___x322_1);
                                    ___x322_2 = _mm512_fmadd_ps(___x320_2, ___x321, ___x322_2);
                                    ___x322_3 = _mm512_fmadd_ps(___x320_3, ___x321, ___x322_3);
                                    ___x322_4 = _mm512_fmadd_ps(___x320_4, ___x321, ___x322_4);
                                    ___x322_5 = _mm512_fmadd_ps(___x320_5, ___x321, ___x322_5);
                                    ___x322_6 = _mm512_fmadd_ps(___x320_6, ___x321, ___x322_6);
                                    ___x322_7 = _mm512_fmadd_ps(___x320_7, ___x321, ___x322_7);
                                    ___x322_8 = _mm512_fmadd_ps(___x320_8, ___x321, ___x322_8);
                                    ___x322_9 = _mm512_fmadd_ps(___x320_9, ___x321, ___x322_9);
                                    ___x322_10 = _mm512_fmadd_ps(___x320_10, ___x321, ___x322_10);
                                    ___x322_11 = _mm512_fmadd_ps(___x320_11, ___x321, ___x322_11);
                                    ___x322_12 = _mm512_fmadd_ps(___x320_12, ___x321, ___x322_12);
                                    ___x322_13 = _mm512_fmadd_ps(___x320_13, ___x321, ___x322_13);
                                }
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x322_0);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x322_1);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x322_2);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x322_3);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x322_4);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x322_5);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x322_6);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x322_7);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x322_8);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x322_9);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x322_10);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x322_11);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x322_12);
                                _mm512_store_ps(& ensemble109grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x322_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble108grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble107grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble107grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x315_0 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x315_1 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x315_2 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x315_3 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x315_4 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x315_5 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x315_6 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x315_7 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x315_8 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x315_9 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x315_10 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x315_11 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x315_12 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x315_13 = _mm512_load_ps(& ensemble106inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x314 = _mm512_load_ps(& ensemble106grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x316_0 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_1 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_2 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_3 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_4 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_5 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_6 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_7 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_8 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_9 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_10 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_11 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_12 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x316_13 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    ___x314 = _mm512_fmadd_ps(___x316_0, ___x315_0, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_1, ___x315_1, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_2, ___x315_2, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_3, ___x315_3, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_4, ___x315_4, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_5, ___x315_5, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_6, ___x315_6, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_7, ___x315_7, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_8, ___x315_8, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_9, ___x315_9, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_10, ___x315_10, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_11, ___x315_11, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_12, ___x315_12, ___x314);
                                    ___x314 = _mm512_fmadd_ps(___x316_13, ___x315_13, ___x314);
                                    _mm512_store_ps(& ensemble106grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x314);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x311_0 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x311_1 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x311_2 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x311_3 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x311_4 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x311_5 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x311_6 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x311_7 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x311_8 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x311_9 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x311_10 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x311_11 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x311_12 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x311_13 = _mm512_load_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x312_0 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_1 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_2 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_3 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_4 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_5 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_6 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_7 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_8 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_9 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_10 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_11 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_12 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x312_13 = _mm512_set1_ps(ensemble106grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x313 = _mm512_load_ps(& ensemble106weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x311_0 = _mm512_fmadd_ps(___x312_0, ___x313, ___x311_0);
                                    ___x311_1 = _mm512_fmadd_ps(___x312_1, ___x313, ___x311_1);
                                    ___x311_2 = _mm512_fmadd_ps(___x312_2, ___x313, ___x311_2);
                                    ___x311_3 = _mm512_fmadd_ps(___x312_3, ___x313, ___x311_3);
                                    ___x311_4 = _mm512_fmadd_ps(___x312_4, ___x313, ___x311_4);
                                    ___x311_5 = _mm512_fmadd_ps(___x312_5, ___x313, ___x311_5);
                                    ___x311_6 = _mm512_fmadd_ps(___x312_6, ___x313, ___x311_6);
                                    ___x311_7 = _mm512_fmadd_ps(___x312_7, ___x313, ___x311_7);
                                    ___x311_8 = _mm512_fmadd_ps(___x312_8, ___x313, ___x311_8);
                                    ___x311_9 = _mm512_fmadd_ps(___x312_9, ___x313, ___x311_9);
                                    ___x311_10 = _mm512_fmadd_ps(___x312_10, ___x313, ___x311_10);
                                    ___x311_11 = _mm512_fmadd_ps(___x312_11, ___x313, ___x311_11);
                                    ___x311_12 = _mm512_fmadd_ps(___x312_12, ___x313, ___x311_12);
                                    ___x311_13 = _mm512_fmadd_ps(___x312_13, ___x313, ___x311_13);
                                }
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x311_0);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x311_1);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x311_2);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x311_3);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x311_4);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x311_5);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x311_6);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x311_7);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x311_8);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x311_9);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x311_10);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x311_11);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x311_12);
                                _mm512_store_ps(& ensemble106grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x311_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble105grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble104grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble104grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x306_0 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x306_1 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x306_2 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x306_3 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x306_4 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x306_5 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x306_6 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x306_7 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x306_8 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x306_9 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x306_10 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x306_11 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x306_12 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x306_13 = _mm512_load_ps(& ensemble103inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x305 = _mm512_load_ps(& ensemble103grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x307_0 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x307_1 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x307_2 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x307_3 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x307_4 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x307_5 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x307_6 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x307_7 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x307_8 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x307_9 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x307_10 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x307_11 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x307_12 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x307_13 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x305 = _mm512_fmadd_ps(___x307_0, ___x306_0, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_1, ___x306_1, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_2, ___x306_2, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_3, ___x306_3, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_4, ___x306_4, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_5, ___x306_5, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_6, ___x306_6, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_7, ___x306_7, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_8, ___x306_8, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_9, ___x306_9, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_10, ___x306_10, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_11, ___x306_11, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_12, ___x306_12, ___x305);
                                    ___x305 = _mm512_fmadd_ps(___x307_13, ___x306_13, ___x305);
                                    _mm512_store_ps(& ensemble103grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x305);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x302_0 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x302_1 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x302_2 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x302_3 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x302_4 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x302_5 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x302_6 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x302_7 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x302_8 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x302_9 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x302_10 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x302_11 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x302_12 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x302_13 = _mm512_load_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x303 = _mm512_load_ps(& ensemble103weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x304_0 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x304_1 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x304_2 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x304_3 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x304_4 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x304_5 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x304_6 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x304_7 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x304_8 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x304_9 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x304_10 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x304_11 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x304_12 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x304_13 = _mm512_set1_ps(ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x302_0 = _mm512_fmadd_ps(___x304_0, ___x303, ___x302_0);
                                    ___x302_1 = _mm512_fmadd_ps(___x304_1, ___x303, ___x302_1);
                                    ___x302_2 = _mm512_fmadd_ps(___x304_2, ___x303, ___x302_2);
                                    ___x302_3 = _mm512_fmadd_ps(___x304_3, ___x303, ___x302_3);
                                    ___x302_4 = _mm512_fmadd_ps(___x304_4, ___x303, ___x302_4);
                                    ___x302_5 = _mm512_fmadd_ps(___x304_5, ___x303, ___x302_5);
                                    ___x302_6 = _mm512_fmadd_ps(___x304_6, ___x303, ___x302_6);
                                    ___x302_7 = _mm512_fmadd_ps(___x304_7, ___x303, ___x302_7);
                                    ___x302_8 = _mm512_fmadd_ps(___x304_8, ___x303, ___x302_8);
                                    ___x302_9 = _mm512_fmadd_ps(___x304_9, ___x303, ___x302_9);
                                    ___x302_10 = _mm512_fmadd_ps(___x304_10, ___x303, ___x302_10);
                                    ___x302_11 = _mm512_fmadd_ps(___x304_11, ___x303, ___x302_11);
                                    ___x302_12 = _mm512_fmadd_ps(___x304_12, ___x303, ___x302_12);
                                    ___x302_13 = _mm512_fmadd_ps(___x304_13, ___x303, ___x302_13);
                                }
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x302_0);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x302_1);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x302_2);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x302_3);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x302_4);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x302_5);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x302_6);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x302_7);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x302_8);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x302_9);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x302_10);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x302_11);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x302_12);
                                _mm512_store_ps(& ensemble103grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x302_13);
                            }
                        }
                    }
                }
            }
        }
    }
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x295 = _mm512_load_ps(& ensemble102grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble102grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x295);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 14; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x296 = _mm512_load_ps(& ensemble102grad[_neuron_index_0][(_neuron_index_1_outer + 10)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble102grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x296);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x297 = _mm512_load_ps(& ensemble102grad[_neuron_index_0][(_neuron_index_1_outer + 24)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble102grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x297);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x298 = _mm512_load_ps(& ensemble102grad[_neuron_index_0][(_neuron_index_1_outer + 28)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble102grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x298);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble101grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble100grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble100grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x289_0 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x289_1 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x289_2 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x289_3 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x289_4 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x289_5 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x289_6 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x289_7 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x289_8 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x289_9 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x289_10 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x289_11 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x289_12 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x289_13 = _mm512_load_ps(& ensemble99inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x288 = _mm512_load_ps(& ensemble99grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x290_0 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x290_1 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x290_2 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x290_3 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x290_4 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x290_5 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x290_6 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x290_7 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x290_8 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x290_9 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x290_10 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x290_11 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x290_12 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x290_13 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x288 = _mm512_fmadd_ps(___x290_0, ___x289_0, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_1, ___x289_1, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_2, ___x289_2, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_3, ___x289_3, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_4, ___x289_4, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_5, ___x289_5, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_6, ___x289_6, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_7, ___x289_7, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_8, ___x289_8, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_9, ___x289_9, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_10, ___x289_10, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_11, ___x289_11, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_12, ___x289_12, ___x288);
                                    ___x288 = _mm512_fmadd_ps(___x290_13, ___x289_13, ___x288);
                                    _mm512_store_ps(& ensemble99grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x288);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x286_0 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x286_1 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x286_2 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x286_3 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x286_4 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x286_5 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x286_6 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x286_7 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x286_8 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x286_9 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x286_10 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x286_11 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x286_12 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x286_13 = _mm512_load_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x285 = _mm512_load_ps(& ensemble99weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x287_0 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x287_1 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x287_2 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x287_3 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x287_4 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x287_5 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x287_6 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x287_7 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x287_8 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x287_9 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x287_10 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x287_11 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x287_12 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x287_13 = _mm512_set1_ps(ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x286_0 = _mm512_fmadd_ps(___x287_0, ___x285, ___x286_0);
                                    ___x286_1 = _mm512_fmadd_ps(___x287_1, ___x285, ___x286_1);
                                    ___x286_2 = _mm512_fmadd_ps(___x287_2, ___x285, ___x286_2);
                                    ___x286_3 = _mm512_fmadd_ps(___x287_3, ___x285, ___x286_3);
                                    ___x286_4 = _mm512_fmadd_ps(___x287_4, ___x285, ___x286_4);
                                    ___x286_5 = _mm512_fmadd_ps(___x287_5, ___x285, ___x286_5);
                                    ___x286_6 = _mm512_fmadd_ps(___x287_6, ___x285, ___x286_6);
                                    ___x286_7 = _mm512_fmadd_ps(___x287_7, ___x285, ___x286_7);
                                    ___x286_8 = _mm512_fmadd_ps(___x287_8, ___x285, ___x286_8);
                                    ___x286_9 = _mm512_fmadd_ps(___x287_9, ___x285, ___x286_9);
                                    ___x286_10 = _mm512_fmadd_ps(___x287_10, ___x285, ___x286_10);
                                    ___x286_11 = _mm512_fmadd_ps(___x287_11, ___x285, ___x286_11);
                                    ___x286_12 = _mm512_fmadd_ps(___x287_12, ___x285, ___x286_12);
                                    ___x286_13 = _mm512_fmadd_ps(___x287_13, ___x285, ___x286_13);
                                }
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x286_0);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x286_1);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x286_2);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x286_3);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x286_4);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x286_5);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x286_6);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x286_7);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x286_8);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x286_9);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x286_10);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x286_11);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x286_12);
                                _mm512_store_ps(& ensemble99grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x286_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 32; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble98mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble98mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble98grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 13)][MIN(MAX(k + _input_offset_3, 0), 13)][_input_offset_1_inner] += ensemble98grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble97grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble96grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble96grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                __m512 ___x281_0 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x281_1 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x281_2 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x281_3 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x281_4 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x281_5 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x281_6 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x281_7 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x281_8 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x281_9 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x281_10 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x281_11 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x281_12 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x281_13 = _mm512_load_ps(& ensemble95inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x279 = _mm512_load_ps(& ensemble95grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x280_0 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x280_1 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x280_2 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x280_3 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x280_4 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x280_5 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x280_6 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x280_7 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x280_8 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x280_9 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x280_10 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x280_11 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x280_12 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x280_13 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x279 = _mm512_fmadd_ps(___x280_0, ___x281_0, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_1, ___x281_1, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_2, ___x281_2, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_3, ___x281_3, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_4, ___x281_4, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_5, ___x281_5, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_6, ___x281_6, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_7, ___x281_7, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_8, ___x281_8, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_9, ___x281_9, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_10, ___x281_10, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_11, ___x281_11, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_12, ___x281_12, ___x279);
                                    ___x279 = _mm512_fmadd_ps(___x280_13, ___x281_13, ___x279);
                                    _mm512_store_ps(& ensemble95grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x279);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                __m512 ___x276_0 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x276_1 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x276_2 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x276_3 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x276_4 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x276_5 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x276_6 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x276_7 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x276_8 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x276_9 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x276_10 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x276_11 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x276_12 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x276_13 = _mm512_load_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x277_0 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x277_1 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x277_2 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x277_3 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x277_4 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x277_5 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x277_6 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x277_7 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x277_8 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x277_9 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x277_10 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x277_11 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x277_12 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x277_13 = _mm512_set1_ps(ensemble95grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x278 = _mm512_load_ps(& ensemble95weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x276_0 = _mm512_fmadd_ps(___x277_0, ___x278, ___x276_0);
                                    ___x276_1 = _mm512_fmadd_ps(___x277_1, ___x278, ___x276_1);
                                    ___x276_2 = _mm512_fmadd_ps(___x277_2, ___x278, ___x276_2);
                                    ___x276_3 = _mm512_fmadd_ps(___x277_3, ___x278, ___x276_3);
                                    ___x276_4 = _mm512_fmadd_ps(___x277_4, ___x278, ___x276_4);
                                    ___x276_5 = _mm512_fmadd_ps(___x277_5, ___x278, ___x276_5);
                                    ___x276_6 = _mm512_fmadd_ps(___x277_6, ___x278, ___x276_6);
                                    ___x276_7 = _mm512_fmadd_ps(___x277_7, ___x278, ___x276_7);
                                    ___x276_8 = _mm512_fmadd_ps(___x277_8, ___x278, ___x276_8);
                                    ___x276_9 = _mm512_fmadd_ps(___x277_9, ___x278, ___x276_9);
                                    ___x276_10 = _mm512_fmadd_ps(___x277_10, ___x278, ___x276_10);
                                    ___x276_11 = _mm512_fmadd_ps(___x277_11, ___x278, ___x276_11);
                                    ___x276_12 = _mm512_fmadd_ps(___x277_12, ___x278, ___x276_12);
                                    ___x276_13 = _mm512_fmadd_ps(___x277_13, ___x278, ___x276_13);
                                }
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x276_0);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x276_1);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x276_2);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x276_3);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x276_4);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x276_5);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x276_6);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x276_7);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x276_8);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x276_9);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x276_10);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x276_11);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x276_12);
                                _mm512_store_ps(& ensemble95grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x276_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble94grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble93grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble93grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x272_0 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x272_1 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x272_2 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x272_3 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x272_4 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x272_5 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x272_6 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x272_7 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x272_8 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x272_9 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x272_10 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x272_11 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x272_12 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x272_13 = _mm512_load_ps(& ensemble92inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x270 = _mm512_load_ps(& ensemble92grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x271_0 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_1 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_2 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_3 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_4 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_5 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_6 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_7 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_8 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_9 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_10 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_11 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_12 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x271_13 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][_neuron_index_1_inner]);
                                    ___x270 = _mm512_fmadd_ps(___x271_0, ___x272_0, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_1, ___x272_1, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_2, ___x272_2, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_3, ___x272_3, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_4, ___x272_4, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_5, ___x272_5, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_6, ___x272_6, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_7, ___x272_7, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_8, ___x272_8, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_9, ___x272_9, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_10, ___x272_10, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_11, ___x272_11, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_12, ___x272_12, ___x270);
                                    ___x270 = _mm512_fmadd_ps(___x271_13, ___x272_13, ___x270);
                                    _mm512_store_ps(& ensemble92grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x270);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x268_0 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x268_1 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x268_2 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x268_3 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x268_4 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x268_5 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x268_6 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x268_7 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x268_8 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x268_9 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x268_10 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x268_11 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x268_12 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x268_13 = _mm512_load_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x267_0 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_1 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_2 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_3 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_4 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_5 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_6 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_7 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_8 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_9 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_10 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_11 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_12 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x267_13 = _mm512_set1_ps(ensemble92grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x269 = _mm512_load_ps(& ensemble92weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x268_0 = _mm512_fmadd_ps(___x267_0, ___x269, ___x268_0);
                                    ___x268_1 = _mm512_fmadd_ps(___x267_1, ___x269, ___x268_1);
                                    ___x268_2 = _mm512_fmadd_ps(___x267_2, ___x269, ___x268_2);
                                    ___x268_3 = _mm512_fmadd_ps(___x267_3, ___x269, ___x268_3);
                                    ___x268_4 = _mm512_fmadd_ps(___x267_4, ___x269, ___x268_4);
                                    ___x268_5 = _mm512_fmadd_ps(___x267_5, ___x269, ___x268_5);
                                    ___x268_6 = _mm512_fmadd_ps(___x267_6, ___x269, ___x268_6);
                                    ___x268_7 = _mm512_fmadd_ps(___x267_7, ___x269, ___x268_7);
                                    ___x268_8 = _mm512_fmadd_ps(___x267_8, ___x269, ___x268_8);
                                    ___x268_9 = _mm512_fmadd_ps(___x267_9, ___x269, ___x268_9);
                                    ___x268_10 = _mm512_fmadd_ps(___x267_10, ___x269, ___x268_10);
                                    ___x268_11 = _mm512_fmadd_ps(___x267_11, ___x269, ___x268_11);
                                    ___x268_12 = _mm512_fmadd_ps(___x267_12, ___x269, ___x268_12);
                                    ___x268_13 = _mm512_fmadd_ps(___x267_13, ___x269, ___x268_13);
                                }
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x268_0);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x268_1);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x268_2);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x268_3);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x268_4);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x268_5);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x268_6);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x268_7);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x268_8);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x268_9);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x268_10);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x268_11);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x268_12);
                                _mm512_store_ps(& ensemble92grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x268_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 14; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble91grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 14; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble90grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble90grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 14; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 7; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x262_0 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x262_1 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x262_2 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x262_3 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x262_4 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x262_5 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x262_6 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x262_7 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x262_8 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x262_9 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x262_10 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x262_11 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x262_12 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x262_13 = _mm512_load_ps(& ensemble89inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x261 = _mm512_load_ps(& ensemble89grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x263_0 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x263_1 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x263_2 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x263_3 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x263_4 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x263_5 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x263_6 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x263_7 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x263_8 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x263_9 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x263_10 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x263_11 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x263_12 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x263_13 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x261 = _mm512_fmadd_ps(___x263_0, ___x262_0, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_1, ___x262_1, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_2, ___x262_2, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_3, ___x262_3, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_4, ___x262_4, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_5, ___x262_5, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_6, ___x262_6, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_7, ___x262_7, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_8, ___x262_8, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_9, ___x262_9, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_10, ___x262_10, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_11, ___x262_11, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_12, ___x262_12, ___x261);
                                    ___x261 = _mm512_fmadd_ps(___x263_13, ___x262_13, ___x261);
                                    _mm512_store_ps(& ensemble89grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x261);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 7; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 14; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x259_0 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x259_1 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x259_2 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x259_3 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x259_4 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x259_5 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x259_6 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x259_7 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x259_8 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x259_9 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x259_10 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x259_11 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x259_12 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x259_13 = _mm512_load_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x258 = _mm512_load_ps(& ensemble89weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x260_0 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x260_1 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x260_2 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x260_3 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x260_4 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x260_5 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x260_6 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x260_7 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x260_8 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x260_9 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x260_10 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x260_11 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x260_12 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x260_13 = _mm512_set1_ps(ensemble89grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x259_0 = _mm512_fmadd_ps(___x260_0, ___x258, ___x259_0);
                                    ___x259_1 = _mm512_fmadd_ps(___x260_1, ___x258, ___x259_1);
                                    ___x259_2 = _mm512_fmadd_ps(___x260_2, ___x258, ___x259_2);
                                    ___x259_3 = _mm512_fmadd_ps(___x260_3, ___x258, ___x259_3);
                                    ___x259_4 = _mm512_fmadd_ps(___x260_4, ___x258, ___x259_4);
                                    ___x259_5 = _mm512_fmadd_ps(___x260_5, ___x258, ___x259_5);
                                    ___x259_6 = _mm512_fmadd_ps(___x260_6, ___x258, ___x259_6);
                                    ___x259_7 = _mm512_fmadd_ps(___x260_7, ___x258, ___x259_7);
                                    ___x259_8 = _mm512_fmadd_ps(___x260_8, ___x258, ___x259_8);
                                    ___x259_9 = _mm512_fmadd_ps(___x260_9, ___x258, ___x259_9);
                                    ___x259_10 = _mm512_fmadd_ps(___x260_10, ___x258, ___x259_10);
                                    ___x259_11 = _mm512_fmadd_ps(___x260_11, ___x258, ___x259_11);
                                    ___x259_12 = _mm512_fmadd_ps(___x260_12, ___x258, ___x259_12);
                                    ___x259_13 = _mm512_fmadd_ps(___x260_13, ___x258, ___x259_13);
                                }
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x259_0);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x259_1);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x259_2);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x259_3);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x259_4);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x259_5);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x259_6);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x259_7);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x259_8);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x259_9);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x259_10);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x259_11);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x259_12);
                                _mm512_store_ps(& ensemble89grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x259_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 7; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble88grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 7; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble87grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble87grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 7; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x254_0 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x254_1 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x254_2 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x254_3 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x254_4 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x254_5 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x254_6 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x254_7 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x254_8 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x254_9 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x254_10 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x254_11 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x254_12 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x254_13 = _mm512_load_ps(& ensemble86inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x252_0 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_1 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_2 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_3 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_4 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_5 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_6 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_7 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_8 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_9 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_10 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_11 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_12 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x252_13 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x253 = _mm512_load_ps(& ensemble86grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x253 = _mm512_fmadd_ps(___x252_0, ___x254_0, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_1, ___x254_1, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_2, ___x254_2, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_3, ___x254_3, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_4, ___x254_4, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_5, ___x254_5, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_6, ___x254_6, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_7, ___x254_7, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_8, ___x254_8, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_9, ___x254_9, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_10, ___x254_10, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_11, ___x254_11, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_12, ___x254_12, ___x253);
                                    ___x253 = _mm512_fmadd_ps(___x252_13, ___x254_13, ___x253);
                                    _mm512_store_ps(& ensemble86grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x253);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 7; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x249_0 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x249_1 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x249_2 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x249_3 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x249_4 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x249_5 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x249_6 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x249_7 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x249_8 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x249_9 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x249_10 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x249_11 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x249_12 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x249_13 = _mm512_load_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x250 = _mm512_load_ps(& ensemble86weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x251_0 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_1 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_2 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_3 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_4 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_5 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_6 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_7 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_8 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_9 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_10 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_11 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_12 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x251_13 = _mm512_set1_ps(ensemble86grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    ___x249_0 = _mm512_fmadd_ps(___x251_0, ___x250, ___x249_0);
                                    ___x249_1 = _mm512_fmadd_ps(___x251_1, ___x250, ___x249_1);
                                    ___x249_2 = _mm512_fmadd_ps(___x251_2, ___x250, ___x249_2);
                                    ___x249_3 = _mm512_fmadd_ps(___x251_3, ___x250, ___x249_3);
                                    ___x249_4 = _mm512_fmadd_ps(___x251_4, ___x250, ___x249_4);
                                    ___x249_5 = _mm512_fmadd_ps(___x251_5, ___x250, ___x249_5);
                                    ___x249_6 = _mm512_fmadd_ps(___x251_6, ___x250, ___x249_6);
                                    ___x249_7 = _mm512_fmadd_ps(___x251_7, ___x250, ___x249_7);
                                    ___x249_8 = _mm512_fmadd_ps(___x251_8, ___x250, ___x249_8);
                                    ___x249_9 = _mm512_fmadd_ps(___x251_9, ___x250, ___x249_9);
                                    ___x249_10 = _mm512_fmadd_ps(___x251_10, ___x250, ___x249_10);
                                    ___x249_11 = _mm512_fmadd_ps(___x251_11, ___x250, ___x249_11);
                                    ___x249_12 = _mm512_fmadd_ps(___x251_12, ___x250, ___x249_12);
                                    ___x249_13 = _mm512_fmadd_ps(___x251_13, ___x250, ___x249_13);
                                }
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x249_0);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x249_1);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x249_2);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x249_3);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x249_4);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x249_5);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x249_6);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x249_7);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x249_8);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x249_9);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x249_10);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x249_11);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x249_12);
                                _mm512_store_ps(& ensemble86grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x249_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble85grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble84grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble84grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x243_0 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x243_1 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x243_2 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x243_3 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x243_4 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x243_5 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x243_6 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x243_7 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x243_8 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x243_9 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x243_10 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x243_11 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x243_12 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x243_13 = _mm512_load_ps(& ensemble83inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x244 = _mm512_load_ps(& ensemble83grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x245_0 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x245_1 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x245_2 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x245_3 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x245_4 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x245_5 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x245_6 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x245_7 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x245_8 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x245_9 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x245_10 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x245_11 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x245_12 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x245_13 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x244 = _mm512_fmadd_ps(___x245_0, ___x243_0, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_1, ___x243_1, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_2, ___x243_2, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_3, ___x243_3, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_4, ___x243_4, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_5, ___x243_5, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_6, ___x243_6, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_7, ___x243_7, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_8, ___x243_8, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_9, ___x243_9, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_10, ___x243_10, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_11, ___x243_11, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_12, ___x243_12, ___x244);
                                    ___x244 = _mm512_fmadd_ps(___x245_13, ___x243_13, ___x244);
                                    _mm512_store_ps(& ensemble83grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x244);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x240_0 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x240_1 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x240_2 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x240_3 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x240_4 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x240_5 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x240_6 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x240_7 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x240_8 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x240_9 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x240_10 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x240_11 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x240_12 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x240_13 = _mm512_load_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x241_0 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x241_1 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x241_2 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x241_3 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x241_4 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x241_5 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x241_6 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x241_7 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x241_8 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x241_9 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x241_10 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x241_11 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x241_12 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x241_13 = _mm512_set1_ps(ensemble83grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x242 = _mm512_load_ps(& ensemble83weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x240_0 = _mm512_fmadd_ps(___x241_0, ___x242, ___x240_0);
                                    ___x240_1 = _mm512_fmadd_ps(___x241_1, ___x242, ___x240_1);
                                    ___x240_2 = _mm512_fmadd_ps(___x241_2, ___x242, ___x240_2);
                                    ___x240_3 = _mm512_fmadd_ps(___x241_3, ___x242, ___x240_3);
                                    ___x240_4 = _mm512_fmadd_ps(___x241_4, ___x242, ___x240_4);
                                    ___x240_5 = _mm512_fmadd_ps(___x241_5, ___x242, ___x240_5);
                                    ___x240_6 = _mm512_fmadd_ps(___x241_6, ___x242, ___x240_6);
                                    ___x240_7 = _mm512_fmadd_ps(___x241_7, ___x242, ___x240_7);
                                    ___x240_8 = _mm512_fmadd_ps(___x241_8, ___x242, ___x240_8);
                                    ___x240_9 = _mm512_fmadd_ps(___x241_9, ___x242, ___x240_9);
                                    ___x240_10 = _mm512_fmadd_ps(___x241_10, ___x242, ___x240_10);
                                    ___x240_11 = _mm512_fmadd_ps(___x241_11, ___x242, ___x240_11);
                                    ___x240_12 = _mm512_fmadd_ps(___x241_12, ___x242, ___x240_12);
                                    ___x240_13 = _mm512_fmadd_ps(___x241_13, ___x242, ___x240_13);
                                }
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x240_0);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x240_1);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x240_2);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x240_3);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x240_4);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x240_5);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x240_6);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x240_7);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x240_8);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x240_9);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x240_10);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x240_11);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x240_12);
                                _mm512_store_ps(& ensemble83grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x240_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                ensemble82grad_bias[_neuron_index_0][_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble82grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner];
            }
        }
    }
    
    #pragma omp parallel for simd
    for (int x = 0; x < 1008; ++x) {
      float sum = _ensemble82grad_bias[x];
      #pragma unroll
      for (int i = 1; i < 128; ++ i) {
        sum += _ensemble82grad_bias[i * 1008 + x];
      }
      _ensemble82grad_bias[x] = sum;
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 64; __unique_loopvar0_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
                __m512 ___x235_0 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][0]);
                __m512 ___x235_1 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][0]);
                __m512 ___x235_2 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][0]);
                __m512 ___x235_3 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][0]);
                __m512 ___x235_4 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][0]);
                __m512 ___x235_5 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][0]);
                __m512 ___x235_6 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][0]);
                __m512 ___x235_7 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][0]);
                __m512 ___x235_8 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][0]);
                __m512 ___x235_9 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][0]);
                __m512 ___x235_10 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][0]);
                __m512 ___x235_11 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][0]);
                __m512 ___x235_12 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][0]);
                __m512 ___x235_13 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][0]);
                __m512 ___x235_14 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][0]);
                __m512 ___x235_15 = _mm512_load_ps(& ensemble81inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][0]);
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x234 = _mm512_load_ps(& ensemble81grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][_neuron_index_1_inner][0]);
                    __m512 ___x236_0 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_1 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_2 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_3 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_4 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_5 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_6 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_7 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_8 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_9 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_10 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_11 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_12 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_13 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_14 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_15 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    ___x234 = _mm512_fmadd_ps(___x236_0, ___x235_0, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_1, ___x235_1, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_2, ___x235_2, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_3, ___x235_3, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_4, ___x235_4, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_5, ___x235_5, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_6, ___x235_6, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_7, ___x235_7, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_8, ___x235_8, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_9, ___x235_9, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_10, ___x235_10, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_11, ___x235_11, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_12, ___x235_12, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_13, ___x235_13, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_14, ___x235_14, ___x234);
                    ___x234 = _mm512_fmadd_ps(___x236_15, ___x235_15, ___x234);
                    _mm512_store_ps(& ensemble81grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][_neuron_index_1_inner][0], ___x234);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 64; __unique_loopvar0_outer += 1) {
            __m512 ___x232_0 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][0]);
            __m512 ___x232_1 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][0]);
            __m512 ___x232_2 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][0]);
            __m512 ___x232_3 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][0]);
            __m512 ___x232_4 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][0]);
            __m512 ___x232_5 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][0]);
            __m512 ___x232_6 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][0]);
            __m512 ___x232_7 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][0]);
            __m512 ___x232_8 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][0]);
            __m512 ___x232_9 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][0]);
            __m512 ___x232_10 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][0]);
            __m512 ___x232_11 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][0]);
            __m512 ___x232_12 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][0]);
            __m512 ___x232_13 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][0]);
            __m512 ___x232_14 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][0]);
            __m512 ___x232_15 = _mm512_load_ps(& ensemble81grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][0]);
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x231_0 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_1 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_2 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_3 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_4 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_5 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_6 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_7 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_8 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_9 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_10 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_11 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_12 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_13 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_14 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x231_15 = _mm512_set1_ps(ensemble81grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233 = _mm512_load_ps(& ensemble81weights[_neuron_index_1_outer][__unique_loopvar0_outer][_neuron_index_1_inner][0]);
                    ___x232_0 = _mm512_fmadd_ps(___x231_0, ___x233, ___x232_0);
                    ___x232_1 = _mm512_fmadd_ps(___x231_1, ___x233, ___x232_1);
                    ___x232_2 = _mm512_fmadd_ps(___x231_2, ___x233, ___x232_2);
                    ___x232_3 = _mm512_fmadd_ps(___x231_3, ___x233, ___x232_3);
                    ___x232_4 = _mm512_fmadd_ps(___x231_4, ___x233, ___x232_4);
                    ___x232_5 = _mm512_fmadd_ps(___x231_5, ___x233, ___x232_5);
                    ___x232_6 = _mm512_fmadd_ps(___x231_6, ___x233, ___x232_6);
                    ___x232_7 = _mm512_fmadd_ps(___x231_7, ___x233, ___x232_7);
                    ___x232_8 = _mm512_fmadd_ps(___x231_8, ___x233, ___x232_8);
                    ___x232_9 = _mm512_fmadd_ps(___x231_9, ___x233, ___x232_9);
                    ___x232_10 = _mm512_fmadd_ps(___x231_10, ___x233, ___x232_10);
                    ___x232_11 = _mm512_fmadd_ps(___x231_11, ___x233, ___x232_11);
                    ___x232_12 = _mm512_fmadd_ps(___x231_12, ___x233, ___x232_12);
                    ___x232_13 = _mm512_fmadd_ps(___x231_13, ___x233, ___x232_13);
                    ___x232_14 = _mm512_fmadd_ps(___x231_14, ___x233, ___x232_14);
                    ___x232_15 = _mm512_fmadd_ps(___x231_15, ___x233, ___x232_15);
                }
            }
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][0], ___x232_0);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][0], ___x232_1);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][0], ___x232_2);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][0], ___x232_3);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][0], ___x232_4);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][0], ___x232_5);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][0], ___x232_6);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][0], ___x232_7);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][0], ___x232_8);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][0], ___x232_9);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][0], ___x232_10);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][0], ___x232_11);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][0], ___x232_12);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][0], ___x232_13);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][0], ___x232_14);
            _mm512_store_ps(& ensemble81grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][0], ___x232_15);
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 64; _neuron_index_1_outer += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                ensemble80grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = MAX(ensemble80grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner], (float) 0.0);
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 64; _neuron_index_1_outer += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                ensemble79grad_bias[_neuron_index_0][_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble79grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner];
            }
        }
    }
    
    #pragma omp parallel for simd
    for (int x = 0; x < 1024; ++x) {
      float sum = _ensemble79grad_bias[x];
      #pragma unroll
      for (int i = 1; i < 128; ++ i) {
        sum += _ensemble79grad_bias[i * 1024 + x];
      }
      _ensemble79grad_bias[x] = sum;
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 64; _neuron_index_1_outer += 1) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 8; __unique_loopvar0_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x227_0 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_1 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_2 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_3 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_4 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_5 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_6 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_7 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_8 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_9 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_10 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_11 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_12 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_13 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_14 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_15 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    for (int __unique_loopvar1 = 0; __unique_loopvar1 < 4; __unique_loopvar1 += 1) {
                        for (int __unique_loopvar2 = 0; __unique_loopvar2 < 4; __unique_loopvar2 += 1) {
                            __m512 ___x225_0 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_1 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_2 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_3 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_4 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_5 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_6 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_7 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_8 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_9 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_10 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_11 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_12 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_13 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_14 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_15 = _mm512_load_ps(& ensemble78inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x226 = _mm512_load_ps(& ensemble78grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][_neuron_index_1_inner][0]);
                            ___x226 = _mm512_fmadd_ps(___x227_0, ___x225_0, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_1, ___x225_1, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_2, ___x225_2, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_3, ___x225_3, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_4, ___x225_4, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_5, ___x225_5, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_6, ___x225_6, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_7, ___x225_7, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_8, ___x225_8, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_9, ___x225_9, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_10, ___x225_10, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_11, ___x225_11, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_12, ___x225_12, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_13, ___x225_13, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_14, ___x225_14, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_15, ___x225_15, ___x226);
                            _mm512_store_ps(& ensemble78grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][_neuron_index_1_inner][0], ___x226);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 8; __unique_loopvar0_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 64; _neuron_index_1_outer += 1) {
                for (int __unique_loopvar1 = 0; __unique_loopvar1 < 4; __unique_loopvar1 += 1) {
                    for (int __unique_loopvar2 = 0; __unique_loopvar2 < 4; __unique_loopvar2 += 1) {
                        __m512 ___x222_0 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_1 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_2 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_3 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_4 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_5 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_6 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_7 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_8 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_9 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_10 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_11 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_12 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_13 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_14 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_15 = _mm512_load_ps(& ensemble78grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                            __m512 ___x223 = _mm512_load_ps(& ensemble78weights[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][_neuron_index_1_inner][0]);
                            __m512 ___x224_0 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_1 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_2 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_3 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_4 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_5 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_6 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_7 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_8 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_9 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_10 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_11 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_12 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_13 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_14 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_15 = _mm512_set1_ps(ensemble78grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            ___x222_0 = _mm512_fmadd_ps(___x224_0, ___x223, ___x222_0);
                            ___x222_1 = _mm512_fmadd_ps(___x224_1, ___x223, ___x222_1);
                            ___x222_2 = _mm512_fmadd_ps(___x224_2, ___x223, ___x222_2);
                            ___x222_3 = _mm512_fmadd_ps(___x224_3, ___x223, ___x222_3);
                            ___x222_4 = _mm512_fmadd_ps(___x224_4, ___x223, ___x222_4);
                            ___x222_5 = _mm512_fmadd_ps(___x224_5, ___x223, ___x222_5);
                            ___x222_6 = _mm512_fmadd_ps(___x224_6, ___x223, ___x222_6);
                            ___x222_7 = _mm512_fmadd_ps(___x224_7, ___x223, ___x222_7);
                            ___x222_8 = _mm512_fmadd_ps(___x224_8, ___x223, ___x222_8);
                            ___x222_9 = _mm512_fmadd_ps(___x224_9, ___x223, ___x222_9);
                            ___x222_10 = _mm512_fmadd_ps(___x224_10, ___x223, ___x222_10);
                            ___x222_11 = _mm512_fmadd_ps(___x224_11, ___x223, ___x222_11);
                            ___x222_12 = _mm512_fmadd_ps(___x224_12, ___x223, ___x222_12);
                            ___x222_13 = _mm512_fmadd_ps(___x224_13, ___x223, ___x222_13);
                            ___x222_14 = _mm512_fmadd_ps(___x224_14, ___x223, ___x222_14);
                            ___x222_15 = _mm512_fmadd_ps(___x224_15, ___x223, ___x222_15);
                        }
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_0);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_1);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_2);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_3);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_4);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_5);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_6);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_7);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_8);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_9);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_10);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_11);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_12);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_13);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_14);
                        _mm512_store_ps(& ensemble78grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_15);
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble77grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble77grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble76grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble76grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 4) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x216_0 = _mm512_load_ps(& ensemble75inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x216_1 = _mm512_load_ps(& ensemble75inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x216_2 = _mm512_load_ps(& ensemble75inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x216_3 = _mm512_load_ps(& ensemble75inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x217 = _mm512_load_ps(& ensemble75grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x218_0 = _mm512_set1_ps(ensemble75grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x218_1 = _mm512_set1_ps(ensemble75grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x218_2 = _mm512_set1_ps(ensemble75grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x218_3 = _mm512_set1_ps(ensemble75grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    ___x217 = _mm512_fmadd_ps(___x218_0, ___x216_0, ___x217);
                                    ___x217 = _mm512_fmadd_ps(___x218_1, ___x216_1, ___x217);
                                    ___x217 = _mm512_fmadd_ps(___x218_2, ___x216_2, ___x217);
                                    ___x217 = _mm512_fmadd_ps(___x218_3, ___x216_3, ___x217);
                                    _mm512_store_ps(& ensemble75grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x217);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 4) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x213_0 = _mm512_load_ps(& ensemble75grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x213_1 = _mm512_load_ps(& ensemble75grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x213_2 = _mm512_load_ps(& ensemble75grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x213_3 = _mm512_load_ps(& ensemble75grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x214_0 = _mm512_set1_ps(ensemble75grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x214_1 = _mm512_set1_ps(ensemble75grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x214_2 = _mm512_set1_ps(ensemble75grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x214_3 = _mm512_set1_ps(ensemble75grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x215 = _mm512_load_ps(& ensemble75weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x213_0 = _mm512_fmadd_ps(___x214_0, ___x215, ___x213_0);
                                    ___x213_1 = _mm512_fmadd_ps(___x214_1, ___x215, ___x213_1);
                                    ___x213_2 = _mm512_fmadd_ps(___x214_2, ___x215, ___x213_2);
                                    ___x213_3 = _mm512_fmadd_ps(___x214_3, ___x215, ___x213_3);
                                }
                                _mm512_store_ps(& ensemble75grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x213_0);
                                _mm512_store_ps(& ensemble75grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x213_1);
                                _mm512_store_ps(& ensemble75grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x213_2);
                                _mm512_store_ps(& ensemble75grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x213_3);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 32; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 3 - 0;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 3 - 0;
                        int _input_offset_3 = in_x;
                        float val = ensemble74grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / ensemble74kernel[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                ensemble74grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner] += val;
                            }
                        }
                    }
                }
            }
        }
    }
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x206 = _mm512_load_ps(& ensemble73grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble73grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x206);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 13; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x207 = _mm512_load_ps(& ensemble73grad[_neuron_index_0][(_neuron_index_1_outer + 12)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble73grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x207);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x208 = _mm512_load_ps(& ensemble73grad[_neuron_index_0][(_neuron_index_1_outer + 25)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble73grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x208);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x209 = _mm512_load_ps(& ensemble73grad[_neuron_index_0][(_neuron_index_1_outer + 28)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble73grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x209);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble72grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble71grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble71grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x200_0 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x200_1 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x200_2 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x200_3 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x200_4 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x200_5 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x200_6 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x200_7 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x200_8 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x200_9 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x200_10 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x200_11 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x200_12 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x200_13 = _mm512_load_ps(& ensemble70inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x199_0 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x199_1 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x199_2 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x199_3 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x199_4 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x199_5 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x199_6 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x199_7 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x199_8 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x199_9 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x199_10 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x199_11 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x199_12 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x199_13 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x201 = _mm512_load_ps(& ensemble70grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x201 = _mm512_fmadd_ps(___x199_0, ___x200_0, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_1, ___x200_1, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_2, ___x200_2, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_3, ___x200_3, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_4, ___x200_4, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_5, ___x200_5, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_6, ___x200_6, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_7, ___x200_7, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_8, ___x200_8, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_9, ___x200_9, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_10, ___x200_10, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_11, ___x200_11, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_12, ___x200_12, ___x201);
                                    ___x201 = _mm512_fmadd_ps(___x199_13, ___x200_13, ___x201);
                                    _mm512_store_ps(& ensemble70grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x201);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x197_0 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x197_1 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x197_2 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x197_3 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x197_4 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x197_5 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x197_6 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x197_7 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x197_8 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x197_9 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x197_10 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x197_11 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x197_12 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x197_13 = _mm512_load_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x196_0 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x196_1 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x196_2 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x196_3 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x196_4 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x196_5 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x196_6 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x196_7 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x196_8 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x196_9 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x196_10 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x196_11 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x196_12 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x196_13 = _mm512_set1_ps(ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x198 = _mm512_load_ps(& ensemble70weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x197_0 = _mm512_fmadd_ps(___x196_0, ___x198, ___x197_0);
                                    ___x197_1 = _mm512_fmadd_ps(___x196_1, ___x198, ___x197_1);
                                    ___x197_2 = _mm512_fmadd_ps(___x196_2, ___x198, ___x197_2);
                                    ___x197_3 = _mm512_fmadd_ps(___x196_3, ___x198, ___x197_3);
                                    ___x197_4 = _mm512_fmadd_ps(___x196_4, ___x198, ___x197_4);
                                    ___x197_5 = _mm512_fmadd_ps(___x196_5, ___x198, ___x197_5);
                                    ___x197_6 = _mm512_fmadd_ps(___x196_6, ___x198, ___x197_6);
                                    ___x197_7 = _mm512_fmadd_ps(___x196_7, ___x198, ___x197_7);
                                    ___x197_8 = _mm512_fmadd_ps(___x196_8, ___x198, ___x197_8);
                                    ___x197_9 = _mm512_fmadd_ps(___x196_9, ___x198, ___x197_9);
                                    ___x197_10 = _mm512_fmadd_ps(___x196_10, ___x198, ___x197_10);
                                    ___x197_11 = _mm512_fmadd_ps(___x196_11, ___x198, ___x197_11);
                                    ___x197_12 = _mm512_fmadd_ps(___x196_12, ___x198, ___x197_12);
                                    ___x197_13 = _mm512_fmadd_ps(___x196_13, ___x198, ___x197_13);
                                }
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x197_0);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x197_1);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x197_2);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x197_3);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x197_4);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x197_5);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x197_6);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x197_7);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x197_8);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x197_9);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x197_10);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x197_11);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x197_12);
                                _mm512_store_ps(& ensemble70grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x197_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 30; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble69mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble69mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble69grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 13)][MIN(MAX(k + _input_offset_3, 0), 13)][_input_offset_1_inner] += ensemble69grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble68grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble67grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble67grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 1; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                __m512 ___x190_0 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x190_1 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x190_2 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x190_3 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x190_4 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x190_5 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x190_6 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x190_7 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x190_8 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x190_9 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x190_10 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x190_11 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x190_12 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x190_13 = _mm512_load_ps(& ensemble66inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x191 = _mm512_load_ps(& ensemble66grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x192_0 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x192_1 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x192_2 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x192_3 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x192_4 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x192_5 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x192_6 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x192_7 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x192_8 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x192_9 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x192_10 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x192_11 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x192_12 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x192_13 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x191 = _mm512_fmadd_ps(___x192_0, ___x190_0, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_1, ___x190_1, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_2, ___x190_2, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_3, ___x190_3, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_4, ___x190_4, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_5, ___x190_5, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_6, ___x190_6, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_7, ___x190_7, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_8, ___x190_8, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_9, ___x190_9, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_10, ___x190_10, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_11, ___x190_11, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_12, ___x190_12, ___x191);
                                    ___x191 = _mm512_fmadd_ps(___x192_13, ___x190_13, ___x191);
                                    _mm512_store_ps(& ensemble66grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x191);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 1; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                __m512 ___x188_0 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x188_1 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x188_2 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x188_3 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x188_4 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x188_5 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x188_6 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x188_7 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x188_8 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x188_9 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x188_10 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x188_11 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x188_12 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x188_13 = _mm512_load_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x187 = _mm512_load_ps(& ensemble66weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x189_0 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x189_1 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x189_2 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x189_3 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x189_4 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x189_5 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x189_6 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x189_7 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x189_8 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x189_9 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x189_10 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x189_11 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x189_12 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x189_13 = _mm512_set1_ps(ensemble66grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x188_0 = _mm512_fmadd_ps(___x189_0, ___x187, ___x188_0);
                                    ___x188_1 = _mm512_fmadd_ps(___x189_1, ___x187, ___x188_1);
                                    ___x188_2 = _mm512_fmadd_ps(___x189_2, ___x187, ___x188_2);
                                    ___x188_3 = _mm512_fmadd_ps(___x189_3, ___x187, ___x188_3);
                                    ___x188_4 = _mm512_fmadd_ps(___x189_4, ___x187, ___x188_4);
                                    ___x188_5 = _mm512_fmadd_ps(___x189_5, ___x187, ___x188_5);
                                    ___x188_6 = _mm512_fmadd_ps(___x189_6, ___x187, ___x188_6);
                                    ___x188_7 = _mm512_fmadd_ps(___x189_7, ___x187, ___x188_7);
                                    ___x188_8 = _mm512_fmadd_ps(___x189_8, ___x187, ___x188_8);
                                    ___x188_9 = _mm512_fmadd_ps(___x189_9, ___x187, ___x188_9);
                                    ___x188_10 = _mm512_fmadd_ps(___x189_10, ___x187, ___x188_10);
                                    ___x188_11 = _mm512_fmadd_ps(___x189_11, ___x187, ___x188_11);
                                    ___x188_12 = _mm512_fmadd_ps(___x189_12, ___x187, ___x188_12);
                                    ___x188_13 = _mm512_fmadd_ps(___x189_13, ___x187, ___x188_13);
                                }
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x188_0);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x188_1);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x188_2);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x188_3);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x188_4);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x188_5);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x188_6);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x188_7);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x188_8);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x188_9);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x188_10);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x188_11);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x188_12);
                                _mm512_store_ps(& ensemble66grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x188_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 1; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble65grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble65grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 1; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble64grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble64grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 1; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x182_0 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x182_1 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x182_2 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x182_3 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x182_4 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x182_5 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x182_6 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x182_7 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x182_8 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x182_9 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x182_10 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x182_11 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x182_12 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x182_13 = _mm512_load_ps(& ensemble63inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x181_0 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_1 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_2 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_3 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_4 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_5 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_6 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_7 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_8 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_9 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_10 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_11 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_12 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x181_13 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x183 = _mm512_load_ps(& ensemble63grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x183 = _mm512_fmadd_ps(___x181_0, ___x182_0, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_1, ___x182_1, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_2, ___x182_2, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_3, ___x182_3, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_4, ___x182_4, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_5, ___x182_5, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_6, ___x182_6, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_7, ___x182_7, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_8, ___x182_8, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_9, ___x182_9, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_10, ___x182_10, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_11, ___x182_11, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_12, ___x182_12, ___x183);
                                    ___x183 = _mm512_fmadd_ps(___x181_13, ___x182_13, ___x183);
                                    _mm512_store_ps(& ensemble63grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x183);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 1; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x178_0 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x178_1 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x178_2 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x178_3 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x178_4 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x178_5 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x178_6 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x178_7 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x178_8 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x178_9 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x178_10 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x178_11 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x178_12 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x178_13 = _mm512_load_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x179_0 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_1 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_2 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_3 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_4 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_5 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_6 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_7 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_8 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_9 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_10 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_11 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_12 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x179_13 = _mm512_set1_ps(ensemble63grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x180 = _mm512_load_ps(& ensemble63weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x178_0 = _mm512_fmadd_ps(___x179_0, ___x180, ___x178_0);
                                    ___x178_1 = _mm512_fmadd_ps(___x179_1, ___x180, ___x178_1);
                                    ___x178_2 = _mm512_fmadd_ps(___x179_2, ___x180, ___x178_2);
                                    ___x178_3 = _mm512_fmadd_ps(___x179_3, ___x180, ___x178_3);
                                    ___x178_4 = _mm512_fmadd_ps(___x179_4, ___x180, ___x178_4);
                                    ___x178_5 = _mm512_fmadd_ps(___x179_5, ___x180, ___x178_5);
                                    ___x178_6 = _mm512_fmadd_ps(___x179_6, ___x180, ___x178_6);
                                    ___x178_7 = _mm512_fmadd_ps(___x179_7, ___x180, ___x178_7);
                                    ___x178_8 = _mm512_fmadd_ps(___x179_8, ___x180, ___x178_8);
                                    ___x178_9 = _mm512_fmadd_ps(___x179_9, ___x180, ___x178_9);
                                    ___x178_10 = _mm512_fmadd_ps(___x179_10, ___x180, ___x178_10);
                                    ___x178_11 = _mm512_fmadd_ps(___x179_11, ___x180, ___x178_11);
                                    ___x178_12 = _mm512_fmadd_ps(___x179_12, ___x180, ___x178_12);
                                    ___x178_13 = _mm512_fmadd_ps(___x179_13, ___x180, ___x178_13);
                                }
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x178_0);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x178_1);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x178_2);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x178_3);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x178_4);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x178_5);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x178_6);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x178_7);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x178_8);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x178_9);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x178_10);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x178_11);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x178_12);
                                _mm512_store_ps(& ensemble63grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x178_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 13; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble62grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 13; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble61grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble61grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 13; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 6; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x173_0 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x173_1 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x173_2 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x173_3 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x173_4 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x173_5 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x173_6 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x173_7 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x173_8 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x173_9 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x173_10 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x173_11 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x173_12 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x173_13 = _mm512_load_ps(& ensemble60inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x172 = _mm512_load_ps(& ensemble60grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x174_0 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x174_1 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x174_2 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x174_3 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x174_4 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x174_5 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x174_6 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x174_7 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x174_8 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x174_9 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x174_10 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x174_11 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x174_12 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x174_13 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x172 = _mm512_fmadd_ps(___x174_0, ___x173_0, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_1, ___x173_1, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_2, ___x173_2, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_3, ___x173_3, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_4, ___x173_4, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_5, ___x173_5, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_6, ___x173_6, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_7, ___x173_7, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_8, ___x173_8, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_9, ___x173_9, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_10, ___x173_10, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_11, ___x173_11, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_12, ___x173_12, ___x172);
                                    ___x172 = _mm512_fmadd_ps(___x174_13, ___x173_13, ___x172);
                                    _mm512_store_ps(& ensemble60grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x172);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 6; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 13; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x169_0 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x169_1 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x169_2 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x169_3 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x169_4 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x169_5 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x169_6 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x169_7 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x169_8 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x169_9 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x169_10 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x169_11 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x169_12 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x169_13 = _mm512_load_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x170 = _mm512_load_ps(& ensemble60weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x171_0 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x171_1 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x171_2 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x171_3 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x171_4 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x171_5 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x171_6 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x171_7 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x171_8 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x171_9 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x171_10 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x171_11 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x171_12 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x171_13 = _mm512_set1_ps(ensemble60grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    ___x169_0 = _mm512_fmadd_ps(___x171_0, ___x170, ___x169_0);
                                    ___x169_1 = _mm512_fmadd_ps(___x171_1, ___x170, ___x169_1);
                                    ___x169_2 = _mm512_fmadd_ps(___x171_2, ___x170, ___x169_2);
                                    ___x169_3 = _mm512_fmadd_ps(___x171_3, ___x170, ___x169_3);
                                    ___x169_4 = _mm512_fmadd_ps(___x171_4, ___x170, ___x169_4);
                                    ___x169_5 = _mm512_fmadd_ps(___x171_5, ___x170, ___x169_5);
                                    ___x169_6 = _mm512_fmadd_ps(___x171_6, ___x170, ___x169_6);
                                    ___x169_7 = _mm512_fmadd_ps(___x171_7, ___x170, ___x169_7);
                                    ___x169_8 = _mm512_fmadd_ps(___x171_8, ___x170, ___x169_8);
                                    ___x169_9 = _mm512_fmadd_ps(___x171_9, ___x170, ___x169_9);
                                    ___x169_10 = _mm512_fmadd_ps(___x171_10, ___x170, ___x169_10);
                                    ___x169_11 = _mm512_fmadd_ps(___x171_11, ___x170, ___x169_11);
                                    ___x169_12 = _mm512_fmadd_ps(___x171_12, ___x170, ___x169_12);
                                    ___x169_13 = _mm512_fmadd_ps(___x171_13, ___x170, ___x169_13);
                                }
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x169_0);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x169_1);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x169_2);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x169_3);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x169_4);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x169_5);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x169_6);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x169_7);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x169_8);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x169_9);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x169_10);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x169_11);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x169_12);
                                _mm512_store_ps(& ensemble60grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x169_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble59grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble58grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble58grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x165_0 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x165_1 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x165_2 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x165_3 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x165_4 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x165_5 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x165_6 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x165_7 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x165_8 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x165_9 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x165_10 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x165_11 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x165_12 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x165_13 = _mm512_load_ps(& ensemble57inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x163 = _mm512_load_ps(& ensemble57grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x164_0 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_1 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_2 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_3 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_4 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_5 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_6 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_7 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_8 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_9 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_10 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_11 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_12 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x164_13 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    ___x163 = _mm512_fmadd_ps(___x164_0, ___x165_0, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_1, ___x165_1, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_2, ___x165_2, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_3, ___x165_3, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_4, ___x165_4, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_5, ___x165_5, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_6, ___x165_6, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_7, ___x165_7, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_8, ___x165_8, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_9, ___x165_9, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_10, ___x165_10, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_11, ___x165_11, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_12, ___x165_12, ___x163);
                                    ___x163 = _mm512_fmadd_ps(___x164_13, ___x165_13, ___x163);
                                    _mm512_store_ps(& ensemble57grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x163);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x160_0 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x160_1 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x160_2 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x160_3 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x160_4 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x160_5 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x160_6 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x160_7 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x160_8 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x160_9 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x160_10 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x160_11 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x160_12 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x160_13 = _mm512_load_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x161_0 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_1 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_2 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_3 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_4 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_5 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_6 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_7 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_8 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_9 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_10 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_11 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_12 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x161_13 = _mm512_set1_ps(ensemble57grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x162 = _mm512_load_ps(& ensemble57weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x160_0 = _mm512_fmadd_ps(___x161_0, ___x162, ___x160_0);
                                    ___x160_1 = _mm512_fmadd_ps(___x161_1, ___x162, ___x160_1);
                                    ___x160_2 = _mm512_fmadd_ps(___x161_2, ___x162, ___x160_2);
                                    ___x160_3 = _mm512_fmadd_ps(___x161_3, ___x162, ___x160_3);
                                    ___x160_4 = _mm512_fmadd_ps(___x161_4, ___x162, ___x160_4);
                                    ___x160_5 = _mm512_fmadd_ps(___x161_5, ___x162, ___x160_5);
                                    ___x160_6 = _mm512_fmadd_ps(___x161_6, ___x162, ___x160_6);
                                    ___x160_7 = _mm512_fmadd_ps(___x161_7, ___x162, ___x160_7);
                                    ___x160_8 = _mm512_fmadd_ps(___x161_8, ___x162, ___x160_8);
                                    ___x160_9 = _mm512_fmadd_ps(___x161_9, ___x162, ___x160_9);
                                    ___x160_10 = _mm512_fmadd_ps(___x161_10, ___x162, ___x160_10);
                                    ___x160_11 = _mm512_fmadd_ps(___x161_11, ___x162, ___x160_11);
                                    ___x160_12 = _mm512_fmadd_ps(___x161_12, ___x162, ___x160_12);
                                    ___x160_13 = _mm512_fmadd_ps(___x161_13, ___x162, ___x160_13);
                                }
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x160_0);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x160_1);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x160_2);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x160_3);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x160_4);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x160_5);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x160_6);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x160_7);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x160_8);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x160_9);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x160_10);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x160_11);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x160_12);
                                _mm512_store_ps(& ensemble57grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x160_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble56grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble55grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble55grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x155_0 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x155_1 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x155_2 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x155_3 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x155_4 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x155_5 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x155_6 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x155_7 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x155_8 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x155_9 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x155_10 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x155_11 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x155_12 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x155_13 = _mm512_load_ps(& ensemble54inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x154_0 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x154_1 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x154_2 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x154_3 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x154_4 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x154_5 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x154_6 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x154_7 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x154_8 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x154_9 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x154_10 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x154_11 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x154_12 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x154_13 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x156 = _mm512_load_ps(& ensemble54grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x156 = _mm512_fmadd_ps(___x154_0, ___x155_0, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_1, ___x155_1, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_2, ___x155_2, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_3, ___x155_3, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_4, ___x155_4, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_5, ___x155_5, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_6, ___x155_6, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_7, ___x155_7, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_8, ___x155_8, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_9, ___x155_9, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_10, ___x155_10, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_11, ___x155_11, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_12, ___x155_12, ___x156);
                                    ___x156 = _mm512_fmadd_ps(___x154_13, ___x155_13, ___x156);
                                    _mm512_store_ps(& ensemble54grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x156);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 14) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x152_0 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x152_1 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x152_2 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x152_3 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x152_4 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x152_5 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x152_6 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x152_7 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x152_8 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x152_9 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x152_10 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x152_11 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x152_12 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x152_13 = _mm512_load_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x151_0 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x151_1 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x151_2 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x151_3 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x151_4 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x151_5 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x151_6 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x151_7 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x151_8 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x151_9 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x151_10 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x151_11 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x151_12 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x151_13 = _mm512_set1_ps(ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x153 = _mm512_load_ps(& ensemble54weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x152_0 = _mm512_fmadd_ps(___x151_0, ___x153, ___x152_0);
                                    ___x152_1 = _mm512_fmadd_ps(___x151_1, ___x153, ___x152_1);
                                    ___x152_2 = _mm512_fmadd_ps(___x151_2, ___x153, ___x152_2);
                                    ___x152_3 = _mm512_fmadd_ps(___x151_3, ___x153, ___x152_3);
                                    ___x152_4 = _mm512_fmadd_ps(___x151_4, ___x153, ___x152_4);
                                    ___x152_5 = _mm512_fmadd_ps(___x151_5, ___x153, ___x152_5);
                                    ___x152_6 = _mm512_fmadd_ps(___x151_6, ___x153, ___x152_6);
                                    ___x152_7 = _mm512_fmadd_ps(___x151_7, ___x153, ___x152_7);
                                    ___x152_8 = _mm512_fmadd_ps(___x151_8, ___x153, ___x152_8);
                                    ___x152_9 = _mm512_fmadd_ps(___x151_9, ___x153, ___x152_9);
                                    ___x152_10 = _mm512_fmadd_ps(___x151_10, ___x153, ___x152_10);
                                    ___x152_11 = _mm512_fmadd_ps(___x151_11, ___x153, ___x152_11);
                                    ___x152_12 = _mm512_fmadd_ps(___x151_12, ___x153, ___x152_12);
                                    ___x152_13 = _mm512_fmadd_ps(___x151_13, ___x153, ___x152_13);
                                }
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x152_0);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x152_1);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x152_2);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x152_3);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x152_4);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x152_5);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x152_6);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x152_7);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x152_8);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x152_9);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x152_10);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x152_11);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x152_12);
                                _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x152_13);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 30; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 2 - 0;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 2 - 0;
                        int _input_offset_3 = in_x;
                        long j = ensemble53mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble53mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble53grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 27)][MIN(MAX(k + _input_offset_3, 0), 27)][_input_offset_1_inner] += ensemble53grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x144 = _mm512_load_ps(& ensemble52grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble52grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x144);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x145 = _mm512_load_ps(& ensemble52grad[_neuron_index_0][(_neuron_index_1_outer + 8)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble52grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x145);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x146 = _mm512_load_ps(& ensemble52grad[_neuron_index_0][(_neuron_index_1_outer + 20)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble52grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x146);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x147 = _mm512_load_ps(& ensemble52grad[_neuron_index_0][(_neuron_index_1_outer + 26)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble52grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x147);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble51grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble50grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble50grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x138_0 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x138_1 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x138_2 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x138_3 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x138_4 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x138_5 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x138_6 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x138_7 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x138_8 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x138_9 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x138_10 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x138_11 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x138_12 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x138_13 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x138_14 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x138_15 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x138_16 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x138_17 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x138_18 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x138_19 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x138_20 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x138_21 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x138_22 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x138_23 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x138_24 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x138_25 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x138_26 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x138_27 = _mm512_load_ps(& ensemble49inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x137 = _mm512_load_ps(& ensemble49grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x139_0 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x139_1 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x139_2 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x139_3 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x139_4 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x139_5 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x139_6 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x139_7 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x139_8 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x139_9 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x139_10 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x139_11 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x139_12 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x139_13 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x139_14 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x139_15 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x139_16 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x139_17 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x139_18 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x139_19 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x139_20 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x139_21 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x139_22 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x139_23 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x139_24 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x139_25 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x139_26 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x139_27 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    ___x137 = _mm512_fmadd_ps(___x139_0, ___x138_0, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_1, ___x138_1, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_2, ___x138_2, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_3, ___x138_3, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_4, ___x138_4, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_5, ___x138_5, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_6, ___x138_6, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_7, ___x138_7, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_8, ___x138_8, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_9, ___x138_9, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_10, ___x138_10, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_11, ___x138_11, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_12, ___x138_12, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_13, ___x138_13, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_14, ___x138_14, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_15, ___x138_15, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_16, ___x138_16, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_17, ___x138_17, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_18, ___x138_18, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_19, ___x138_19, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_20, ___x138_20, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_21, ___x138_21, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_22, ___x138_22, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_23, ___x138_23, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_24, ___x138_24, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_25, ___x138_25, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_26, ___x138_26, ___x137);
                                    ___x137 = _mm512_fmadd_ps(___x139_27, ___x138_27, ___x137);
                                    _mm512_store_ps(& ensemble49grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x137);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x134_0 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x134_1 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x134_2 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x134_3 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x134_4 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x134_5 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x134_6 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x134_7 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x134_8 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x134_9 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x134_10 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x134_11 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x134_12 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x134_13 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x134_14 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x134_15 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x134_16 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x134_17 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x134_18 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x134_19 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x134_20 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x134_21 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x134_22 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x134_23 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x134_24 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x134_25 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x134_26 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x134_27 = _mm512_load_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x135 = _mm512_load_ps(& ensemble49weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x136_0 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x136_1 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x136_2 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x136_3 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x136_4 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x136_5 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x136_6 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x136_7 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x136_8 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x136_9 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x136_10 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x136_11 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x136_12 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x136_13 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x136_14 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x136_15 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x136_16 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x136_17 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x136_18 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x136_19 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x136_20 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x136_21 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x136_22 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x136_23 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x136_24 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x136_25 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x136_26 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x136_27 = _mm512_set1_ps(ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    ___x134_0 = _mm512_fmadd_ps(___x136_0, ___x135, ___x134_0);
                                    ___x134_1 = _mm512_fmadd_ps(___x136_1, ___x135, ___x134_1);
                                    ___x134_2 = _mm512_fmadd_ps(___x136_2, ___x135, ___x134_2);
                                    ___x134_3 = _mm512_fmadd_ps(___x136_3, ___x135, ___x134_3);
                                    ___x134_4 = _mm512_fmadd_ps(___x136_4, ___x135, ___x134_4);
                                    ___x134_5 = _mm512_fmadd_ps(___x136_5, ___x135, ___x134_5);
                                    ___x134_6 = _mm512_fmadd_ps(___x136_6, ___x135, ___x134_6);
                                    ___x134_7 = _mm512_fmadd_ps(___x136_7, ___x135, ___x134_7);
                                    ___x134_8 = _mm512_fmadd_ps(___x136_8, ___x135, ___x134_8);
                                    ___x134_9 = _mm512_fmadd_ps(___x136_9, ___x135, ___x134_9);
                                    ___x134_10 = _mm512_fmadd_ps(___x136_10, ___x135, ___x134_10);
                                    ___x134_11 = _mm512_fmadd_ps(___x136_11, ___x135, ___x134_11);
                                    ___x134_12 = _mm512_fmadd_ps(___x136_12, ___x135, ___x134_12);
                                    ___x134_13 = _mm512_fmadd_ps(___x136_13, ___x135, ___x134_13);
                                    ___x134_14 = _mm512_fmadd_ps(___x136_14, ___x135, ___x134_14);
                                    ___x134_15 = _mm512_fmadd_ps(___x136_15, ___x135, ___x134_15);
                                    ___x134_16 = _mm512_fmadd_ps(___x136_16, ___x135, ___x134_16);
                                    ___x134_17 = _mm512_fmadd_ps(___x136_17, ___x135, ___x134_17);
                                    ___x134_18 = _mm512_fmadd_ps(___x136_18, ___x135, ___x134_18);
                                    ___x134_19 = _mm512_fmadd_ps(___x136_19, ___x135, ___x134_19);
                                    ___x134_20 = _mm512_fmadd_ps(___x136_20, ___x135, ___x134_20);
                                    ___x134_21 = _mm512_fmadd_ps(___x136_21, ___x135, ___x134_21);
                                    ___x134_22 = _mm512_fmadd_ps(___x136_22, ___x135, ___x134_22);
                                    ___x134_23 = _mm512_fmadd_ps(___x136_23, ___x135, ___x134_23);
                                    ___x134_24 = _mm512_fmadd_ps(___x136_24, ___x135, ___x134_24);
                                    ___x134_25 = _mm512_fmadd_ps(___x136_25, ___x135, ___x134_25);
                                    ___x134_26 = _mm512_fmadd_ps(___x136_26, ___x135, ___x134_26);
                                    ___x134_27 = _mm512_fmadd_ps(___x136_27, ___x135, ___x134_27);
                                }
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x134_0);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x134_1);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x134_2);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x134_3);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x134_4);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x134_5);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x134_6);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x134_7);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x134_8);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x134_9);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x134_10);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x134_11);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x134_12);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x134_13);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x134_14);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x134_15);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x134_16);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x134_17);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x134_18);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x134_19);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x134_20);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x134_21);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x134_22);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x134_23);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x134_24);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x134_25);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x134_26);
                                _mm512_store_ps(& ensemble49grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x134_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble48mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble48mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble48grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 27)][MIN(MAX(k + _input_offset_3, 0), 27)][_input_offset_1_inner] += ensemble48grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble47grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble46grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble46grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                __m512 ___x128_0 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x128_1 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x128_2 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x128_3 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x128_4 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x128_5 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x128_6 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x128_7 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x128_8 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x128_9 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x128_10 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x128_11 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x128_12 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x128_13 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x128_14 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x128_15 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x128_16 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x128_17 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x128_18 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x128_19 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x128_20 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x128_21 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x128_22 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x128_23 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x128_24 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x128_25 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x128_26 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x128_27 = _mm512_load_ps(& ensemble45inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x129_0 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x129_1 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x129_2 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x129_3 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x129_4 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x129_5 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x129_6 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x129_7 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x129_8 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x129_9 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x129_10 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x129_11 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x129_12 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x129_13 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x129_14 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x129_15 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x129_16 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x129_17 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x129_18 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x129_19 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x129_20 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x129_21 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x129_22 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x129_23 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x129_24 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x129_25 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x129_26 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x129_27 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    __m512 ___x130 = _mm512_load_ps(& ensemble45grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x130 = _mm512_fmadd_ps(___x129_0, ___x128_0, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_1, ___x128_1, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_2, ___x128_2, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_3, ___x128_3, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_4, ___x128_4, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_5, ___x128_5, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_6, ___x128_6, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_7, ___x128_7, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_8, ___x128_8, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_9, ___x128_9, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_10, ___x128_10, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_11, ___x128_11, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_12, ___x128_12, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_13, ___x128_13, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_14, ___x128_14, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_15, ___x128_15, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_16, ___x128_16, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_17, ___x128_17, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_18, ___x128_18, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_19, ___x128_19, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_20, ___x128_20, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_21, ___x128_21, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_22, ___x128_22, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_23, ___x128_23, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_24, ___x128_24, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_25, ___x128_25, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_26, ___x128_26, ___x130);
                                    ___x130 = _mm512_fmadd_ps(___x129_27, ___x128_27, ___x130);
                                    _mm512_store_ps(& ensemble45grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x130);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                __m512 ___x125_0 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x125_1 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x125_2 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x125_3 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x125_4 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x125_5 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x125_6 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x125_7 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x125_8 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x125_9 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x125_10 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x125_11 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x125_12 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x125_13 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x125_14 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x125_15 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x125_16 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x125_17 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x125_18 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x125_19 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x125_20 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x125_21 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x125_22 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x125_23 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x125_24 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x125_25 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x125_26 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x125_27 = _mm512_load_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x126_0 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x126_1 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x126_2 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x126_3 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x126_4 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x126_5 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x126_6 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x126_7 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x126_8 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x126_9 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x126_10 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x126_11 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x126_12 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x126_13 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x126_14 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x126_15 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x126_16 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x126_17 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x126_18 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x126_19 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x126_20 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x126_21 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x126_22 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x126_23 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x126_24 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x126_25 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x126_26 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x126_27 = _mm512_set1_ps(ensemble45grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    __m512 ___x127 = _mm512_load_ps(& ensemble45weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x125_0 = _mm512_fmadd_ps(___x126_0, ___x127, ___x125_0);
                                    ___x125_1 = _mm512_fmadd_ps(___x126_1, ___x127, ___x125_1);
                                    ___x125_2 = _mm512_fmadd_ps(___x126_2, ___x127, ___x125_2);
                                    ___x125_3 = _mm512_fmadd_ps(___x126_3, ___x127, ___x125_3);
                                    ___x125_4 = _mm512_fmadd_ps(___x126_4, ___x127, ___x125_4);
                                    ___x125_5 = _mm512_fmadd_ps(___x126_5, ___x127, ___x125_5);
                                    ___x125_6 = _mm512_fmadd_ps(___x126_6, ___x127, ___x125_6);
                                    ___x125_7 = _mm512_fmadd_ps(___x126_7, ___x127, ___x125_7);
                                    ___x125_8 = _mm512_fmadd_ps(___x126_8, ___x127, ___x125_8);
                                    ___x125_9 = _mm512_fmadd_ps(___x126_9, ___x127, ___x125_9);
                                    ___x125_10 = _mm512_fmadd_ps(___x126_10, ___x127, ___x125_10);
                                    ___x125_11 = _mm512_fmadd_ps(___x126_11, ___x127, ___x125_11);
                                    ___x125_12 = _mm512_fmadd_ps(___x126_12, ___x127, ___x125_12);
                                    ___x125_13 = _mm512_fmadd_ps(___x126_13, ___x127, ___x125_13);
                                    ___x125_14 = _mm512_fmadd_ps(___x126_14, ___x127, ___x125_14);
                                    ___x125_15 = _mm512_fmadd_ps(___x126_15, ___x127, ___x125_15);
                                    ___x125_16 = _mm512_fmadd_ps(___x126_16, ___x127, ___x125_16);
                                    ___x125_17 = _mm512_fmadd_ps(___x126_17, ___x127, ___x125_17);
                                    ___x125_18 = _mm512_fmadd_ps(___x126_18, ___x127, ___x125_18);
                                    ___x125_19 = _mm512_fmadd_ps(___x126_19, ___x127, ___x125_19);
                                    ___x125_20 = _mm512_fmadd_ps(___x126_20, ___x127, ___x125_20);
                                    ___x125_21 = _mm512_fmadd_ps(___x126_21, ___x127, ___x125_21);
                                    ___x125_22 = _mm512_fmadd_ps(___x126_22, ___x127, ___x125_22);
                                    ___x125_23 = _mm512_fmadd_ps(___x126_23, ___x127, ___x125_23);
                                    ___x125_24 = _mm512_fmadd_ps(___x126_24, ___x127, ___x125_24);
                                    ___x125_25 = _mm512_fmadd_ps(___x126_25, ___x127, ___x125_25);
                                    ___x125_26 = _mm512_fmadd_ps(___x126_26, ___x127, ___x125_26);
                                    ___x125_27 = _mm512_fmadd_ps(___x126_27, ___x127, ___x125_27);
                                }
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x125_0);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x125_1);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x125_2);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x125_3);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x125_4);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x125_5);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x125_6);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x125_7);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x125_8);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x125_9);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x125_10);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x125_11);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x125_12);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x125_13);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x125_14);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x125_15);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x125_16);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x125_17);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x125_18);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x125_19);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x125_20);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x125_21);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x125_22);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x125_23);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x125_24);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x125_25);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x125_26);
                                _mm512_store_ps(& ensemble45grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x125_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble44grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble43grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble43grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x120_0 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x120_1 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x120_2 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x120_3 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x120_4 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x120_5 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x120_6 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x120_7 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x120_8 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x120_9 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x120_10 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x120_11 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x120_12 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x120_13 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x120_14 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x120_15 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x120_16 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x120_17 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x120_18 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x120_19 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x120_20 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x120_21 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x120_22 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x120_23 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x120_24 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x120_25 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x120_26 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x120_27 = _mm512_load_ps(& ensemble42inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x119_0 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_1 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_2 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_3 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_4 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_5 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_6 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_7 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_8 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_9 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_10 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_11 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_12 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_13 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_14 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 14 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_15 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 15 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_16 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 16 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_17 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 17 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_18 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 18 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_19 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 19 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_20 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 20 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_21 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 21 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_22 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 22 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_23 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 23 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_24 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 24 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_25 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 25 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_26 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 26 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x119_27 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 27 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x121 = _mm512_load_ps(& ensemble42grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x121 = _mm512_fmadd_ps(___x119_0, ___x120_0, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_1, ___x120_1, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_2, ___x120_2, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_3, ___x120_3, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_4, ___x120_4, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_5, ___x120_5, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_6, ___x120_6, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_7, ___x120_7, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_8, ___x120_8, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_9, ___x120_9, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_10, ___x120_10, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_11, ___x120_11, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_12, ___x120_12, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_13, ___x120_13, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_14, ___x120_14, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_15, ___x120_15, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_16, ___x120_16, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_17, ___x120_17, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_18, ___x120_18, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_19, ___x120_19, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_20, ___x120_20, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_21, ___x120_21, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_22, ___x120_22, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_23, ___x120_23, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_24, ___x120_24, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_25, ___x120_25, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_26, ___x120_26, ___x121);
                                    ___x121 = _mm512_fmadd_ps(___x119_27, ___x120_27, ___x121);
                                    _mm512_store_ps(& ensemble42grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x121);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x118_0 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x118_1 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x118_2 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x118_3 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x118_4 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x118_5 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x118_6 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x118_7 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x118_8 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x118_9 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x118_10 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x118_11 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x118_12 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x118_13 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x118_14 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x118_15 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x118_16 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x118_17 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x118_18 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x118_19 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x118_20 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x118_21 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x118_22 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x118_23 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x118_24 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x118_25 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x118_26 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x118_27 = _mm512_load_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x116_0 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_1 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_2 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_3 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_4 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_5 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_6 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_7 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_8 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_9 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_10 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_11 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_12 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_13 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_14 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 14 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_15 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 15 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_16 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 16 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_17 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 17 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_18 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 18 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_19 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 19 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_20 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 20 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_21 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 21 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_22 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 22 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_23 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 23 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_24 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 24 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_25 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 25 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_26 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 26 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x116_27 = _mm512_set1_ps(ensemble42grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 27 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x117 = _mm512_load_ps(& ensemble42weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x118_0 = _mm512_fmadd_ps(___x116_0, ___x117, ___x118_0);
                                    ___x118_1 = _mm512_fmadd_ps(___x116_1, ___x117, ___x118_1);
                                    ___x118_2 = _mm512_fmadd_ps(___x116_2, ___x117, ___x118_2);
                                    ___x118_3 = _mm512_fmadd_ps(___x116_3, ___x117, ___x118_3);
                                    ___x118_4 = _mm512_fmadd_ps(___x116_4, ___x117, ___x118_4);
                                    ___x118_5 = _mm512_fmadd_ps(___x116_5, ___x117, ___x118_5);
                                    ___x118_6 = _mm512_fmadd_ps(___x116_6, ___x117, ___x118_6);
                                    ___x118_7 = _mm512_fmadd_ps(___x116_7, ___x117, ___x118_7);
                                    ___x118_8 = _mm512_fmadd_ps(___x116_8, ___x117, ___x118_8);
                                    ___x118_9 = _mm512_fmadd_ps(___x116_9, ___x117, ___x118_9);
                                    ___x118_10 = _mm512_fmadd_ps(___x116_10, ___x117, ___x118_10);
                                    ___x118_11 = _mm512_fmadd_ps(___x116_11, ___x117, ___x118_11);
                                    ___x118_12 = _mm512_fmadd_ps(___x116_12, ___x117, ___x118_12);
                                    ___x118_13 = _mm512_fmadd_ps(___x116_13, ___x117, ___x118_13);
                                    ___x118_14 = _mm512_fmadd_ps(___x116_14, ___x117, ___x118_14);
                                    ___x118_15 = _mm512_fmadd_ps(___x116_15, ___x117, ___x118_15);
                                    ___x118_16 = _mm512_fmadd_ps(___x116_16, ___x117, ___x118_16);
                                    ___x118_17 = _mm512_fmadd_ps(___x116_17, ___x117, ___x118_17);
                                    ___x118_18 = _mm512_fmadd_ps(___x116_18, ___x117, ___x118_18);
                                    ___x118_19 = _mm512_fmadd_ps(___x116_19, ___x117, ___x118_19);
                                    ___x118_20 = _mm512_fmadd_ps(___x116_20, ___x117, ___x118_20);
                                    ___x118_21 = _mm512_fmadd_ps(___x116_21, ___x117, ___x118_21);
                                    ___x118_22 = _mm512_fmadd_ps(___x116_22, ___x117, ___x118_22);
                                    ___x118_23 = _mm512_fmadd_ps(___x116_23, ___x117, ___x118_23);
                                    ___x118_24 = _mm512_fmadd_ps(___x116_24, ___x117, ___x118_24);
                                    ___x118_25 = _mm512_fmadd_ps(___x116_25, ___x117, ___x118_25);
                                    ___x118_26 = _mm512_fmadd_ps(___x116_26, ___x117, ___x118_26);
                                    ___x118_27 = _mm512_fmadd_ps(___x116_27, ___x117, ___x118_27);
                                }
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x118_0);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x118_1);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x118_2);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x118_3);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x118_4);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x118_5);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x118_6);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x118_7);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x118_8);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x118_9);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x118_10);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x118_11);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x118_12);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x118_13);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x118_14);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x118_15);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x118_16);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x118_17);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x118_18);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x118_19);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x118_20);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x118_21);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x118_22);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x118_23);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x118_24);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x118_25);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x118_26);
                                _mm512_store_ps(& ensemble42grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x118_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble41grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble40grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble40grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 8; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x112_0 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x112_1 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x112_2 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x112_3 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x112_4 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x112_5 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x112_6 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x112_7 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x112_8 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x112_9 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x112_10 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x112_11 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x112_12 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x112_13 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x112_14 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x112_15 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x112_16 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x112_17 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x112_18 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x112_19 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x112_20 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x112_21 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x112_22 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x112_23 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x112_24 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x112_25 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x112_26 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x112_27 = _mm512_load_ps(& ensemble39inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x110 = _mm512_load_ps(& ensemble39grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x111_0 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x111_1 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x111_2 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x111_3 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x111_4 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x111_5 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x111_6 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x111_7 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x111_8 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x111_9 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x111_10 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x111_11 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x111_12 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x111_13 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x111_14 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x111_15 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x111_16 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x111_17 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x111_18 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x111_19 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x111_20 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x111_21 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x111_22 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x111_23 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x111_24 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x111_25 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x111_26 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x111_27 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    ___x110 = _mm512_fmadd_ps(___x111_0, ___x112_0, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_1, ___x112_1, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_2, ___x112_2, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_3, ___x112_3, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_4, ___x112_4, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_5, ___x112_5, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_6, ___x112_6, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_7, ___x112_7, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_8, ___x112_8, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_9, ___x112_9, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_10, ___x112_10, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_11, ___x112_11, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_12, ___x112_12, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_13, ___x112_13, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_14, ___x112_14, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_15, ___x112_15, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_16, ___x112_16, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_17, ___x112_17, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_18, ___x112_18, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_19, ___x112_19, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_20, ___x112_20, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_21, ___x112_21, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_22, ___x112_22, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_23, ___x112_23, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_24, ___x112_24, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_25, ___x112_25, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_26, ___x112_26, ___x110);
                                    ___x110 = _mm512_fmadd_ps(___x111_27, ___x112_27, ___x110);
                                    _mm512_store_ps(& ensemble39grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x110);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 8; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x109_0 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x109_1 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x109_2 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x109_3 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x109_4 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x109_5 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x109_6 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x109_7 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x109_8 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x109_9 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x109_10 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x109_11 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x109_12 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x109_13 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x109_14 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x109_15 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x109_16 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x109_17 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x109_18 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x109_19 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x109_20 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x109_21 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x109_22 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x109_23 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x109_24 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x109_25 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x109_26 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x109_27 = _mm512_load_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x107 = _mm512_load_ps(& ensemble39weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x108_0 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x108_1 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x108_2 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x108_3 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x108_4 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x108_5 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x108_6 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x108_7 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x108_8 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x108_9 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x108_10 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x108_11 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x108_12 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x108_13 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x108_14 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x108_15 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x108_16 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x108_17 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x108_18 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x108_19 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x108_20 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x108_21 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x108_22 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x108_23 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x108_24 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x108_25 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x108_26 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x108_27 = _mm512_set1_ps(ensemble39grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    ___x109_0 = _mm512_fmadd_ps(___x108_0, ___x107, ___x109_0);
                                    ___x109_1 = _mm512_fmadd_ps(___x108_1, ___x107, ___x109_1);
                                    ___x109_2 = _mm512_fmadd_ps(___x108_2, ___x107, ___x109_2);
                                    ___x109_3 = _mm512_fmadd_ps(___x108_3, ___x107, ___x109_3);
                                    ___x109_4 = _mm512_fmadd_ps(___x108_4, ___x107, ___x109_4);
                                    ___x109_5 = _mm512_fmadd_ps(___x108_5, ___x107, ___x109_5);
                                    ___x109_6 = _mm512_fmadd_ps(___x108_6, ___x107, ___x109_6);
                                    ___x109_7 = _mm512_fmadd_ps(___x108_7, ___x107, ___x109_7);
                                    ___x109_8 = _mm512_fmadd_ps(___x108_8, ___x107, ___x109_8);
                                    ___x109_9 = _mm512_fmadd_ps(___x108_9, ___x107, ___x109_9);
                                    ___x109_10 = _mm512_fmadd_ps(___x108_10, ___x107, ___x109_10);
                                    ___x109_11 = _mm512_fmadd_ps(___x108_11, ___x107, ___x109_11);
                                    ___x109_12 = _mm512_fmadd_ps(___x108_12, ___x107, ___x109_12);
                                    ___x109_13 = _mm512_fmadd_ps(___x108_13, ___x107, ___x109_13);
                                    ___x109_14 = _mm512_fmadd_ps(___x108_14, ___x107, ___x109_14);
                                    ___x109_15 = _mm512_fmadd_ps(___x108_15, ___x107, ___x109_15);
                                    ___x109_16 = _mm512_fmadd_ps(___x108_16, ___x107, ___x109_16);
                                    ___x109_17 = _mm512_fmadd_ps(___x108_17, ___x107, ___x109_17);
                                    ___x109_18 = _mm512_fmadd_ps(___x108_18, ___x107, ___x109_18);
                                    ___x109_19 = _mm512_fmadd_ps(___x108_19, ___x107, ___x109_19);
                                    ___x109_20 = _mm512_fmadd_ps(___x108_20, ___x107, ___x109_20);
                                    ___x109_21 = _mm512_fmadd_ps(___x108_21, ___x107, ___x109_21);
                                    ___x109_22 = _mm512_fmadd_ps(___x108_22, ___x107, ___x109_22);
                                    ___x109_23 = _mm512_fmadd_ps(___x108_23, ___x107, ___x109_23);
                                    ___x109_24 = _mm512_fmadd_ps(___x108_24, ___x107, ___x109_24);
                                    ___x109_25 = _mm512_fmadd_ps(___x108_25, ___x107, ___x109_25);
                                    ___x109_26 = _mm512_fmadd_ps(___x108_26, ___x107, ___x109_26);
                                    ___x109_27 = _mm512_fmadd_ps(___x108_27, ___x107, ___x109_27);
                                }
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x109_0);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x109_1);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x109_2);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x109_3);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x109_4);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x109_5);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x109_6);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x109_7);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x109_8);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x109_9);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x109_10);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x109_11);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x109_12);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x109_13);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x109_14);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x109_15);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x109_16);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x109_17);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x109_18);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x109_19);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x109_20);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x109_21);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x109_22);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x109_23);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x109_24);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x109_25);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x109_26);
                                _mm512_store_ps(& ensemble39grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x109_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble38grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble37grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble37grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x102_0 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x102_1 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x102_2 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x102_3 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x102_4 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x102_5 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x102_6 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x102_7 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x102_8 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x102_9 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x102_10 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x102_11 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x102_12 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x102_13 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x102_14 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x102_15 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x102_16 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x102_17 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x102_18 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x102_19 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x102_20 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x102_21 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x102_22 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x102_23 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x102_24 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x102_25 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x102_26 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x102_27 = _mm512_load_ps(& ensemble36inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x101 = _mm512_load_ps(& ensemble36grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x103_0 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_1 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_2 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_3 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_4 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_5 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_6 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_7 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_8 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_9 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_10 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_11 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_12 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_13 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_14 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_15 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_16 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_17 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_18 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_19 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_20 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_21 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_22 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_23 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_24 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_25 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_26 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x103_27 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][_neuron_index_1_inner]);
                                    ___x101 = _mm512_fmadd_ps(___x103_0, ___x102_0, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_1, ___x102_1, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_2, ___x102_2, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_3, ___x102_3, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_4, ___x102_4, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_5, ___x102_5, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_6, ___x102_6, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_7, ___x102_7, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_8, ___x102_8, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_9, ___x102_9, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_10, ___x102_10, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_11, ___x102_11, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_12, ___x102_12, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_13, ___x102_13, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_14, ___x102_14, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_15, ___x102_15, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_16, ___x102_16, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_17, ___x102_17, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_18, ___x102_18, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_19, ___x102_19, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_20, ___x102_20, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_21, ___x102_21, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_22, ___x102_22, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_23, ___x102_23, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_24, ___x102_24, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_25, ___x102_25, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_26, ___x102_26, ___x101);
                                    ___x101 = _mm512_fmadd_ps(___x103_27, ___x102_27, ___x101);
                                    _mm512_store_ps(& ensemble36grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x101);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x98_0 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x98_1 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x98_2 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x98_3 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x98_4 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x98_5 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x98_6 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x98_7 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x98_8 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x98_9 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x98_10 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x98_11 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x98_12 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x98_13 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x98_14 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x98_15 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x98_16 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x98_17 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x98_18 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x98_19 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x98_20 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x98_21 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x98_22 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x98_23 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x98_24 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x98_25 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x98_26 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x98_27 = _mm512_load_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x99_0 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_1 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_2 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_3 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_4 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_5 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_6 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_7 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_8 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_9 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_10 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_11 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_12 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_13 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_14 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_15 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_16 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_17 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_18 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_19 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_20 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_21 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_22 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_23 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_24 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_25 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_26 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x99_27 = _mm512_set1_ps(ensemble36grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x100 = _mm512_load_ps(& ensemble36weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x98_0 = _mm512_fmadd_ps(___x99_0, ___x100, ___x98_0);
                                    ___x98_1 = _mm512_fmadd_ps(___x99_1, ___x100, ___x98_1);
                                    ___x98_2 = _mm512_fmadd_ps(___x99_2, ___x100, ___x98_2);
                                    ___x98_3 = _mm512_fmadd_ps(___x99_3, ___x100, ___x98_3);
                                    ___x98_4 = _mm512_fmadd_ps(___x99_4, ___x100, ___x98_4);
                                    ___x98_5 = _mm512_fmadd_ps(___x99_5, ___x100, ___x98_5);
                                    ___x98_6 = _mm512_fmadd_ps(___x99_6, ___x100, ___x98_6);
                                    ___x98_7 = _mm512_fmadd_ps(___x99_7, ___x100, ___x98_7);
                                    ___x98_8 = _mm512_fmadd_ps(___x99_8, ___x100, ___x98_8);
                                    ___x98_9 = _mm512_fmadd_ps(___x99_9, ___x100, ___x98_9);
                                    ___x98_10 = _mm512_fmadd_ps(___x99_10, ___x100, ___x98_10);
                                    ___x98_11 = _mm512_fmadd_ps(___x99_11, ___x100, ___x98_11);
                                    ___x98_12 = _mm512_fmadd_ps(___x99_12, ___x100, ___x98_12);
                                    ___x98_13 = _mm512_fmadd_ps(___x99_13, ___x100, ___x98_13);
                                    ___x98_14 = _mm512_fmadd_ps(___x99_14, ___x100, ___x98_14);
                                    ___x98_15 = _mm512_fmadd_ps(___x99_15, ___x100, ___x98_15);
                                    ___x98_16 = _mm512_fmadd_ps(___x99_16, ___x100, ___x98_16);
                                    ___x98_17 = _mm512_fmadd_ps(___x99_17, ___x100, ___x98_17);
                                    ___x98_18 = _mm512_fmadd_ps(___x99_18, ___x100, ___x98_18);
                                    ___x98_19 = _mm512_fmadd_ps(___x99_19, ___x100, ___x98_19);
                                    ___x98_20 = _mm512_fmadd_ps(___x99_20, ___x100, ___x98_20);
                                    ___x98_21 = _mm512_fmadd_ps(___x99_21, ___x100, ___x98_21);
                                    ___x98_22 = _mm512_fmadd_ps(___x99_22, ___x100, ___x98_22);
                                    ___x98_23 = _mm512_fmadd_ps(___x99_23, ___x100, ___x98_23);
                                    ___x98_24 = _mm512_fmadd_ps(___x99_24, ___x100, ___x98_24);
                                    ___x98_25 = _mm512_fmadd_ps(___x99_25, ___x100, ___x98_25);
                                    ___x98_26 = _mm512_fmadd_ps(___x99_26, ___x100, ___x98_26);
                                    ___x98_27 = _mm512_fmadd_ps(___x99_27, ___x100, ___x98_27);
                                }
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x98_0);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x98_1);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x98_2);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x98_3);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x98_4);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x98_5);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x98_6);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x98_7);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x98_8);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x98_9);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x98_10);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x98_11);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x98_12);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x98_13);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x98_14);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x98_15);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x98_16);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x98_17);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x98_18);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x98_19);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x98_20);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x98_21);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x98_22);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x98_23);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x98_24);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x98_25);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x98_26);
                                _mm512_store_ps(& ensemble36grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x98_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble35grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble34grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble34grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x92_0 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x92_1 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x92_2 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x92_3 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x92_4 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x92_5 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x92_6 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x92_7 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x92_8 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x92_9 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x92_10 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x92_11 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x92_12 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x92_13 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x92_14 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x92_15 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x92_16 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x92_17 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x92_18 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x92_19 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x92_20 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x92_21 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x92_22 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x92_23 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x92_24 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x92_25 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x92_26 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x92_27 = _mm512_load_ps(& ensemble33inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x93 = _mm512_load_ps(& ensemble33grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x94_0 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x94_1 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x94_2 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x94_3 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x94_4 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x94_5 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x94_6 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x94_7 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x94_8 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x94_9 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x94_10 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x94_11 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x94_12 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x94_13 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x94_14 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x94_15 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x94_16 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x94_17 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x94_18 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x94_19 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x94_20 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x94_21 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x94_22 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x94_23 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x94_24 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x94_25 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x94_26 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x94_27 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    ___x93 = _mm512_fmadd_ps(___x94_0, ___x92_0, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_1, ___x92_1, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_2, ___x92_2, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_3, ___x92_3, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_4, ___x92_4, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_5, ___x92_5, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_6, ___x92_6, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_7, ___x92_7, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_8, ___x92_8, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_9, ___x92_9, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_10, ___x92_10, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_11, ___x92_11, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_12, ___x92_12, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_13, ___x92_13, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_14, ___x92_14, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_15, ___x92_15, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_16, ___x92_16, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_17, ___x92_17, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_18, ___x92_18, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_19, ___x92_19, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_20, ___x92_20, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_21, ___x92_21, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_22, ___x92_22, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_23, ___x92_23, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_24, ___x92_24, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_25, ___x92_25, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_26, ___x92_26, ___x93);
                                    ___x93 = _mm512_fmadd_ps(___x94_27, ___x92_27, ___x93);
                                    _mm512_store_ps(& ensemble33grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x93);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x89_0 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x89_1 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x89_2 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x89_3 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x89_4 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x89_5 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x89_6 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x89_7 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x89_8 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x89_9 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x89_10 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x89_11 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x89_12 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x89_13 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x89_14 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x89_15 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x89_16 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x89_17 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x89_18 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x89_19 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x89_20 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x89_21 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x89_22 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x89_23 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x89_24 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x89_25 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x89_26 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x89_27 = _mm512_load_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x90_0 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x90_1 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x90_2 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x90_3 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x90_4 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x90_5 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x90_6 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x90_7 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x90_8 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x90_9 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x90_10 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x90_11 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x90_12 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x90_13 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x90_14 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x90_15 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x90_16 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x90_17 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x90_18 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x90_19 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x90_20 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x90_21 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x90_22 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x90_23 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x90_24 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x90_25 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x90_26 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x90_27 = _mm512_set1_ps(ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    __m512 ___x91 = _mm512_load_ps(& ensemble33weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x89_0 = _mm512_fmadd_ps(___x90_0, ___x91, ___x89_0);
                                    ___x89_1 = _mm512_fmadd_ps(___x90_1, ___x91, ___x89_1);
                                    ___x89_2 = _mm512_fmadd_ps(___x90_2, ___x91, ___x89_2);
                                    ___x89_3 = _mm512_fmadd_ps(___x90_3, ___x91, ___x89_3);
                                    ___x89_4 = _mm512_fmadd_ps(___x90_4, ___x91, ___x89_4);
                                    ___x89_5 = _mm512_fmadd_ps(___x90_5, ___x91, ___x89_5);
                                    ___x89_6 = _mm512_fmadd_ps(___x90_6, ___x91, ___x89_6);
                                    ___x89_7 = _mm512_fmadd_ps(___x90_7, ___x91, ___x89_7);
                                    ___x89_8 = _mm512_fmadd_ps(___x90_8, ___x91, ___x89_8);
                                    ___x89_9 = _mm512_fmadd_ps(___x90_9, ___x91, ___x89_9);
                                    ___x89_10 = _mm512_fmadd_ps(___x90_10, ___x91, ___x89_10);
                                    ___x89_11 = _mm512_fmadd_ps(___x90_11, ___x91, ___x89_11);
                                    ___x89_12 = _mm512_fmadd_ps(___x90_12, ___x91, ___x89_12);
                                    ___x89_13 = _mm512_fmadd_ps(___x90_13, ___x91, ___x89_13);
                                    ___x89_14 = _mm512_fmadd_ps(___x90_14, ___x91, ___x89_14);
                                    ___x89_15 = _mm512_fmadd_ps(___x90_15, ___x91, ___x89_15);
                                    ___x89_16 = _mm512_fmadd_ps(___x90_16, ___x91, ___x89_16);
                                    ___x89_17 = _mm512_fmadd_ps(___x90_17, ___x91, ___x89_17);
                                    ___x89_18 = _mm512_fmadd_ps(___x90_18, ___x91, ___x89_18);
                                    ___x89_19 = _mm512_fmadd_ps(___x90_19, ___x91, ___x89_19);
                                    ___x89_20 = _mm512_fmadd_ps(___x90_20, ___x91, ___x89_20);
                                    ___x89_21 = _mm512_fmadd_ps(___x90_21, ___x91, ___x89_21);
                                    ___x89_22 = _mm512_fmadd_ps(___x90_22, ___x91, ___x89_22);
                                    ___x89_23 = _mm512_fmadd_ps(___x90_23, ___x91, ___x89_23);
                                    ___x89_24 = _mm512_fmadd_ps(___x90_24, ___x91, ___x89_24);
                                    ___x89_25 = _mm512_fmadd_ps(___x90_25, ___x91, ___x89_25);
                                    ___x89_26 = _mm512_fmadd_ps(___x90_26, ___x91, ___x89_26);
                                    ___x89_27 = _mm512_fmadd_ps(___x90_27, ___x91, ___x89_27);
                                }
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x89_0);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x89_1);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x89_2);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x89_3);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x89_4);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x89_5);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x89_6);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x89_7);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x89_8);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x89_9);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x89_10);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x89_11);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x89_12);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x89_13);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x89_14);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x89_15);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x89_16);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x89_17);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x89_18);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x89_19);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x89_20);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x89_21);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x89_22);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x89_23);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x89_24);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x89_25);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x89_26);
                                _mm512_store_ps(& ensemble33grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x89_27);
                            }
                        }
                    }
                }
            }
        }
    }
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x82 = _mm512_load_ps(& ensemble32grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble32grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x82);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x83 = _mm512_load_ps(& ensemble32grad[_neuron_index_0][(_neuron_index_1_outer + 4)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble32grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x83);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x84 = _mm512_load_ps(& ensemble32grad[_neuron_index_0][(_neuron_index_1_outer + 12)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble32grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x84);
                }
            }
        }
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x85 = _mm512_load_ps(& ensemble32grad[_neuron_index_0][(_neuron_index_1_outer + 14)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble32grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x85);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble31grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble30grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble30grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x75_0 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x75_1 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x75_2 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x75_3 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x75_4 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x75_5 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x75_6 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x75_7 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x75_8 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x75_9 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x75_10 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x75_11 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x75_12 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x75_13 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x75_14 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x75_15 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x75_16 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x75_17 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x75_18 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x75_19 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x75_20 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x75_21 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x75_22 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x75_23 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x75_24 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x75_25 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x75_26 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x75_27 = _mm512_load_ps(& ensemble29inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x76 = _mm512_load_ps(& ensemble29grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x77_0 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x77_1 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x77_2 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x77_3 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x77_4 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x77_5 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x77_6 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x77_7 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x77_8 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x77_9 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x77_10 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x77_11 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x77_12 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x77_13 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x77_14 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x77_15 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x77_16 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x77_17 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x77_18 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x77_19 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x77_20 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x77_21 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x77_22 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x77_23 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x77_24 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x77_25 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x77_26 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x77_27 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    ___x76 = _mm512_fmadd_ps(___x77_0, ___x75_0, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_1, ___x75_1, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_2, ___x75_2, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_3, ___x75_3, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_4, ___x75_4, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_5, ___x75_5, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_6, ___x75_6, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_7, ___x75_7, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_8, ___x75_8, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_9, ___x75_9, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_10, ___x75_10, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_11, ___x75_11, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_12, ___x75_12, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_13, ___x75_13, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_14, ___x75_14, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_15, ___x75_15, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_16, ___x75_16, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_17, ___x75_17, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_18, ___x75_18, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_19, ___x75_19, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_20, ___x75_20, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_21, ___x75_21, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_22, ___x75_22, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_23, ___x75_23, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_24, ___x75_24, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_25, ___x75_25, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_26, ___x75_26, ___x76);
                                    ___x76 = _mm512_fmadd_ps(___x77_27, ___x75_27, ___x76);
                                    _mm512_store_ps(& ensemble29grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x76);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x72_0 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x72_1 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x72_2 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x72_3 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x72_4 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x72_5 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x72_6 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x72_7 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x72_8 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x72_9 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x72_10 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x72_11 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x72_12 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x72_13 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x72_14 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x72_15 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x72_16 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x72_17 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x72_18 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x72_19 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x72_20 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x72_21 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x72_22 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x72_23 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x72_24 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x72_25 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x72_26 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x72_27 = _mm512_load_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x73 = _mm512_load_ps(& ensemble29weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x74_0 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x74_1 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x74_2 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x74_3 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x74_4 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x74_5 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x74_6 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x74_7 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x74_8 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x74_9 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x74_10 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x74_11 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x74_12 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x74_13 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x74_14 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x74_15 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x74_16 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x74_17 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x74_18 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x74_19 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x74_20 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x74_21 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x74_22 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x74_23 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x74_24 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x74_25 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x74_26 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x74_27 = _mm512_set1_ps(ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    ___x72_0 = _mm512_fmadd_ps(___x74_0, ___x73, ___x72_0);
                                    ___x72_1 = _mm512_fmadd_ps(___x74_1, ___x73, ___x72_1);
                                    ___x72_2 = _mm512_fmadd_ps(___x74_2, ___x73, ___x72_2);
                                    ___x72_3 = _mm512_fmadd_ps(___x74_3, ___x73, ___x72_3);
                                    ___x72_4 = _mm512_fmadd_ps(___x74_4, ___x73, ___x72_4);
                                    ___x72_5 = _mm512_fmadd_ps(___x74_5, ___x73, ___x72_5);
                                    ___x72_6 = _mm512_fmadd_ps(___x74_6, ___x73, ___x72_6);
                                    ___x72_7 = _mm512_fmadd_ps(___x74_7, ___x73, ___x72_7);
                                    ___x72_8 = _mm512_fmadd_ps(___x74_8, ___x73, ___x72_8);
                                    ___x72_9 = _mm512_fmadd_ps(___x74_9, ___x73, ___x72_9);
                                    ___x72_10 = _mm512_fmadd_ps(___x74_10, ___x73, ___x72_10);
                                    ___x72_11 = _mm512_fmadd_ps(___x74_11, ___x73, ___x72_11);
                                    ___x72_12 = _mm512_fmadd_ps(___x74_12, ___x73, ___x72_12);
                                    ___x72_13 = _mm512_fmadd_ps(___x74_13, ___x73, ___x72_13);
                                    ___x72_14 = _mm512_fmadd_ps(___x74_14, ___x73, ___x72_14);
                                    ___x72_15 = _mm512_fmadd_ps(___x74_15, ___x73, ___x72_15);
                                    ___x72_16 = _mm512_fmadd_ps(___x74_16, ___x73, ___x72_16);
                                    ___x72_17 = _mm512_fmadd_ps(___x74_17, ___x73, ___x72_17);
                                    ___x72_18 = _mm512_fmadd_ps(___x74_18, ___x73, ___x72_18);
                                    ___x72_19 = _mm512_fmadd_ps(___x74_19, ___x73, ___x72_19);
                                    ___x72_20 = _mm512_fmadd_ps(___x74_20, ___x73, ___x72_20);
                                    ___x72_21 = _mm512_fmadd_ps(___x74_21, ___x73, ___x72_21);
                                    ___x72_22 = _mm512_fmadd_ps(___x74_22, ___x73, ___x72_22);
                                    ___x72_23 = _mm512_fmadd_ps(___x74_23, ___x73, ___x72_23);
                                    ___x72_24 = _mm512_fmadd_ps(___x74_24, ___x73, ___x72_24);
                                    ___x72_25 = _mm512_fmadd_ps(___x74_25, ___x73, ___x72_25);
                                    ___x72_26 = _mm512_fmadd_ps(___x74_26, ___x73, ___x72_26);
                                    ___x72_27 = _mm512_fmadd_ps(___x74_27, ___x73, ___x72_27);
                                }
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x72_0);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x72_1);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x72_2);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x72_3);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x72_4);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x72_5);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x72_6);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x72_7);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x72_8);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x72_9);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x72_10);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x72_11);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x72_12);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x72_13);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x72_14);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x72_15);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x72_16);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x72_17);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x72_18);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x72_19);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x72_20);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x72_21);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x72_22);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x72_23);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x72_24);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x72_25);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x72_26);
                                _mm512_store_ps(& ensemble29grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x72_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble28mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble28mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble28grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 27)][MIN(MAX(k + _input_offset_3, 0), 27)][_input_offset_1_inner] += ensemble28grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble27grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble26grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble26grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 1; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                __m512 ___x66_0 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x66_1 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x66_2 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x66_3 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x66_4 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x66_5 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x66_6 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x66_7 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x66_8 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x66_9 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x66_10 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x66_11 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x66_12 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x66_13 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x66_14 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x66_15 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x66_16 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x66_17 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x66_18 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x66_19 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x66_20 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x66_21 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x66_22 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x66_23 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x66_24 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x66_25 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x66_26 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x66_27 = _mm512_load_ps(& ensemble25inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x67 = _mm512_load_ps(& ensemble25grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x68_0 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x68_1 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x68_2 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x68_3 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x68_4 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x68_5 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x68_6 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x68_7 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x68_8 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x68_9 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x68_10 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x68_11 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x68_12 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x68_13 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x68_14 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x68_15 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x68_16 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x68_17 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x68_18 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x68_19 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x68_20 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x68_21 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x68_22 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x68_23 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x68_24 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x68_25 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x68_26 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x68_27 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    ___x67 = _mm512_fmadd_ps(___x68_0, ___x66_0, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_1, ___x66_1, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_2, ___x66_2, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_3, ___x66_3, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_4, ___x66_4, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_5, ___x66_5, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_6, ___x66_6, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_7, ___x66_7, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_8, ___x66_8, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_9, ___x66_9, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_10, ___x66_10, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_11, ___x66_11, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_12, ___x66_12, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_13, ___x66_13, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_14, ___x66_14, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_15, ___x66_15, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_16, ___x66_16, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_17, ___x66_17, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_18, ___x66_18, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_19, ___x66_19, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_20, ___x66_20, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_21, ___x66_21, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_22, ___x66_22, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_23, ___x66_23, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_24, ___x66_24, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_25, ___x66_25, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_26, ___x66_26, ___x67);
                                    ___x67 = _mm512_fmadd_ps(___x68_27, ___x66_27, ___x67);
                                    _mm512_store_ps(& ensemble25grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x67);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 1; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                __m512 ___x63_0 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x63_1 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x63_2 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x63_3 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x63_4 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x63_5 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x63_6 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x63_7 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x63_8 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x63_9 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x63_10 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x63_11 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x63_12 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x63_13 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x63_14 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x63_15 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x63_16 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x63_17 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x63_18 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x63_19 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x63_20 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x63_21 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x63_22 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x63_23 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x63_24 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x63_25 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x63_26 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x63_27 = _mm512_load_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x64_0 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x64_1 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x64_2 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x64_3 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x64_4 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x64_5 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x64_6 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x64_7 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x64_8 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x64_9 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x64_10 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x64_11 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x64_12 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x64_13 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x64_14 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x64_15 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x64_16 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x64_17 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x64_18 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x64_19 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x64_20 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x64_21 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x64_22 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x64_23 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x64_24 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x64_25 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x64_26 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x64_27 = _mm512_set1_ps(ensemble25grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    __m512 ___x65 = _mm512_load_ps(& ensemble25weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x63_0 = _mm512_fmadd_ps(___x64_0, ___x65, ___x63_0);
                                    ___x63_1 = _mm512_fmadd_ps(___x64_1, ___x65, ___x63_1);
                                    ___x63_2 = _mm512_fmadd_ps(___x64_2, ___x65, ___x63_2);
                                    ___x63_3 = _mm512_fmadd_ps(___x64_3, ___x65, ___x63_3);
                                    ___x63_4 = _mm512_fmadd_ps(___x64_4, ___x65, ___x63_4);
                                    ___x63_5 = _mm512_fmadd_ps(___x64_5, ___x65, ___x63_5);
                                    ___x63_6 = _mm512_fmadd_ps(___x64_6, ___x65, ___x63_6);
                                    ___x63_7 = _mm512_fmadd_ps(___x64_7, ___x65, ___x63_7);
                                    ___x63_8 = _mm512_fmadd_ps(___x64_8, ___x65, ___x63_8);
                                    ___x63_9 = _mm512_fmadd_ps(___x64_9, ___x65, ___x63_9);
                                    ___x63_10 = _mm512_fmadd_ps(___x64_10, ___x65, ___x63_10);
                                    ___x63_11 = _mm512_fmadd_ps(___x64_11, ___x65, ___x63_11);
                                    ___x63_12 = _mm512_fmadd_ps(___x64_12, ___x65, ___x63_12);
                                    ___x63_13 = _mm512_fmadd_ps(___x64_13, ___x65, ___x63_13);
                                    ___x63_14 = _mm512_fmadd_ps(___x64_14, ___x65, ___x63_14);
                                    ___x63_15 = _mm512_fmadd_ps(___x64_15, ___x65, ___x63_15);
                                    ___x63_16 = _mm512_fmadd_ps(___x64_16, ___x65, ___x63_16);
                                    ___x63_17 = _mm512_fmadd_ps(___x64_17, ___x65, ___x63_17);
                                    ___x63_18 = _mm512_fmadd_ps(___x64_18, ___x65, ___x63_18);
                                    ___x63_19 = _mm512_fmadd_ps(___x64_19, ___x65, ___x63_19);
                                    ___x63_20 = _mm512_fmadd_ps(___x64_20, ___x65, ___x63_20);
                                    ___x63_21 = _mm512_fmadd_ps(___x64_21, ___x65, ___x63_21);
                                    ___x63_22 = _mm512_fmadd_ps(___x64_22, ___x65, ___x63_22);
                                    ___x63_23 = _mm512_fmadd_ps(___x64_23, ___x65, ___x63_23);
                                    ___x63_24 = _mm512_fmadd_ps(___x64_24, ___x65, ___x63_24);
                                    ___x63_25 = _mm512_fmadd_ps(___x64_25, ___x65, ___x63_25);
                                    ___x63_26 = _mm512_fmadd_ps(___x64_26, ___x65, ___x63_26);
                                    ___x63_27 = _mm512_fmadd_ps(___x64_27, ___x65, ___x63_27);
                                }
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x63_0);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x63_1);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x63_2);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x63_3);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x63_4);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x63_5);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x63_6);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x63_7);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x63_8);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x63_9);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x63_10);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x63_11);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x63_12);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x63_13);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x63_14);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x63_15);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x63_16);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x63_17);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x63_18);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x63_19);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x63_20);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x63_21);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x63_22);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x63_23);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x63_24);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x63_25);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x63_26);
                                _mm512_store_ps(& ensemble25grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x63_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 1; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble24grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = MAX(ensemble24grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 1; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble23grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble23grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 1; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x57_0 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x57_1 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x57_2 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x57_3 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x57_4 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x57_5 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x57_6 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x57_7 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x57_8 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x57_9 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x57_10 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x57_11 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x57_12 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x57_13 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x57_14 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x57_15 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x57_16 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x57_17 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x57_18 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x57_19 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x57_20 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x57_21 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x57_22 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x57_23 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x57_24 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x57_25 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x57_26 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x57_27 = _mm512_load_ps(& ensemble22inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x58_0 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_1 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_2 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_3 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_4 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_5 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_6 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_7 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_8 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_9 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_10 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_11 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_12 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_13 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_14 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 14 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_15 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 15 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_16 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 16 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_17 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 17 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_18 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 18 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_19 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 19 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_20 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 20 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_21 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 21 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_22 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 22 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_23 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 23 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_24 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 24 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_25 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 25 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_26 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 26 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x58_27 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 27 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x59 = _mm512_load_ps(& ensemble22grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x59 = _mm512_fmadd_ps(___x58_0, ___x57_0, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_1, ___x57_1, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_2, ___x57_2, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_3, ___x57_3, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_4, ___x57_4, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_5, ___x57_5, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_6, ___x57_6, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_7, ___x57_7, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_8, ___x57_8, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_9, ___x57_9, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_10, ___x57_10, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_11, ___x57_11, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_12, ___x57_12, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_13, ___x57_13, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_14, ___x57_14, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_15, ___x57_15, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_16, ___x57_16, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_17, ___x57_17, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_18, ___x57_18, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_19, ___x57_19, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_20, ___x57_20, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_21, ___x57_21, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_22, ___x57_22, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_23, ___x57_23, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_24, ___x57_24, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_25, ___x57_25, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_26, ___x57_26, ___x59);
                                    ___x59 = _mm512_fmadd_ps(___x58_27, ___x57_27, ___x59);
                                    _mm512_store_ps(& ensemble22grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x59);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 1; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x55_0 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x55_1 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x55_2 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x55_3 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x55_4 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x55_5 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x55_6 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x55_7 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x55_8 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x55_9 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x55_10 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x55_11 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x55_12 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x55_13 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x55_14 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x55_15 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x55_16 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x55_17 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x55_18 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x55_19 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x55_20 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x55_21 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x55_22 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x55_23 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x55_24 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x55_25 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x55_26 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x55_27 = _mm512_load_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x54 = _mm512_load_ps(& ensemble22weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x56_0 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 0 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_1 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 1 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_2 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_3 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_4 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 4 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_5 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 5 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_6 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 6 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_7 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 7 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_8 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 8 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_9 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 9 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_10 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 10 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_11 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 11 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_12 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 12 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_13 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 13 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_14 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 14 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_15 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 15 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_16 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 16 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_17 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 17 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_18 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 18 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_19 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 19 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_20 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 20 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_21 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 21 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_22 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 22 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_23 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 23 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_24 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 24 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_25 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 25 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_26 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 26 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x56_27 = _mm512_set1_ps(ensemble22grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 27 + 2)][_neuron_index_1_inner]);
                                    ___x55_0 = _mm512_fmadd_ps(___x56_0, ___x54, ___x55_0);
                                    ___x55_1 = _mm512_fmadd_ps(___x56_1, ___x54, ___x55_1);
                                    ___x55_2 = _mm512_fmadd_ps(___x56_2, ___x54, ___x55_2);
                                    ___x55_3 = _mm512_fmadd_ps(___x56_3, ___x54, ___x55_3);
                                    ___x55_4 = _mm512_fmadd_ps(___x56_4, ___x54, ___x55_4);
                                    ___x55_5 = _mm512_fmadd_ps(___x56_5, ___x54, ___x55_5);
                                    ___x55_6 = _mm512_fmadd_ps(___x56_6, ___x54, ___x55_6);
                                    ___x55_7 = _mm512_fmadd_ps(___x56_7, ___x54, ___x55_7);
                                    ___x55_8 = _mm512_fmadd_ps(___x56_8, ___x54, ___x55_8);
                                    ___x55_9 = _mm512_fmadd_ps(___x56_9, ___x54, ___x55_9);
                                    ___x55_10 = _mm512_fmadd_ps(___x56_10, ___x54, ___x55_10);
                                    ___x55_11 = _mm512_fmadd_ps(___x56_11, ___x54, ___x55_11);
                                    ___x55_12 = _mm512_fmadd_ps(___x56_12, ___x54, ___x55_12);
                                    ___x55_13 = _mm512_fmadd_ps(___x56_13, ___x54, ___x55_13);
                                    ___x55_14 = _mm512_fmadd_ps(___x56_14, ___x54, ___x55_14);
                                    ___x55_15 = _mm512_fmadd_ps(___x56_15, ___x54, ___x55_15);
                                    ___x55_16 = _mm512_fmadd_ps(___x56_16, ___x54, ___x55_16);
                                    ___x55_17 = _mm512_fmadd_ps(___x56_17, ___x54, ___x55_17);
                                    ___x55_18 = _mm512_fmadd_ps(___x56_18, ___x54, ___x55_18);
                                    ___x55_19 = _mm512_fmadd_ps(___x56_19, ___x54, ___x55_19);
                                    ___x55_20 = _mm512_fmadd_ps(___x56_20, ___x54, ___x55_20);
                                    ___x55_21 = _mm512_fmadd_ps(___x56_21, ___x54, ___x55_21);
                                    ___x55_22 = _mm512_fmadd_ps(___x56_22, ___x54, ___x55_22);
                                    ___x55_23 = _mm512_fmadd_ps(___x56_23, ___x54, ___x55_23);
                                    ___x55_24 = _mm512_fmadd_ps(___x56_24, ___x54, ___x55_24);
                                    ___x55_25 = _mm512_fmadd_ps(___x56_25, ___x54, ___x55_25);
                                    ___x55_26 = _mm512_fmadd_ps(___x56_26, ___x54, ___x55_26);
                                    ___x55_27 = _mm512_fmadd_ps(___x56_27, ___x54, ___x55_27);
                                }
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x55_0);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x55_1);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x55_2);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x55_3);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x55_4);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x55_5);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x55_6);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x55_7);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x55_8);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x55_9);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x55_10);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x55_11);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x55_12);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x55_13);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x55_14);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x55_15);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x55_16);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x55_17);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x55_18);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x55_19);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x55_20);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x55_21);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x55_22);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x55_23);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x55_24);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x55_25);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x55_26);
                                _mm512_store_ps(& ensemble22grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x55_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble21grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble20grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble20grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 6; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x50_0 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x50_1 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x50_2 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x50_3 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x50_4 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x50_5 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x50_6 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x50_7 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x50_8 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x50_9 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x50_10 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x50_11 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x50_12 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x50_13 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x50_14 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x50_15 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x50_16 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x50_17 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x50_18 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x50_19 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x50_20 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x50_21 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x50_22 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x50_23 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x50_24 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x50_25 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x50_26 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x50_27 = _mm512_load_ps(& ensemble19inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x48_0 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x48_1 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x48_2 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x48_3 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x48_4 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x48_5 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x48_6 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x48_7 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x48_8 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x48_9 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x48_10 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x48_11 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x48_12 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x48_13 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x48_14 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x48_15 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x48_16 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x48_17 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x48_18 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x48_19 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x48_20 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x48_21 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x48_22 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x48_23 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x48_24 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x48_25 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x48_26 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x48_27 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    __m512 ___x49 = _mm512_load_ps(& ensemble19grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x49 = _mm512_fmadd_ps(___x48_0, ___x50_0, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_1, ___x50_1, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_2, ___x50_2, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_3, ___x50_3, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_4, ___x50_4, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_5, ___x50_5, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_6, ___x50_6, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_7, ___x50_7, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_8, ___x50_8, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_9, ___x50_9, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_10, ___x50_10, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_11, ___x50_11, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_12, ___x50_12, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_13, ___x50_13, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_14, ___x50_14, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_15, ___x50_15, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_16, ___x50_16, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_17, ___x50_17, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_18, ___x50_18, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_19, ___x50_19, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_20, ___x50_20, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_21, ___x50_21, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_22, ___x50_22, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_23, ___x50_23, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_24, ___x50_24, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_25, ___x50_25, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_26, ___x50_26, ___x49);
                                    ___x49 = _mm512_fmadd_ps(___x48_27, ___x50_27, ___x49);
                                    _mm512_store_ps(& ensemble19grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x49);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 6; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x46_0 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x46_1 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x46_2 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x46_3 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x46_4 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x46_5 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x46_6 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x46_7 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x46_8 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x46_9 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x46_10 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x46_11 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x46_12 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x46_13 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x46_14 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x46_15 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x46_16 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x46_17 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x46_18 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x46_19 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x46_20 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x46_21 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x46_22 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x46_23 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x46_24 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x46_25 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x46_26 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x46_27 = _mm512_load_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x45_0 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x45_1 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x45_2 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x45_3 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x45_4 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x45_5 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x45_6 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x45_7 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x45_8 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x45_9 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x45_10 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x45_11 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x45_12 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x45_13 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x45_14 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x45_15 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x45_16 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x45_17 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x45_18 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x45_19 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x45_20 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x45_21 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x45_22 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x45_23 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x45_24 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x45_25 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x45_26 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x45_27 = _mm512_set1_ps(ensemble19grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    __m512 ___x47 = _mm512_load_ps(& ensemble19weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x46_0 = _mm512_fmadd_ps(___x45_0, ___x47, ___x46_0);
                                    ___x46_1 = _mm512_fmadd_ps(___x45_1, ___x47, ___x46_1);
                                    ___x46_2 = _mm512_fmadd_ps(___x45_2, ___x47, ___x46_2);
                                    ___x46_3 = _mm512_fmadd_ps(___x45_3, ___x47, ___x46_3);
                                    ___x46_4 = _mm512_fmadd_ps(___x45_4, ___x47, ___x46_4);
                                    ___x46_5 = _mm512_fmadd_ps(___x45_5, ___x47, ___x46_5);
                                    ___x46_6 = _mm512_fmadd_ps(___x45_6, ___x47, ___x46_6);
                                    ___x46_7 = _mm512_fmadd_ps(___x45_7, ___x47, ___x46_7);
                                    ___x46_8 = _mm512_fmadd_ps(___x45_8, ___x47, ___x46_8);
                                    ___x46_9 = _mm512_fmadd_ps(___x45_9, ___x47, ___x46_9);
                                    ___x46_10 = _mm512_fmadd_ps(___x45_10, ___x47, ___x46_10);
                                    ___x46_11 = _mm512_fmadd_ps(___x45_11, ___x47, ___x46_11);
                                    ___x46_12 = _mm512_fmadd_ps(___x45_12, ___x47, ___x46_12);
                                    ___x46_13 = _mm512_fmadd_ps(___x45_13, ___x47, ___x46_13);
                                    ___x46_14 = _mm512_fmadd_ps(___x45_14, ___x47, ___x46_14);
                                    ___x46_15 = _mm512_fmadd_ps(___x45_15, ___x47, ___x46_15);
                                    ___x46_16 = _mm512_fmadd_ps(___x45_16, ___x47, ___x46_16);
                                    ___x46_17 = _mm512_fmadd_ps(___x45_17, ___x47, ___x46_17);
                                    ___x46_18 = _mm512_fmadd_ps(___x45_18, ___x47, ___x46_18);
                                    ___x46_19 = _mm512_fmadd_ps(___x45_19, ___x47, ___x46_19);
                                    ___x46_20 = _mm512_fmadd_ps(___x45_20, ___x47, ___x46_20);
                                    ___x46_21 = _mm512_fmadd_ps(___x45_21, ___x47, ___x46_21);
                                    ___x46_22 = _mm512_fmadd_ps(___x45_22, ___x47, ___x46_22);
                                    ___x46_23 = _mm512_fmadd_ps(___x45_23, ___x47, ___x46_23);
                                    ___x46_24 = _mm512_fmadd_ps(___x45_24, ___x47, ___x46_24);
                                    ___x46_25 = _mm512_fmadd_ps(___x45_25, ___x47, ___x46_25);
                                    ___x46_26 = _mm512_fmadd_ps(___x45_26, ___x47, ___x46_26);
                                    ___x46_27 = _mm512_fmadd_ps(___x45_27, ___x47, ___x46_27);
                                }
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x46_0);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x46_1);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x46_2);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x46_3);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x46_4);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x46_5);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x46_6);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x46_7);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x46_8);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x46_9);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x46_10);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x46_11);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x46_12);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x46_13);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x46_14);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x46_15);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x46_16);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x46_17);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x46_18);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x46_19);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x46_20);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x46_21);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x46_22);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x46_23);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x46_24);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x46_25);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x46_26);
                                _mm512_store_ps(& ensemble19grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x46_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble18grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble17grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble17grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x40_0 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x40_1 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x40_2 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x40_3 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x40_4 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x40_5 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x40_6 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x40_7 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x40_8 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x40_9 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x40_10 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x40_11 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x40_12 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x40_13 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x40_14 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x40_15 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x40_16 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x40_17 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x40_18 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x40_19 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x40_20 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x40_21 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x40_22 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x40_23 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x40_24 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x40_25 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x40_26 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x40_27 = _mm512_load_ps(& ensemble16inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x39 = _mm512_load_ps(& ensemble16grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x41_0 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_1 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_2 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_3 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_4 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_5 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_6 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_7 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_8 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_9 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_10 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_11 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_12 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_13 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_14 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_15 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_16 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_17 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_18 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_19 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_20 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_21 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_22 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_23 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_24 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_25 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_26 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x41_27 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][_neuron_index_1_inner]);
                                    ___x39 = _mm512_fmadd_ps(___x41_0, ___x40_0, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_1, ___x40_1, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_2, ___x40_2, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_3, ___x40_3, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_4, ___x40_4, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_5, ___x40_5, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_6, ___x40_6, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_7, ___x40_7, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_8, ___x40_8, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_9, ___x40_9, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_10, ___x40_10, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_11, ___x40_11, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_12, ___x40_12, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_13, ___x40_13, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_14, ___x40_14, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_15, ___x40_15, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_16, ___x40_16, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_17, ___x40_17, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_18, ___x40_18, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_19, ___x40_19, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_20, ___x40_20, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_21, ___x40_21, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_22, ___x40_22, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_23, ___x40_23, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_24, ___x40_24, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_25, ___x40_25, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_26, ___x40_26, ___x39);
                                    ___x39 = _mm512_fmadd_ps(___x41_27, ___x40_27, ___x39);
                                    _mm512_store_ps(& ensemble16grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x39);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x37_0 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x37_1 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x37_2 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x37_3 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x37_4 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x37_5 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x37_6 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x37_7 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x37_8 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x37_9 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x37_10 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x37_11 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x37_12 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x37_13 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x37_14 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x37_15 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x37_16 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x37_17 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x37_18 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x37_19 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x37_20 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x37_21 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x37_22 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x37_23 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x37_24 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x37_25 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x37_26 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x37_27 = _mm512_load_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x36 = _mm512_load_ps(& ensemble16weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x38_0 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_1 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_2 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_3 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_4 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_5 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_6 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_7 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_8 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_9 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_10 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_11 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_12 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_13 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_14 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_15 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_16 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_17 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_18 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_19 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_20 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_21 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_22 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_23 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_24 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_25 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_26 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x38_27 = _mm512_set1_ps(ensemble16grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][_neuron_index_1_inner]);
                                    ___x37_0 = _mm512_fmadd_ps(___x38_0, ___x36, ___x37_0);
                                    ___x37_1 = _mm512_fmadd_ps(___x38_1, ___x36, ___x37_1);
                                    ___x37_2 = _mm512_fmadd_ps(___x38_2, ___x36, ___x37_2);
                                    ___x37_3 = _mm512_fmadd_ps(___x38_3, ___x36, ___x37_3);
                                    ___x37_4 = _mm512_fmadd_ps(___x38_4, ___x36, ___x37_4);
                                    ___x37_5 = _mm512_fmadd_ps(___x38_5, ___x36, ___x37_5);
                                    ___x37_6 = _mm512_fmadd_ps(___x38_6, ___x36, ___x37_6);
                                    ___x37_7 = _mm512_fmadd_ps(___x38_7, ___x36, ___x37_7);
                                    ___x37_8 = _mm512_fmadd_ps(___x38_8, ___x36, ___x37_8);
                                    ___x37_9 = _mm512_fmadd_ps(___x38_9, ___x36, ___x37_9);
                                    ___x37_10 = _mm512_fmadd_ps(___x38_10, ___x36, ___x37_10);
                                    ___x37_11 = _mm512_fmadd_ps(___x38_11, ___x36, ___x37_11);
                                    ___x37_12 = _mm512_fmadd_ps(___x38_12, ___x36, ___x37_12);
                                    ___x37_13 = _mm512_fmadd_ps(___x38_13, ___x36, ___x37_13);
                                    ___x37_14 = _mm512_fmadd_ps(___x38_14, ___x36, ___x37_14);
                                    ___x37_15 = _mm512_fmadd_ps(___x38_15, ___x36, ___x37_15);
                                    ___x37_16 = _mm512_fmadd_ps(___x38_16, ___x36, ___x37_16);
                                    ___x37_17 = _mm512_fmadd_ps(___x38_17, ___x36, ___x37_17);
                                    ___x37_18 = _mm512_fmadd_ps(___x38_18, ___x36, ___x37_18);
                                    ___x37_19 = _mm512_fmadd_ps(___x38_19, ___x36, ___x37_19);
                                    ___x37_20 = _mm512_fmadd_ps(___x38_20, ___x36, ___x37_20);
                                    ___x37_21 = _mm512_fmadd_ps(___x38_21, ___x36, ___x37_21);
                                    ___x37_22 = _mm512_fmadd_ps(___x38_22, ___x36, ___x37_22);
                                    ___x37_23 = _mm512_fmadd_ps(___x38_23, ___x36, ___x37_23);
                                    ___x37_24 = _mm512_fmadd_ps(___x38_24, ___x36, ___x37_24);
                                    ___x37_25 = _mm512_fmadd_ps(___x38_25, ___x36, ___x37_25);
                                    ___x37_26 = _mm512_fmadd_ps(___x38_26, ___x36, ___x37_26);
                                    ___x37_27 = _mm512_fmadd_ps(___x38_27, ___x36, ___x37_27);
                                }
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x37_0);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x37_1);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x37_2);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x37_3);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x37_4);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x37_5);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x37_6);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x37_7);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x37_8);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x37_9);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x37_10);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x37_11);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x37_12);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x37_13);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x37_14);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x37_15);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x37_16);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x37_17);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x37_18);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x37_19);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x37_20);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x37_21);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x37_22);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x37_23);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x37_24);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x37_25);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x37_26);
                                _mm512_store_ps(& ensemble16grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x37_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble15grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble14grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble14grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x31_0 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x31_1 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x31_2 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x31_3 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x31_4 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x31_5 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x31_6 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x31_7 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x31_8 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x31_9 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x31_10 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x31_11 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x31_12 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x31_13 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x31_14 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x31_15 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x31_16 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x31_17 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x31_18 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x31_19 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x31_20 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x31_21 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x31_22 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x31_23 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x31_24 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x31_25 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x31_26 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x31_27 = _mm512_load_ps(& ensemble13inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x30_0 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x30_1 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x30_2 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x30_3 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x30_4 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x30_5 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x30_6 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x30_7 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x30_8 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x30_9 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x30_10 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x30_11 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x30_12 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x30_13 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x30_14 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x30_15 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x30_16 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x30_17 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x30_18 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x30_19 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x30_20 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x30_21 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x30_22 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x30_23 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x30_24 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x30_25 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x30_26 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x30_27 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    __m512 ___x32 = _mm512_load_ps(& ensemble13grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x32 = _mm512_fmadd_ps(___x30_0, ___x31_0, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_1, ___x31_1, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_2, ___x31_2, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_3, ___x31_3, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_4, ___x31_4, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_5, ___x31_5, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_6, ___x31_6, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_7, ___x31_7, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_8, ___x31_8, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_9, ___x31_9, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_10, ___x31_10, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_11, ___x31_11, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_12, ___x31_12, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_13, ___x31_13, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_14, ___x31_14, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_15, ___x31_15, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_16, ___x31_16, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_17, ___x31_17, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_18, ___x31_18, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_19, ___x31_19, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_20, ___x31_20, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_21, ___x31_21, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_22, ___x31_22, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_23, ___x31_23, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_24, ___x31_24, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_25, ___x31_25, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_26, ___x31_26, ___x32);
                                    ___x32 = _mm512_fmadd_ps(___x30_27, ___x31_27, ___x32);
                                    _mm512_store_ps(& ensemble13grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x32);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x28_0 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x28_1 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x28_2 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x28_3 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x28_4 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x28_5 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x28_6 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x28_7 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x28_8 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x28_9 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x28_10 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x28_11 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x28_12 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x28_13 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x28_14 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x28_15 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x28_16 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x28_17 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x28_18 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x28_19 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x28_20 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x28_21 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x28_22 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x28_23 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x28_24 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x28_25 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x28_26 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x28_27 = _mm512_load_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x27_0 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x27_1 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x27_2 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x27_3 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x27_4 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x27_5 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x27_6 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x27_7 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x27_8 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x27_9 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x27_10 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x27_11 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x27_12 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x27_13 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x27_14 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x27_15 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x27_16 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x27_17 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x27_18 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x27_19 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x27_20 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x27_21 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x27_22 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x27_23 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x27_24 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x27_25 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x27_26 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x27_27 = _mm512_set1_ps(ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    __m512 ___x29 = _mm512_load_ps(& ensemble13weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x28_0 = _mm512_fmadd_ps(___x27_0, ___x29, ___x28_0);
                                    ___x28_1 = _mm512_fmadd_ps(___x27_1, ___x29, ___x28_1);
                                    ___x28_2 = _mm512_fmadd_ps(___x27_2, ___x29, ___x28_2);
                                    ___x28_3 = _mm512_fmadd_ps(___x27_3, ___x29, ___x28_3);
                                    ___x28_4 = _mm512_fmadd_ps(___x27_4, ___x29, ___x28_4);
                                    ___x28_5 = _mm512_fmadd_ps(___x27_5, ___x29, ___x28_5);
                                    ___x28_6 = _mm512_fmadd_ps(___x27_6, ___x29, ___x28_6);
                                    ___x28_7 = _mm512_fmadd_ps(___x27_7, ___x29, ___x28_7);
                                    ___x28_8 = _mm512_fmadd_ps(___x27_8, ___x29, ___x28_8);
                                    ___x28_9 = _mm512_fmadd_ps(___x27_9, ___x29, ___x28_9);
                                    ___x28_10 = _mm512_fmadd_ps(___x27_10, ___x29, ___x28_10);
                                    ___x28_11 = _mm512_fmadd_ps(___x27_11, ___x29, ___x28_11);
                                    ___x28_12 = _mm512_fmadd_ps(___x27_12, ___x29, ___x28_12);
                                    ___x28_13 = _mm512_fmadd_ps(___x27_13, ___x29, ___x28_13);
                                    ___x28_14 = _mm512_fmadd_ps(___x27_14, ___x29, ___x28_14);
                                    ___x28_15 = _mm512_fmadd_ps(___x27_15, ___x29, ___x28_15);
                                    ___x28_16 = _mm512_fmadd_ps(___x27_16, ___x29, ___x28_16);
                                    ___x28_17 = _mm512_fmadd_ps(___x27_17, ___x29, ___x28_17);
                                    ___x28_18 = _mm512_fmadd_ps(___x27_18, ___x29, ___x28_18);
                                    ___x28_19 = _mm512_fmadd_ps(___x27_19, ___x29, ___x28_19);
                                    ___x28_20 = _mm512_fmadd_ps(___x27_20, ___x29, ___x28_20);
                                    ___x28_21 = _mm512_fmadd_ps(___x27_21, ___x29, ___x28_21);
                                    ___x28_22 = _mm512_fmadd_ps(___x27_22, ___x29, ___x28_22);
                                    ___x28_23 = _mm512_fmadd_ps(___x27_23, ___x29, ___x28_23);
                                    ___x28_24 = _mm512_fmadd_ps(___x27_24, ___x29, ___x28_24);
                                    ___x28_25 = _mm512_fmadd_ps(___x27_25, ___x29, ___x28_25);
                                    ___x28_26 = _mm512_fmadd_ps(___x27_26, ___x29, ___x28_26);
                                    ___x28_27 = _mm512_fmadd_ps(___x27_27, ___x29, ___x28_27);
                                }
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x28_0);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x28_1);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x28_2);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x28_3);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x28_4);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x28_5);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x28_6);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x28_7);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x28_8);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x28_9);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x28_10);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x28_11);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x28_12);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x28_13);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x28_14);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x28_15);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x28_16);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x28_17);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x28_18);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x28_19);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x28_20);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x28_21);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x28_22);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x28_23);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x28_24);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x28_25);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x28_26);
                                _mm512_store_ps(& ensemble13grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x28_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 2 - 0;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 2 - 0;
                        int _input_offset_3 = in_x;
                        long j = ensemble12mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble12mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble12grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 55)][MIN(MAX(k + _input_offset_3, 0), 55)][_input_offset_1_inner] += ensemble12grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble11grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble11grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble10grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble10grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 4; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x21_0 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x21_1 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x21_2 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x21_3 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x21_4 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x21_5 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x21_6 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x21_7 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x21_8 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x21_9 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x21_10 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x21_11 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x21_12 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x21_13 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x21_14 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x21_15 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x21_16 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x21_17 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x21_18 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x21_19 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x21_20 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x21_21 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x21_22 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x21_23 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x21_24 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x21_25 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x21_26 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x21_27 = _mm512_load_ps(& ensemble9inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x22_0 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x22_1 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x22_2 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x22_3 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x22_4 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x22_5 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x22_6 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x22_7 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x22_8 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x22_9 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x22_10 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x22_11 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x22_12 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x22_13 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x22_14 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x22_15 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x22_16 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x22_17 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x22_18 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x22_19 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x22_20 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x22_21 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x22_22 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x22_23 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x22_24 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x22_25 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x22_26 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x22_27 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    __m512 ___x23 = _mm512_load_ps(& ensemble9grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x23 = _mm512_fmadd_ps(___x22_0, ___x21_0, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_1, ___x21_1, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_2, ___x21_2, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_3, ___x21_3, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_4, ___x21_4, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_5, ___x21_5, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_6, ___x21_6, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_7, ___x21_7, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_8, ___x21_8, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_9, ___x21_9, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_10, ___x21_10, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_11, ___x21_11, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_12, ___x21_12, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_13, ___x21_13, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_14, ___x21_14, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_15, ___x21_15, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_16, ___x21_16, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_17, ___x21_17, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_18, ___x21_18, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_19, ___x21_19, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_20, ___x21_20, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_21, ___x21_21, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_22, ___x21_22, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_23, ___x21_23, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_24, ___x21_24, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_25, ___x21_25, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_26, ___x21_26, ___x23);
                                    ___x23 = _mm512_fmadd_ps(___x22_27, ___x21_27, ___x23);
                                    _mm512_store_ps(& ensemble9grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x23);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 4; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x20_0 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x20_1 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x20_2 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x20_3 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x20_4 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x20_5 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x20_6 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x20_7 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x20_8 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x20_9 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x20_10 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x20_11 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x20_12 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x20_13 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x20_14 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x20_15 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x20_16 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x20_17 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x20_18 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x20_19 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x20_20 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x20_21 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x20_22 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x20_23 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x20_24 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x20_25 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x20_26 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x20_27 = _mm512_load_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x18_0 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x18_1 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x18_2 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x18_3 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x18_4 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x18_5 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x18_6 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x18_7 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x18_8 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x18_9 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x18_10 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x18_11 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x18_12 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x18_13 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x18_14 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x18_15 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x18_16 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x18_17 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x18_18 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x18_19 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x18_20 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x18_21 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x18_22 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x18_23 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x18_24 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x18_25 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x18_26 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x18_27 = _mm512_set1_ps(ensemble9grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    __m512 ___x19 = _mm512_load_ps(& ensemble9weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x20_0 = _mm512_fmadd_ps(___x18_0, ___x19, ___x20_0);
                                    ___x20_1 = _mm512_fmadd_ps(___x18_1, ___x19, ___x20_1);
                                    ___x20_2 = _mm512_fmadd_ps(___x18_2, ___x19, ___x20_2);
                                    ___x20_3 = _mm512_fmadd_ps(___x18_3, ___x19, ___x20_3);
                                    ___x20_4 = _mm512_fmadd_ps(___x18_4, ___x19, ___x20_4);
                                    ___x20_5 = _mm512_fmadd_ps(___x18_5, ___x19, ___x20_5);
                                    ___x20_6 = _mm512_fmadd_ps(___x18_6, ___x19, ___x20_6);
                                    ___x20_7 = _mm512_fmadd_ps(___x18_7, ___x19, ___x20_7);
                                    ___x20_8 = _mm512_fmadd_ps(___x18_8, ___x19, ___x20_8);
                                    ___x20_9 = _mm512_fmadd_ps(___x18_9, ___x19, ___x20_9);
                                    ___x20_10 = _mm512_fmadd_ps(___x18_10, ___x19, ___x20_10);
                                    ___x20_11 = _mm512_fmadd_ps(___x18_11, ___x19, ___x20_11);
                                    ___x20_12 = _mm512_fmadd_ps(___x18_12, ___x19, ___x20_12);
                                    ___x20_13 = _mm512_fmadd_ps(___x18_13, ___x19, ___x20_13);
                                    ___x20_14 = _mm512_fmadd_ps(___x18_14, ___x19, ___x20_14);
                                    ___x20_15 = _mm512_fmadd_ps(___x18_15, ___x19, ___x20_15);
                                    ___x20_16 = _mm512_fmadd_ps(___x18_16, ___x19, ___x20_16);
                                    ___x20_17 = _mm512_fmadd_ps(___x18_17, ___x19, ___x20_17);
                                    ___x20_18 = _mm512_fmadd_ps(___x18_18, ___x19, ___x20_18);
                                    ___x20_19 = _mm512_fmadd_ps(___x18_19, ___x19, ___x20_19);
                                    ___x20_20 = _mm512_fmadd_ps(___x18_20, ___x19, ___x20_20);
                                    ___x20_21 = _mm512_fmadd_ps(___x18_21, ___x19, ___x20_21);
                                    ___x20_22 = _mm512_fmadd_ps(___x18_22, ___x19, ___x20_22);
                                    ___x20_23 = _mm512_fmadd_ps(___x18_23, ___x19, ___x20_23);
                                    ___x20_24 = _mm512_fmadd_ps(___x18_24, ___x19, ___x20_24);
                                    ___x20_25 = _mm512_fmadd_ps(___x18_25, ___x19, ___x20_25);
                                    ___x20_26 = _mm512_fmadd_ps(___x18_26, ___x19, ___x20_26);
                                    ___x20_27 = _mm512_fmadd_ps(___x18_27, ___x19, ___x20_27);
                                }
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x20_0);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x20_1);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x20_2);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x20_3);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x20_4);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x20_5);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x20_6);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x20_7);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x20_8);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x20_9);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x20_10);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x20_11);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x20_12);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x20_13);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x20_14);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x20_15);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x20_16);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x20_17);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x20_18);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x20_19);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x20_20);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x20_21);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x20_22);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x20_23);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x20_24);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x20_25);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x20_26);
                                _mm512_store_ps(& ensemble9grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x20_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble8grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = MAX(ensemble8grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble7grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 4; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x12_0 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x12_1 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x12_2 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x12_3 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x12_4 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x12_5 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x12_6 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x12_7 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x12_8 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x12_9 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x12_10 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x12_11 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x12_12 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x12_13 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x12_14 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x12_15 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x12_16 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x12_17 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x12_18 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x12_19 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x12_20 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x12_21 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x12_22 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x12_23 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x12_24 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x12_25 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x12_26 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x12_27 = _mm512_load_ps(& ensemble6inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x13_0 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_1 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_2 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_3 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_4 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_5 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_6 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_7 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_8 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_9 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_10 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_11 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_12 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_13 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_14 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_15 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_16 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_17 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_18 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_19 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_20 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_21 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_22 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_23 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_24 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_25 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_26 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x13_27 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x14 = _mm512_load_ps(& ensemble6grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x14 = _mm512_fmadd_ps(___x13_0, ___x12_0, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_1, ___x12_1, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_2, ___x12_2, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_3, ___x12_3, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_4, ___x12_4, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_5, ___x12_5, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_6, ___x12_6, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_7, ___x12_7, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_8, ___x12_8, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_9, ___x12_9, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_10, ___x12_10, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_11, ___x12_11, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_12, ___x12_12, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_13, ___x12_13, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_14, ___x12_14, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_15, ___x12_15, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_16, ___x12_16, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_17, ___x12_17, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_18, ___x12_18, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_19, ___x12_19, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_20, ___x12_20, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_21, ___x12_21, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_22, ___x12_22, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_23, ___x12_23, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_24, ___x12_24, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_25, ___x12_25, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_26, ___x12_26, ___x14);
                                    ___x14 = _mm512_fmadd_ps(___x13_27, ___x12_27, ___x14);
                                    _mm512_store_ps(& ensemble6grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x14);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 4; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 1; j += 1) {
                            for (int k = 0; k < 1; k += 1) {
                                __m512 ___x11_0 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x11_1 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x11_2 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x11_3 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x11_4 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x11_5 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x11_6 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x11_7 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x11_8 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x11_9 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x11_10 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x11_11 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x11_12 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x11_13 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x11_14 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x11_15 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x11_16 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x11_17 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x11_18 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x11_19 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x11_20 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x11_21 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x11_22 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x11_23 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x11_24 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x11_25 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x11_26 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x11_27 = _mm512_load_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x9 = _mm512_load_ps(& ensemble6weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x10_0 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_1 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_2 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_3 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_4 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_5 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_6 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_7 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_8 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_9 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_10 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_11 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_12 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_13 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_14 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_15 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_16 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_17 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_18 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_19 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_20 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_21 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_22 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_23 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_24 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_25 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_26 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x10_27 = _mm512_set1_ps(ensemble6grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][_neuron_index_1_inner]);
                                    ___x11_0 = _mm512_fmadd_ps(___x10_0, ___x9, ___x11_0);
                                    ___x11_1 = _mm512_fmadd_ps(___x10_1, ___x9, ___x11_1);
                                    ___x11_2 = _mm512_fmadd_ps(___x10_2, ___x9, ___x11_2);
                                    ___x11_3 = _mm512_fmadd_ps(___x10_3, ___x9, ___x11_3);
                                    ___x11_4 = _mm512_fmadd_ps(___x10_4, ___x9, ___x11_4);
                                    ___x11_5 = _mm512_fmadd_ps(___x10_5, ___x9, ___x11_5);
                                    ___x11_6 = _mm512_fmadd_ps(___x10_6, ___x9, ___x11_6);
                                    ___x11_7 = _mm512_fmadd_ps(___x10_7, ___x9, ___x11_7);
                                    ___x11_8 = _mm512_fmadd_ps(___x10_8, ___x9, ___x11_8);
                                    ___x11_9 = _mm512_fmadd_ps(___x10_9, ___x9, ___x11_9);
                                    ___x11_10 = _mm512_fmadd_ps(___x10_10, ___x9, ___x11_10);
                                    ___x11_11 = _mm512_fmadd_ps(___x10_11, ___x9, ___x11_11);
                                    ___x11_12 = _mm512_fmadd_ps(___x10_12, ___x9, ___x11_12);
                                    ___x11_13 = _mm512_fmadd_ps(___x10_13, ___x9, ___x11_13);
                                    ___x11_14 = _mm512_fmadd_ps(___x10_14, ___x9, ___x11_14);
                                    ___x11_15 = _mm512_fmadd_ps(___x10_15, ___x9, ___x11_15);
                                    ___x11_16 = _mm512_fmadd_ps(___x10_16, ___x9, ___x11_16);
                                    ___x11_17 = _mm512_fmadd_ps(___x10_17, ___x9, ___x11_17);
                                    ___x11_18 = _mm512_fmadd_ps(___x10_18, ___x9, ___x11_18);
                                    ___x11_19 = _mm512_fmadd_ps(___x10_19, ___x9, ___x11_19);
                                    ___x11_20 = _mm512_fmadd_ps(___x10_20, ___x9, ___x11_20);
                                    ___x11_21 = _mm512_fmadd_ps(___x10_21, ___x9, ___x11_21);
                                    ___x11_22 = _mm512_fmadd_ps(___x10_22, ___x9, ___x11_22);
                                    ___x11_23 = _mm512_fmadd_ps(___x10_23, ___x9, ___x11_23);
                                    ___x11_24 = _mm512_fmadd_ps(___x10_24, ___x9, ___x11_24);
                                    ___x11_25 = _mm512_fmadd_ps(___x10_25, ___x9, ___x11_25);
                                    ___x11_26 = _mm512_fmadd_ps(___x10_26, ___x9, ___x11_26);
                                    ___x11_27 = _mm512_fmadd_ps(___x10_27, ___x9, ___x11_27);
                                }
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0], ___x11_0);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0], ___x11_1);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0], ___x11_2);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0], ___x11_3);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0], ___x11_4);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0], ___x11_5);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0], ___x11_6);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0], ___x11_7);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0], ___x11_8);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0], ___x11_9);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0], ___x11_10);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0], ___x11_11);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0], ___x11_12);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0], ___x11_13);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0], ___x11_14);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0], ___x11_15);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0], ___x11_16);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0], ___x11_17);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0], ___x11_18);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0], ___x11_19);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0], ___x11_20);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0], ___x11_21);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0], ___x11_22);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0], ___x11_23);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0], ___x11_24);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0], ___x11_25);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0], ___x11_26);
                                _mm512_store_ps(& ensemble6grad_inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0], ___x11_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 2 - 0;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 2 - 0;
                        int _input_offset_3 = in_x;
                        long j = ensemble5mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble5mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble5grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 111)][MIN(MAX(k + _input_offset_3, 0), 111)][_input_offset_1_inner] += ensemble5grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 112; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 112; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble4grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = MAX(ensemble4grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], (float) 0.0);
                    }
                }
            }
        }
    }
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 112; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 112; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble3grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble3grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int i_outer = 0; i_outer < 1; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 112; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 2;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 112; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 2;
                        int in_x_1 = (_neuron_index_3 + 1) * 2;
                        int in_x_2 = (_neuron_index_3 + 2) * 2;
                        int in_x_3 = (_neuron_index_3 + 3) * 2;
                        int in_x_4 = (_neuron_index_3 + 4) * 2;
                        int in_x_5 = (_neuron_index_3 + 5) * 2;
                        int in_x_6 = (_neuron_index_3 + 6) * 2;
                        int in_x_7 = (_neuron_index_3 + 7) * 2;
                        int in_x_8 = (_neuron_index_3 + 8) * 2;
                        int in_x_9 = (_neuron_index_3 + 9) * 2;
                        int in_x_10 = (_neuron_index_3 + 10) * 2;
                        int in_x_11 = (_neuron_index_3 + 11) * 2;
                        int in_x_12 = (_neuron_index_3 + 12) * 2;
                        int in_x_13 = (_neuron_index_3 + 13) * 2;
                        int in_x_14 = (_neuron_index_3 + 14) * 2;
                        int in_x_15 = (_neuron_index_3 + 15) * 2;
                        int in_x_16 = (_neuron_index_3 + 16) * 2;
                        int in_x_17 = (_neuron_index_3 + 17) * 2;
                        int in_x_18 = (_neuron_index_3 + 18) * 2;
                        int in_x_19 = (_neuron_index_3 + 19) * 2;
                        int in_x_20 = (_neuron_index_3 + 20) * 2;
                        int in_x_21 = (_neuron_index_3 + 21) * 2;
                        int in_x_22 = (_neuron_index_3 + 22) * 2;
                        int in_x_23 = (_neuron_index_3 + 23) * 2;
                        int in_x_24 = (_neuron_index_3 + 24) * 2;
                        int in_x_25 = (_neuron_index_3 + 25) * 2;
                        int in_x_26 = (_neuron_index_3 + 26) * 2;
                        int in_x_27 = (_neuron_index_3 + 27) * 2;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 7; j += 1) {
                            for (int k = 0; k < 7; k += 1) {
                                __m512 ___x4_0 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_0)][0]);
                                __m512 ___x4_1 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_1)][0]);
                                __m512 ___x4_2 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_2)][0]);
                                __m512 ___x4_3 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_3)][0]);
                                __m512 ___x4_4 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_4)][0]);
                                __m512 ___x4_5 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_5)][0]);
                                __m512 ___x4_6 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_6)][0]);
                                __m512 ___x4_7 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_7)][0]);
                                __m512 ___x4_8 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_8)][0]);
                                __m512 ___x4_9 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_9)][0]);
                                __m512 ___x4_10 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_10)][0]);
                                __m512 ___x4_11 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_11)][0]);
                                __m512 ___x4_12 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_12)][0]);
                                __m512 ___x4_13 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_13)][0]);
                                __m512 ___x4_14 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_14)][0]);
                                __m512 ___x4_15 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_15)][0]);
                                __m512 ___x4_16 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_16)][0]);
                                __m512 ___x4_17 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_17)][0]);
                                __m512 ___x4_18 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_18)][0]);
                                __m512 ___x4_19 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_19)][0]);
                                __m512 ___x4_20 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_20)][0]);
                                __m512 ___x4_21 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_21)][0]);
                                __m512 ___x4_22 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_22)][0]);
                                __m512 ___x4_23 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_23)][0]);
                                __m512 ___x4_24 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_24)][0]);
                                __m512 ___x4_25 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_25)][0]);
                                __m512 ___x4_26 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_26)][0]);
                                __m512 ___x4_27 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][i_outer][(j * 1 + _input_offset_2)][(k * 1 + _input_offset_3_27)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x3_0 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x3_1 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x3_2 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x3_3 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x3_4 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x3_5 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x3_6 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x3_7 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x3_8 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x3_9 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x3_10 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x3_11 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x3_12 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x3_13 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x3_14 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x3_15 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x3_16 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x3_17 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x3_18 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x3_19 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x3_20 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x3_21 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x3_22 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x3_23 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x3_24 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x3_25 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x3_26 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x3_27 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    __m512 ___x5 = _mm512_load_ps(& ensemble2grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    ___x5 = _mm512_fmadd_ps(___x3_0, ___x4_0, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_1, ___x4_1, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_2, ___x4_2, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_3, ___x4_3, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_4, ___x4_4, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_5, ___x4_5, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_6, ___x4_6, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_7, ___x4_7, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_8, ___x4_8, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_9, ___x4_9, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_10, ___x4_10, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_11, ___x4_11, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_12, ___x4_12, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_13, ___x4_13, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_14, ___x4_14, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_15, ___x4_15, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_16, ___x4_16, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_17, ___x4_17, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_18, ___x4_18, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_19, ___x4_19, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_20, ___x4_20, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_21, ___x4_21, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_22, ___x4_22, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_23, ___x4_23, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_24, ___x4_24, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_25, ___x4_25, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_26, ___x4_26, ___x5);
                                    ___x5 = _mm512_fmadd_ps(___x3_27, ___x4_27, ___x5);
                                    _mm512_store_ps(& ensemble2grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x5);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
