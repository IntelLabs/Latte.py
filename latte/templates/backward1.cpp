// <file: backward1.cpp>
#include <immintrin.h>
#include <mkl.h>
#include <stdio.h>
#include <cmath>
#include <omp.h>
#include <unistd.h>
#if 0
#include "/data/nfs_home/avenkat/latte/latte/runtime/runtime.h"
#endif
#define SIMDWIDTH 16
#define MIN(x, y) (((x) < (y)) ? (x) : (y))
#define MAX(x, y) (((x) > (y)) ? (x) : (y))

#if 0
#ifdef APPLE
#include <OpenCL/opencl.h>
#else
#include <CL/cl.h>
#endif
#endif

#if 0
#include <libxsmm.h>
#include <libxsmm_dnn.h>
#endif

inline void __mm_prefetch_t0(float const *a) {
  _mm_prefetch((char const *)a, _MM_HINT_T0);
}

inline void __mm_prefetch_t1(float const *a) {
  _mm_prefetch((char const *)a, _MM_HINT_T1);
}

inline double *calloc_doubles(size_t size) {
  return (double *)calloc(size,sizeof(double));
}

template<int in_width, int out_width>
void transpose(float *in, float *out)
{
	__m512i r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, ra, rb, rc, rd, re, rf;
	__m512i t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, ta, tb, tc, td, te, tf;
	//const int in_width=32, out_width=32;
	if((in_width & 0xf != 0)  || (out_width & 0xf != 0)) {printf("Transpose16x16: Invalid in or out width\n"); return;}

	r0 = _mm512_load_epi32(in + 0*in_width);
	r1 = _mm512_load_epi32(in + 1*in_width);
	r2 = _mm512_load_epi32(in + 2*in_width);
	r3 = _mm512_load_epi32(in + 3*in_width);
	r4 = _mm512_load_epi32(in + 4*in_width);
	r5 = _mm512_load_epi32(in + 5*in_width);
	r6 = _mm512_load_epi32(in + 6*in_width);
	r7 = _mm512_load_epi32(in + 7*in_width);
	r8 = _mm512_load_epi32(in + 8*in_width);
	r9 = _mm512_load_epi32(in + 9*in_width);
	ra = _mm512_load_epi32(in + 10*in_width);
	rb = _mm512_load_epi32(in + 11*in_width);
	rc = _mm512_load_epi32(in + 12*in_width);
	rd = _mm512_load_epi32(in + 13*in_width);
	re = _mm512_load_epi32(in + 14*in_width);
	rf = _mm512_load_epi32(in + 15*in_width);

    t0 = _mm512_unpacklo_epi32(r0,r1); //   0  16   1  17   4  20   5  21   8  24   9  25  12  28  13  29 
    t1 = _mm512_unpackhi_epi32(r0,r1); //   2  18   3  19   6  22   7  23  10  26  11  27  14  30  15  31
    t2 = _mm512_unpacklo_epi32(r2,r3); //  32  48  33  49 ...
    t3 = _mm512_unpackhi_epi32(r2,r3); //  34  50  35  51 ...
    t4 = _mm512_unpacklo_epi32(r4,r5); //  64  80  65  81 ...  
    t5 = _mm512_unpackhi_epi32(r4,r5); //  66  82  67  83 ...
    t6 = _mm512_unpacklo_epi32(r6,r7); //  96 112  97 113 ...
    t7 = _mm512_unpackhi_epi32(r6,r7); //  98 114  99 115 ...
    t8 = _mm512_unpacklo_epi32(r8,r9); // 128 ...
    t9 = _mm512_unpackhi_epi32(r8,r9); // 130 ...
    ta = _mm512_unpacklo_epi32(ra,rb); // 160 ...
    tb = _mm512_unpackhi_epi32(ra,rb); // 162 ...
    tc = _mm512_unpacklo_epi32(rc,rd); // 196 ...
    td = _mm512_unpackhi_epi32(rc,rd); // 198 ...
    te = _mm512_unpacklo_epi32(re,rf); // 228 ...
    tf = _mm512_unpackhi_epi32(re,rf); // 230 ...

    r0 = _mm512_unpacklo_epi64(t0,t2); //   0  16  32  48 ...
    r1 = _mm512_unpackhi_epi64(t0,t2); //   1  17  33  49 ...
    r2 = _mm512_unpacklo_epi64(t1,t3); //   2  18  34  49 ...
    r3 = _mm512_unpackhi_epi64(t1,t3); //   3  19  35  51 ...
    r4 = _mm512_unpacklo_epi64(t4,t6); //  64  80  96 112 ...  
    r5 = _mm512_unpackhi_epi64(t4,t6); //  65  81  97 114 ...
    r6 = _mm512_unpacklo_epi64(t5,t7); //  66  82  98 113 ...
    r7 = _mm512_unpackhi_epi64(t5,t7); //  67  83  99 115 ...
    r8 = _mm512_unpacklo_epi64(t8,ta); // 128 144 160 176 ...  
    r9 = _mm512_unpackhi_epi64(t8,ta); // 129 145 161 178 ...
    ra = _mm512_unpacklo_epi64(t9,tb); // 130 146 162 177 ... 
    rb = _mm512_unpackhi_epi64(t9,tb); // 131 147 163 179 ...
    rc = _mm512_unpacklo_epi64(tc,te); // 192 208 228 240 ... 
    rd = _mm512_unpackhi_epi64(tc,te); // 193 209 229 241 ...
    re = _mm512_unpacklo_epi64(td,tf); // 194 210 230 242 ...
    rf = _mm512_unpackhi_epi64(td,tf); // 195 211 231 243 ...

    t0 = _mm512_shuffle_i32x4(r0, r4, 0x88); //   0  16  32  48   8  24  40  56  64  80  96  112 ...
    t1 = _mm512_shuffle_i32x4(r1, r5, 0x88); //   1  17  33  49 ...
    t2 = _mm512_shuffle_i32x4(r2, r6, 0x88); //   2  18  34  50 ...
    t3 = _mm512_shuffle_i32x4(r3, r7, 0x88); //   3  19  35  51 ...
    t4 = _mm512_shuffle_i32x4(r0, r4, 0xdd); //   4  20  36  52 ...
    t5 = _mm512_shuffle_i32x4(r1, r5, 0xdd); //   5  21  37  53 ...
    t6 = _mm512_shuffle_i32x4(r2, r6, 0xdd); //   6  22  38  54 ...
    t7 = _mm512_shuffle_i32x4(r3, r7, 0xdd); //   7  23  39  55 ...
    t8 = _mm512_shuffle_i32x4(r8, rc, 0x88); // 128 144 160 176 ...
    t9 = _mm512_shuffle_i32x4(r9, rd, 0x88); // 129 145 161 177 ...
    ta = _mm512_shuffle_i32x4(ra, re, 0x88); // 130 146 162 178 ...
    tb = _mm512_shuffle_i32x4(rb, rf, 0x88); // 131 147 163 179 ...
    tc = _mm512_shuffle_i32x4(r8, rc, 0xdd); // 132 148 164 180 ...
    td = _mm512_shuffle_i32x4(r9, rd, 0xdd); // 133 149 165 181 ...
    te = _mm512_shuffle_i32x4(ra, re, 0xdd); // 134 150 166 182 ...
    tf = _mm512_shuffle_i32x4(rb, rf, 0xdd); // 135 151 167 183 ...

    r0 = _mm512_shuffle_i32x4(t0, t8, 0x88); //   0  16  32  48  64  80  96 112 ... 240
    r1 = _mm512_shuffle_i32x4(t1, t9, 0x88); //   1  17  33  49  66  81  97 113 ... 241
    r2 = _mm512_shuffle_i32x4(t2, ta, 0x88); //   2  18  34  50  67  82  98 114 ... 242
    r3 = _mm512_shuffle_i32x4(t3, tb, 0x88); //   3  19  35  51  68  83  99 115 ... 243
    r4 = _mm512_shuffle_i32x4(t4, tc, 0x88); //   4 ...
    r5 = _mm512_shuffle_i32x4(t5, td, 0x88); //   5 ...
    r6 = _mm512_shuffle_i32x4(t6, te, 0x88); //   6 ...
    r7 = _mm512_shuffle_i32x4(t7, tf, 0x88); //   7 ...
    r8 = _mm512_shuffle_i32x4(t0, t8, 0xdd); //   8 ...
    r9 = _mm512_shuffle_i32x4(t1, t9, 0xdd); //   9 ...
    ra = _mm512_shuffle_i32x4(t2, ta, 0xdd); //  10 ...
    rb = _mm512_shuffle_i32x4(t3, tb, 0xdd); //  11 ...
    rc = _mm512_shuffle_i32x4(t4, tc, 0xdd); //  12 ...
    rd = _mm512_shuffle_i32x4(t5, td, 0xdd); //  13 ...
    re = _mm512_shuffle_i32x4(t6, te, 0xdd); //  14 ...
    rf = _mm512_shuffle_i32x4(t7, tf, 0xdd); //  15  31  47  63  79  96 111 127 ... 255

	_mm512_store_epi32(out + 0*out_width, r0);
	_mm512_store_epi32(out + 1*out_width, r1);
	_mm512_store_epi32(out + 2*out_width, r2);
	_mm512_store_epi32(out + 3*out_width, r3);
	_mm512_store_epi32(out + 4*out_width, r4);
	_mm512_store_epi32(out + 5*out_width, r5);
	_mm512_store_epi32(out + 6*out_width, r6);
	_mm512_store_epi32(out + 7*out_width, r7);
	_mm512_store_epi32(out + 8*out_width, r8);
	_mm512_store_epi32(out + 9*out_width, r9);
	_mm512_store_epi32(out + 10*out_width, ra);
	_mm512_store_epi32(out + 11*out_width, rb);
	_mm512_store_epi32(out + 12*out_width, rc);
	_mm512_store_epi32(out + 13*out_width, rd);
	_mm512_store_epi32(out + 14*out_width, re);
	_mm512_store_epi32(out + 15*out_width, rf);
}

extern "C"
void backward1(float* _ensemble100grad, float* _ensemble100grad_inputs, long* _ensemble100mask_j, long* _ensemble100mask_k, float* _ensemble101grad, float* _ensemble101grad_inputs, float* _ensemble101grad_weights, float* _ensemble101inputs, float* _ensemble101weights, float* _ensemble102grad, float* _ensemble102grad_bias, float* _ensemble103grad, float* _ensemble103grad_inputs, float* _ensemble103inputs, float* _ensemble104grad, float* _ensemble104grad_inputs, float* _ensemble104grad_inputs1, float* _ensemble104grad_inputs2, float* _ensemble104grad_inputs3, float* _ensemble105grad, float* _ensemble105grad_inputs, float* _ensemble105grad_weights, float* _ensemble105inputs, float* _ensemble105weights, float* _ensemble106grad, float* _ensemble106grad_bias, float* _ensemble107grad, float* _ensemble107grad_inputs, float* _ensemble107inputs, float* _ensemble108grad, float* _ensemble108grad_inputs, float* _ensemble108grad_weights, float* _ensemble108inputs, float* _ensemble108weights, float* _ensemble109grad, float* _ensemble109grad_bias, float* _ensemble10grad, float* _ensemble10grad_inputs, float* _ensemble10grad_weights, float* _ensemble10inputs, float* _ensemble10weights, float* _ensemble110grad, float* _ensemble110grad_inputs, float* _ensemble110inputs, float* _ensemble111grad, float* _ensemble111grad_inputs, float* _ensemble111grad_weights, float* _ensemble111inputs, float* _ensemble111weights, float* _ensemble112grad, float* _ensemble112grad_bias, float* _ensemble113grad, float* _ensemble113grad_inputs, float* _ensemble113inputs, float* _ensemble114grad, float* _ensemble114grad_inputs, float* _ensemble114grad_weights, float* _ensemble114inputs, float* _ensemble114weights, float* _ensemble115grad, float* _ensemble115grad_bias, float* _ensemble116grad, float* _ensemble116grad_inputs, float* _ensemble116inputs, float* _ensemble117grad, float* _ensemble117grad_inputs, float* _ensemble117grad_weights, float* _ensemble117inputs, float* _ensemble117weights, float* _ensemble118grad, float* _ensemble118grad_bias, float* _ensemble119grad, float* _ensemble119grad_inputs, float* _ensemble119inputs, float* _ensemble11grad, float* _ensemble11grad_bias, float* _ensemble120grad, float* _ensemble120grad_inputs, long* _ensemble120mask_j, long* _ensemble120mask_k, float* _ensemble121grad, float* _ensemble121grad_inputs, float* _ensemble121grad_weights, float* _ensemble121inputs, float* _ensemble121weights, float* _ensemble122grad, float* _ensemble122grad_bias, float* _ensemble123grad, float* _ensemble123grad_inputs, float* _ensemble123inputs, float* _ensemble124grad, float* _ensemble124grad_inputs, float* _ensemble124grad_inputs1, float* _ensemble124grad_inputs2, float* _ensemble124grad_inputs3, float* _ensemble125grad, float* _ensemble125grad_inputs, float* _ensemble125grad_weights, float* _ensemble125inputs, float* _ensemble125weights, float* _ensemble126grad, float* _ensemble126grad_bias, float* _ensemble127grad, float* _ensemble127grad_inputs, float* _ensemble127inputs, float* _ensemble128grad, float* _ensemble128grad_inputs, float* _ensemble128grad_weights, float* _ensemble128inputs, float* _ensemble128weights, float* _ensemble129grad, float* _ensemble129grad_bias, float* _ensemble12grad, float* _ensemble12grad_inputs, float* _ensemble12inputs, float* _ensemble130grad, float* _ensemble130grad_inputs, float* _ensemble130inputs, float* _ensemble131grad, float* _ensemble131grad_inputs, float* _ensemble131grad_weights, float* _ensemble131inputs, float* _ensemble131weights, float* _ensemble132grad, float* _ensemble132grad_bias, float* _ensemble133grad, float* _ensemble133grad_inputs, float* _ensemble133inputs, float* _ensemble134grad, float* _ensemble134grad_inputs, float* _ensemble134grad_weights, float* _ensemble134inputs, float* _ensemble134weights, float* _ensemble135grad, float* _ensemble135grad_bias, float* _ensemble136grad, float* _ensemble136grad_inputs, float* _ensemble136inputs, float* _ensemble137grad, float* _ensemble137grad_inputs, float* _ensemble137grad_weights, float* _ensemble137inputs, float* _ensemble137weights, float* _ensemble138grad, float* _ensemble138grad_bias, float* _ensemble139grad, float* _ensemble139grad_inputs, float* _ensemble139inputs, double* _ensemble13alpha, double* _ensemble13beta, float* _ensemble13grad, float* _ensemble13grad_inputs, float* _ensemble13inputs, long* _ensemble13n, double* _ensemble13sum_value, float* _ensemble140grad, float* _ensemble140grad_inputs, long* _ensemble140mask_j, long* _ensemble140mask_k, float* _ensemble141grad, float* _ensemble141grad_inputs, float* _ensemble141grad_weights, float* _ensemble141inputs, float* _ensemble141weights, float* _ensemble142grad, float* _ensemble142grad_bias, float* _ensemble143grad, float* _ensemble143grad_inputs, float* _ensemble143inputs, float* _ensemble144grad, float* _ensemble144grad_inputs, float* _ensemble144grad_inputs1, float* _ensemble144grad_inputs2, float* _ensemble144grad_inputs3, float* _ensemble145grad, float* _ensemble145grad_inputs, long* _ensemble145kernel, float* _ensemble146grad, float* _ensemble146grad_inputs, float* _ensemble146grad_weights, float* _ensemble146inputs, float* _ensemble146weights, float* _ensemble147grad, float* _ensemble147grad_bias, float* _ensemble148grad, float* _ensemble148grad_inputs, float* _ensemble148inputs, float* _ensemble149grad, float* _ensemble149grad_inputs, float* _ensemble149grad_weights, float* _ensemble149inputs, float* _ensemble149weights, float* _ensemble14grad, float* _ensemble14grad_inputs, long* _ensemble14mask_j, long* _ensemble14mask_k, float* _ensemble150grad, float* _ensemble150grad_bias, float* _ensemble151grad, float* _ensemble151grad_inputs, float* _ensemble151inputs, float* _ensemble152grad, float* _ensemble152grad_inputs, float* _ensemble152grad_weights, float* _ensemble152inputs, float* _ensemble152weights, float* _ensemble153grad, float* _ensemble153grad_bias, float* _ensemble154grad, float* _ensemble154grad_inputs, float* _ensemble154grad_weights, float* _ensemble154inputs, float* _ensemble154weights, float* _ensemble155grad, float* _ensemble155grad_bias, float* _ensemble156grad, float* _ensemble156grad_inputs, float* _ensemble156inputs, float* _ensemble157grad, float* _ensemble157grad_inputs, float* _ensemble157grad_weights, float* _ensemble157inputs, float* _ensemble157weights, float* _ensemble158grad, float* _ensemble158grad_bias, float* _ensemble159grad, float* _ensemble159grad_inputs, float* _ensemble159inputs, float* _ensemble15grad, float* _ensemble15grad_inputs, float* _ensemble15grad_weights, float* _ensemble15inputs, float* _ensemble15weights, float* _ensemble160grad, float* _ensemble160grad_inputs, float* _ensemble160grad_weights, float* _ensemble160inputs, float* _ensemble160weights, float* _ensemble161grad, float* _ensemble161grad_bias, float* _ensemble162grad, float* _ensemble162grad_inputs, float* _ensemble162inputs, float* _ensemble163grad, float* _ensemble163grad_inputs, float* _ensemble163grad_weights, float* _ensemble163inputs, float* _ensemble163weights, float* _ensemble164grad, float* _ensemble164grad_bias, float* _ensemble165grad, float* _ensemble165grad_inputs, float* _ensemble165inputs, float* _ensemble166grad, float* _ensemble166grad_inputs, float* _ensemble166grad_weights, float* _ensemble166inputs, float* _ensemble166weights, float* _ensemble167grad, float* _ensemble167grad_bias, float* _ensemble168grad, float* _ensemble168grad_inputs, float* _ensemble168inputs, float* _ensemble169grad, float* _ensemble169grad_inputs, long* _ensemble169mask_j, long* _ensemble169mask_k, float* _ensemble16grad, float* _ensemble16grad_bias, float* _ensemble170grad, float* _ensemble170grad_inputs, float* _ensemble170grad_weights, float* _ensemble170inputs, float* _ensemble170weights, float* _ensemble171grad, float* _ensemble171grad_bias, float* _ensemble172grad, float* _ensemble172grad_inputs, float* _ensemble172inputs, float* _ensemble173grad, float* _ensemble173grad_inputs, float* _ensemble173grad_inputs1, float* _ensemble173grad_inputs2, float* _ensemble173grad_inputs3, float* _ensemble174grad, float* _ensemble174grad_inputs, long* _ensemble174mask_j, long* _ensemble174mask_k, float* _ensemble175grad, float* _ensemble175grad_inputs, float* _ensemble175grad_weights, float* _ensemble175inputs, float* _ensemble175weights, float* _ensemble176grad, float* _ensemble176grad_bias, float* _ensemble177grad, float* _ensemble177grad_inputs, float* _ensemble177inputs, float* _ensemble178grad, float* _ensemble178grad_inputs, float* _ensemble178grad_weights, float* _ensemble178inputs, float* _ensemble178weights, float* _ensemble179grad, float* _ensemble179grad_bias, float* _ensemble17grad, float* _ensemble17grad_inputs, float* _ensemble17inputs, float* _ensemble180grad, float* _ensemble180grad_inputs, float* _ensemble180inputs, float* _ensemble181grad, float* _ensemble181grad_inputs, float* _ensemble181grad_weights, float* _ensemble181inputs, float* _ensemble181weights, float* _ensemble182grad, float* _ensemble182grad_bias, float* _ensemble183grad, float* _ensemble183grad_inputs, float* _ensemble183inputs, float* _ensemble184grad, float* _ensemble184grad_inputs, float* _ensemble184grad_weights, float* _ensemble184inputs, float* _ensemble184weights, float* _ensemble185grad, float* _ensemble185grad_bias, float* _ensemble186grad, float* _ensemble186grad_inputs, float* _ensemble186inputs, float* _ensemble187grad, float* _ensemble187grad_inputs, float* _ensemble187grad_weights, float* _ensemble187inputs, float* _ensemble187weights, float* _ensemble188grad, float* _ensemble188grad_bias, float* _ensemble189grad, float* _ensemble189grad_inputs, float* _ensemble189inputs, float* _ensemble18grad, float* _ensemble18grad_inputs, float* _ensemble18grad_weights, float* _ensemble18inputs, float* _ensemble18weights, float* _ensemble190grad, float* _ensemble190grad_inputs, long* _ensemble190mask_j, long* _ensemble190mask_k, float* _ensemble191grad, float* _ensemble191grad_inputs, float* _ensemble191grad_weights, float* _ensemble191inputs, float* _ensemble191weights, float* _ensemble192grad, float* _ensemble192grad_bias, float* _ensemble193grad, float* _ensemble193grad_inputs, float* _ensemble193inputs, float* _ensemble194grad, float* _ensemble194grad_inputs, float* _ensemble194grad_inputs1, float* _ensemble194grad_inputs2, float* _ensemble194grad_inputs3, float* _ensemble195grad, float* _ensemble195grad_inputs, float* _ensemble195grad_weights, float* _ensemble195inputs, float* _ensemble195weights, float* _ensemble196grad, float* _ensemble196grad_bias, float* _ensemble197grad, float* _ensemble197grad_inputs, float* _ensemble197inputs, float* _ensemble198grad, float* _ensemble198grad_inputs, float* _ensemble198grad_weights, float* _ensemble198inputs, float* _ensemble198weights, float* _ensemble199grad, float* _ensemble199grad_bias, float* _ensemble19grad, float* _ensemble19grad_bias, float* _ensemble200grad, float* _ensemble200grad_inputs, float* _ensemble200inputs, float* _ensemble201grad, float* _ensemble201grad_inputs, float* _ensemble201grad_weights, float* _ensemble201inputs, float* _ensemble201weights, float* _ensemble202grad, float* _ensemble202grad_bias, float* _ensemble203grad, float* _ensemble203grad_inputs, float* _ensemble203inputs, float* _ensemble204grad, float* _ensemble204grad_inputs, float* _ensemble204grad_weights, float* _ensemble204inputs, float* _ensemble204weights, float* _ensemble205grad, float* _ensemble205grad_bias, float* _ensemble206grad, float* _ensemble206grad_inputs, float* _ensemble206inputs, float* _ensemble207grad, float* _ensemble207grad_inputs, float* _ensemble207grad_weights, float* _ensemble207inputs, float* _ensemble207weights, float* _ensemble208grad, float* _ensemble208grad_bias, float* _ensemble209grad, float* _ensemble209grad_inputs, float* _ensemble209inputs, float* _ensemble20grad, float* _ensemble20grad_inputs, float* _ensemble20inputs, float* _ensemble210grad, float* _ensemble210grad_inputs, long* _ensemble210mask_j, long* _ensemble210mask_k, float* _ensemble211grad, float* _ensemble211grad_inputs, float* _ensemble211grad_weights, float* _ensemble211inputs, float* _ensemble211weights, float* _ensemble212grad, float* _ensemble212grad_bias, float* _ensemble213grad, float* _ensemble213grad_inputs, float* _ensemble213inputs, float* _ensemble214grad, float* _ensemble214grad_inputs, float* _ensemble214grad_inputs1, float* _ensemble214grad_inputs2, float* _ensemble214grad_inputs3, float* _ensemble215grad, float* _ensemble215grad_inputs, long* _ensemble215kernel, float* _ensemble216grad, float* _ensemble216grad_inputs, float* _ensemble216grad_weights, float* _ensemble216inputs, float* _ensemble216weights, float* _ensemble217grad, float* _ensemble217grad_bias, float* _ensemble21grad, float* _ensemble21grad_inputs, float* _ensemble21grad_weights, float* _ensemble21inputs, float* _ensemble21weights, float* _ensemble22grad, float* _ensemble22grad_bias, float* _ensemble23grad, float* _ensemble23grad_inputs, float* _ensemble23inputs, float* _ensemble24grad, float* _ensemble24grad_inputs, float* _ensemble24grad_weights, float* _ensemble24inputs, float* _ensemble24weights, float* _ensemble25grad, float* _ensemble25grad_bias, float* _ensemble26grad, float* _ensemble26grad_inputs, float* _ensemble26inputs, float* _ensemble27grad, float* _ensemble27grad_inputs, float* _ensemble27grad_weights, float* _ensemble27inputs, float* _ensemble27weights, float* _ensemble28grad, float* _ensemble28grad_bias, float* _ensemble29grad, float* _ensemble29grad_inputs, float* _ensemble29inputs, float* _ensemble2grad, float* _ensemble2grad_weights, float* _ensemble2inputs, float* _ensemble30grad, float* _ensemble30grad_inputs, long* _ensemble30mask_j, long* _ensemble30mask_k, float* _ensemble31grad, float* _ensemble31grad_inputs, float* _ensemble31grad_weights, float* _ensemble31inputs, float* _ensemble31weights, float* _ensemble32grad, float* _ensemble32grad_bias, float* _ensemble33grad, float* _ensemble33grad_inputs, float* _ensemble33inputs, float* _ensemble34grad, float* _ensemble34grad_inputs, float* _ensemble34grad_inputs1, float* _ensemble34grad_inputs2, float* _ensemble34grad_inputs3, float* _ensemble35grad, float* _ensemble35grad_inputs, float* _ensemble35grad_weights, float* _ensemble35inputs, float* _ensemble35weights, float* _ensemble36grad, float* _ensemble36grad_bias, float* _ensemble37grad, float* _ensemble37grad_inputs, float* _ensemble37inputs, float* _ensemble38grad, float* _ensemble38grad_inputs, float* _ensemble38grad_weights, float* _ensemble38inputs, float* _ensemble38weights, float* _ensemble39grad, float* _ensemble39grad_bias, float* _ensemble3grad, float* _ensemble3grad_bias, float* _ensemble40grad, float* _ensemble40grad_inputs, float* _ensemble40inputs, float* _ensemble41grad, float* _ensemble41grad_inputs, float* _ensemble41grad_weights, float* _ensemble41inputs, float* _ensemble41weights, float* _ensemble42grad, float* _ensemble42grad_bias, float* _ensemble43grad, float* _ensemble43grad_inputs, float* _ensemble43inputs, float* _ensemble44grad, float* _ensemble44grad_inputs, float* _ensemble44grad_weights, float* _ensemble44inputs, float* _ensemble44weights, float* _ensemble45grad, float* _ensemble45grad_bias, float* _ensemble46grad, float* _ensemble46grad_inputs, float* _ensemble46inputs, float* _ensemble47grad, float* _ensemble47grad_inputs, float* _ensemble47grad_weights, float* _ensemble47inputs, float* _ensemble47weights, float* _ensemble48grad, float* _ensemble48grad_bias, float* _ensemble49grad, float* _ensemble49grad_inputs, float* _ensemble49inputs, float* _ensemble4grad, float* _ensemble4grad_inputs, float* _ensemble4inputs, float* _ensemble50grad, float* _ensemble50grad_inputs, long* _ensemble50mask_j, long* _ensemble50mask_k, float* _ensemble51grad, float* _ensemble51grad_inputs, float* _ensemble51grad_weights, float* _ensemble51inputs, float* _ensemble51weights, float* _ensemble52grad, float* _ensemble52grad_bias, float* _ensemble53grad, float* _ensemble53grad_inputs, float* _ensemble53inputs, float* _ensemble54grad, float* _ensemble54grad_inputs, float* _ensemble54grad_inputs1, float* _ensemble54grad_inputs2, float* _ensemble54grad_inputs3, float* _ensemble55grad, float* _ensemble55grad_inputs, long* _ensemble55mask_j, long* _ensemble55mask_k, float* _ensemble56grad, float* _ensemble56grad_inputs, float* _ensemble56grad_weights, float* _ensemble56inputs, float* _ensemble56weights, float* _ensemble57grad, float* _ensemble57grad_bias, float* _ensemble58grad, float* _ensemble58grad_inputs, float* _ensemble58inputs, float* _ensemble59grad, float* _ensemble59grad_inputs, float* _ensemble59grad_weights, float* _ensemble59inputs, float* _ensemble59weights, float* _ensemble5grad, float* _ensemble5grad_inputs, long* _ensemble5mask_j, long* _ensemble5mask_k, float* _ensemble60grad, float* _ensemble60grad_bias, float* _ensemble61grad, float* _ensemble61grad_inputs, float* _ensemble61inputs, float* _ensemble62grad, float* _ensemble62grad_inputs, float* _ensemble62grad_weights, float* _ensemble62inputs, float* _ensemble62weights, float* _ensemble63grad, float* _ensemble63grad_bias, float* _ensemble64grad, float* _ensemble64grad_inputs, float* _ensemble64inputs, float* _ensemble65grad, float* _ensemble65grad_inputs, float* _ensemble65grad_weights, float* _ensemble65inputs, float* _ensemble65weights, float* _ensemble66grad, float* _ensemble66grad_bias, float* _ensemble67grad, float* _ensemble67grad_inputs, float* _ensemble67inputs, float* _ensemble68grad, float* _ensemble68grad_inputs, float* _ensemble68grad_weights, float* _ensemble68inputs, float* _ensemble68weights, float* _ensemble69grad, float* _ensemble69grad_bias, double* _ensemble6alpha, double* _ensemble6beta, float* _ensemble6grad, float* _ensemble6grad_inputs, float* _ensemble6inputs, long* _ensemble6n, double* _ensemble6sum_value, float* _ensemble70grad, float* _ensemble70grad_inputs, float* _ensemble70inputs, float* _ensemble71grad, float* _ensemble71grad_inputs, long* _ensemble71mask_j, long* _ensemble71mask_k, float* _ensemble72grad, float* _ensemble72grad_inputs, float* _ensemble72grad_weights, float* _ensemble72inputs, float* _ensemble72weights, float* _ensemble73grad, float* _ensemble73grad_bias, float* _ensemble74grad, float* _ensemble74grad_inputs, float* _ensemble74inputs, float* _ensemble75grad, float* _ensemble75grad_inputs, float* _ensemble75grad_inputs1, float* _ensemble75grad_inputs2, float* _ensemble75grad_inputs3, float* _ensemble76grad, float* _ensemble76grad_inputs, long* _ensemble76kernel, float* _ensemble77grad, float* _ensemble77grad_inputs, float* _ensemble77grad_weights, float* _ensemble77inputs, float* _ensemble77weights, float* _ensemble78grad, float* _ensemble78grad_bias, float* _ensemble79grad, float* _ensemble79grad_inputs, float* _ensemble79inputs, float* _ensemble7grad, float* _ensemble7grad_inputs, float* _ensemble7grad_weights, float* _ensemble7inputs, float* _ensemble7weights, float* _ensemble80grad, float* _ensemble80grad_inputs, float* _ensemble80grad_weights, float* _ensemble80inputs, float* _ensemble80weights, float* _ensemble81grad, float* _ensemble81grad_bias, float* _ensemble82grad, float* _ensemble82grad_inputs, float* _ensemble82inputs, float* _ensemble83grad, float* _ensemble83grad_inputs, float* _ensemble83grad_weights, float* _ensemble83inputs, float* _ensemble83weights, float* _ensemble84grad, float* _ensemble84grad_bias, float* _ensemble85grad, float* _ensemble85grad_inputs, float* _ensemble85grad_weights, float* _ensemble85inputs, float* _ensemble85weights, float* _ensemble86grad, float* _ensemble86grad_bias, float* _ensemble87grad, float* _ensemble87grad_inputs, float* _ensemble87inputs, float* _ensemble88grad, float* _ensemble88grad_inputs, float* _ensemble88grad_weights, float* _ensemble88inputs, float* _ensemble88weights, float* _ensemble89grad, float* _ensemble89grad_bias, float* _ensemble8grad, float* _ensemble8grad_bias, float* _ensemble90grad, float* _ensemble90grad_inputs, float* _ensemble90inputs, float* _ensemble91grad, float* _ensemble91grad_inputs, float* _ensemble91grad_weights, float* _ensemble91inputs, float* _ensemble91weights, float* _ensemble92grad, float* _ensemble92grad_bias, float* _ensemble93grad, float* _ensemble93grad_inputs, float* _ensemble93inputs, float* _ensemble94grad, float* _ensemble94grad_inputs, float* _ensemble94grad_weights, float* _ensemble94inputs, float* _ensemble94weights, float* _ensemble95grad, float* _ensemble95grad_bias, float* _ensemble96grad, float* _ensemble96grad_inputs, float* _ensemble96inputs, float* _ensemble97grad, float* _ensemble97grad_inputs, float* _ensemble97grad_weights, float* _ensemble97inputs, float* _ensemble97weights, float* _ensemble98grad, float* _ensemble98grad_bias, float* _ensemble99grad, float* _ensemble99grad_inputs, float* _ensemble99inputs, float* _ensemble9grad, float* _ensemble9grad_inputs, float* _ensemble9inputs) {
    float (* ensemble9inputs)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble9inputs;
    __assume_aligned(ensemble9inputs, 64);
    float (* ensemble9grad_inputs)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble9grad_inputs;
    __assume_aligned(ensemble9grad_inputs, 64);
    float (* ensemble9grad)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble9grad;
    __assume_aligned(ensemble9grad, 64);
    float (* ensemble99inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble99inputs;
    __assume_aligned(ensemble99inputs, 64);
    float (* ensemble99grad_inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble99grad_inputs;
    __assume_aligned(ensemble99grad_inputs, 64);
    float (* ensemble99grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble99grad;
    __assume_aligned(ensemble99grad, 64);
    float (* ensemble98grad_bias)[1][16] = (float (*)[1][16]) _ensemble98grad_bias;
    __assume_aligned(ensemble98grad_bias, 64);
    float (* ensemble98grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble98grad;
    __assume_aligned(ensemble98grad, 64);
    float (* ensemble97weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble97weights;
    __assume_aligned(ensemble97weights, 64);
    float (* ensemble97inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble97inputs;
    __assume_aligned(ensemble97inputs, 64);
    float (* ensemble97grad_weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble97grad_weights;
    __assume_aligned(ensemble97grad_weights, 64);
    float (* ensemble97grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble97grad_inputs;
    __assume_aligned(ensemble97grad_inputs, 64);
    float (* ensemble97grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble97grad;
    __assume_aligned(ensemble97grad, 64);
    float (* ensemble96inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble96inputs;
    __assume_aligned(ensemble96inputs, 64);
    float (* ensemble96grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble96grad_inputs;
    __assume_aligned(ensemble96grad_inputs, 64);
    float (* ensemble96grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble96grad;
    __assume_aligned(ensemble96grad, 64);
    float (* ensemble95grad_bias)[1][16] = (float (*)[1][16]) _ensemble95grad_bias;
    __assume_aligned(ensemble95grad_bias, 64);
    float (* ensemble95grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble95grad;
    __assume_aligned(ensemble95grad, 64);
    float (* ensemble94weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble94weights;
    __assume_aligned(ensemble94weights, 64);
    float (* ensemble94inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble94inputs;
    __assume_aligned(ensemble94inputs, 64);
    float (* ensemble94grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble94grad_weights;
    __assume_aligned(ensemble94grad_weights, 64);
    float (* ensemble94grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble94grad_inputs;
    __assume_aligned(ensemble94grad_inputs, 64);
    float (* ensemble94grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble94grad;
    __assume_aligned(ensemble94grad, 64);
    float (* ensemble93inputs)[14][14][14][16] = (float (*)[14][14][14][16]) _ensemble93inputs;
    __assume_aligned(ensemble93inputs, 64);
    float (* ensemble93grad_inputs)[14][14][14][16] = (float (*)[14][14][14][16]) _ensemble93grad_inputs;
    __assume_aligned(ensemble93grad_inputs, 64);
    float (* ensemble93grad)[14][14][14][16] = (float (*)[14][14][14][16]) _ensemble93grad;
    __assume_aligned(ensemble93grad, 64);
    float (* ensemble92grad_bias)[1][16] = (float (*)[1][16]) _ensemble92grad_bias;
    __assume_aligned(ensemble92grad_bias, 64);
    float (* ensemble92grad)[14][14][14][16] = (float (*)[14][14][14][16]) _ensemble92grad;
    __assume_aligned(ensemble92grad, 64);
    float (* ensemble91weights)[7][3][3][16][16] = (float (*)[7][3][3][16][16]) _ensemble91weights;
    __assume_aligned(ensemble91weights, 64);
    float (* ensemble91inputs)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble91inputs;
    __assume_aligned(ensemble91inputs, 64);
    float (* ensemble91grad_weights)[7][3][3][16][16] = (float (*)[7][3][3][16][16]) _ensemble91grad_weights;
    __assume_aligned(ensemble91grad_weights, 64);
    float (* ensemble91grad_inputs)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble91grad_inputs;
    __assume_aligned(ensemble91grad_inputs, 64);
    float (* ensemble91grad)[14][14][14][16] = (float (*)[14][14][14][16]) _ensemble91grad;
    __assume_aligned(ensemble91grad, 64);
    float (* ensemble90inputs)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble90inputs;
    __assume_aligned(ensemble90inputs, 64);
    float (* ensemble90grad_inputs)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble90grad_inputs;
    __assume_aligned(ensemble90grad_inputs, 64);
    float (* ensemble90grad)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble90grad;
    __assume_aligned(ensemble90grad, 64);
    float (* ensemble8grad_bias)[1][16] = (float (*)[1][16]) _ensemble8grad_bias;
    __assume_aligned(ensemble8grad_bias, 64);
    float (* ensemble8grad)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble8grad;
    __assume_aligned(ensemble8grad, 64);
    float (* ensemble89grad_bias)[1][16] = (float (*)[1][16]) _ensemble89grad_bias;
    __assume_aligned(ensemble89grad_bias, 64);
    float (* ensemble89grad)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble89grad;
    __assume_aligned(ensemble89grad, 64);
    float (* ensemble88weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble88weights;
    __assume_aligned(ensemble88weights, 64);
    float (* ensemble88inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble88inputs;
    __assume_aligned(ensemble88inputs, 64);
    float (* ensemble88grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble88grad_weights;
    __assume_aligned(ensemble88grad_weights, 64);
    float (* ensemble88grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble88grad_inputs;
    __assume_aligned(ensemble88grad_inputs, 64);
    float (* ensemble88grad)[7][16][16][16] = (float (*)[7][16][16][16]) _ensemble88grad;
    __assume_aligned(ensemble88grad, 64);
    float (* ensemble87inputs)[10][14][14][16] = (float (*)[10][14][14][16]) _ensemble87inputs;
    __assume_aligned(ensemble87inputs, 64);
    float (* ensemble87grad_inputs)[10][14][14][16] = (float (*)[10][14][14][16]) _ensemble87grad_inputs;
    __assume_aligned(ensemble87grad_inputs, 64);
    float (* ensemble87grad)[10][14][14][16] = (float (*)[10][14][14][16]) _ensemble87grad;
    __assume_aligned(ensemble87grad, 64);
    float (* ensemble86grad_bias)[1][16] = (float (*)[1][16]) _ensemble86grad_bias;
    __assume_aligned(ensemble86grad_bias, 64);
    float (* ensemble86grad)[10][14][14][16] = (float (*)[10][14][14][16]) _ensemble86grad;
    __assume_aligned(ensemble86grad, 64);
    float (* ensemble85weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble85weights;
    __assume_aligned(ensemble85weights, 64);
    float (* ensemble85inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble85inputs;
    __assume_aligned(ensemble85inputs, 64);
    float (* ensemble85grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble85grad_weights;
    __assume_aligned(ensemble85grad_weights, 64);
    float (* ensemble85grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble85grad_inputs;
    __assume_aligned(ensemble85grad_inputs, 64);
    float (* ensemble85grad)[10][14][14][16] = (float (*)[10][14][14][16]) _ensemble85grad;
    __assume_aligned(ensemble85grad, 64);
    float (* ensemble84grad_bias)[63][1][16] = (float (*)[63][1][16]) _ensemble84grad_bias;
    __assume_aligned(ensemble84grad_bias, 64);
    float (* ensemble84grad)[63][16] = (float (*)[63][16]) _ensemble84grad;
    __assume_aligned(ensemble84grad, 64);
    float (* ensemble83weights)[64][16][16] = (float (*)[64][16][16]) _ensemble83weights;
    __assume_aligned(ensemble83weights, 64);
    float (* ensemble83inputs)[64][16] = (float (*)[64][16]) _ensemble83inputs;
    __assume_aligned(ensemble83inputs, 64);
    float (* ensemble83grad_weights)[64][16][16] = (float (*)[64][16][16]) _ensemble83grad_weights;
    __assume_aligned(ensemble83grad_weights, 64);
    float (* ensemble83grad_inputs)[64][16] = (float (*)[64][16]) _ensemble83grad_inputs;
    __assume_aligned(ensemble83grad_inputs, 64);
    float (* ensemble83grad)[63][16] = (float (*)[63][16]) _ensemble83grad;
    __assume_aligned(ensemble83grad, 64);
    float (* ensemble82inputs)[64][16] = (float (*)[64][16]) _ensemble82inputs;
    __assume_aligned(ensemble82inputs, 64);
    float (* ensemble82grad_inputs)[64][16] = (float (*)[64][16]) _ensemble82grad_inputs;
    __assume_aligned(ensemble82grad_inputs, 64);
    float (* ensemble82grad)[64][16] = (float (*)[64][16]) _ensemble82grad;
    __assume_aligned(ensemble82grad, 64);
    float (* ensemble81grad_bias)[64][1][16] = (float (*)[64][1][16]) _ensemble81grad_bias;
    __assume_aligned(ensemble81grad_bias, 64);
    float (* ensemble81grad)[64][16] = (float (*)[64][16]) _ensemble81grad;
    __assume_aligned(ensemble81grad, 64);
    float (* ensemble80weights)[8][4][4][16][16] = (float (*)[8][4][4][16][16]) _ensemble80weights;
    __assume_aligned(ensemble80weights, 64);
    float (* ensemble80inputs)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble80inputs;
    __assume_aligned(ensemble80inputs, 64);
    float (* ensemble80grad_weights)[8][4][4][16][16] = (float (*)[8][4][4][16][16]) _ensemble80grad_weights;
    __assume_aligned(ensemble80grad_weights, 64);
    float (* ensemble80grad_inputs)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble80grad_inputs;
    __assume_aligned(ensemble80grad_inputs, 64);
    float (* ensemble80grad)[64][16] = (float (*)[64][16]) _ensemble80grad;
    __assume_aligned(ensemble80grad, 64);
    float (* ensemble7weights)[4][1][1][16][16] = (float (*)[4][1][1][16][16]) _ensemble7weights;
    __assume_aligned(ensemble7weights, 64);
    float (* ensemble7inputs)[4][56][56][16] = (float (*)[4][56][56][16]) _ensemble7inputs;
    __assume_aligned(ensemble7inputs, 64);
    float (* ensemble7grad_weights)[4][1][1][16][16] = (float (*)[4][1][1][16][16]) _ensemble7grad_weights;
    __assume_aligned(ensemble7grad_weights, 64);
    float (* ensemble7grad_inputs)[4][56][56][16] = (float (*)[4][56][56][16]) _ensemble7grad_inputs;
    __assume_aligned(ensemble7grad_inputs, 64);
    float (* ensemble7grad)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble7grad;
    __assume_aligned(ensemble7grad, 64);
    float (* ensemble79inputs)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble79inputs;
    __assume_aligned(ensemble79inputs, 64);
    float (* ensemble79grad_inputs)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble79grad_inputs;
    __assume_aligned(ensemble79grad_inputs, 64);
    float (* ensemble79grad)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble79grad;
    __assume_aligned(ensemble79grad, 64);
    float (* ensemble78grad_bias)[1][16] = (float (*)[1][16]) _ensemble78grad_bias;
    __assume_aligned(ensemble78grad_bias, 64);
    float (* ensemble78grad)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble78grad;
    __assume_aligned(ensemble78grad, 64);
    float (* ensemble77weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble77weights;
    __assume_aligned(ensemble77weights, 64);
    float (* ensemble77inputs)[32][4][4][16] = (float (*)[32][4][4][16]) _ensemble77inputs;
    __assume_aligned(ensemble77inputs, 64);
    float (* ensemble77grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble77grad_weights;
    __assume_aligned(ensemble77grad_weights, 64);
    float (* ensemble77grad_inputs)[32][4][4][16] = (float (*)[32][4][4][16]) _ensemble77grad_inputs;
    __assume_aligned(ensemble77grad_inputs, 64);
    float (* ensemble77grad)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble77grad;
    __assume_aligned(ensemble77grad, 64);
    long (* ensemble76kernel)[32][4][4][16] = (long (*)[32][4][4][16]) _ensemble76kernel;
    __assume_aligned(ensemble76kernel, 64);
    float (* ensemble76grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble76grad_inputs;
    __assume_aligned(ensemble76grad_inputs, 64);
    float (* ensemble76grad)[32][4][4][16] = (float (*)[32][4][4][16]) _ensemble76grad;
    __assume_aligned(ensemble76grad, 64);
    float (* ensemble75grad_inputs3)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble75grad_inputs3;
    __assume_aligned(ensemble75grad_inputs3, 64);
    float (* ensemble75grad_inputs2)[3][14][14][16] = (float (*)[3][14][14][16]) _ensemble75grad_inputs2;
    __assume_aligned(ensemble75grad_inputs2, 64);
    float (* ensemble75grad_inputs1)[13][14][14][16] = (float (*)[13][14][14][16]) _ensemble75grad_inputs1;
    __assume_aligned(ensemble75grad_inputs1, 64);
    float (* ensemble75grad_inputs)[12][14][14][16] = (float (*)[12][14][14][16]) _ensemble75grad_inputs;
    __assume_aligned(ensemble75grad_inputs, 64);
    float (* ensemble75grad)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble75grad;
    __assume_aligned(ensemble75grad, 64);
    float (* ensemble74inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble74inputs;
    __assume_aligned(ensemble74inputs, 64);
    float (* ensemble74grad_inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble74grad_inputs;
    __assume_aligned(ensemble74grad_inputs, 64);
    float (* ensemble74grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble74grad;
    __assume_aligned(ensemble74grad, 64);
    float (* ensemble73grad_bias)[1][16] = (float (*)[1][16]) _ensemble73grad_bias;
    __assume_aligned(ensemble73grad_bias, 64);
    float (* ensemble73grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble73grad;
    __assume_aligned(ensemble73grad, 64);
    float (* ensemble72weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble72weights;
    __assume_aligned(ensemble72weights, 64);
    float (* ensemble72inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble72inputs;
    __assume_aligned(ensemble72inputs, 64);
    float (* ensemble72grad_weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble72grad_weights;
    __assume_aligned(ensemble72grad_weights, 64);
    float (* ensemble72grad_inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble72grad_inputs;
    __assume_aligned(ensemble72grad_inputs, 64);
    float (* ensemble72grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble72grad;
    __assume_aligned(ensemble72grad, 64);
    long (* ensemble71mask_k)[30][14][14][16] = (long (*)[30][14][14][16]) _ensemble71mask_k;
    __assume_aligned(ensemble71mask_k, 64);
    long (* ensemble71mask_j)[30][14][14][16] = (long (*)[30][14][14][16]) _ensemble71mask_j;
    __assume_aligned(ensemble71mask_j, 64);
    float (* ensemble71grad_inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble71grad_inputs;
    __assume_aligned(ensemble71grad_inputs, 64);
    float (* ensemble71grad)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble71grad;
    __assume_aligned(ensemble71grad, 64);
    float (* ensemble70inputs)[3][14][14][16] = (float (*)[3][14][14][16]) _ensemble70inputs;
    __assume_aligned(ensemble70inputs, 64);
    float (* ensemble70grad_inputs)[3][14][14][16] = (float (*)[3][14][14][16]) _ensemble70grad_inputs;
    __assume_aligned(ensemble70grad_inputs, 64);
    float (* ensemble70grad)[3][14][14][16] = (float (*)[3][14][14][16]) _ensemble70grad;
    __assume_aligned(ensemble70grad, 64);
    double (* ensemble6sum_value)[4][56][56][16] = (double (*)[4][56][56][16]) _ensemble6sum_value;
    __assume_aligned(ensemble6sum_value, 64);
    long (* ensemble6n)[4][56][56][16] = (long (*)[4][56][56][16]) _ensemble6n;
    __assume_aligned(ensemble6n, 64);
    float (* ensemble6inputs)[6][56][56][16] = (float (*)[6][56][56][16]) _ensemble6inputs;
    __assume_aligned(ensemble6inputs, 64);
    float (* ensemble6grad_inputs)[6][56][56][16] = (float (*)[6][56][56][16]) _ensemble6grad_inputs;
    __assume_aligned(ensemble6grad_inputs, 64);
    float (* ensemble6grad)[4][56][56][16] = (float (*)[4][56][56][16]) _ensemble6grad;
    __assume_aligned(ensemble6grad, 64);
    double (* ensemble6beta)[4][56][56][16] = (double (*)[4][56][56][16]) _ensemble6beta;
    __assume_aligned(ensemble6beta, 64);
    double (* ensemble6alpha)[4][56][56][16] = (double (*)[4][56][56][16]) _ensemble6alpha;
    __assume_aligned(ensemble6alpha, 64);
    float (* ensemble69grad_bias)[1][16] = (float (*)[1][16]) _ensemble69grad_bias;
    __assume_aligned(ensemble69grad_bias, 64);
    float (* ensemble69grad)[3][14][14][16] = (float (*)[3][14][14][16]) _ensemble69grad;
    __assume_aligned(ensemble69grad, 64);
    float (* ensemble68weights)[1][5][5][16][16] = (float (*)[1][5][5][16][16]) _ensemble68weights;
    __assume_aligned(ensemble68weights, 64);
    float (* ensemble68inputs)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble68inputs;
    __assume_aligned(ensemble68inputs, 64);
    float (* ensemble68grad_weights)[1][5][5][16][16] = (float (*)[1][5][5][16][16]) _ensemble68grad_weights;
    __assume_aligned(ensemble68grad_weights, 64);
    float (* ensemble68grad_inputs)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble68grad_inputs;
    __assume_aligned(ensemble68grad_inputs, 64);
    float (* ensemble68grad)[3][14][14][16] = (float (*)[3][14][14][16]) _ensemble68grad;
    __assume_aligned(ensemble68grad, 64);
    float (* ensemble67inputs)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble67inputs;
    __assume_aligned(ensemble67inputs, 64);
    float (* ensemble67grad_inputs)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble67grad_inputs;
    __assume_aligned(ensemble67grad_inputs, 64);
    float (* ensemble67grad)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble67grad;
    __assume_aligned(ensemble67grad, 64);
    float (* ensemble66grad_bias)[1][16] = (float (*)[1][16]) _ensemble66grad_bias;
    __assume_aligned(ensemble66grad_bias, 64);
    float (* ensemble66grad)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble66grad;
    __assume_aligned(ensemble66grad, 64);
    float (* ensemble65weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble65weights;
    __assume_aligned(ensemble65weights, 64);
    float (* ensemble65inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble65inputs;
    __assume_aligned(ensemble65inputs, 64);
    float (* ensemble65grad_weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble65grad_weights;
    __assume_aligned(ensemble65grad_weights, 64);
    float (* ensemble65grad_inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble65grad_inputs;
    __assume_aligned(ensemble65grad_inputs, 64);
    float (* ensemble65grad)[1][18][18][16] = (float (*)[1][18][18][16]) _ensemble65grad;
    __assume_aligned(ensemble65grad, 64);
    float (* ensemble64inputs)[13][14][14][16] = (float (*)[13][14][14][16]) _ensemble64inputs;
    __assume_aligned(ensemble64inputs, 64);
    float (* ensemble64grad_inputs)[13][14][14][16] = (float (*)[13][14][14][16]) _ensemble64grad_inputs;
    __assume_aligned(ensemble64grad_inputs, 64);
    float (* ensemble64grad)[13][14][14][16] = (float (*)[13][14][14][16]) _ensemble64grad;
    __assume_aligned(ensemble64grad, 64);
    float (* ensemble63grad_bias)[1][16] = (float (*)[1][16]) _ensemble63grad_bias;
    __assume_aligned(ensemble63grad_bias, 64);
    float (* ensemble63grad)[13][14][14][16] = (float (*)[13][14][14][16]) _ensemble63grad;
    __assume_aligned(ensemble63grad, 64);
    float (* ensemble62weights)[6][3][3][16][16] = (float (*)[6][3][3][16][16]) _ensemble62weights;
    __assume_aligned(ensemble62weights, 64);
    float (* ensemble62inputs)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble62inputs;
    __assume_aligned(ensemble62inputs, 64);
    float (* ensemble62grad_weights)[6][3][3][16][16] = (float (*)[6][3][3][16][16]) _ensemble62grad_weights;
    __assume_aligned(ensemble62grad_weights, 64);
    float (* ensemble62grad_inputs)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble62grad_inputs;
    __assume_aligned(ensemble62grad_inputs, 64);
    float (* ensemble62grad)[13][14][14][16] = (float (*)[13][14][14][16]) _ensemble62grad;
    __assume_aligned(ensemble62grad, 64);
    float (* ensemble61inputs)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble61inputs;
    __assume_aligned(ensemble61inputs, 64);
    float (* ensemble61grad_inputs)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble61grad_inputs;
    __assume_aligned(ensemble61grad_inputs, 64);
    float (* ensemble61grad)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble61grad;
    __assume_aligned(ensemble61grad, 64);
    float (* ensemble60grad_bias)[1][16] = (float (*)[1][16]) _ensemble60grad_bias;
    __assume_aligned(ensemble60grad_bias, 64);
    float (* ensemble60grad)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble60grad;
    __assume_aligned(ensemble60grad, 64);
    long (* ensemble5mask_k)[4][56][56][16] = (long (*)[4][56][56][16]) _ensemble5mask_k;
    __assume_aligned(ensemble5mask_k, 64);
    long (* ensemble5mask_j)[4][56][56][16] = (long (*)[4][56][56][16]) _ensemble5mask_j;
    __assume_aligned(ensemble5mask_j, 64);
    float (* ensemble5grad_inputs)[4][112][112][16] = (float (*)[4][112][112][16]) _ensemble5grad_inputs;
    __assume_aligned(ensemble5grad_inputs, 64);
    float (* ensemble5grad)[6][56][56][16] = (float (*)[6][56][56][16]) _ensemble5grad;
    __assume_aligned(ensemble5grad, 64);
    float (* ensemble59weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble59weights;
    __assume_aligned(ensemble59weights, 64);
    float (* ensemble59inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble59inputs;
    __assume_aligned(ensemble59inputs, 64);
    float (* ensemble59grad_weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble59grad_weights;
    __assume_aligned(ensemble59grad_weights, 64);
    float (* ensemble59grad_inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble59grad_inputs;
    __assume_aligned(ensemble59grad_inputs, 64);
    float (* ensemble59grad)[6][16][16][16] = (float (*)[6][16][16][16]) _ensemble59grad;
    __assume_aligned(ensemble59grad, 64);
    float (* ensemble58inputs)[12][14][14][16] = (float (*)[12][14][14][16]) _ensemble58inputs;
    __assume_aligned(ensemble58inputs, 64);
    float (* ensemble58grad_inputs)[12][14][14][16] = (float (*)[12][14][14][16]) _ensemble58grad_inputs;
    __assume_aligned(ensemble58grad_inputs, 64);
    float (* ensemble58grad)[12][14][14][16] = (float (*)[12][14][14][16]) _ensemble58grad;
    __assume_aligned(ensemble58grad, 64);
    float (* ensemble57grad_bias)[1][16] = (float (*)[1][16]) _ensemble57grad_bias;
    __assume_aligned(ensemble57grad_bias, 64);
    float (* ensemble57grad)[12][14][14][16] = (float (*)[12][14][14][16]) _ensemble57grad;
    __assume_aligned(ensemble57grad, 64);
    float (* ensemble56weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble56weights;
    __assume_aligned(ensemble56weights, 64);
    float (* ensemble56inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble56inputs;
    __assume_aligned(ensemble56inputs, 64);
    float (* ensemble56grad_weights)[30][1][1][16][16] = (float (*)[30][1][1][16][16]) _ensemble56grad_weights;
    __assume_aligned(ensemble56grad_weights, 64);
    float (* ensemble56grad_inputs)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble56grad_inputs;
    __assume_aligned(ensemble56grad_inputs, 64);
    float (* ensemble56grad)[12][14][14][16] = (float (*)[12][14][14][16]) _ensemble56grad;
    __assume_aligned(ensemble56grad, 64);
    long (* ensemble55mask_k)[30][14][14][16] = (long (*)[30][14][14][16]) _ensemble55mask_k;
    __assume_aligned(ensemble55mask_k, 64);
    long (* ensemble55mask_j)[30][14][14][16] = (long (*)[30][14][14][16]) _ensemble55mask_j;
    __assume_aligned(ensemble55mask_j, 64);
    float (* ensemble55grad_inputs)[30][28][28][16] = (float (*)[30][28][28][16]) _ensemble55grad_inputs;
    __assume_aligned(ensemble55grad_inputs, 64);
    float (* ensemble55grad)[30][14][14][16] = (float (*)[30][14][14][16]) _ensemble55grad;
    __assume_aligned(ensemble55grad, 64);
    float (* ensemble54grad_inputs3)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble54grad_inputs3;
    __assume_aligned(ensemble54grad_inputs3, 64);
    float (* ensemble54grad_inputs2)[6][28][28][16] = (float (*)[6][28][28][16]) _ensemble54grad_inputs2;
    __assume_aligned(ensemble54grad_inputs2, 64);
    float (* ensemble54grad_inputs1)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble54grad_inputs1;
    __assume_aligned(ensemble54grad_inputs1, 64);
    float (* ensemble54grad_inputs)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble54grad_inputs;
    __assume_aligned(ensemble54grad_inputs, 64);
    float (* ensemble54grad)[30][28][28][16] = (float (*)[30][28][28][16]) _ensemble54grad;
    __assume_aligned(ensemble54grad, 64);
    float (* ensemble53inputs)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble53inputs;
    __assume_aligned(ensemble53inputs, 64);
    float (* ensemble53grad_inputs)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble53grad_inputs;
    __assume_aligned(ensemble53grad_inputs, 64);
    float (* ensemble53grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble53grad;
    __assume_aligned(ensemble53grad, 64);
    float (* ensemble52grad_bias)[1][16] = (float (*)[1][16]) _ensemble52grad_bias;
    __assume_aligned(ensemble52grad_bias, 64);
    float (* ensemble52grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble52grad;
    __assume_aligned(ensemble52grad, 64);
    float (* ensemble51weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble51weights;
    __assume_aligned(ensemble51weights, 64);
    float (* ensemble51inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble51inputs;
    __assume_aligned(ensemble51inputs, 64);
    float (* ensemble51grad_weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble51grad_weights;
    __assume_aligned(ensemble51grad_weights, 64);
    float (* ensemble51grad_inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble51grad_inputs;
    __assume_aligned(ensemble51grad_inputs, 64);
    float (* ensemble51grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble51grad;
    __assume_aligned(ensemble51grad, 64);
    long (* ensemble50mask_k)[16][28][28][16] = (long (*)[16][28][28][16]) _ensemble50mask_k;
    __assume_aligned(ensemble50mask_k, 64);
    long (* ensemble50mask_j)[16][28][28][16] = (long (*)[16][28][28][16]) _ensemble50mask_j;
    __assume_aligned(ensemble50mask_j, 64);
    float (* ensemble50grad_inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble50grad_inputs;
    __assume_aligned(ensemble50grad_inputs, 64);
    float (* ensemble50grad)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble50grad;
    __assume_aligned(ensemble50grad, 64);
    float (* ensemble4inputs)[4][112][112][16] = (float (*)[4][112][112][16]) _ensemble4inputs;
    __assume_aligned(ensemble4inputs, 64);
    float (* ensemble4grad_inputs)[4][112][112][16] = (float (*)[4][112][112][16]) _ensemble4grad_inputs;
    __assume_aligned(ensemble4grad_inputs, 64);
    float (* ensemble4grad)[4][112][112][16] = (float (*)[4][112][112][16]) _ensemble4grad;
    __assume_aligned(ensemble4grad, 64);
    float (* ensemble49inputs)[6][28][28][16] = (float (*)[6][28][28][16]) _ensemble49inputs;
    __assume_aligned(ensemble49inputs, 64);
    float (* ensemble49grad_inputs)[6][28][28][16] = (float (*)[6][28][28][16]) _ensemble49grad_inputs;
    __assume_aligned(ensemble49grad_inputs, 64);
    float (* ensemble49grad)[6][28][28][16] = (float (*)[6][28][28][16]) _ensemble49grad;
    __assume_aligned(ensemble49grad, 64);
    float (* ensemble48grad_bias)[1][16] = (float (*)[1][16]) _ensemble48grad_bias;
    __assume_aligned(ensemble48grad_bias, 64);
    float (* ensemble48grad)[6][28][28][16] = (float (*)[6][28][28][16]) _ensemble48grad;
    __assume_aligned(ensemble48grad, 64);
    float (* ensemble47weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble47weights;
    __assume_aligned(ensemble47weights, 64);
    float (* ensemble47inputs)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble47inputs;
    __assume_aligned(ensemble47inputs, 64);
    float (* ensemble47grad_weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble47grad_weights;
    __assume_aligned(ensemble47grad_weights, 64);
    float (* ensemble47grad_inputs)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble47grad_inputs;
    __assume_aligned(ensemble47grad_inputs, 64);
    float (* ensemble47grad)[6][28][28][16] = (float (*)[6][28][28][16]) _ensemble47grad;
    __assume_aligned(ensemble47grad, 64);
    float (* ensemble46inputs)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble46inputs;
    __assume_aligned(ensemble46inputs, 64);
    float (* ensemble46grad_inputs)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble46grad_inputs;
    __assume_aligned(ensemble46grad_inputs, 64);
    float (* ensemble46grad)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble46grad;
    __assume_aligned(ensemble46grad, 64);
    float (* ensemble45grad_bias)[1][16] = (float (*)[1][16]) _ensemble45grad_bias;
    __assume_aligned(ensemble45grad_bias, 64);
    float (* ensemble45grad)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble45grad;
    __assume_aligned(ensemble45grad, 64);
    float (* ensemble44weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble44weights;
    __assume_aligned(ensemble44weights, 64);
    float (* ensemble44inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble44inputs;
    __assume_aligned(ensemble44inputs, 64);
    float (* ensemble44grad_weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble44grad_weights;
    __assume_aligned(ensemble44grad_weights, 64);
    float (* ensemble44grad_inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble44grad_inputs;
    __assume_aligned(ensemble44grad_inputs, 64);
    float (* ensemble44grad)[2][32][32][16] = (float (*)[2][32][32][16]) _ensemble44grad;
    __assume_aligned(ensemble44grad, 64);
    float (* ensemble43inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble43inputs;
    __assume_aligned(ensemble43inputs, 64);
    float (* ensemble43grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble43grad_inputs;
    __assume_aligned(ensemble43grad_inputs, 64);
    float (* ensemble43grad)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble43grad;
    __assume_aligned(ensemble43grad, 64);
    float (* ensemble42grad_bias)[1][16] = (float (*)[1][16]) _ensemble42grad_bias;
    __assume_aligned(ensemble42grad_bias, 64);
    float (* ensemble42grad)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble42grad;
    __assume_aligned(ensemble42grad, 64);
    float (* ensemble41weights)[8][3][3][16][16] = (float (*)[8][3][3][16][16]) _ensemble41weights;
    __assume_aligned(ensemble41weights, 64);
    float (* ensemble41inputs)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble41inputs;
    __assume_aligned(ensemble41inputs, 64);
    float (* ensemble41grad_weights)[8][3][3][16][16] = (float (*)[8][3][3][16][16]) _ensemble41grad_weights;
    __assume_aligned(ensemble41grad_weights, 64);
    float (* ensemble41grad_inputs)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble41grad_inputs;
    __assume_aligned(ensemble41grad_inputs, 64);
    float (* ensemble41grad)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble41grad;
    __assume_aligned(ensemble41grad, 64);
    float (* ensemble40inputs)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble40inputs;
    __assume_aligned(ensemble40inputs, 64);
    float (* ensemble40grad_inputs)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble40grad_inputs;
    __assume_aligned(ensemble40grad_inputs, 64);
    float (* ensemble40grad)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble40grad;
    __assume_aligned(ensemble40grad, 64);
    float (* ensemble3grad_bias)[1][16] = (float (*)[1][16]) _ensemble3grad_bias;
    __assume_aligned(ensemble3grad_bias, 64);
    float (* ensemble3grad)[4][112][112][16] = (float (*)[4][112][112][16]) _ensemble3grad;
    __assume_aligned(ensemble3grad, 64);
    float (* ensemble39grad_bias)[1][16] = (float (*)[1][16]) _ensemble39grad_bias;
    __assume_aligned(ensemble39grad_bias, 64);
    float (* ensemble39grad)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble39grad;
    __assume_aligned(ensemble39grad, 64);
    float (* ensemble38weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble38weights;
    __assume_aligned(ensemble38weights, 64);
    float (* ensemble38inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble38inputs;
    __assume_aligned(ensemble38inputs, 64);
    float (* ensemble38grad_weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble38grad_weights;
    __assume_aligned(ensemble38grad_weights, 64);
    float (* ensemble38grad_inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble38grad_inputs;
    __assume_aligned(ensemble38grad_inputs, 64);
    float (* ensemble38grad)[8][30][30][16] = (float (*)[8][30][30][16]) _ensemble38grad;
    __assume_aligned(ensemble38grad, 64);
    float (* ensemble37inputs)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble37inputs;
    __assume_aligned(ensemble37inputs, 64);
    float (* ensemble37grad_inputs)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble37grad_inputs;
    __assume_aligned(ensemble37grad_inputs, 64);
    float (* ensemble37grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble37grad;
    __assume_aligned(ensemble37grad, 64);
    float (* ensemble36grad_bias)[1][16] = (float (*)[1][16]) _ensemble36grad_bias;
    __assume_aligned(ensemble36grad_bias, 64);
    float (* ensemble36grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble36grad;
    __assume_aligned(ensemble36grad, 64);
    float (* ensemble35weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble35weights;
    __assume_aligned(ensemble35weights, 64);
    float (* ensemble35inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble35inputs;
    __assume_aligned(ensemble35inputs, 64);
    float (* ensemble35grad_weights)[16][1][1][16][16] = (float (*)[16][1][1][16][16]) _ensemble35grad_weights;
    __assume_aligned(ensemble35grad_weights, 64);
    float (* ensemble35grad_inputs)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble35grad_inputs;
    __assume_aligned(ensemble35grad_inputs, 64);
    float (* ensemble35grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble35grad;
    __assume_aligned(ensemble35grad, 64);
    float (* ensemble34grad_inputs3)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble34grad_inputs3;
    __assume_aligned(ensemble34grad_inputs3, 64);
    float (* ensemble34grad_inputs2)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble34grad_inputs2;
    __assume_aligned(ensemble34grad_inputs2, 64);
    float (* ensemble34grad_inputs1)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble34grad_inputs1;
    __assume_aligned(ensemble34grad_inputs1, 64);
    float (* ensemble34grad_inputs)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble34grad_inputs;
    __assume_aligned(ensemble34grad_inputs, 64);
    float (* ensemble34grad)[16][28][28][16] = (float (*)[16][28][28][16]) _ensemble34grad;
    __assume_aligned(ensemble34grad, 64);
    float (* ensemble33inputs)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble33inputs;
    __assume_aligned(ensemble33inputs, 64);
    float (* ensemble33grad_inputs)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble33grad_inputs;
    __assume_aligned(ensemble33grad_inputs, 64);
    float (* ensemble33grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble33grad;
    __assume_aligned(ensemble33grad, 64);
    float (* ensemble32grad_bias)[1][16] = (float (*)[1][16]) _ensemble32grad_bias;
    __assume_aligned(ensemble32grad_bias, 64);
    float (* ensemble32grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble32grad;
    __assume_aligned(ensemble32grad, 64);
    float (* ensemble31weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble31weights;
    __assume_aligned(ensemble31weights, 64);
    float (* ensemble31inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble31inputs;
    __assume_aligned(ensemble31inputs, 64);
    float (* ensemble31grad_weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble31grad_weights;
    __assume_aligned(ensemble31grad_weights, 64);
    float (* ensemble31grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble31grad_inputs;
    __assume_aligned(ensemble31grad_inputs, 64);
    float (* ensemble31grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble31grad;
    __assume_aligned(ensemble31grad, 64);
    long (* ensemble30mask_k)[12][28][28][16] = (long (*)[12][28][28][16]) _ensemble30mask_k;
    __assume_aligned(ensemble30mask_k, 64);
    long (* ensemble30mask_j)[12][28][28][16] = (long (*)[12][28][28][16]) _ensemble30mask_j;
    __assume_aligned(ensemble30mask_j, 64);
    float (* ensemble30grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble30grad_inputs;
    __assume_aligned(ensemble30grad_inputs, 64);
    float (* ensemble30grad)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble30grad;
    __assume_aligned(ensemble30grad, 64);
    float (* ensemble2inputs)[1][230][230][16] = (float (*)[1][230][230][16]) _ensemble2inputs;
    __assume_aligned(ensemble2inputs, 64);
    float (* ensemble2grad_weights)[1][7][7][16][16] = (float (*)[1][7][7][16][16]) _ensemble2grad_weights;
    __assume_aligned(ensemble2grad_weights, 64);
    float (* ensemble2grad)[4][112][112][16] = (float (*)[4][112][112][16]) _ensemble2grad;
    __assume_aligned(ensemble2grad, 64);
    float (* ensemble29inputs)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble29inputs;
    __assume_aligned(ensemble29inputs, 64);
    float (* ensemble29grad_inputs)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble29grad_inputs;
    __assume_aligned(ensemble29grad_inputs, 64);
    float (* ensemble29grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble29grad;
    __assume_aligned(ensemble29grad, 64);
    float (* ensemble28grad_bias)[1][16] = (float (*)[1][16]) _ensemble28grad_bias;
    __assume_aligned(ensemble28grad_bias, 64);
    float (* ensemble28grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble28grad;
    __assume_aligned(ensemble28grad, 64);
    float (* ensemble27weights)[1][5][5][16][16] = (float (*)[1][5][5][16][16]) _ensemble27weights;
    __assume_aligned(ensemble27weights, 64);
    float (* ensemble27inputs)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble27inputs;
    __assume_aligned(ensemble27inputs, 64);
    float (* ensemble27grad_weights)[1][5][5][16][16] = (float (*)[1][5][5][16][16]) _ensemble27grad_weights;
    __assume_aligned(ensemble27grad_weights, 64);
    float (* ensemble27grad_inputs)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble27grad_inputs;
    __assume_aligned(ensemble27grad_inputs, 64);
    float (* ensemble27grad)[2][28][28][16] = (float (*)[2][28][28][16]) _ensemble27grad;
    __assume_aligned(ensemble27grad, 64);
    float (* ensemble26inputs)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble26inputs;
    __assume_aligned(ensemble26inputs, 64);
    float (* ensemble26grad_inputs)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble26grad_inputs;
    __assume_aligned(ensemble26grad_inputs, 64);
    float (* ensemble26grad)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble26grad;
    __assume_aligned(ensemble26grad, 64);
    float (* ensemble25grad_bias)[1][16] = (float (*)[1][16]) _ensemble25grad_bias;
    __assume_aligned(ensemble25grad_bias, 64);
    float (* ensemble25grad)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble25grad;
    __assume_aligned(ensemble25grad, 64);
    float (* ensemble24weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble24weights;
    __assume_aligned(ensemble24weights, 64);
    float (* ensemble24inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble24inputs;
    __assume_aligned(ensemble24inputs, 64);
    float (* ensemble24grad_weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble24grad_weights;
    __assume_aligned(ensemble24grad_weights, 64);
    float (* ensemble24grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble24grad_inputs;
    __assume_aligned(ensemble24grad_inputs, 64);
    float (* ensemble24grad)[1][32][32][16] = (float (*)[1][32][32][16]) _ensemble24grad;
    __assume_aligned(ensemble24grad, 64);
    float (* ensemble23inputs)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble23inputs;
    __assume_aligned(ensemble23inputs, 64);
    float (* ensemble23grad_inputs)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble23grad_inputs;
    __assume_aligned(ensemble23grad_inputs, 64);
    float (* ensemble23grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble23grad;
    __assume_aligned(ensemble23grad, 64);
    float (* ensemble22grad_bias)[1][16] = (float (*)[1][16]) _ensemble22grad_bias;
    __assume_aligned(ensemble22grad_bias, 64);
    float (* ensemble22grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble22grad;
    __assume_aligned(ensemble22grad, 64);
    float (* ensemble21weights)[6][3][3][16][16] = (float (*)[6][3][3][16][16]) _ensemble21weights;
    __assume_aligned(ensemble21weights, 64);
    float (* ensemble21inputs)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble21inputs;
    __assume_aligned(ensemble21inputs, 64);
    float (* ensemble21grad_weights)[6][3][3][16][16] = (float (*)[6][3][3][16][16]) _ensemble21grad_weights;
    __assume_aligned(ensemble21grad_weights, 64);
    float (* ensemble21grad_inputs)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble21grad_inputs;
    __assume_aligned(ensemble21grad_inputs, 64);
    float (* ensemble21grad)[8][28][28][16] = (float (*)[8][28][28][16]) _ensemble21grad;
    __assume_aligned(ensemble21grad, 64);
    float (* ensemble217grad_bias)[63][1][16] = (float (*)[63][1][16]) _ensemble217grad_bias;
    __assume_aligned(ensemble217grad_bias, 64);
    float (* ensemble217grad)[63][16] = (float (*)[63][16]) _ensemble217grad;
    __assume_aligned(ensemble217grad, 64);
    float (* ensemble216weights)[64][1][1][16][16] = (float (*)[64][1][1][16][16]) _ensemble216weights;
    __assume_aligned(ensemble216weights, 64);
    float (* ensemble216inputs)[64][1][1][16] = (float (*)[64][1][1][16]) _ensemble216inputs;
    __assume_aligned(ensemble216inputs, 64);
    float (* ensemble216grad_weights)[64][1][1][16][16] = (float (*)[64][1][1][16][16]) _ensemble216grad_weights;
    __assume_aligned(ensemble216grad_weights, 64);
    float (* ensemble216grad_inputs)[64][1][1][16] = (float (*)[64][1][1][16]) _ensemble216grad_inputs;
    __assume_aligned(ensemble216grad_inputs, 64);
    float (* ensemble216grad)[63][16] = (float (*)[63][16]) _ensemble216grad;
    __assume_aligned(ensemble216grad, 64);
    long (* ensemble215kernel)[64][1][1][16] = (long (*)[64][1][1][16]) _ensemble215kernel;
    __assume_aligned(ensemble215kernel, 64);
    float (* ensemble215grad_inputs)[64][7][7][16] = (float (*)[64][7][7][16]) _ensemble215grad_inputs;
    __assume_aligned(ensemble215grad_inputs, 64);
    float (* ensemble215grad)[64][1][1][16] = (float (*)[64][1][1][16]) _ensemble215grad;
    __assume_aligned(ensemble215grad, 64);
    float (* ensemble214grad_inputs3)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble214grad_inputs3;
    __assume_aligned(ensemble214grad_inputs3, 64);
    float (* ensemble214grad_inputs2)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble214grad_inputs2;
    __assume_aligned(ensemble214grad_inputs2, 64);
    float (* ensemble214grad_inputs1)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble214grad_inputs1;
    __assume_aligned(ensemble214grad_inputs1, 64);
    float (* ensemble214grad_inputs)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble214grad_inputs;
    __assume_aligned(ensemble214grad_inputs, 64);
    float (* ensemble214grad)[64][7][7][16] = (float (*)[64][7][7][16]) _ensemble214grad;
    __assume_aligned(ensemble214grad, 64);
    float (* ensemble213inputs)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble213inputs;
    __assume_aligned(ensemble213inputs, 64);
    float (* ensemble213grad_inputs)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble213grad_inputs;
    __assume_aligned(ensemble213grad_inputs, 64);
    float (* ensemble213grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble213grad;
    __assume_aligned(ensemble213grad, 64);
    float (* ensemble212grad_bias)[1][16] = (float (*)[1][16]) _ensemble212grad_bias;
    __assume_aligned(ensemble212grad_bias, 64);
    float (* ensemble212grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble212grad;
    __assume_aligned(ensemble212grad, 64);
    float (* ensemble211weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble211weights;
    __assume_aligned(ensemble211weights, 64);
    float (* ensemble211inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble211inputs;
    __assume_aligned(ensemble211inputs, 64);
    float (* ensemble211grad_weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble211grad_weights;
    __assume_aligned(ensemble211grad_weights, 64);
    float (* ensemble211grad_inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble211grad_inputs;
    __assume_aligned(ensemble211grad_inputs, 64);
    float (* ensemble211grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble211grad;
    __assume_aligned(ensemble211grad, 64);
    long (* ensemble210mask_k)[52][7][7][16] = (long (*)[52][7][7][16]) _ensemble210mask_k;
    __assume_aligned(ensemble210mask_k, 64);
    long (* ensemble210mask_j)[52][7][7][16] = (long (*)[52][7][7][16]) _ensemble210mask_j;
    __assume_aligned(ensemble210mask_j, 64);
    float (* ensemble210grad_inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble210grad_inputs;
    __assume_aligned(ensemble210grad_inputs, 64);
    float (* ensemble210grad)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble210grad;
    __assume_aligned(ensemble210grad, 64);
    float (* ensemble20inputs)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble20inputs;
    __assume_aligned(ensemble20inputs, 64);
    float (* ensemble20grad_inputs)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble20grad_inputs;
    __assume_aligned(ensemble20grad_inputs, 64);
    float (* ensemble20grad)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble20grad;
    __assume_aligned(ensemble20grad, 64);
    float (* ensemble209inputs)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble209inputs;
    __assume_aligned(ensemble209inputs, 64);
    float (* ensemble209grad_inputs)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble209grad_inputs;
    __assume_aligned(ensemble209grad_inputs, 64);
    float (* ensemble209grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble209grad;
    __assume_aligned(ensemble209grad, 64);
    float (* ensemble208grad_bias)[1][16] = (float (*)[1][16]) _ensemble208grad_bias;
    __assume_aligned(ensemble208grad_bias, 64);
    float (* ensemble208grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble208grad;
    __assume_aligned(ensemble208grad, 64);
    float (* ensemble207weights)[3][5][5][16][16] = (float (*)[3][5][5][16][16]) _ensemble207weights;
    __assume_aligned(ensemble207weights, 64);
    float (* ensemble207inputs)[3][11][11][16] = (float (*)[3][11][11][16]) _ensemble207inputs;
    __assume_aligned(ensemble207inputs, 64);
    float (* ensemble207grad_weights)[3][5][5][16][16] = (float (*)[3][5][5][16][16]) _ensemble207grad_weights;
    __assume_aligned(ensemble207grad_weights, 64);
    float (* ensemble207grad_inputs)[3][11][11][16] = (float (*)[3][11][11][16]) _ensemble207grad_inputs;
    __assume_aligned(ensemble207grad_inputs, 64);
    float (* ensemble207grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble207grad;
    __assume_aligned(ensemble207grad, 64);
    float (* ensemble206inputs)[3][11][11][16] = (float (*)[3][11][11][16]) _ensemble206inputs;
    __assume_aligned(ensemble206inputs, 64);
    float (* ensemble206grad_inputs)[3][11][11][16] = (float (*)[3][11][11][16]) _ensemble206grad_inputs;
    __assume_aligned(ensemble206grad_inputs, 64);
    float (* ensemble206grad)[3][11][11][16] = (float (*)[3][11][11][16]) _ensemble206grad;
    __assume_aligned(ensemble206grad, 64);
    float (* ensemble205grad_bias)[1][16] = (float (*)[1][16]) _ensemble205grad_bias;
    __assume_aligned(ensemble205grad_bias, 64);
    float (* ensemble205grad)[3][11][11][16] = (float (*)[3][11][11][16]) _ensemble205grad;
    __assume_aligned(ensemble205grad, 64);
    float (* ensemble204weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble204weights;
    __assume_aligned(ensemble204weights, 64);
    float (* ensemble204inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble204inputs;
    __assume_aligned(ensemble204inputs, 64);
    float (* ensemble204grad_weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble204grad_weights;
    __assume_aligned(ensemble204grad_weights, 64);
    float (* ensemble204grad_inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble204grad_inputs;
    __assume_aligned(ensemble204grad_inputs, 64);
    float (* ensemble204grad)[3][11][11][16] = (float (*)[3][11][11][16]) _ensemble204grad;
    __assume_aligned(ensemble204grad, 64);
    float (* ensemble203inputs)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble203inputs;
    __assume_aligned(ensemble203inputs, 64);
    float (* ensemble203grad_inputs)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble203grad_inputs;
    __assume_aligned(ensemble203grad_inputs, 64);
    float (* ensemble203grad)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble203grad;
    __assume_aligned(ensemble203grad, 64);
    float (* ensemble202grad_bias)[1][16] = (float (*)[1][16]) _ensemble202grad_bias;
    __assume_aligned(ensemble202grad_bias, 64);
    float (* ensemble202grad)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble202grad;
    __assume_aligned(ensemble202grad, 64);
    float (* ensemble201weights)[12][3][3][16][16] = (float (*)[12][3][3][16][16]) _ensemble201weights;
    __assume_aligned(ensemble201weights, 64);
    float (* ensemble201inputs)[12][9][9][16] = (float (*)[12][9][9][16]) _ensemble201inputs;
    __assume_aligned(ensemble201inputs, 64);
    float (* ensemble201grad_weights)[12][3][3][16][16] = (float (*)[12][3][3][16][16]) _ensemble201grad_weights;
    __assume_aligned(ensemble201grad_weights, 64);
    float (* ensemble201grad_inputs)[12][9][9][16] = (float (*)[12][9][9][16]) _ensemble201grad_inputs;
    __assume_aligned(ensemble201grad_inputs, 64);
    float (* ensemble201grad)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble201grad;
    __assume_aligned(ensemble201grad, 64);
    float (* ensemble200inputs)[12][9][9][16] = (float (*)[12][9][9][16]) _ensemble200inputs;
    __assume_aligned(ensemble200inputs, 64);
    float (* ensemble200grad_inputs)[12][9][9][16] = (float (*)[12][9][9][16]) _ensemble200grad_inputs;
    __assume_aligned(ensemble200grad_inputs, 64);
    float (* ensemble200grad)[12][9][9][16] = (float (*)[12][9][9][16]) _ensemble200grad;
    __assume_aligned(ensemble200grad, 64);
    float (* ensemble19grad_bias)[1][16] = (float (*)[1][16]) _ensemble19grad_bias;
    __assume_aligned(ensemble19grad_bias, 64);
    float (* ensemble19grad)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble19grad;
    __assume_aligned(ensemble19grad, 64);
    float (* ensemble199grad_bias)[1][16] = (float (*)[1][16]) _ensemble199grad_bias;
    __assume_aligned(ensemble199grad_bias, 64);
    float (* ensemble199grad)[12][9][9][16] = (float (*)[12][9][9][16]) _ensemble199grad;
    __assume_aligned(ensemble199grad, 64);
    float (* ensemble198weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble198weights;
    __assume_aligned(ensemble198weights, 64);
    float (* ensemble198inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble198inputs;
    __assume_aligned(ensemble198inputs, 64);
    float (* ensemble198grad_weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble198grad_weights;
    __assume_aligned(ensemble198grad_weights, 64);
    float (* ensemble198grad_inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble198grad_inputs;
    __assume_aligned(ensemble198grad_inputs, 64);
    float (* ensemble198grad)[12][9][9][16] = (float (*)[12][9][9][16]) _ensemble198grad;
    __assume_aligned(ensemble198grad, 64);
    float (* ensemble197inputs)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble197inputs;
    __assume_aligned(ensemble197inputs, 64);
    float (* ensemble197grad_inputs)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble197grad_inputs;
    __assume_aligned(ensemble197grad_inputs, 64);
    float (* ensemble197grad)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble197grad;
    __assume_aligned(ensemble197grad, 64);
    float (* ensemble196grad_bias)[1][16] = (float (*)[1][16]) _ensemble196grad_bias;
    __assume_aligned(ensemble196grad_bias, 64);
    float (* ensemble196grad)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble196grad;
    __assume_aligned(ensemble196grad, 64);
    float (* ensemble195weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble195weights;
    __assume_aligned(ensemble195weights, 64);
    float (* ensemble195inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble195inputs;
    __assume_aligned(ensemble195inputs, 64);
    float (* ensemble195grad_weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble195grad_weights;
    __assume_aligned(ensemble195grad_weights, 64);
    float (* ensemble195grad_inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble195grad_inputs;
    __assume_aligned(ensemble195grad_inputs, 64);
    float (* ensemble195grad)[24][7][7][16] = (float (*)[24][7][7][16]) _ensemble195grad;
    __assume_aligned(ensemble195grad, 64);
    float (* ensemble194grad_inputs3)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble194grad_inputs3;
    __assume_aligned(ensemble194grad_inputs3, 64);
    float (* ensemble194grad_inputs2)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble194grad_inputs2;
    __assume_aligned(ensemble194grad_inputs2, 64);
    float (* ensemble194grad_inputs1)[20][7][7][16] = (float (*)[20][7][7][16]) _ensemble194grad_inputs1;
    __assume_aligned(ensemble194grad_inputs1, 64);
    float (* ensemble194grad_inputs)[16][7][7][16] = (float (*)[16][7][7][16]) _ensemble194grad_inputs;
    __assume_aligned(ensemble194grad_inputs, 64);
    float (* ensemble194grad)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble194grad;
    __assume_aligned(ensemble194grad, 64);
    float (* ensemble193inputs)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble193inputs;
    __assume_aligned(ensemble193inputs, 64);
    float (* ensemble193grad_inputs)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble193grad_inputs;
    __assume_aligned(ensemble193grad_inputs, 64);
    float (* ensemble193grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble193grad;
    __assume_aligned(ensemble193grad, 64);
    float (* ensemble192grad_bias)[1][16] = (float (*)[1][16]) _ensemble192grad_bias;
    __assume_aligned(ensemble192grad_bias, 64);
    float (* ensemble192grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble192grad;
    __assume_aligned(ensemble192grad, 64);
    float (* ensemble191weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble191weights;
    __assume_aligned(ensemble191weights, 64);
    float (* ensemble191inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble191inputs;
    __assume_aligned(ensemble191inputs, 64);
    float (* ensemble191grad_weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble191grad_weights;
    __assume_aligned(ensemble191grad_weights, 64);
    float (* ensemble191grad_inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble191grad_inputs;
    __assume_aligned(ensemble191grad_inputs, 64);
    float (* ensemble191grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble191grad;
    __assume_aligned(ensemble191grad, 64);
    long (* ensemble190mask_k)[52][7][7][16] = (long (*)[52][7][7][16]) _ensemble190mask_k;
    __assume_aligned(ensemble190mask_k, 64);
    long (* ensemble190mask_j)[52][7][7][16] = (long (*)[52][7][7][16]) _ensemble190mask_j;
    __assume_aligned(ensemble190mask_j, 64);
    float (* ensemble190grad_inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble190grad_inputs;
    __assume_aligned(ensemble190grad_inputs, 64);
    float (* ensemble190grad)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble190grad;
    __assume_aligned(ensemble190grad, 64);
    float (* ensemble18weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble18weights;
    __assume_aligned(ensemble18weights, 64);
    float (* ensemble18inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble18inputs;
    __assume_aligned(ensemble18inputs, 64);
    float (* ensemble18grad_weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble18grad_weights;
    __assume_aligned(ensemble18grad_weights, 64);
    float (* ensemble18grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble18grad_inputs;
    __assume_aligned(ensemble18grad_inputs, 64);
    float (* ensemble18grad)[6][30][30][16] = (float (*)[6][30][30][16]) _ensemble18grad;
    __assume_aligned(ensemble18grad, 64);
    float (* ensemble189inputs)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble189inputs;
    __assume_aligned(ensemble189inputs, 64);
    float (* ensemble189grad_inputs)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble189grad_inputs;
    __assume_aligned(ensemble189grad_inputs, 64);
    float (* ensemble189grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble189grad;
    __assume_aligned(ensemble189grad, 64);
    float (* ensemble188grad_bias)[1][16] = (float (*)[1][16]) _ensemble188grad_bias;
    __assume_aligned(ensemble188grad_bias, 64);
    float (* ensemble188grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble188grad;
    __assume_aligned(ensemble188grad, 64);
    float (* ensemble187weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble187weights;
    __assume_aligned(ensemble187weights, 64);
    float (* ensemble187inputs)[2][11][11][16] = (float (*)[2][11][11][16]) _ensemble187inputs;
    __assume_aligned(ensemble187inputs, 64);
    float (* ensemble187grad_weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble187grad_weights;
    __assume_aligned(ensemble187grad_weights, 64);
    float (* ensemble187grad_inputs)[2][11][11][16] = (float (*)[2][11][11][16]) _ensemble187grad_inputs;
    __assume_aligned(ensemble187grad_inputs, 64);
    float (* ensemble187grad)[8][7][7][16] = (float (*)[8][7][7][16]) _ensemble187grad;
    __assume_aligned(ensemble187grad, 64);
    float (* ensemble186inputs)[2][11][11][16] = (float (*)[2][11][11][16]) _ensemble186inputs;
    __assume_aligned(ensemble186inputs, 64);
    float (* ensemble186grad_inputs)[2][11][11][16] = (float (*)[2][11][11][16]) _ensemble186grad_inputs;
    __assume_aligned(ensemble186grad_inputs, 64);
    float (* ensemble186grad)[2][11][11][16] = (float (*)[2][11][11][16]) _ensemble186grad;
    __assume_aligned(ensemble186grad, 64);
    float (* ensemble185grad_bias)[1][16] = (float (*)[1][16]) _ensemble185grad_bias;
    __assume_aligned(ensemble185grad_bias, 64);
    float (* ensemble185grad)[2][11][11][16] = (float (*)[2][11][11][16]) _ensemble185grad;
    __assume_aligned(ensemble185grad, 64);
    float (* ensemble184weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble184weights;
    __assume_aligned(ensemble184weights, 64);
    float (* ensemble184inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble184inputs;
    __assume_aligned(ensemble184inputs, 64);
    float (* ensemble184grad_weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble184grad_weights;
    __assume_aligned(ensemble184grad_weights, 64);
    float (* ensemble184grad_inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble184grad_inputs;
    __assume_aligned(ensemble184grad_inputs, 64);
    float (* ensemble184grad)[2][11][11][16] = (float (*)[2][11][11][16]) _ensemble184grad;
    __assume_aligned(ensemble184grad, 64);
    float (* ensemble183inputs)[20][7][7][16] = (float (*)[20][7][7][16]) _ensemble183inputs;
    __assume_aligned(ensemble183inputs, 64);
    float (* ensemble183grad_inputs)[20][7][7][16] = (float (*)[20][7][7][16]) _ensemble183grad_inputs;
    __assume_aligned(ensemble183grad_inputs, 64);
    float (* ensemble183grad)[20][7][7][16] = (float (*)[20][7][7][16]) _ensemble183grad;
    __assume_aligned(ensemble183grad, 64);
    float (* ensemble182grad_bias)[1][16] = (float (*)[1][16]) _ensemble182grad_bias;
    __assume_aligned(ensemble182grad_bias, 64);
    float (* ensemble182grad)[20][7][7][16] = (float (*)[20][7][7][16]) _ensemble182grad;
    __assume_aligned(ensemble182grad, 64);
    float (* ensemble181weights)[10][3][3][16][16] = (float (*)[10][3][3][16][16]) _ensemble181weights;
    __assume_aligned(ensemble181weights, 64);
    float (* ensemble181inputs)[10][9][9][16] = (float (*)[10][9][9][16]) _ensemble181inputs;
    __assume_aligned(ensemble181inputs, 64);
    float (* ensemble181grad_weights)[10][3][3][16][16] = (float (*)[10][3][3][16][16]) _ensemble181grad_weights;
    __assume_aligned(ensemble181grad_weights, 64);
    float (* ensemble181grad_inputs)[10][9][9][16] = (float (*)[10][9][9][16]) _ensemble181grad_inputs;
    __assume_aligned(ensemble181grad_inputs, 64);
    float (* ensemble181grad)[20][7][7][16] = (float (*)[20][7][7][16]) _ensemble181grad;
    __assume_aligned(ensemble181grad, 64);
    float (* ensemble180inputs)[10][9][9][16] = (float (*)[10][9][9][16]) _ensemble180inputs;
    __assume_aligned(ensemble180inputs, 64);
    float (* ensemble180grad_inputs)[10][9][9][16] = (float (*)[10][9][9][16]) _ensemble180grad_inputs;
    __assume_aligned(ensemble180grad_inputs, 64);
    float (* ensemble180grad)[10][9][9][16] = (float (*)[10][9][9][16]) _ensemble180grad;
    __assume_aligned(ensemble180grad, 64);
    float (* ensemble17inputs)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble17inputs;
    __assume_aligned(ensemble17inputs, 64);
    float (* ensemble17grad_inputs)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble17grad_inputs;
    __assume_aligned(ensemble17grad_inputs, 64);
    float (* ensemble17grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble17grad;
    __assume_aligned(ensemble17grad, 64);
    float (* ensemble179grad_bias)[1][16] = (float (*)[1][16]) _ensemble179grad_bias;
    __assume_aligned(ensemble179grad_bias, 64);
    float (* ensemble179grad)[10][9][9][16] = (float (*)[10][9][9][16]) _ensemble179grad;
    __assume_aligned(ensemble179grad, 64);
    float (* ensemble178weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble178weights;
    __assume_aligned(ensemble178weights, 64);
    float (* ensemble178inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble178inputs;
    __assume_aligned(ensemble178inputs, 64);
    float (* ensemble178grad_weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble178grad_weights;
    __assume_aligned(ensemble178grad_weights, 64);
    float (* ensemble178grad_inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble178grad_inputs;
    __assume_aligned(ensemble178grad_inputs, 64);
    float (* ensemble178grad)[10][9][9][16] = (float (*)[10][9][9][16]) _ensemble178grad;
    __assume_aligned(ensemble178grad, 64);
    float (* ensemble177inputs)[16][7][7][16] = (float (*)[16][7][7][16]) _ensemble177inputs;
    __assume_aligned(ensemble177inputs, 64);
    float (* ensemble177grad_inputs)[16][7][7][16] = (float (*)[16][7][7][16]) _ensemble177grad_inputs;
    __assume_aligned(ensemble177grad_inputs, 64);
    float (* ensemble177grad)[16][7][7][16] = (float (*)[16][7][7][16]) _ensemble177grad;
    __assume_aligned(ensemble177grad, 64);
    float (* ensemble176grad_bias)[1][16] = (float (*)[1][16]) _ensemble176grad_bias;
    __assume_aligned(ensemble176grad_bias, 64);
    float (* ensemble176grad)[16][7][7][16] = (float (*)[16][7][7][16]) _ensemble176grad;
    __assume_aligned(ensemble176grad, 64);
    float (* ensemble175weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble175weights;
    __assume_aligned(ensemble175weights, 64);
    float (* ensemble175inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble175inputs;
    __assume_aligned(ensemble175inputs, 64);
    float (* ensemble175grad_weights)[52][1][1][16][16] = (float (*)[52][1][1][16][16]) _ensemble175grad_weights;
    __assume_aligned(ensemble175grad_weights, 64);
    float (* ensemble175grad_inputs)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble175grad_inputs;
    __assume_aligned(ensemble175grad_inputs, 64);
    float (* ensemble175grad)[16][7][7][16] = (float (*)[16][7][7][16]) _ensemble175grad;
    __assume_aligned(ensemble175grad, 64);
    long (* ensemble174mask_k)[52][7][7][16] = (long (*)[52][7][7][16]) _ensemble174mask_k;
    __assume_aligned(ensemble174mask_k, 64);
    long (* ensemble174mask_j)[52][7][7][16] = (long (*)[52][7][7][16]) _ensemble174mask_j;
    __assume_aligned(ensemble174mask_j, 64);
    float (* ensemble174grad_inputs)[52][14][14][16] = (float (*)[52][14][14][16]) _ensemble174grad_inputs;
    __assume_aligned(ensemble174grad_inputs, 64);
    float (* ensemble174grad)[52][7][7][16] = (float (*)[52][7][7][16]) _ensemble174grad;
    __assume_aligned(ensemble174grad, 64);
    float (* ensemble173grad_inputs3)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble173grad_inputs3;
    __assume_aligned(ensemble173grad_inputs3, 64);
    float (* ensemble173grad_inputs2)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble173grad_inputs2;
    __assume_aligned(ensemble173grad_inputs2, 64);
    float (* ensemble173grad_inputs1)[20][14][14][16] = (float (*)[20][14][14][16]) _ensemble173grad_inputs1;
    __assume_aligned(ensemble173grad_inputs1, 64);
    float (* ensemble173grad_inputs)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble173grad_inputs;
    __assume_aligned(ensemble173grad_inputs, 64);
    float (* ensemble173grad)[52][14][14][16] = (float (*)[52][14][14][16]) _ensemble173grad;
    __assume_aligned(ensemble173grad, 64);
    float (* ensemble172inputs)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble172inputs;
    __assume_aligned(ensemble172inputs, 64);
    float (* ensemble172grad_inputs)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble172grad_inputs;
    __assume_aligned(ensemble172grad_inputs, 64);
    float (* ensemble172grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble172grad;
    __assume_aligned(ensemble172grad, 64);
    float (* ensemble171grad_bias)[1][16] = (float (*)[1][16]) _ensemble171grad_bias;
    __assume_aligned(ensemble171grad_bias, 64);
    float (* ensemble171grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble171grad;
    __assume_aligned(ensemble171grad, 64);
    float (* ensemble170weights)[33][1][1][16][16] = (float (*)[33][1][1][16][16]) _ensemble170weights;
    __assume_aligned(ensemble170weights, 64);
    float (* ensemble170inputs)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble170inputs;
    __assume_aligned(ensemble170inputs, 64);
    float (* ensemble170grad_weights)[33][1][1][16][16] = (float (*)[33][1][1][16][16]) _ensemble170grad_weights;
    __assume_aligned(ensemble170grad_weights, 64);
    float (* ensemble170grad_inputs)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble170grad_inputs;
    __assume_aligned(ensemble170grad_inputs, 64);
    float (* ensemble170grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble170grad;
    __assume_aligned(ensemble170grad, 64);
    float (* ensemble16grad_bias)[1][16] = (float (*)[1][16]) _ensemble16grad_bias;
    __assume_aligned(ensemble16grad_bias, 64);
    float (* ensemble16grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble16grad;
    __assume_aligned(ensemble16grad, 64);
    long (* ensemble169mask_k)[33][14][14][16] = (long (*)[33][14][14][16]) _ensemble169mask_k;
    __assume_aligned(ensemble169mask_k, 64);
    long (* ensemble169mask_j)[33][14][14][16] = (long (*)[33][14][14][16]) _ensemble169mask_j;
    __assume_aligned(ensemble169mask_j, 64);
    float (* ensemble169grad_inputs)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble169grad_inputs;
    __assume_aligned(ensemble169grad_inputs, 64);
    float (* ensemble169grad)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble169grad;
    __assume_aligned(ensemble169grad, 64);
    float (* ensemble168inputs)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble168inputs;
    __assume_aligned(ensemble168inputs, 64);
    float (* ensemble168grad_inputs)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble168grad_inputs;
    __assume_aligned(ensemble168grad_inputs, 64);
    float (* ensemble168grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble168grad;
    __assume_aligned(ensemble168grad, 64);
    float (* ensemble167grad_bias)[1][16] = (float (*)[1][16]) _ensemble167grad_bias;
    __assume_aligned(ensemble167grad_bias, 64);
    float (* ensemble167grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble167grad;
    __assume_aligned(ensemble167grad, 64);
    float (* ensemble166weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble166weights;
    __assume_aligned(ensemble166weights, 64);
    float (* ensemble166inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble166inputs;
    __assume_aligned(ensemble166inputs, 64);
    float (* ensemble166grad_weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble166grad_weights;
    __assume_aligned(ensemble166grad_weights, 64);
    float (* ensemble166grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble166grad_inputs;
    __assume_aligned(ensemble166grad_inputs, 64);
    float (* ensemble166grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble166grad;
    __assume_aligned(ensemble166grad, 64);
    float (* ensemble165inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble165inputs;
    __assume_aligned(ensemble165inputs, 64);
    float (* ensemble165grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble165grad_inputs;
    __assume_aligned(ensemble165grad_inputs, 64);
    float (* ensemble165grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble165grad;
    __assume_aligned(ensemble165grad, 64);
    float (* ensemble164grad_bias)[1][16] = (float (*)[1][16]) _ensemble164grad_bias;
    __assume_aligned(ensemble164grad_bias, 64);
    float (* ensemble164grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble164grad;
    __assume_aligned(ensemble164grad, 64);
    float (* ensemble163weights)[33][1][1][16][16] = (float (*)[33][1][1][16][16]) _ensemble163weights;
    __assume_aligned(ensemble163weights, 64);
    float (* ensemble163inputs)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble163inputs;
    __assume_aligned(ensemble163inputs, 64);
    float (* ensemble163grad_weights)[33][1][1][16][16] = (float (*)[33][1][1][16][16]) _ensemble163grad_weights;
    __assume_aligned(ensemble163grad_weights, 64);
    float (* ensemble163grad_inputs)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble163grad_inputs;
    __assume_aligned(ensemble163grad_inputs, 64);
    float (* ensemble163grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble163grad;
    __assume_aligned(ensemble163grad, 64);
    float (* ensemble162inputs)[20][14][14][16] = (float (*)[20][14][14][16]) _ensemble162inputs;
    __assume_aligned(ensemble162inputs, 64);
    float (* ensemble162grad_inputs)[20][14][14][16] = (float (*)[20][14][14][16]) _ensemble162grad_inputs;
    __assume_aligned(ensemble162grad_inputs, 64);
    float (* ensemble162grad)[20][14][14][16] = (float (*)[20][14][14][16]) _ensemble162grad;
    __assume_aligned(ensemble162grad, 64);
    float (* ensemble161grad_bias)[1][16] = (float (*)[1][16]) _ensemble161grad_bias;
    __assume_aligned(ensemble161grad_bias, 64);
    float (* ensemble161grad)[20][14][14][16] = (float (*)[20][14][14][16]) _ensemble161grad;
    __assume_aligned(ensemble161grad, 64);
    float (* ensemble160weights)[10][3][3][16][16] = (float (*)[10][3][3][16][16]) _ensemble160weights;
    __assume_aligned(ensemble160weights, 64);
    float (* ensemble160inputs)[10][16][16][16] = (float (*)[10][16][16][16]) _ensemble160inputs;
    __assume_aligned(ensemble160inputs, 64);
    float (* ensemble160grad_weights)[10][3][3][16][16] = (float (*)[10][3][3][16][16]) _ensemble160grad_weights;
    __assume_aligned(ensemble160grad_weights, 64);
    float (* ensemble160grad_inputs)[10][16][16][16] = (float (*)[10][16][16][16]) _ensemble160grad_inputs;
    __assume_aligned(ensemble160grad_inputs, 64);
    float (* ensemble160grad)[20][14][14][16] = (float (*)[20][14][14][16]) _ensemble160grad;
    __assume_aligned(ensemble160grad, 64);
    float (* ensemble15weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble15weights;
    __assume_aligned(ensemble15weights, 64);
    float (* ensemble15inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble15inputs;
    __assume_aligned(ensemble15inputs, 64);
    float (* ensemble15grad_weights)[12][1][1][16][16] = (float (*)[12][1][1][16][16]) _ensemble15grad_weights;
    __assume_aligned(ensemble15grad_weights, 64);
    float (* ensemble15grad_inputs)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble15grad_inputs;
    __assume_aligned(ensemble15grad_inputs, 64);
    float (* ensemble15grad)[4][28][28][16] = (float (*)[4][28][28][16]) _ensemble15grad;
    __assume_aligned(ensemble15grad, 64);
    float (* ensemble159inputs)[10][16][16][16] = (float (*)[10][16][16][16]) _ensemble159inputs;
    __assume_aligned(ensemble159inputs, 64);
    float (* ensemble159grad_inputs)[10][16][16][16] = (float (*)[10][16][16][16]) _ensemble159grad_inputs;
    __assume_aligned(ensemble159grad_inputs, 64);
    float (* ensemble159grad)[10][16][16][16] = (float (*)[10][16][16][16]) _ensemble159grad;
    __assume_aligned(ensemble159grad, 64);
    float (* ensemble158grad_bias)[1][16] = (float (*)[1][16]) _ensemble158grad_bias;
    __assume_aligned(ensemble158grad_bias, 64);
    float (* ensemble158grad)[10][16][16][16] = (float (*)[10][16][16][16]) _ensemble158grad;
    __assume_aligned(ensemble158grad, 64);
    float (* ensemble157weights)[33][1][1][16][16] = (float (*)[33][1][1][16][16]) _ensemble157weights;
    __assume_aligned(ensemble157weights, 64);
    float (* ensemble157inputs)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble157inputs;
    __assume_aligned(ensemble157inputs, 64);
    float (* ensemble157grad_weights)[33][1][1][16][16] = (float (*)[33][1][1][16][16]) _ensemble157grad_weights;
    __assume_aligned(ensemble157grad_weights, 64);
    float (* ensemble157grad_inputs)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble157grad_inputs;
    __assume_aligned(ensemble157grad_inputs, 64);
    float (* ensemble157grad)[10][16][16][16] = (float (*)[10][16][16][16]) _ensemble157grad;
    __assume_aligned(ensemble157grad, 64);
    float (* ensemble156inputs)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble156inputs;
    __assume_aligned(ensemble156inputs, 64);
    float (* ensemble156grad_inputs)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble156grad_inputs;
    __assume_aligned(ensemble156grad_inputs, 64);
    float (* ensemble156grad)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble156grad;
    __assume_aligned(ensemble156grad, 64);
    float (* ensemble155grad_bias)[1][16] = (float (*)[1][16]) _ensemble155grad_bias;
    __assume_aligned(ensemble155grad_bias, 64);
    float (* ensemble155grad)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble155grad;
    __assume_aligned(ensemble155grad, 64);
    float (* ensemble154weights)[33][1][1][16][16] = (float (*)[33][1][1][16][16]) _ensemble154weights;
    __assume_aligned(ensemble154weights, 64);
    float (* ensemble154inputs)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble154inputs;
    __assume_aligned(ensemble154inputs, 64);
    float (* ensemble154grad_weights)[33][1][1][16][16] = (float (*)[33][1][1][16][16]) _ensemble154grad_weights;
    __assume_aligned(ensemble154grad_weights, 64);
    float (* ensemble154grad_inputs)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble154grad_inputs;
    __assume_aligned(ensemble154grad_inputs, 64);
    float (* ensemble154grad)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble154grad;
    __assume_aligned(ensemble154grad, 64);
    float (* ensemble153grad_bias)[63][1][16] = (float (*)[63][1][16]) _ensemble153grad_bias;
    __assume_aligned(ensemble153grad_bias, 64);
    float (* ensemble153grad)[63][16] = (float (*)[63][16]) _ensemble153grad;
    __assume_aligned(ensemble153grad, 64);
    float (* ensemble152weights)[64][16][16] = (float (*)[64][16][16]) _ensemble152weights;
    __assume_aligned(ensemble152weights, 64);
    float (* ensemble152inputs)[64][16] = (float (*)[64][16]) _ensemble152inputs;
    __assume_aligned(ensemble152inputs, 64);
    float (* ensemble152grad_weights)[64][16][16] = (float (*)[64][16][16]) _ensemble152grad_weights;
    __assume_aligned(ensemble152grad_weights, 64);
    float (* ensemble152grad_inputs)[64][16] = (float (*)[64][16]) _ensemble152grad_inputs;
    __assume_aligned(ensemble152grad_inputs, 64);
    float (* ensemble152grad)[63][16] = (float (*)[63][16]) _ensemble152grad;
    __assume_aligned(ensemble152grad, 64);
    float (* ensemble151inputs)[64][16] = (float (*)[64][16]) _ensemble151inputs;
    __assume_aligned(ensemble151inputs, 64);
    float (* ensemble151grad_inputs)[64][16] = (float (*)[64][16]) _ensemble151grad_inputs;
    __assume_aligned(ensemble151grad_inputs, 64);
    float (* ensemble151grad)[64][16] = (float (*)[64][16]) _ensemble151grad;
    __assume_aligned(ensemble151grad, 64);
    float (* ensemble150grad_bias)[64][1][16] = (float (*)[64][1][16]) _ensemble150grad_bias;
    __assume_aligned(ensemble150grad_bias, 64);
    float (* ensemble150grad)[64][16] = (float (*)[64][16]) _ensemble150grad;
    __assume_aligned(ensemble150grad, 64);
    long (* ensemble14mask_k)[12][28][28][16] = (long (*)[12][28][28][16]) _ensemble14mask_k;
    __assume_aligned(ensemble14mask_k, 64);
    long (* ensemble14mask_j)[12][28][28][16] = (long (*)[12][28][28][16]) _ensemble14mask_j;
    __assume_aligned(ensemble14mask_j, 64);
    float (* ensemble14grad_inputs)[12][56][56][16] = (float (*)[12][56][56][16]) _ensemble14grad_inputs;
    __assume_aligned(ensemble14grad_inputs, 64);
    float (* ensemble14grad)[12][28][28][16] = (float (*)[12][28][28][16]) _ensemble14grad;
    __assume_aligned(ensemble14grad, 64);
    float (* ensemble149weights)[8][4][4][16][16] = (float (*)[8][4][4][16][16]) _ensemble149weights;
    __assume_aligned(ensemble149weights, 64);
    float (* ensemble149inputs)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble149inputs;
    __assume_aligned(ensemble149inputs, 64);
    float (* ensemble149grad_weights)[8][4][4][16][16] = (float (*)[8][4][4][16][16]) _ensemble149grad_weights;
    __assume_aligned(ensemble149grad_weights, 64);
    float (* ensemble149grad_inputs)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble149grad_inputs;
    __assume_aligned(ensemble149grad_inputs, 64);
    float (* ensemble149grad)[64][16] = (float (*)[64][16]) _ensemble149grad;
    __assume_aligned(ensemble149grad, 64);
    float (* ensemble148inputs)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble148inputs;
    __assume_aligned(ensemble148inputs, 64);
    float (* ensemble148grad_inputs)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble148grad_inputs;
    __assume_aligned(ensemble148grad_inputs, 64);
    float (* ensemble148grad)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble148grad;
    __assume_aligned(ensemble148grad, 64);
    float (* ensemble147grad_bias)[1][16] = (float (*)[1][16]) _ensemble147grad_bias;
    __assume_aligned(ensemble147grad_bias, 64);
    float (* ensemble147grad)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble147grad;
    __assume_aligned(ensemble147grad, 64);
    float (* ensemble146weights)[33][1][1][16][16] = (float (*)[33][1][1][16][16]) _ensemble146weights;
    __assume_aligned(ensemble146weights, 64);
    float (* ensemble146inputs)[33][4][4][16] = (float (*)[33][4][4][16]) _ensemble146inputs;
    __assume_aligned(ensemble146inputs, 64);
    float (* ensemble146grad_weights)[33][1][1][16][16] = (float (*)[33][1][1][16][16]) _ensemble146grad_weights;
    __assume_aligned(ensemble146grad_weights, 64);
    float (* ensemble146grad_inputs)[33][4][4][16] = (float (*)[33][4][4][16]) _ensemble146grad_inputs;
    __assume_aligned(ensemble146grad_inputs, 64);
    float (* ensemble146grad)[8][4][4][16] = (float (*)[8][4][4][16]) _ensemble146grad;
    __assume_aligned(ensemble146grad, 64);
    long (* ensemble145kernel)[33][4][4][16] = (long (*)[33][4][4][16]) _ensemble145kernel;
    __assume_aligned(ensemble145kernel, 64);
    float (* ensemble145grad_inputs)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble145grad_inputs;
    __assume_aligned(ensemble145grad_inputs, 64);
    float (* ensemble145grad)[33][4][4][16] = (float (*)[33][4][4][16]) _ensemble145grad;
    __assume_aligned(ensemble145grad, 64);
    float (* ensemble144grad_inputs3)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble144grad_inputs3;
    __assume_aligned(ensemble144grad_inputs3, 64);
    float (* ensemble144grad_inputs2)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble144grad_inputs2;
    __assume_aligned(ensemble144grad_inputs2, 64);
    float (* ensemble144grad_inputs1)[18][14][14][16] = (float (*)[18][14][14][16]) _ensemble144grad_inputs1;
    __assume_aligned(ensemble144grad_inputs1, 64);
    float (* ensemble144grad_inputs)[7][14][14][16] = (float (*)[7][14][14][16]) _ensemble144grad_inputs;
    __assume_aligned(ensemble144grad_inputs, 64);
    float (* ensemble144grad)[33][14][14][16] = (float (*)[33][14][14][16]) _ensemble144grad;
    __assume_aligned(ensemble144grad, 64);
    float (* ensemble143inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble143inputs;
    __assume_aligned(ensemble143inputs, 64);
    float (* ensemble143grad_inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble143grad_inputs;
    __assume_aligned(ensemble143grad_inputs, 64);
    float (* ensemble143grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble143grad;
    __assume_aligned(ensemble143grad, 64);
    float (* ensemble142grad_bias)[1][16] = (float (*)[1][16]) _ensemble142grad_bias;
    __assume_aligned(ensemble142grad_bias, 64);
    float (* ensemble142grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble142grad;
    __assume_aligned(ensemble142grad, 64);
    float (* ensemble141weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble141weights;
    __assume_aligned(ensemble141weights, 64);
    float (* ensemble141inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble141inputs;
    __assume_aligned(ensemble141inputs, 64);
    float (* ensemble141grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble141grad_weights;
    __assume_aligned(ensemble141grad_weights, 64);
    float (* ensemble141grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble141grad_inputs;
    __assume_aligned(ensemble141grad_inputs, 64);
    float (* ensemble141grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble141grad;
    __assume_aligned(ensemble141grad, 64);
    long (* ensemble140mask_k)[32][14][14][16] = (long (*)[32][14][14][16]) _ensemble140mask_k;
    __assume_aligned(ensemble140mask_k, 64);
    long (* ensemble140mask_j)[32][14][14][16] = (long (*)[32][14][14][16]) _ensemble140mask_j;
    __assume_aligned(ensemble140mask_j, 64);
    float (* ensemble140grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble140grad_inputs;
    __assume_aligned(ensemble140grad_inputs, 64);
    float (* ensemble140grad)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble140grad;
    __assume_aligned(ensemble140grad, 64);
    double (* ensemble13sum_value)[12][56][56][16] = (double (*)[12][56][56][16]) _ensemble13sum_value;
    __assume_aligned(ensemble13sum_value, 64);
    long (* ensemble13n)[12][56][56][16] = (long (*)[12][56][56][16]) _ensemble13n;
    __assume_aligned(ensemble13n, 64);
    float (* ensemble13inputs)[14][56][56][16] = (float (*)[14][56][56][16]) _ensemble13inputs;
    __assume_aligned(ensemble13inputs, 64);
    float (* ensemble13grad_inputs)[14][56][56][16] = (float (*)[14][56][56][16]) _ensemble13grad_inputs;
    __assume_aligned(ensemble13grad_inputs, 64);
    float (* ensemble13grad)[12][56][56][16] = (float (*)[12][56][56][16]) _ensemble13grad;
    __assume_aligned(ensemble13grad, 64);
    double (* ensemble13beta)[12][56][56][16] = (double (*)[12][56][56][16]) _ensemble13beta;
    __assume_aligned(ensemble13beta, 64);
    double (* ensemble13alpha)[12][56][56][16] = (double (*)[12][56][56][16]) _ensemble13alpha;
    __assume_aligned(ensemble13alpha, 64);
    float (* ensemble139inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble139inputs;
    __assume_aligned(ensemble139inputs, 64);
    float (* ensemble139grad_inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble139grad_inputs;
    __assume_aligned(ensemble139grad_inputs, 64);
    float (* ensemble139grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble139grad;
    __assume_aligned(ensemble139grad, 64);
    float (* ensemble138grad_bias)[1][16] = (float (*)[1][16]) _ensemble138grad_bias;
    __assume_aligned(ensemble138grad_bias, 64);
    float (* ensemble138grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble138grad;
    __assume_aligned(ensemble138grad, 64);
    float (* ensemble137weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble137weights;
    __assume_aligned(ensemble137weights, 64);
    float (* ensemble137inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble137inputs;
    __assume_aligned(ensemble137inputs, 64);
    float (* ensemble137grad_weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble137grad_weights;
    __assume_aligned(ensemble137grad_weights, 64);
    float (* ensemble137grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble137grad_inputs;
    __assume_aligned(ensemble137grad_inputs, 64);
    float (* ensemble137grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble137grad;
    __assume_aligned(ensemble137grad, 64);
    float (* ensemble136inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble136inputs;
    __assume_aligned(ensemble136inputs, 64);
    float (* ensemble136grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble136grad_inputs;
    __assume_aligned(ensemble136grad_inputs, 64);
    float (* ensemble136grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble136grad;
    __assume_aligned(ensemble136grad, 64);
    float (* ensemble135grad_bias)[1][16] = (float (*)[1][16]) _ensemble135grad_bias;
    __assume_aligned(ensemble135grad_bias, 64);
    float (* ensemble135grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble135grad;
    __assume_aligned(ensemble135grad, 64);
    float (* ensemble134weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble134weights;
    __assume_aligned(ensemble134weights, 64);
    float (* ensemble134inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble134inputs;
    __assume_aligned(ensemble134inputs, 64);
    float (* ensemble134grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble134grad_weights;
    __assume_aligned(ensemble134grad_weights, 64);
    float (* ensemble134grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble134grad_inputs;
    __assume_aligned(ensemble134grad_inputs, 64);
    float (* ensemble134grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble134grad;
    __assume_aligned(ensemble134grad, 64);
    float (* ensemble133inputs)[18][14][14][16] = (float (*)[18][14][14][16]) _ensemble133inputs;
    __assume_aligned(ensemble133inputs, 64);
    float (* ensemble133grad_inputs)[18][14][14][16] = (float (*)[18][14][14][16]) _ensemble133grad_inputs;
    __assume_aligned(ensemble133grad_inputs, 64);
    float (* ensemble133grad)[18][14][14][16] = (float (*)[18][14][14][16]) _ensemble133grad;
    __assume_aligned(ensemble133grad, 64);
    float (* ensemble132grad_bias)[1][16] = (float (*)[1][16]) _ensemble132grad_bias;
    __assume_aligned(ensemble132grad_bias, 64);
    float (* ensemble132grad)[18][14][14][16] = (float (*)[18][14][14][16]) _ensemble132grad;
    __assume_aligned(ensemble132grad, 64);
    float (* ensemble131weights)[9][3][3][16][16] = (float (*)[9][3][3][16][16]) _ensemble131weights;
    __assume_aligned(ensemble131weights, 64);
    float (* ensemble131inputs)[9][16][16][16] = (float (*)[9][16][16][16]) _ensemble131inputs;
    __assume_aligned(ensemble131inputs, 64);
    float (* ensemble131grad_weights)[9][3][3][16][16] = (float (*)[9][3][3][16][16]) _ensemble131grad_weights;
    __assume_aligned(ensemble131grad_weights, 64);
    float (* ensemble131grad_inputs)[9][16][16][16] = (float (*)[9][16][16][16]) _ensemble131grad_inputs;
    __assume_aligned(ensemble131grad_inputs, 64);
    float (* ensemble131grad)[18][14][14][16] = (float (*)[18][14][14][16]) _ensemble131grad;
    __assume_aligned(ensemble131grad, 64);
    float (* ensemble130inputs)[9][16][16][16] = (float (*)[9][16][16][16]) _ensemble130inputs;
    __assume_aligned(ensemble130inputs, 64);
    float (* ensemble130grad_inputs)[9][16][16][16] = (float (*)[9][16][16][16]) _ensemble130grad_inputs;
    __assume_aligned(ensemble130grad_inputs, 64);
    float (* ensemble130grad)[9][16][16][16] = (float (*)[9][16][16][16]) _ensemble130grad;
    __assume_aligned(ensemble130grad, 64);
    float (* ensemble12inputs)[14][56][56][16] = (float (*)[14][56][56][16]) _ensemble12inputs;
    __assume_aligned(ensemble12inputs, 64);
    float (* ensemble12grad_inputs)[14][56][56][16] = (float (*)[14][56][56][16]) _ensemble12grad_inputs;
    __assume_aligned(ensemble12grad_inputs, 64);
    float (* ensemble12grad)[14][56][56][16] = (float (*)[14][56][56][16]) _ensemble12grad;
    __assume_aligned(ensemble12grad, 64);
    float (* ensemble129grad_bias)[1][16] = (float (*)[1][16]) _ensemble129grad_bias;
    __assume_aligned(ensemble129grad_bias, 64);
    float (* ensemble129grad)[9][16][16][16] = (float (*)[9][16][16][16]) _ensemble129grad;
    __assume_aligned(ensemble129grad, 64);
    float (* ensemble128weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble128weights;
    __assume_aligned(ensemble128weights, 64);
    float (* ensemble128inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble128inputs;
    __assume_aligned(ensemble128inputs, 64);
    float (* ensemble128grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble128grad_weights;
    __assume_aligned(ensemble128grad_weights, 64);
    float (* ensemble128grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble128grad_inputs;
    __assume_aligned(ensemble128grad_inputs, 64);
    float (* ensemble128grad)[9][16][16][16] = (float (*)[9][16][16][16]) _ensemble128grad;
    __assume_aligned(ensemble128grad, 64);
    float (* ensemble127inputs)[7][14][14][16] = (float (*)[7][14][14][16]) _ensemble127inputs;
    __assume_aligned(ensemble127inputs, 64);
    float (* ensemble127grad_inputs)[7][14][14][16] = (float (*)[7][14][14][16]) _ensemble127grad_inputs;
    __assume_aligned(ensemble127grad_inputs, 64);
    float (* ensemble127grad)[7][14][14][16] = (float (*)[7][14][14][16]) _ensemble127grad;
    __assume_aligned(ensemble127grad, 64);
    float (* ensemble126grad_bias)[1][16] = (float (*)[1][16]) _ensemble126grad_bias;
    __assume_aligned(ensemble126grad_bias, 64);
    float (* ensemble126grad)[7][14][14][16] = (float (*)[7][14][14][16]) _ensemble126grad;
    __assume_aligned(ensemble126grad, 64);
    float (* ensemble125weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble125weights;
    __assume_aligned(ensemble125weights, 64);
    float (* ensemble125inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble125inputs;
    __assume_aligned(ensemble125inputs, 64);
    float (* ensemble125grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble125grad_weights;
    __assume_aligned(ensemble125grad_weights, 64);
    float (* ensemble125grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble125grad_inputs;
    __assume_aligned(ensemble125grad_inputs, 64);
    float (* ensemble125grad)[7][14][14][16] = (float (*)[7][14][14][16]) _ensemble125grad;
    __assume_aligned(ensemble125grad, 64);
    float (* ensemble124grad_inputs3)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble124grad_inputs3;
    __assume_aligned(ensemble124grad_inputs3, 64);
    float (* ensemble124grad_inputs2)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble124grad_inputs2;
    __assume_aligned(ensemble124grad_inputs2, 64);
    float (* ensemble124grad_inputs1)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble124grad_inputs1;
    __assume_aligned(ensemble124grad_inputs1, 64);
    float (* ensemble124grad_inputs)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble124grad_inputs;
    __assume_aligned(ensemble124grad_inputs, 64);
    float (* ensemble124grad)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble124grad;
    __assume_aligned(ensemble124grad, 64);
    float (* ensemble123inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble123inputs;
    __assume_aligned(ensemble123inputs, 64);
    float (* ensemble123grad_inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble123grad_inputs;
    __assume_aligned(ensemble123grad_inputs, 64);
    float (* ensemble123grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble123grad;
    __assume_aligned(ensemble123grad, 64);
    float (* ensemble122grad_bias)[1][16] = (float (*)[1][16]) _ensemble122grad_bias;
    __assume_aligned(ensemble122grad_bias, 64);
    float (* ensemble122grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble122grad;
    __assume_aligned(ensemble122grad, 64);
    float (* ensemble121weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble121weights;
    __assume_aligned(ensemble121weights, 64);
    float (* ensemble121inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble121inputs;
    __assume_aligned(ensemble121inputs, 64);
    float (* ensemble121grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble121grad_weights;
    __assume_aligned(ensemble121grad_weights, 64);
    float (* ensemble121grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble121grad_inputs;
    __assume_aligned(ensemble121grad_inputs, 64);
    float (* ensemble121grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble121grad;
    __assume_aligned(ensemble121grad, 64);
    long (* ensemble120mask_k)[32][14][14][16] = (long (*)[32][14][14][16]) _ensemble120mask_k;
    __assume_aligned(ensemble120mask_k, 64);
    long (* ensemble120mask_j)[32][14][14][16] = (long (*)[32][14][14][16]) _ensemble120mask_j;
    __assume_aligned(ensemble120mask_j, 64);
    float (* ensemble120grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble120grad_inputs;
    __assume_aligned(ensemble120grad_inputs, 64);
    float (* ensemble120grad)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble120grad;
    __assume_aligned(ensemble120grad, 64);
    float (* ensemble11grad_bias)[1][16] = (float (*)[1][16]) _ensemble11grad_bias;
    __assume_aligned(ensemble11grad_bias, 64);
    float (* ensemble11grad)[14][56][56][16] = (float (*)[14][56][56][16]) _ensemble11grad;
    __assume_aligned(ensemble11grad, 64);
    float (* ensemble119inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble119inputs;
    __assume_aligned(ensemble119inputs, 64);
    float (* ensemble119grad_inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble119grad_inputs;
    __assume_aligned(ensemble119grad_inputs, 64);
    float (* ensemble119grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble119grad;
    __assume_aligned(ensemble119grad, 64);
    float (* ensemble118grad_bias)[1][16] = (float (*)[1][16]) _ensemble118grad_bias;
    __assume_aligned(ensemble118grad_bias, 64);
    float (* ensemble118grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble118grad;
    __assume_aligned(ensemble118grad, 64);
    float (* ensemble117weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble117weights;
    __assume_aligned(ensemble117weights, 64);
    float (* ensemble117inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble117inputs;
    __assume_aligned(ensemble117inputs, 64);
    float (* ensemble117grad_weights)[2][5][5][16][16] = (float (*)[2][5][5][16][16]) _ensemble117grad_weights;
    __assume_aligned(ensemble117grad_weights, 64);
    float (* ensemble117grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble117grad_inputs;
    __assume_aligned(ensemble117grad_inputs, 64);
    float (* ensemble117grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble117grad;
    __assume_aligned(ensemble117grad, 64);
    float (* ensemble116inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble116inputs;
    __assume_aligned(ensemble116inputs, 64);
    float (* ensemble116grad_inputs)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble116grad_inputs;
    __assume_aligned(ensemble116grad_inputs, 64);
    float (* ensemble116grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble116grad;
    __assume_aligned(ensemble116grad, 64);
    float (* ensemble115grad_bias)[1][16] = (float (*)[1][16]) _ensemble115grad_bias;
    __assume_aligned(ensemble115grad_bias, 64);
    float (* ensemble115grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble115grad;
    __assume_aligned(ensemble115grad, 64);
    float (* ensemble114weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble114weights;
    __assume_aligned(ensemble114weights, 64);
    float (* ensemble114inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble114inputs;
    __assume_aligned(ensemble114inputs, 64);
    float (* ensemble114grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble114grad_weights;
    __assume_aligned(ensemble114grad_weights, 64);
    float (* ensemble114grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble114grad_inputs;
    __assume_aligned(ensemble114grad_inputs, 64);
    float (* ensemble114grad)[2][18][18][16] = (float (*)[2][18][18][16]) _ensemble114grad;
    __assume_aligned(ensemble114grad, 64);
    float (* ensemble113inputs)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble113inputs;
    __assume_aligned(ensemble113inputs, 64);
    float (* ensemble113grad_inputs)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble113grad_inputs;
    __assume_aligned(ensemble113grad_inputs, 64);
    float (* ensemble113grad)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble113grad;
    __assume_aligned(ensemble113grad, 64);
    float (* ensemble112grad_bias)[1][16] = (float (*)[1][16]) _ensemble112grad_bias;
    __assume_aligned(ensemble112grad_bias, 64);
    float (* ensemble112grad)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble112grad;
    __assume_aligned(ensemble112grad, 64);
    float (* ensemble111weights)[8][3][3][16][16] = (float (*)[8][3][3][16][16]) _ensemble111weights;
    __assume_aligned(ensemble111weights, 64);
    float (* ensemble111inputs)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble111inputs;
    __assume_aligned(ensemble111inputs, 64);
    float (* ensemble111grad_weights)[8][3][3][16][16] = (float (*)[8][3][3][16][16]) _ensemble111grad_weights;
    __assume_aligned(ensemble111grad_weights, 64);
    float (* ensemble111grad_inputs)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble111grad_inputs;
    __assume_aligned(ensemble111grad_inputs, 64);
    float (* ensemble111grad)[16][14][14][16] = (float (*)[16][14][14][16]) _ensemble111grad;
    __assume_aligned(ensemble111grad, 64);
    float (* ensemble110inputs)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble110inputs;
    __assume_aligned(ensemble110inputs, 64);
    float (* ensemble110grad_inputs)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble110grad_inputs;
    __assume_aligned(ensemble110grad_inputs, 64);
    float (* ensemble110grad)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble110grad;
    __assume_aligned(ensemble110grad, 64);
    float (* ensemble10weights)[4][3][3][16][16] = (float (*)[4][3][3][16][16]) _ensemble10weights;
    __assume_aligned(ensemble10weights, 64);
    float (* ensemble10inputs)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble10inputs;
    __assume_aligned(ensemble10inputs, 64);
    float (* ensemble10grad_weights)[4][3][3][16][16] = (float (*)[4][3][3][16][16]) _ensemble10grad_weights;
    __assume_aligned(ensemble10grad_weights, 64);
    float (* ensemble10grad_inputs)[4][58][58][16] = (float (*)[4][58][58][16]) _ensemble10grad_inputs;
    __assume_aligned(ensemble10grad_inputs, 64);
    float (* ensemble10grad)[14][56][56][16] = (float (*)[14][56][56][16]) _ensemble10grad;
    __assume_aligned(ensemble10grad, 64);
    float (* ensemble109grad_bias)[1][16] = (float (*)[1][16]) _ensemble109grad_bias;
    __assume_aligned(ensemble109grad_bias, 64);
    float (* ensemble109grad)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble109grad;
    __assume_aligned(ensemble109grad, 64);
    float (* ensemble108weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble108weights;
    __assume_aligned(ensemble108weights, 64);
    float (* ensemble108inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble108inputs;
    __assume_aligned(ensemble108inputs, 64);
    float (* ensemble108grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble108grad_weights;
    __assume_aligned(ensemble108grad_weights, 64);
    float (* ensemble108grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble108grad_inputs;
    __assume_aligned(ensemble108grad_inputs, 64);
    float (* ensemble108grad)[8][16][16][16] = (float (*)[8][16][16][16]) _ensemble108grad;
    __assume_aligned(ensemble108grad, 64);
    float (* ensemble107inputs)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble107inputs;
    __assume_aligned(ensemble107inputs, 64);
    float (* ensemble107grad_inputs)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble107grad_inputs;
    __assume_aligned(ensemble107grad_inputs, 64);
    float (* ensemble107grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble107grad;
    __assume_aligned(ensemble107grad, 64);
    float (* ensemble106grad_bias)[1][16] = (float (*)[1][16]) _ensemble106grad_bias;
    __assume_aligned(ensemble106grad_bias, 64);
    float (* ensemble106grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble106grad;
    __assume_aligned(ensemble106grad, 64);
    float (* ensemble105weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble105weights;
    __assume_aligned(ensemble105weights, 64);
    float (* ensemble105inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble105inputs;
    __assume_aligned(ensemble105inputs, 64);
    float (* ensemble105grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble105grad_weights;
    __assume_aligned(ensemble105grad_weights, 64);
    float (* ensemble105grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble105grad_inputs;
    __assume_aligned(ensemble105grad_inputs, 64);
    float (* ensemble105grad)[8][14][14][16] = (float (*)[8][14][14][16]) _ensemble105grad;
    __assume_aligned(ensemble105grad, 64);
    float (* ensemble104grad_inputs3)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble104grad_inputs3;
    __assume_aligned(ensemble104grad_inputs3, 64);
    float (* ensemble104grad_inputs2)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble104grad_inputs2;
    __assume_aligned(ensemble104grad_inputs2, 64);
    float (* ensemble104grad_inputs1)[14][14][14][16] = (float (*)[14][14][14][16]) _ensemble104grad_inputs1;
    __assume_aligned(ensemble104grad_inputs1, 64);
    float (* ensemble104grad_inputs)[10][14][14][16] = (float (*)[10][14][14][16]) _ensemble104grad_inputs;
    __assume_aligned(ensemble104grad_inputs, 64);
    float (* ensemble104grad)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble104grad;
    __assume_aligned(ensemble104grad, 64);
    float (* ensemble103inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble103inputs;
    __assume_aligned(ensemble103inputs, 64);
    float (* ensemble103grad_inputs)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble103grad_inputs;
    __assume_aligned(ensemble103grad_inputs, 64);
    float (* ensemble103grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble103grad;
    __assume_aligned(ensemble103grad, 64);
    float (* ensemble102grad_bias)[1][16] = (float (*)[1][16]) _ensemble102grad_bias;
    __assume_aligned(ensemble102grad_bias, 64);
    float (* ensemble102grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble102grad;
    __assume_aligned(ensemble102grad, 64);
    float (* ensemble101weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble101weights;
    __assume_aligned(ensemble101weights, 64);
    float (* ensemble101inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble101inputs;
    __assume_aligned(ensemble101inputs, 64);
    float (* ensemble101grad_weights)[32][1][1][16][16] = (float (*)[32][1][1][16][16]) _ensemble101grad_weights;
    __assume_aligned(ensemble101grad_weights, 64);
    float (* ensemble101grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble101grad_inputs;
    __assume_aligned(ensemble101grad_inputs, 64);
    float (* ensemble101grad)[4][14][14][16] = (float (*)[4][14][14][16]) _ensemble101grad;
    __assume_aligned(ensemble101grad, 64);
    long (* ensemble100mask_k)[32][14][14][16] = (long (*)[32][14][14][16]) _ensemble100mask_k;
    __assume_aligned(ensemble100mask_k, 64);
    long (* ensemble100mask_j)[32][14][14][16] = (long (*)[32][14][14][16]) _ensemble100mask_j;
    __assume_aligned(ensemble100mask_j, 64);
    float (* ensemble100grad_inputs)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble100grad_inputs;
    __assume_aligned(ensemble100grad_inputs, 64);
    float (* ensemble100grad)[32][14][14][16] = (float (*)[32][14][14][16]) _ensemble100grad;
    __assume_aligned(ensemble100grad, 64);
    double *times = 0;
    times = calloc_doubles(133);
    times[0] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                ensemble217grad_bias[_neuron_index_0][_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble217grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner];
            }
        }
    }
    
    #pragma omp parallel for simd
    for (int x = 0; x < 1008; ++x) {
      float sum = _ensemble217grad_bias[x];
      #pragma unroll
      for (int i = 1; i < 128; ++ i) {
        sum += _ensemble217grad_bias[i * 1008 + x];
      }
      _ensemble217grad_bias[x] = sum;
    }
    times[0] += omp_get_wtime();
    times[1] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 64; __unique_loopvar0_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x644_0 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_1 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_2 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_3 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_4 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_5 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_6 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_7 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_8 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_9 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_10 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_11 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_12 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_13 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_14 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x644_15 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x642_0 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_1 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_2 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_3 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_4 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_5 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_6 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_7 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_8 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_9 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_10 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_11 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_12 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_13 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_14 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x642_15 = _mm512_load_ps(& ensemble216inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                    __m512 ___x643 = _mm512_load_ps(& ensemble216grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][0][0][_neuron_index_1_inner][0]);
                    ___x643 = _mm512_fmadd_ps(___x644_0, ___x642_0, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_1, ___x642_1, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_2, ___x642_2, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_3, ___x642_3, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_4, ___x642_4, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_5, ___x642_5, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_6, ___x642_6, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_7, ___x642_7, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_8, ___x642_8, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_9, ___x642_9, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_10, ___x642_10, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_11, ___x642_11, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_12, ___x642_12, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_13, ___x642_13, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_14, ___x642_14, ___x643);
                    ___x643 = _mm512_fmadd_ps(___x644_15, ___x642_15, ___x643);
                    _mm512_store_ps(& ensemble216grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][0][0][_neuron_index_1_inner][0], ___x643);
                }
            }
        }
    }
    times[1] += omp_get_wtime();
    times[2] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 64; __unique_loopvar0_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
                __m512 ___x640_0 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_1 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_2 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_3 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_4 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_5 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_6 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_7 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_8 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_9 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_10 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_11 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_12 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_13 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_14 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                __m512 ___x640_15 = _mm512_load_ps(& ensemble216grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0]);
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x639_0 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_1 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_2 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_3 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_4 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_5 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_6 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_7 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_8 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_9 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_10 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_11 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_12 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_13 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_14 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x639_15 = _mm512_set1_ps(ensemble216grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x641 = _mm512_load_ps(& ensemble216weights[_neuron_index_1_outer][__unique_loopvar0_outer][0][0][_neuron_index_1_inner][0]);
                    ___x640_0 = _mm512_fmadd_ps(___x639_0, ___x641, ___x640_0);
                    ___x640_1 = _mm512_fmadd_ps(___x639_1, ___x641, ___x640_1);
                    ___x640_2 = _mm512_fmadd_ps(___x639_2, ___x641, ___x640_2);
                    ___x640_3 = _mm512_fmadd_ps(___x639_3, ___x641, ___x640_3);
                    ___x640_4 = _mm512_fmadd_ps(___x639_4, ___x641, ___x640_4);
                    ___x640_5 = _mm512_fmadd_ps(___x639_5, ___x641, ___x640_5);
                    ___x640_6 = _mm512_fmadd_ps(___x639_6, ___x641, ___x640_6);
                    ___x640_7 = _mm512_fmadd_ps(___x639_7, ___x641, ___x640_7);
                    ___x640_8 = _mm512_fmadd_ps(___x639_8, ___x641, ___x640_8);
                    ___x640_9 = _mm512_fmadd_ps(___x639_9, ___x641, ___x640_9);
                    ___x640_10 = _mm512_fmadd_ps(___x639_10, ___x641, ___x640_10);
                    ___x640_11 = _mm512_fmadd_ps(___x639_11, ___x641, ___x640_11);
                    ___x640_12 = _mm512_fmadd_ps(___x639_12, ___x641, ___x640_12);
                    ___x640_13 = _mm512_fmadd_ps(___x639_13, ___x641, ___x640_13);
                    ___x640_14 = _mm512_fmadd_ps(___x639_14, ___x641, ___x640_14);
                    ___x640_15 = _mm512_fmadd_ps(___x639_15, ___x641, ___x640_15);
                }
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_0);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_1);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_2);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_3);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_4);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_5);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_6);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_7);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_8);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_9);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_10);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_11);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_12);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_13);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_14);
                _mm512_store_ps(& ensemble216grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(0 * 1)][(0 * 1)][0], ___x640_15);
            }
        }
    }
    times[2] += omp_get_wtime();
    times[3] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 64; _neuron_index_1_outer += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                int in_y = 0 * 1 - 0;
                int _input_offset_2 = in_y;
                int in_x = 0 * 1 - 0;
                int _input_offset_3 = in_x;
                float val = ensemble215grad[_neuron_index_0][_neuron_index_1_outer][0][0][_neuron_index_1_inner] / ensemble215kernel[_neuron_index_0][_neuron_index_1_outer][0][0][_neuron_index_1_inner];
                for (int j = 0; j < 7; j += 1) {
                    for (int k = 0; k < 7; k += 1) {
                        ensemble215grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 6)][MIN(MAX(k * 1 + _input_offset_3, 0), 6)][_input_offset_1_inner] += val;
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 24; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    __m512 ___x632 = _mm512_load_ps(& ensemble214grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble214grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x632);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 24; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    __m512 ___x633 = _mm512_load_ps(& ensemble214grad[_neuron_index_0][(_neuron_index_1_outer + 24)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble214grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x633);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    __m512 ___x634 = _mm512_load_ps(& ensemble214grad[_neuron_index_0][(_neuron_index_1_outer + 48)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble214grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x634);
                }
            }
            for (long _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    __m512 ___x635 = _mm512_load_ps(& ensemble214grad[_neuron_index_0][(_neuron_index_1_outer + 56)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble214grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x635);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble213inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble213grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble213grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble213grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[3] += omp_get_wtime();
    times[4] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble212grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble212grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x626_0 = _mm512_load_ps(& ensemble211inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x626_1 = _mm512_load_ps(& ensemble211inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x626_2 = _mm512_load_ps(& ensemble211inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x626_3 = _mm512_load_ps(& ensemble211inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x626_4 = _mm512_load_ps(& ensemble211inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x626_5 = _mm512_load_ps(& ensemble211inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x626_6 = _mm512_load_ps(& ensemble211inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x625 = _mm512_load_ps(& ensemble211grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x627_0 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x627_1 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x627_2 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x627_3 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x627_4 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x627_5 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x627_6 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        ___x625 = _mm512_fmadd_ps(___x627_0, ___x626_0, ___x625);
                        ___x625 = _mm512_fmadd_ps(___x627_1, ___x626_1, ___x625);
                        ___x625 = _mm512_fmadd_ps(___x627_2, ___x626_2, ___x625);
                        ___x625 = _mm512_fmadd_ps(___x627_3, ___x626_3, ___x625);
                        ___x625 = _mm512_fmadd_ps(___x627_4, ___x626_4, ___x625);
                        ___x625 = _mm512_fmadd_ps(___x627_5, ___x626_5, ___x625);
                        ___x625 = _mm512_fmadd_ps(___x627_6, ___x626_6, ___x625);
                        _mm512_store_ps(& ensemble211grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x625);
                    }
                }
            }
        }
    }
    times[4] += omp_get_wtime();
    times[5] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x624_0 = _mm512_load_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x624_1 = _mm512_load_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x624_2 = _mm512_load_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x624_3 = _mm512_load_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x624_4 = _mm512_load_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x624_5 = _mm512_load_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x624_6 = _mm512_load_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x622 = _mm512_load_ps(& ensemble211weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x623_0 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x623_1 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x623_2 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x623_3 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x623_4 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x623_5 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x623_6 = _mm512_set1_ps(ensemble211grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        ___x624_0 = _mm512_fmadd_ps(___x623_0, ___x622, ___x624_0);
                        ___x624_1 = _mm512_fmadd_ps(___x623_1, ___x622, ___x624_1);
                        ___x624_2 = _mm512_fmadd_ps(___x623_2, ___x622, ___x624_2);
                        ___x624_3 = _mm512_fmadd_ps(___x623_3, ___x622, ___x624_3);
                        ___x624_4 = _mm512_fmadd_ps(___x623_4, ___x622, ___x624_4);
                        ___x624_5 = _mm512_fmadd_ps(___x623_5, ___x622, ___x624_5);
                        ___x624_6 = _mm512_fmadd_ps(___x623_6, ___x622, ___x624_6);
                    }
                    _mm512_store_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x624_0);
                    _mm512_store_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x624_1);
                    _mm512_store_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x624_2);
                    _mm512_store_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x624_3);
                    _mm512_store_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x624_4);
                    _mm512_store_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x624_5);
                    _mm512_store_ps(& ensemble211grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x624_6);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 52; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble210mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble210mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble210grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 6)][MIN(MAX(k + _input_offset_3, 0), 6)][_input_offset_1_inner] += ensemble210grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble209inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble209grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble209grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble209grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[5] += omp_get_wtime();
    times[6] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble208grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble208grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 3; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x616_0 = _mm512_load_ps(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x616_1 = _mm512_load_ps(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x616_2 = _mm512_load_ps(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x616_3 = _mm512_load_ps(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x616_4 = _mm512_load_ps(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x616_5 = _mm512_load_ps(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x616_6 = _mm512_load_ps(& ensemble207inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x617 = _mm512_load_ps(& ensemble207grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x618_0 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x618_1 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x618_2 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x618_3 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x618_4 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x618_5 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x618_6 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                ___x617 = _mm512_fmadd_ps(___x618_0, ___x616_0, ___x617);
                                ___x617 = _mm512_fmadd_ps(___x618_1, ___x616_1, ___x617);
                                ___x617 = _mm512_fmadd_ps(___x618_2, ___x616_2, ___x617);
                                ___x617 = _mm512_fmadd_ps(___x618_3, ___x616_3, ___x617);
                                ___x617 = _mm512_fmadd_ps(___x618_4, ___x616_4, ___x617);
                                ___x617 = _mm512_fmadd_ps(___x618_5, ___x616_5, ___x617);
                                ___x617 = _mm512_fmadd_ps(___x618_6, ___x616_6, ___x617);
                                _mm512_store_ps(& ensemble207grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x617);
                            }
                        }
                    }
                }
            }
        }
    }
    times[6] += omp_get_wtime();
    times[7] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 3; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x615_0 = _mm512_load_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x615_1 = _mm512_load_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x615_2 = _mm512_load_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x615_3 = _mm512_load_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x615_4 = _mm512_load_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x615_5 = _mm512_load_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x615_6 = _mm512_load_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x613 = _mm512_load_ps(& ensemble207weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x614_0 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x614_1 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x614_2 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x614_3 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x614_4 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x614_5 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x614_6 = _mm512_set1_ps(ensemble207grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                ___x615_0 = _mm512_fmadd_ps(___x614_0, ___x613, ___x615_0);
                                ___x615_1 = _mm512_fmadd_ps(___x614_1, ___x613, ___x615_1);
                                ___x615_2 = _mm512_fmadd_ps(___x614_2, ___x613, ___x615_2);
                                ___x615_3 = _mm512_fmadd_ps(___x614_3, ___x613, ___x615_3);
                                ___x615_4 = _mm512_fmadd_ps(___x614_4, ___x613, ___x615_4);
                                ___x615_5 = _mm512_fmadd_ps(___x614_5, ___x613, ___x615_5);
                                ___x615_6 = _mm512_fmadd_ps(___x614_6, ___x613, ___x615_6);
                            }
                            _mm512_store_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x615_0);
                            _mm512_store_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x615_1);
                            _mm512_store_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x615_2);
                            _mm512_store_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x615_3);
                            _mm512_store_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x615_4);
                            _mm512_store_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x615_5);
                            _mm512_store_ps(& ensemble207grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x615_6);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble206inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] > 0.0) {
                            ensemble206grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble206grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                        } else {
                            ensemble206grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[7] += omp_get_wtime();
    times[8] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble205grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble205grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x609_0 = _mm512_load_ps(& ensemble204inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x609_1 = _mm512_load_ps(& ensemble204inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x609_2 = _mm512_load_ps(& ensemble204inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x609_3 = _mm512_load_ps(& ensemble204inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x609_4 = _mm512_load_ps(& ensemble204inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x609_5 = _mm512_load_ps(& ensemble204inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x609_6 = _mm512_load_ps(& ensemble204inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x607 = _mm512_load_ps(& ensemble204grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x608_0 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x608_1 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x608_2 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x608_3 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x608_4 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x608_5 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x608_6 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        ___x607 = _mm512_fmadd_ps(___x608_0, ___x609_0, ___x607);
                        ___x607 = _mm512_fmadd_ps(___x608_1, ___x609_1, ___x607);
                        ___x607 = _mm512_fmadd_ps(___x608_2, ___x609_2, ___x607);
                        ___x607 = _mm512_fmadd_ps(___x608_3, ___x609_3, ___x607);
                        ___x607 = _mm512_fmadd_ps(___x608_4, ___x609_4, ___x607);
                        ___x607 = _mm512_fmadd_ps(___x608_5, ___x609_5, ___x607);
                        ___x607 = _mm512_fmadd_ps(___x608_6, ___x609_6, ___x607);
                        _mm512_store_ps(& ensemble204grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x607);
                    }
                }
            }
        }
    }
    times[8] += omp_get_wtime();
    times[9] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x604_0 = _mm512_load_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x604_1 = _mm512_load_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x604_2 = _mm512_load_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x604_3 = _mm512_load_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x604_4 = _mm512_load_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x604_5 = _mm512_load_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x604_6 = _mm512_load_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x605_0 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x605_1 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x605_2 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x605_3 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x605_4 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x605_5 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x605_6 = _mm512_set1_ps(ensemble204grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        __m512 ___x606 = _mm512_load_ps(& ensemble204weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x604_0 = _mm512_fmadd_ps(___x605_0, ___x606, ___x604_0);
                        ___x604_1 = _mm512_fmadd_ps(___x605_1, ___x606, ___x604_1);
                        ___x604_2 = _mm512_fmadd_ps(___x605_2, ___x606, ___x604_2);
                        ___x604_3 = _mm512_fmadd_ps(___x605_3, ___x606, ___x604_3);
                        ___x604_4 = _mm512_fmadd_ps(___x605_4, ___x606, ___x604_4);
                        ___x604_5 = _mm512_fmadd_ps(___x605_5, ___x606, ___x604_5);
                        ___x604_6 = _mm512_fmadd_ps(___x605_6, ___x606, ___x604_6);
                    }
                    _mm512_store_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x604_0);
                    _mm512_store_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x604_1);
                    _mm512_store_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x604_2);
                    _mm512_store_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x604_3);
                    _mm512_store_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x604_4);
                    _mm512_store_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x604_5);
                    _mm512_store_ps(& ensemble204grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x604_6);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 24; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble203inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble203grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble203grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble203grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[9] += omp_get_wtime();
    times[10] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 24; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble202grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble202grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x600_0 = _mm512_load_ps(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x600_1 = _mm512_load_ps(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x600_2 = _mm512_load_ps(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x600_3 = _mm512_load_ps(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x600_4 = _mm512_load_ps(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x600_5 = _mm512_load_ps(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x600_6 = _mm512_load_ps(& ensemble201inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x598_0 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x598_1 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x598_2 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x598_3 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x598_4 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x598_5 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x598_6 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x599 = _mm512_load_ps(& ensemble201grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x599 = _mm512_fmadd_ps(___x598_0, ___x600_0, ___x599);
                                ___x599 = _mm512_fmadd_ps(___x598_1, ___x600_1, ___x599);
                                ___x599 = _mm512_fmadd_ps(___x598_2, ___x600_2, ___x599);
                                ___x599 = _mm512_fmadd_ps(___x598_3, ___x600_3, ___x599);
                                ___x599 = _mm512_fmadd_ps(___x598_4, ___x600_4, ___x599);
                                ___x599 = _mm512_fmadd_ps(___x598_5, ___x600_5, ___x599);
                                ___x599 = _mm512_fmadd_ps(___x598_6, ___x600_6, ___x599);
                                _mm512_store_ps(& ensemble201grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x599);
                            }
                        }
                    }
                }
            }
        }
    }
    times[10] += omp_get_wtime();
    times[11] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 24; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x597_0 = _mm512_load_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x597_1 = _mm512_load_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x597_2 = _mm512_load_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x597_3 = _mm512_load_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x597_4 = _mm512_load_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x597_5 = _mm512_load_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x597_6 = _mm512_load_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x595_0 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x595_1 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x595_2 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x595_3 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x595_4 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x595_5 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x595_6 = _mm512_set1_ps(ensemble201grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x596 = _mm512_load_ps(& ensemble201weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x597_0 = _mm512_fmadd_ps(___x595_0, ___x596, ___x597_0);
                                ___x597_1 = _mm512_fmadd_ps(___x595_1, ___x596, ___x597_1);
                                ___x597_2 = _mm512_fmadd_ps(___x595_2, ___x596, ___x597_2);
                                ___x597_3 = _mm512_fmadd_ps(___x595_3, ___x596, ___x597_3);
                                ___x597_4 = _mm512_fmadd_ps(___x595_4, ___x596, ___x597_4);
                                ___x597_5 = _mm512_fmadd_ps(___x595_5, ___x596, ___x597_5);
                                ___x597_6 = _mm512_fmadd_ps(___x595_6, ___x596, ___x597_6);
                            }
                            _mm512_store_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x597_0);
                            _mm512_store_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x597_1);
                            _mm512_store_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x597_2);
                            _mm512_store_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x597_3);
                            _mm512_store_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x597_4);
                            _mm512_store_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x597_5);
                            _mm512_store_ps(& ensemble201grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x597_6);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble200inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] > 0.0) {
                            ensemble200grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble200grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                        } else {
                            ensemble200grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[11] += omp_get_wtime();
    times[12] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble199grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble199grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x590_0 = _mm512_load_ps(& ensemble198inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x590_1 = _mm512_load_ps(& ensemble198inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x590_2 = _mm512_load_ps(& ensemble198inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x590_3 = _mm512_load_ps(& ensemble198inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x590_4 = _mm512_load_ps(& ensemble198inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x590_5 = _mm512_load_ps(& ensemble198inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x590_6 = _mm512_load_ps(& ensemble198inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x589 = _mm512_load_ps(& ensemble198grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x591_0 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x591_1 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x591_2 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x591_3 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x591_4 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x591_5 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x591_6 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        ___x589 = _mm512_fmadd_ps(___x591_0, ___x590_0, ___x589);
                        ___x589 = _mm512_fmadd_ps(___x591_1, ___x590_1, ___x589);
                        ___x589 = _mm512_fmadd_ps(___x591_2, ___x590_2, ___x589);
                        ___x589 = _mm512_fmadd_ps(___x591_3, ___x590_3, ___x589);
                        ___x589 = _mm512_fmadd_ps(___x591_4, ___x590_4, ___x589);
                        ___x589 = _mm512_fmadd_ps(___x591_5, ___x590_5, ___x589);
                        ___x589 = _mm512_fmadd_ps(___x591_6, ___x590_6, ___x589);
                        _mm512_store_ps(& ensemble198grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x589);
                    }
                }
            }
        }
    }
    times[12] += omp_get_wtime();
    times[13] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x587_0 = _mm512_load_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x587_1 = _mm512_load_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x587_2 = _mm512_load_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x587_3 = _mm512_load_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x587_4 = _mm512_load_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x587_5 = _mm512_load_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x587_6 = _mm512_load_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x586 = _mm512_load_ps(& ensemble198weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x588_0 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x588_1 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x588_2 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x588_3 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x588_4 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x588_5 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x588_6 = _mm512_set1_ps(ensemble198grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        ___x587_0 = _mm512_fmadd_ps(___x588_0, ___x586, ___x587_0);
                        ___x587_1 = _mm512_fmadd_ps(___x588_1, ___x586, ___x587_1);
                        ___x587_2 = _mm512_fmadd_ps(___x588_2, ___x586, ___x587_2);
                        ___x587_3 = _mm512_fmadd_ps(___x588_3, ___x586, ___x587_3);
                        ___x587_4 = _mm512_fmadd_ps(___x588_4, ___x586, ___x587_4);
                        ___x587_5 = _mm512_fmadd_ps(___x588_5, ___x586, ___x587_5);
                        ___x587_6 = _mm512_fmadd_ps(___x588_6, ___x586, ___x587_6);
                    }
                    _mm512_store_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x587_0);
                    _mm512_store_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x587_1);
                    _mm512_store_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x587_2);
                    _mm512_store_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x587_3);
                    _mm512_store_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x587_4);
                    _mm512_store_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x587_5);
                    _mm512_store_ps(& ensemble198grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x587_6);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 24; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble197inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble197grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble197grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble197grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[13] += omp_get_wtime();
    times[14] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 24; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble196grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble196grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x581_0 = _mm512_load_ps(& ensemble195inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x581_1 = _mm512_load_ps(& ensemble195inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x581_2 = _mm512_load_ps(& ensemble195inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x581_3 = _mm512_load_ps(& ensemble195inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x581_4 = _mm512_load_ps(& ensemble195inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x581_5 = _mm512_load_ps(& ensemble195inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x581_6 = _mm512_load_ps(& ensemble195inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x580 = _mm512_load_ps(& ensemble195grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x582_0 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x582_1 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x582_2 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x582_3 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x582_4 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x582_5 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x582_6 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        ___x580 = _mm512_fmadd_ps(___x582_0, ___x581_0, ___x580);
                        ___x580 = _mm512_fmadd_ps(___x582_1, ___x581_1, ___x580);
                        ___x580 = _mm512_fmadd_ps(___x582_2, ___x581_2, ___x580);
                        ___x580 = _mm512_fmadd_ps(___x582_3, ___x581_3, ___x580);
                        ___x580 = _mm512_fmadd_ps(___x582_4, ___x581_4, ___x580);
                        ___x580 = _mm512_fmadd_ps(___x582_5, ___x581_5, ___x580);
                        ___x580 = _mm512_fmadd_ps(___x582_6, ___x581_6, ___x580);
                        _mm512_store_ps(& ensemble195grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x580);
                    }
                }
            }
        }
    }
    times[14] += omp_get_wtime();
    times[15] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 24; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x578_0 = _mm512_load_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x578_1 = _mm512_load_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x578_2 = _mm512_load_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x578_3 = _mm512_load_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x578_4 = _mm512_load_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x578_5 = _mm512_load_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x578_6 = _mm512_load_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x577 = _mm512_load_ps(& ensemble195weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x579_0 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x579_1 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x579_2 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x579_3 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x579_4 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x579_5 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x579_6 = _mm512_set1_ps(ensemble195grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        ___x578_0 = _mm512_fmadd_ps(___x579_0, ___x577, ___x578_0);
                        ___x578_1 = _mm512_fmadd_ps(___x579_1, ___x577, ___x578_1);
                        ___x578_2 = _mm512_fmadd_ps(___x579_2, ___x577, ___x578_2);
                        ___x578_3 = _mm512_fmadd_ps(___x579_3, ___x577, ___x578_3);
                        ___x578_4 = _mm512_fmadd_ps(___x579_4, ___x577, ___x578_4);
                        ___x578_5 = _mm512_fmadd_ps(___x579_5, ___x577, ___x578_5);
                        ___x578_6 = _mm512_fmadd_ps(___x579_6, ___x577, ___x578_6);
                    }
                    _mm512_store_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x578_0);
                    _mm512_store_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x578_1);
                    _mm512_store_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x578_2);
                    _mm512_store_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x578_3);
                    _mm512_store_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x578_4);
                    _mm512_store_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x578_5);
                    _mm512_store_ps(& ensemble195grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x578_6);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    __m512 ___x570 = _mm512_load_ps(& ensemble194grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble194grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x570);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 20; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    __m512 ___x571 = _mm512_load_ps(& ensemble194grad[_neuron_index_0][(_neuron_index_1_outer + 16)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble194grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x571);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    __m512 ___x572 = _mm512_load_ps(& ensemble194grad[_neuron_index_0][(_neuron_index_1_outer + 36)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble194grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x572);
                }
            }
            for (long _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    __m512 ___x573 = _mm512_load_ps(& ensemble194grad[_neuron_index_0][(_neuron_index_1_outer + 44)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble194grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x573);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble193inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble193grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble193grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble193grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[15] += omp_get_wtime();
    times[16] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble192grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble192grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x564_0 = _mm512_load_ps(& ensemble191inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x564_1 = _mm512_load_ps(& ensemble191inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x564_2 = _mm512_load_ps(& ensemble191inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x564_3 = _mm512_load_ps(& ensemble191inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x564_4 = _mm512_load_ps(& ensemble191inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x564_5 = _mm512_load_ps(& ensemble191inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x564_6 = _mm512_load_ps(& ensemble191inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x563 = _mm512_load_ps(& ensemble191grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x565_0 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x565_1 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x565_2 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x565_3 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x565_4 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x565_5 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x565_6 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        ___x563 = _mm512_fmadd_ps(___x565_0, ___x564_0, ___x563);
                        ___x563 = _mm512_fmadd_ps(___x565_1, ___x564_1, ___x563);
                        ___x563 = _mm512_fmadd_ps(___x565_2, ___x564_2, ___x563);
                        ___x563 = _mm512_fmadd_ps(___x565_3, ___x564_3, ___x563);
                        ___x563 = _mm512_fmadd_ps(___x565_4, ___x564_4, ___x563);
                        ___x563 = _mm512_fmadd_ps(___x565_5, ___x564_5, ___x563);
                        ___x563 = _mm512_fmadd_ps(___x565_6, ___x564_6, ___x563);
                        _mm512_store_ps(& ensemble191grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x563);
                    }
                }
            }
        }
    }
    times[16] += omp_get_wtime();
    times[17] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x561_0 = _mm512_load_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x561_1 = _mm512_load_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x561_2 = _mm512_load_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x561_3 = _mm512_load_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x561_4 = _mm512_load_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x561_5 = _mm512_load_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x561_6 = _mm512_load_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x560 = _mm512_load_ps(& ensemble191weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x562_0 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x562_1 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x562_2 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x562_3 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x562_4 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x562_5 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x562_6 = _mm512_set1_ps(ensemble191grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        ___x561_0 = _mm512_fmadd_ps(___x562_0, ___x560, ___x561_0);
                        ___x561_1 = _mm512_fmadd_ps(___x562_1, ___x560, ___x561_1);
                        ___x561_2 = _mm512_fmadd_ps(___x562_2, ___x560, ___x561_2);
                        ___x561_3 = _mm512_fmadd_ps(___x562_3, ___x560, ___x561_3);
                        ___x561_4 = _mm512_fmadd_ps(___x562_4, ___x560, ___x561_4);
                        ___x561_5 = _mm512_fmadd_ps(___x562_5, ___x560, ___x561_5);
                        ___x561_6 = _mm512_fmadd_ps(___x562_6, ___x560, ___x561_6);
                    }
                    _mm512_store_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x561_0);
                    _mm512_store_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x561_1);
                    _mm512_store_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x561_2);
                    _mm512_store_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x561_3);
                    _mm512_store_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x561_4);
                    _mm512_store_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x561_5);
                    _mm512_store_ps(& ensemble191grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x561_6);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 52; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble190mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble190mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble190grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 6)][MIN(MAX(k + _input_offset_3, 0), 6)][_input_offset_1_inner] += ensemble190grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble189inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble189grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble189grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble189grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[17] += omp_get_wtime();
    times[18] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble188grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble188grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x554_0 = _mm512_load_ps(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x554_1 = _mm512_load_ps(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x554_2 = _mm512_load_ps(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x554_3 = _mm512_load_ps(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x554_4 = _mm512_load_ps(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x554_5 = _mm512_load_ps(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x554_6 = _mm512_load_ps(& ensemble187inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x555_0 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x555_1 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x555_2 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x555_3 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x555_4 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x555_5 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x555_6 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x556 = _mm512_load_ps(& ensemble187grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x556 = _mm512_fmadd_ps(___x555_0, ___x554_0, ___x556);
                                ___x556 = _mm512_fmadd_ps(___x555_1, ___x554_1, ___x556);
                                ___x556 = _mm512_fmadd_ps(___x555_2, ___x554_2, ___x556);
                                ___x556 = _mm512_fmadd_ps(___x555_3, ___x554_3, ___x556);
                                ___x556 = _mm512_fmadd_ps(___x555_4, ___x554_4, ___x556);
                                ___x556 = _mm512_fmadd_ps(___x555_5, ___x554_5, ___x556);
                                ___x556 = _mm512_fmadd_ps(___x555_6, ___x554_6, ___x556);
                                _mm512_store_ps(& ensemble187grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x556);
                            }
                        }
                    }
                }
            }
        }
    }
    times[18] += omp_get_wtime();
    times[19] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x552_0 = _mm512_load_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x552_1 = _mm512_load_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x552_2 = _mm512_load_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x552_3 = _mm512_load_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x552_4 = _mm512_load_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x552_5 = _mm512_load_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x552_6 = _mm512_load_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x551_0 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x551_1 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x551_2 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x551_3 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x551_4 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x551_5 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x551_6 = _mm512_set1_ps(ensemble187grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x553 = _mm512_load_ps(& ensemble187weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x552_0 = _mm512_fmadd_ps(___x551_0, ___x553, ___x552_0);
                                ___x552_1 = _mm512_fmadd_ps(___x551_1, ___x553, ___x552_1);
                                ___x552_2 = _mm512_fmadd_ps(___x551_2, ___x553, ___x552_2);
                                ___x552_3 = _mm512_fmadd_ps(___x551_3, ___x553, ___x552_3);
                                ___x552_4 = _mm512_fmadd_ps(___x551_4, ___x553, ___x552_4);
                                ___x552_5 = _mm512_fmadd_ps(___x551_5, ___x553, ___x552_5);
                                ___x552_6 = _mm512_fmadd_ps(___x551_6, ___x553, ___x552_6);
                            }
                            _mm512_store_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x552_0);
                            _mm512_store_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x552_1);
                            _mm512_store_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x552_2);
                            _mm512_store_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x552_3);
                            _mm512_store_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x552_4);
                            _mm512_store_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x552_5);
                            _mm512_store_ps(& ensemble187grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x552_6);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble186inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] > 0.0) {
                            ensemble186grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble186grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                        } else {
                            ensemble186grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[19] += omp_get_wtime();
    times[20] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble185grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble185grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x545_0 = _mm512_load_ps(& ensemble184inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x545_1 = _mm512_load_ps(& ensemble184inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x545_2 = _mm512_load_ps(& ensemble184inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x545_3 = _mm512_load_ps(& ensemble184inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x545_4 = _mm512_load_ps(& ensemble184inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x545_5 = _mm512_load_ps(& ensemble184inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x545_6 = _mm512_load_ps(& ensemble184inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x546 = _mm512_load_ps(& ensemble184grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x547_0 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x547_1 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x547_2 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x547_3 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x547_4 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x547_5 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x547_6 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        ___x546 = _mm512_fmadd_ps(___x547_0, ___x545_0, ___x546);
                        ___x546 = _mm512_fmadd_ps(___x547_1, ___x545_1, ___x546);
                        ___x546 = _mm512_fmadd_ps(___x547_2, ___x545_2, ___x546);
                        ___x546 = _mm512_fmadd_ps(___x547_3, ___x545_3, ___x546);
                        ___x546 = _mm512_fmadd_ps(___x547_4, ___x545_4, ___x546);
                        ___x546 = _mm512_fmadd_ps(___x547_5, ___x545_5, ___x546);
                        ___x546 = _mm512_fmadd_ps(___x547_6, ___x545_6, ___x546);
                        _mm512_store_ps(& ensemble184grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x546);
                    }
                }
            }
        }
    }
    times[20] += omp_get_wtime();
    times[21] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x544_0 = _mm512_load_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x544_1 = _mm512_load_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x544_2 = _mm512_load_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x544_3 = _mm512_load_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x544_4 = _mm512_load_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x544_5 = _mm512_load_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x544_6 = _mm512_load_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x542 = _mm512_load_ps(& ensemble184weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x543_0 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x543_1 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x543_2 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x543_3 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x543_4 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x543_5 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x543_6 = _mm512_set1_ps(ensemble184grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        ___x544_0 = _mm512_fmadd_ps(___x543_0, ___x542, ___x544_0);
                        ___x544_1 = _mm512_fmadd_ps(___x543_1, ___x542, ___x544_1);
                        ___x544_2 = _mm512_fmadd_ps(___x543_2, ___x542, ___x544_2);
                        ___x544_3 = _mm512_fmadd_ps(___x543_3, ___x542, ___x544_3);
                        ___x544_4 = _mm512_fmadd_ps(___x543_4, ___x542, ___x544_4);
                        ___x544_5 = _mm512_fmadd_ps(___x543_5, ___x542, ___x544_5);
                        ___x544_6 = _mm512_fmadd_ps(___x543_6, ___x542, ___x544_6);
                    }
                    _mm512_store_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x544_0);
                    _mm512_store_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x544_1);
                    _mm512_store_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x544_2);
                    _mm512_store_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x544_3);
                    _mm512_store_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x544_4);
                    _mm512_store_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x544_5);
                    _mm512_store_ps(& ensemble184grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x544_6);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 20; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble183inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble183grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble183grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble183grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[21] += omp_get_wtime();
    times[22] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 20; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble182grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble182grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 10; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x538_0 = _mm512_load_ps(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x538_1 = _mm512_load_ps(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x538_2 = _mm512_load_ps(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x538_3 = _mm512_load_ps(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x538_4 = _mm512_load_ps(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x538_5 = _mm512_load_ps(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x538_6 = _mm512_load_ps(& ensemble181inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x536_0 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x536_1 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x536_2 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x536_3 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x536_4 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x536_5 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x536_6 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x537 = _mm512_load_ps(& ensemble181grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x537 = _mm512_fmadd_ps(___x536_0, ___x538_0, ___x537);
                                ___x537 = _mm512_fmadd_ps(___x536_1, ___x538_1, ___x537);
                                ___x537 = _mm512_fmadd_ps(___x536_2, ___x538_2, ___x537);
                                ___x537 = _mm512_fmadd_ps(___x536_3, ___x538_3, ___x537);
                                ___x537 = _mm512_fmadd_ps(___x536_4, ___x538_4, ___x537);
                                ___x537 = _mm512_fmadd_ps(___x536_5, ___x538_5, ___x537);
                                ___x537 = _mm512_fmadd_ps(___x536_6, ___x538_6, ___x537);
                                _mm512_store_ps(& ensemble181grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x537);
                            }
                        }
                    }
                }
            }
        }
    }
    times[22] += omp_get_wtime();
    times[23] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 10; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 20; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x533_0 = _mm512_load_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x533_1 = _mm512_load_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x533_2 = _mm512_load_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x533_3 = _mm512_load_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x533_4 = _mm512_load_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x533_5 = _mm512_load_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x533_6 = _mm512_load_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x534 = _mm512_load_ps(& ensemble181weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x535_0 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x535_1 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x535_2 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x535_3 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x535_4 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x535_5 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x535_6 = _mm512_set1_ps(ensemble181grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                ___x533_0 = _mm512_fmadd_ps(___x535_0, ___x534, ___x533_0);
                                ___x533_1 = _mm512_fmadd_ps(___x535_1, ___x534, ___x533_1);
                                ___x533_2 = _mm512_fmadd_ps(___x535_2, ___x534, ___x533_2);
                                ___x533_3 = _mm512_fmadd_ps(___x535_3, ___x534, ___x533_3);
                                ___x533_4 = _mm512_fmadd_ps(___x535_4, ___x534, ___x533_4);
                                ___x533_5 = _mm512_fmadd_ps(___x535_5, ___x534, ___x533_5);
                                ___x533_6 = _mm512_fmadd_ps(___x535_6, ___x534, ___x533_6);
                            }
                            _mm512_store_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x533_0);
                            _mm512_store_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x533_1);
                            _mm512_store_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x533_2);
                            _mm512_store_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x533_3);
                            _mm512_store_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x533_4);
                            _mm512_store_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x533_5);
                            _mm512_store_ps(& ensemble181grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x533_6);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble180inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] > 0.0) {
                            ensemble180grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble180grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                        } else {
                            ensemble180grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[23] += omp_get_wtime();
    times[24] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble179grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble179grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x529_0 = _mm512_load_ps(& ensemble178inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x529_1 = _mm512_load_ps(& ensemble178inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x529_2 = _mm512_load_ps(& ensemble178inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x529_3 = _mm512_load_ps(& ensemble178inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x529_4 = _mm512_load_ps(& ensemble178inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x529_5 = _mm512_load_ps(& ensemble178inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x529_6 = _mm512_load_ps(& ensemble178inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x527_0 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x527_1 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x527_2 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x527_3 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x527_4 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x527_5 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x527_6 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x528 = _mm512_load_ps(& ensemble178grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x528 = _mm512_fmadd_ps(___x527_0, ___x529_0, ___x528);
                        ___x528 = _mm512_fmadd_ps(___x527_1, ___x529_1, ___x528);
                        ___x528 = _mm512_fmadd_ps(___x527_2, ___x529_2, ___x528);
                        ___x528 = _mm512_fmadd_ps(___x527_3, ___x529_3, ___x528);
                        ___x528 = _mm512_fmadd_ps(___x527_4, ___x529_4, ___x528);
                        ___x528 = _mm512_fmadd_ps(___x527_5, ___x529_5, ___x528);
                        ___x528 = _mm512_fmadd_ps(___x527_6, ___x529_6, ___x528);
                        _mm512_store_ps(& ensemble178grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x528);
                    }
                }
            }
        }
    }
    times[24] += omp_get_wtime();
    times[25] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x525_0 = _mm512_load_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x525_1 = _mm512_load_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x525_2 = _mm512_load_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x525_3 = _mm512_load_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x525_4 = _mm512_load_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x525_5 = _mm512_load_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x525_6 = _mm512_load_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x524_0 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x524_1 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x524_2 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x524_3 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x524_4 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x524_5 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x524_6 = _mm512_set1_ps(ensemble178grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x526 = _mm512_load_ps(& ensemble178weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x525_0 = _mm512_fmadd_ps(___x524_0, ___x526, ___x525_0);
                        ___x525_1 = _mm512_fmadd_ps(___x524_1, ___x526, ___x525_1);
                        ___x525_2 = _mm512_fmadd_ps(___x524_2, ___x526, ___x525_2);
                        ___x525_3 = _mm512_fmadd_ps(___x524_3, ___x526, ___x525_3);
                        ___x525_4 = _mm512_fmadd_ps(___x524_4, ___x526, ___x525_4);
                        ___x525_5 = _mm512_fmadd_ps(___x524_5, ___x526, ___x525_5);
                        ___x525_6 = _mm512_fmadd_ps(___x524_6, ___x526, ___x525_6);
                    }
                    _mm512_store_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x525_0);
                    _mm512_store_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x525_1);
                    _mm512_store_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x525_2);
                    _mm512_store_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x525_3);
                    _mm512_store_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x525_4);
                    _mm512_store_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x525_5);
                    _mm512_store_ps(& ensemble178grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x525_6);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble177inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble177grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble177grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble177grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[25] += omp_get_wtime();
    times[26] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble176grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble176grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x519_0 = _mm512_load_ps(& ensemble175inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x519_1 = _mm512_load_ps(& ensemble175inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x519_2 = _mm512_load_ps(& ensemble175inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x519_3 = _mm512_load_ps(& ensemble175inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x519_4 = _mm512_load_ps(& ensemble175inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x519_5 = _mm512_load_ps(& ensemble175inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x519_6 = _mm512_load_ps(& ensemble175inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x518 = _mm512_load_ps(& ensemble175grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x520_0 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x520_1 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x520_2 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x520_3 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x520_4 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x520_5 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x520_6 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        ___x518 = _mm512_fmadd_ps(___x520_0, ___x519_0, ___x518);
                        ___x518 = _mm512_fmadd_ps(___x520_1, ___x519_1, ___x518);
                        ___x518 = _mm512_fmadd_ps(___x520_2, ___x519_2, ___x518);
                        ___x518 = _mm512_fmadd_ps(___x520_3, ___x519_3, ___x518);
                        ___x518 = _mm512_fmadd_ps(___x520_4, ___x519_4, ___x518);
                        ___x518 = _mm512_fmadd_ps(___x520_5, ___x519_5, ___x518);
                        ___x518 = _mm512_fmadd_ps(___x520_6, ___x519_6, ___x518);
                        _mm512_store_ps(& ensemble175grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x518);
                    }
                }
            }
        }
    }
    times[26] += omp_get_wtime();
    times[27] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 52; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    __m512 ___x516_0 = _mm512_load_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x516_1 = _mm512_load_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x516_2 = _mm512_load_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x516_3 = _mm512_load_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x516_4 = _mm512_load_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x516_5 = _mm512_load_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x516_6 = _mm512_load_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x515 = _mm512_load_ps(& ensemble175weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x517_0 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x517_1 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x517_2 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x517_3 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x517_4 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x517_5 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x517_6 = _mm512_set1_ps(ensemble175grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        ___x516_0 = _mm512_fmadd_ps(___x517_0, ___x515, ___x516_0);
                        ___x516_1 = _mm512_fmadd_ps(___x517_1, ___x515, ___x516_1);
                        ___x516_2 = _mm512_fmadd_ps(___x517_2, ___x515, ___x516_2);
                        ___x516_3 = _mm512_fmadd_ps(___x517_3, ___x515, ___x516_3);
                        ___x516_4 = _mm512_fmadd_ps(___x517_4, ___x515, ___x516_4);
                        ___x516_5 = _mm512_fmadd_ps(___x517_5, ___x515, ___x516_5);
                        ___x516_6 = _mm512_fmadd_ps(___x517_6, ___x515, ___x516_6);
                    }
                    _mm512_store_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x516_0);
                    _mm512_store_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x516_1);
                    _mm512_store_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x516_2);
                    _mm512_store_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x516_3);
                    _mm512_store_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x516_4);
                    _mm512_store_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x516_5);
                    _mm512_store_ps(& ensemble175grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x516_6);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 52; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 7; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 7; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 2 - 0;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 2 - 0;
                        int _input_offset_3 = in_x;
                        long j = ensemble174mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble174mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble174grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 13)][MIN(MAX(k + _input_offset_3, 0), 13)][_input_offset_1_inner] += ensemble174grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x508 = _mm512_load_ps(& ensemble173grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble173grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x508);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 20; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x509 = _mm512_load_ps(& ensemble173grad[_neuron_index_0][(_neuron_index_1_outer + 16)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble173grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x509);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x510 = _mm512_load_ps(& ensemble173grad[_neuron_index_0][(_neuron_index_1_outer + 36)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble173grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x510);
                }
            }
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x511 = _mm512_load_ps(& ensemble173grad[_neuron_index_0][(_neuron_index_1_outer + 44)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble173grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x511);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble172inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble172grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble172grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble172grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[27] += omp_get_wtime();
    times[28] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble171grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble171grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 33; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x503_0 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x503_1 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x503_2 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x503_3 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x503_4 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x503_5 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x503_6 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x503_7 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x503_8 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x503_9 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x503_10 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x503_11 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x503_12 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x503_13 = _mm512_load_ps(& ensemble170inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x501 = _mm512_load_ps(& ensemble170grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x502_0 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x502_1 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x502_2 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x502_3 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x502_4 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x502_5 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x502_6 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x502_7 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x502_8 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x502_9 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x502_10 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x502_11 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x502_12 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x502_13 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        ___x501 = _mm512_fmadd_ps(___x502_0, ___x503_0, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_1, ___x503_1, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_2, ___x503_2, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_3, ___x503_3, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_4, ___x503_4, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_5, ___x503_5, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_6, ___x503_6, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_7, ___x503_7, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_8, ___x503_8, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_9, ___x503_9, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_10, ___x503_10, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_11, ___x503_11, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_12, ___x503_12, ___x501);
                        ___x501 = _mm512_fmadd_ps(___x502_13, ___x503_13, ___x501);
                        _mm512_store_ps(& ensemble170grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x501);
                    }
                }
            }
        }
    }
    times[28] += omp_get_wtime();
    times[29] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 33; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x499_0 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x499_1 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x499_2 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x499_3 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x499_4 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x499_5 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x499_6 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x499_7 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x499_8 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x499_9 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x499_10 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x499_11 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x499_12 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x499_13 = _mm512_load_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x498_0 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x498_1 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x498_2 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x498_3 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x498_4 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x498_5 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x498_6 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x498_7 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x498_8 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x498_9 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x498_10 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x498_11 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x498_12 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x498_13 = _mm512_set1_ps(ensemble170grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x500 = _mm512_load_ps(& ensemble170weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x499_0 = _mm512_fmadd_ps(___x498_0, ___x500, ___x499_0);
                        ___x499_1 = _mm512_fmadd_ps(___x498_1, ___x500, ___x499_1);
                        ___x499_2 = _mm512_fmadd_ps(___x498_2, ___x500, ___x499_2);
                        ___x499_3 = _mm512_fmadd_ps(___x498_3, ___x500, ___x499_3);
                        ___x499_4 = _mm512_fmadd_ps(___x498_4, ___x500, ___x499_4);
                        ___x499_5 = _mm512_fmadd_ps(___x498_5, ___x500, ___x499_5);
                        ___x499_6 = _mm512_fmadd_ps(___x498_6, ___x500, ___x499_6);
                        ___x499_7 = _mm512_fmadd_ps(___x498_7, ___x500, ___x499_7);
                        ___x499_8 = _mm512_fmadd_ps(___x498_8, ___x500, ___x499_8);
                        ___x499_9 = _mm512_fmadd_ps(___x498_9, ___x500, ___x499_9);
                        ___x499_10 = _mm512_fmadd_ps(___x498_10, ___x500, ___x499_10);
                        ___x499_11 = _mm512_fmadd_ps(___x498_11, ___x500, ___x499_11);
                        ___x499_12 = _mm512_fmadd_ps(___x498_12, ___x500, ___x499_12);
                        ___x499_13 = _mm512_fmadd_ps(___x498_13, ___x500, ___x499_13);
                    }
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x499_0);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x499_1);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x499_2);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x499_3);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x499_4);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x499_5);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x499_6);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x499_7);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x499_8);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x499_9);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x499_10);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x499_11);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x499_12);
                    _mm512_store_ps(& ensemble170grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x499_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 33; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble169mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble169mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble169grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 13)][MIN(MAX(k + _input_offset_3, 0), 13)][_input_offset_1_inner] += ensemble169grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble168inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble168grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble168grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble168grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[29] += omp_get_wtime();
    times[30] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble167grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble167grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x493_0 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x493_1 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x493_2 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x493_3 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x493_4 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x493_5 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x493_6 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x493_7 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x493_8 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x493_9 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x493_10 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x493_11 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x493_12 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x493_13 = _mm512_load_ps(& ensemble166inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x492_0 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x492_1 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x492_2 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x492_3 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x492_4 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x492_5 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x492_6 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x492_7 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x492_8 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x492_9 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x492_10 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x492_11 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x492_12 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x492_13 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x494 = _mm512_load_ps(& ensemble166grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x494 = _mm512_fmadd_ps(___x492_0, ___x493_0, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_1, ___x493_1, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_2, ___x493_2, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_3, ___x493_3, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_4, ___x493_4, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_5, ___x493_5, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_6, ___x493_6, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_7, ___x493_7, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_8, ___x493_8, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_9, ___x493_9, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_10, ___x493_10, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_11, ___x493_11, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_12, ___x493_12, ___x494);
                                ___x494 = _mm512_fmadd_ps(___x492_13, ___x493_13, ___x494);
                                _mm512_store_ps(& ensemble166grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x494);
                            }
                        }
                    }
                }
            }
        }
    }
    times[30] += omp_get_wtime();
    times[31] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x489_0 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x489_1 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x489_2 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x489_3 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x489_4 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x489_5 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x489_6 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x489_7 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x489_8 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x489_9 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x489_10 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x489_11 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x489_12 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x489_13 = _mm512_load_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x490_0 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x490_1 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x490_2 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x490_3 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x490_4 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x490_5 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x490_6 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x490_7 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x490_8 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x490_9 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x490_10 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x490_11 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x490_12 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x490_13 = _mm512_set1_ps(ensemble166grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x491 = _mm512_load_ps(& ensemble166weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x489_0 = _mm512_fmadd_ps(___x490_0, ___x491, ___x489_0);
                                ___x489_1 = _mm512_fmadd_ps(___x490_1, ___x491, ___x489_1);
                                ___x489_2 = _mm512_fmadd_ps(___x490_2, ___x491, ___x489_2);
                                ___x489_3 = _mm512_fmadd_ps(___x490_3, ___x491, ___x489_3);
                                ___x489_4 = _mm512_fmadd_ps(___x490_4, ___x491, ___x489_4);
                                ___x489_5 = _mm512_fmadd_ps(___x490_5, ___x491, ___x489_5);
                                ___x489_6 = _mm512_fmadd_ps(___x490_6, ___x491, ___x489_6);
                                ___x489_7 = _mm512_fmadd_ps(___x490_7, ___x491, ___x489_7);
                                ___x489_8 = _mm512_fmadd_ps(___x490_8, ___x491, ___x489_8);
                                ___x489_9 = _mm512_fmadd_ps(___x490_9, ___x491, ___x489_9);
                                ___x489_10 = _mm512_fmadd_ps(___x490_10, ___x491, ___x489_10);
                                ___x489_11 = _mm512_fmadd_ps(___x490_11, ___x491, ___x489_11);
                                ___x489_12 = _mm512_fmadd_ps(___x490_12, ___x491, ___x489_12);
                                ___x489_13 = _mm512_fmadd_ps(___x490_13, ___x491, ___x489_13);
                            }
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x489_0);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x489_1);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x489_2);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x489_3);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x489_4);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x489_5);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x489_6);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x489_7);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x489_8);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x489_9);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x489_10);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x489_11);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x489_12);
                            _mm512_store_ps(& ensemble166grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x489_13);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble165inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] > 0.0) {
                            ensemble165grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble165grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                        } else {
                            ensemble165grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[31] += omp_get_wtime();
    times[32] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble164grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble164grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 33; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x483_0 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x483_1 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x483_2 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x483_3 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x483_4 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x483_5 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x483_6 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x483_7 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x483_8 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x483_9 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x483_10 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x483_11 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x483_12 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x483_13 = _mm512_load_ps(& ensemble163inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x484 = _mm512_load_ps(& ensemble163grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x485_0 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_1 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_2 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_3 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_4 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_5 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_6 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_7 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_8 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_9 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_10 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_11 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_12 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                        __m512 ___x485_13 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                        ___x484 = _mm512_fmadd_ps(___x485_0, ___x483_0, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_1, ___x483_1, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_2, ___x483_2, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_3, ___x483_3, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_4, ___x483_4, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_5, ___x483_5, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_6, ___x483_6, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_7, ___x483_7, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_8, ___x483_8, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_9, ___x483_9, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_10, ___x483_10, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_11, ___x483_11, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_12, ___x483_12, ___x484);
                        ___x484 = _mm512_fmadd_ps(___x485_13, ___x483_13, ___x484);
                        _mm512_store_ps(& ensemble163grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x484);
                    }
                }
            }
        }
    }
    times[32] += omp_get_wtime();
    times[33] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 33; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x480_0 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x480_1 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x480_2 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x480_3 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x480_4 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x480_5 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x480_6 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x480_7 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x480_8 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x480_9 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x480_10 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x480_11 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x480_12 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x480_13 = _mm512_load_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x481_0 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_1 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_2 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_3 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_4 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_5 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_6 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_7 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_8 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_9 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_10 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_11 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_12 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                        __m512 ___x481_13 = _mm512_set1_ps(ensemble163grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                        __m512 ___x482 = _mm512_load_ps(& ensemble163weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x480_0 = _mm512_fmadd_ps(___x481_0, ___x482, ___x480_0);
                        ___x480_1 = _mm512_fmadd_ps(___x481_1, ___x482, ___x480_1);
                        ___x480_2 = _mm512_fmadd_ps(___x481_2, ___x482, ___x480_2);
                        ___x480_3 = _mm512_fmadd_ps(___x481_3, ___x482, ___x480_3);
                        ___x480_4 = _mm512_fmadd_ps(___x481_4, ___x482, ___x480_4);
                        ___x480_5 = _mm512_fmadd_ps(___x481_5, ___x482, ___x480_5);
                        ___x480_6 = _mm512_fmadd_ps(___x481_6, ___x482, ___x480_6);
                        ___x480_7 = _mm512_fmadd_ps(___x481_7, ___x482, ___x480_7);
                        ___x480_8 = _mm512_fmadd_ps(___x481_8, ___x482, ___x480_8);
                        ___x480_9 = _mm512_fmadd_ps(___x481_9, ___x482, ___x480_9);
                        ___x480_10 = _mm512_fmadd_ps(___x481_10, ___x482, ___x480_10);
                        ___x480_11 = _mm512_fmadd_ps(___x481_11, ___x482, ___x480_11);
                        ___x480_12 = _mm512_fmadd_ps(___x481_12, ___x482, ___x480_12);
                        ___x480_13 = _mm512_fmadd_ps(___x481_13, ___x482, ___x480_13);
                    }
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x480_0);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x480_1);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x480_2);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x480_3);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x480_4);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x480_5);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x480_6);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x480_7);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x480_8);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x480_9);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x480_10);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x480_11);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x480_12);
                    _mm512_store_ps(& ensemble163grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x480_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 20; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble162inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble162grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble162grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble162grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[33] += omp_get_wtime();
    times[34] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 20; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble161grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble161grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 10; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x474_0 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x474_1 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x474_2 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x474_3 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x474_4 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x474_5 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x474_6 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x474_7 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x474_8 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x474_9 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x474_10 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x474_11 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x474_12 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x474_13 = _mm512_load_ps(& ensemble160inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x475 = _mm512_load_ps(& ensemble160grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x476_0 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x476_1 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x476_2 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x476_3 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x476_4 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x476_5 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x476_6 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x476_7 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x476_8 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x476_9 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x476_10 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x476_11 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x476_12 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x476_13 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                ___x475 = _mm512_fmadd_ps(___x476_0, ___x474_0, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_1, ___x474_1, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_2, ___x474_2, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_3, ___x474_3, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_4, ___x474_4, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_5, ___x474_5, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_6, ___x474_6, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_7, ___x474_7, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_8, ___x474_8, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_9, ___x474_9, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_10, ___x474_10, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_11, ___x474_11, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_12, ___x474_12, ___x475);
                                ___x475 = _mm512_fmadd_ps(___x476_13, ___x474_13, ___x475);
                                _mm512_store_ps(& ensemble160grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x475);
                            }
                        }
                    }
                }
            }
        }
    }
    times[34] += omp_get_wtime();
    times[35] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 10; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 20; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x471_0 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x471_1 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x471_2 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x471_3 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x471_4 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x471_5 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x471_6 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x471_7 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x471_8 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x471_9 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x471_10 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x471_11 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x471_12 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x471_13 = _mm512_load_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x472 = _mm512_load_ps(& ensemble160weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x473_0 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x473_1 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x473_2 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x473_3 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x473_4 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x473_5 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x473_6 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x473_7 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x473_8 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x473_9 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x473_10 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x473_11 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x473_12 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x473_13 = _mm512_set1_ps(ensemble160grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                ___x471_0 = _mm512_fmadd_ps(___x473_0, ___x472, ___x471_0);
                                ___x471_1 = _mm512_fmadd_ps(___x473_1, ___x472, ___x471_1);
                                ___x471_2 = _mm512_fmadd_ps(___x473_2, ___x472, ___x471_2);
                                ___x471_3 = _mm512_fmadd_ps(___x473_3, ___x472, ___x471_3);
                                ___x471_4 = _mm512_fmadd_ps(___x473_4, ___x472, ___x471_4);
                                ___x471_5 = _mm512_fmadd_ps(___x473_5, ___x472, ___x471_5);
                                ___x471_6 = _mm512_fmadd_ps(___x473_6, ___x472, ___x471_6);
                                ___x471_7 = _mm512_fmadd_ps(___x473_7, ___x472, ___x471_7);
                                ___x471_8 = _mm512_fmadd_ps(___x473_8, ___x472, ___x471_8);
                                ___x471_9 = _mm512_fmadd_ps(___x473_9, ___x472, ___x471_9);
                                ___x471_10 = _mm512_fmadd_ps(___x473_10, ___x472, ___x471_10);
                                ___x471_11 = _mm512_fmadd_ps(___x473_11, ___x472, ___x471_11);
                                ___x471_12 = _mm512_fmadd_ps(___x473_12, ___x472, ___x471_12);
                                ___x471_13 = _mm512_fmadd_ps(___x473_13, ___x472, ___x471_13);
                            }
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x471_0);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x471_1);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x471_2);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x471_3);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x471_4);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x471_5);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x471_6);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x471_7);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x471_8);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x471_9);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x471_10);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x471_11);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x471_12);
                            _mm512_store_ps(& ensemble160grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x471_13);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble159inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] > 0.0) {
                            ensemble159grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble159grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                        } else {
                            ensemble159grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[35] += omp_get_wtime();
    times[36] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble158grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble158grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 33; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x467_0 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x467_1 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x467_2 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x467_3 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x467_4 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x467_5 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x467_6 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x467_7 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x467_8 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x467_9 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x467_10 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x467_11 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x467_12 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x467_13 = _mm512_load_ps(& ensemble157inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x465_0 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_1 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_2 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_3 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_4 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_5 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_6 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_7 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_8 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_9 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_10 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_11 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_12 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x465_13 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        __m512 ___x466 = _mm512_load_ps(& ensemble157grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x466 = _mm512_fmadd_ps(___x465_0, ___x467_0, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_1, ___x467_1, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_2, ___x467_2, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_3, ___x467_3, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_4, ___x467_4, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_5, ___x467_5, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_6, ___x467_6, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_7, ___x467_7, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_8, ___x467_8, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_9, ___x467_9, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_10, ___x467_10, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_11, ___x467_11, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_12, ___x467_12, ___x466);
                        ___x466 = _mm512_fmadd_ps(___x465_13, ___x467_13, ___x466);
                        _mm512_store_ps(& ensemble157grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x466);
                    }
                }
            }
        }
    }
    times[36] += omp_get_wtime();
    times[37] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 33; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x462_0 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x462_1 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x462_2 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x462_3 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x462_4 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x462_5 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x462_6 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x462_7 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x462_8 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x462_9 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x462_10 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x462_11 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x462_12 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x462_13 = _mm512_load_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x463 = _mm512_load_ps(& ensemble157weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x464_0 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_1 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_2 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_3 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_4 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_5 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_6 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_7 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_8 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_9 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_10 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_11 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_12 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x464_13 = _mm512_set1_ps(ensemble157grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        ___x462_0 = _mm512_fmadd_ps(___x464_0, ___x463, ___x462_0);
                        ___x462_1 = _mm512_fmadd_ps(___x464_1, ___x463, ___x462_1);
                        ___x462_2 = _mm512_fmadd_ps(___x464_2, ___x463, ___x462_2);
                        ___x462_3 = _mm512_fmadd_ps(___x464_3, ___x463, ___x462_3);
                        ___x462_4 = _mm512_fmadd_ps(___x464_4, ___x463, ___x462_4);
                        ___x462_5 = _mm512_fmadd_ps(___x464_5, ___x463, ___x462_5);
                        ___x462_6 = _mm512_fmadd_ps(___x464_6, ___x463, ___x462_6);
                        ___x462_7 = _mm512_fmadd_ps(___x464_7, ___x463, ___x462_7);
                        ___x462_8 = _mm512_fmadd_ps(___x464_8, ___x463, ___x462_8);
                        ___x462_9 = _mm512_fmadd_ps(___x464_9, ___x463, ___x462_9);
                        ___x462_10 = _mm512_fmadd_ps(___x464_10, ___x463, ___x462_10);
                        ___x462_11 = _mm512_fmadd_ps(___x464_11, ___x463, ___x462_11);
                        ___x462_12 = _mm512_fmadd_ps(___x464_12, ___x463, ___x462_12);
                        ___x462_13 = _mm512_fmadd_ps(___x464_13, ___x463, ___x462_13);
                    }
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x462_0);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x462_1);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x462_2);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x462_3);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x462_4);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x462_5);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x462_6);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x462_7);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x462_8);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x462_9);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x462_10);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x462_11);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x462_12);
                    _mm512_store_ps(& ensemble157grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x462_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble156inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble156grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble156grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble156grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[37] += omp_get_wtime();
    times[38] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble155grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble155grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 33; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x458_0 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x458_1 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x458_2 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x458_3 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x458_4 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x458_5 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x458_6 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x458_7 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x458_8 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x458_9 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x458_10 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x458_11 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x458_12 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x458_13 = _mm512_load_ps(& ensemble154inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x456_0 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x456_1 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x456_2 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x456_3 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x456_4 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x456_5 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x456_6 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x456_7 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x456_8 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x456_9 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x456_10 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x456_11 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x456_12 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x456_13 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x457 = _mm512_load_ps(& ensemble154grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x457 = _mm512_fmadd_ps(___x456_0, ___x458_0, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_1, ___x458_1, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_2, ___x458_2, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_3, ___x458_3, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_4, ___x458_4, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_5, ___x458_5, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_6, ___x458_6, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_7, ___x458_7, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_8, ___x458_8, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_9, ___x458_9, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_10, ___x458_10, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_11, ___x458_11, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_12, ___x458_12, ___x457);
                        ___x457 = _mm512_fmadd_ps(___x456_13, ___x458_13, ___x457);
                        _mm512_store_ps(& ensemble154grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x457);
                    }
                }
            }
        }
    }
    times[38] += omp_get_wtime();
    times[39] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 33; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x455_0 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x455_1 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x455_2 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x455_3 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x455_4 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x455_5 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x455_6 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x455_7 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x455_8 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x455_9 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x455_10 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x455_11 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x455_12 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x455_13 = _mm512_load_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x453_0 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x453_1 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x453_2 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x453_3 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x453_4 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x453_5 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x453_6 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x453_7 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x453_8 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x453_9 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x453_10 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x453_11 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x453_12 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x453_13 = _mm512_set1_ps(ensemble154grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x454 = _mm512_load_ps(& ensemble154weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x455_0 = _mm512_fmadd_ps(___x453_0, ___x454, ___x455_0);
                        ___x455_1 = _mm512_fmadd_ps(___x453_1, ___x454, ___x455_1);
                        ___x455_2 = _mm512_fmadd_ps(___x453_2, ___x454, ___x455_2);
                        ___x455_3 = _mm512_fmadd_ps(___x453_3, ___x454, ___x455_3);
                        ___x455_4 = _mm512_fmadd_ps(___x453_4, ___x454, ___x455_4);
                        ___x455_5 = _mm512_fmadd_ps(___x453_5, ___x454, ___x455_5);
                        ___x455_6 = _mm512_fmadd_ps(___x453_6, ___x454, ___x455_6);
                        ___x455_7 = _mm512_fmadd_ps(___x453_7, ___x454, ___x455_7);
                        ___x455_8 = _mm512_fmadd_ps(___x453_8, ___x454, ___x455_8);
                        ___x455_9 = _mm512_fmadd_ps(___x453_9, ___x454, ___x455_9);
                        ___x455_10 = _mm512_fmadd_ps(___x453_10, ___x454, ___x455_10);
                        ___x455_11 = _mm512_fmadd_ps(___x453_11, ___x454, ___x455_11);
                        ___x455_12 = _mm512_fmadd_ps(___x453_12, ___x454, ___x455_12);
                        ___x455_13 = _mm512_fmadd_ps(___x453_13, ___x454, ___x455_13);
                    }
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x455_0);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x455_1);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x455_2);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x455_3);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x455_4);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x455_5);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x455_6);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x455_7);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x455_8);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x455_9);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x455_10);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x455_11);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x455_12);
                    _mm512_store_ps(& ensemble154grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x455_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                ensemble153grad_bias[_neuron_index_0][_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble153grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner];
            }
        }
    }
    
    #pragma omp parallel for simd
    for (int x = 0; x < 1008; ++x) {
      float sum = _ensemble153grad_bias[x];
      #pragma unroll
      for (int i = 1; i < 128; ++ i) {
        sum += _ensemble153grad_bias[i * 1008 + x];
      }
      _ensemble153grad_bias[x] = sum;
    }
    times[39] += omp_get_wtime();
    times[40] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 64; __unique_loopvar0_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
                __m512 ___x447_0 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][0]);
                __m512 ___x447_1 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][0]);
                __m512 ___x447_2 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][0]);
                __m512 ___x447_3 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][0]);
                __m512 ___x447_4 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][0]);
                __m512 ___x447_5 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][0]);
                __m512 ___x447_6 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][0]);
                __m512 ___x447_7 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][0]);
                __m512 ___x447_8 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][0]);
                __m512 ___x447_9 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][0]);
                __m512 ___x447_10 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][0]);
                __m512 ___x447_11 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][0]);
                __m512 ___x447_12 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][0]);
                __m512 ___x447_13 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][0]);
                __m512 ___x447_14 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][0]);
                __m512 ___x447_15 = _mm512_load_ps(& ensemble152inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][0]);
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x448_0 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_1 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_2 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_3 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_4 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_5 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_6 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_7 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_8 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_9 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_10 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_11 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_12 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_13 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_14 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x448_15 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x449 = _mm512_load_ps(& ensemble152grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][_neuron_index_1_inner][0]);
                    ___x449 = _mm512_fmadd_ps(___x448_0, ___x447_0, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_1, ___x447_1, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_2, ___x447_2, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_3, ___x447_3, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_4, ___x447_4, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_5, ___x447_5, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_6, ___x447_6, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_7, ___x447_7, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_8, ___x447_8, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_9, ___x447_9, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_10, ___x447_10, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_11, ___x447_11, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_12, ___x447_12, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_13, ___x447_13, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_14, ___x447_14, ___x449);
                    ___x449 = _mm512_fmadd_ps(___x448_15, ___x447_15, ___x449);
                    _mm512_store_ps(& ensemble152grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][_neuron_index_1_inner][0], ___x449);
                }
            }
        }
    }
    times[40] += omp_get_wtime();
    times[41] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 64; __unique_loopvar0_outer += 1) {
            __m512 ___x445_0 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][0]);
            __m512 ___x445_1 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][0]);
            __m512 ___x445_2 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][0]);
            __m512 ___x445_3 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][0]);
            __m512 ___x445_4 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][0]);
            __m512 ___x445_5 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][0]);
            __m512 ___x445_6 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][0]);
            __m512 ___x445_7 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][0]);
            __m512 ___x445_8 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][0]);
            __m512 ___x445_9 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][0]);
            __m512 ___x445_10 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][0]);
            __m512 ___x445_11 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][0]);
            __m512 ___x445_12 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][0]);
            __m512 ___x445_13 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][0]);
            __m512 ___x445_14 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][0]);
            __m512 ___x445_15 = _mm512_load_ps(& ensemble152grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][0]);
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x444 = _mm512_load_ps(& ensemble152weights[_neuron_index_1_outer][__unique_loopvar0_outer][_neuron_index_1_inner][0]);
                    __m512 ___x446_0 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_1 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_2 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_3 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_4 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_5 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_6 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_7 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_8 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_9 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_10 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_11 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_12 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_13 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_14 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x446_15 = _mm512_set1_ps(ensemble152grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    ___x445_0 = _mm512_fmadd_ps(___x446_0, ___x444, ___x445_0);
                    ___x445_1 = _mm512_fmadd_ps(___x446_1, ___x444, ___x445_1);
                    ___x445_2 = _mm512_fmadd_ps(___x446_2, ___x444, ___x445_2);
                    ___x445_3 = _mm512_fmadd_ps(___x446_3, ___x444, ___x445_3);
                    ___x445_4 = _mm512_fmadd_ps(___x446_4, ___x444, ___x445_4);
                    ___x445_5 = _mm512_fmadd_ps(___x446_5, ___x444, ___x445_5);
                    ___x445_6 = _mm512_fmadd_ps(___x446_6, ___x444, ___x445_6);
                    ___x445_7 = _mm512_fmadd_ps(___x446_7, ___x444, ___x445_7);
                    ___x445_8 = _mm512_fmadd_ps(___x446_8, ___x444, ___x445_8);
                    ___x445_9 = _mm512_fmadd_ps(___x446_9, ___x444, ___x445_9);
                    ___x445_10 = _mm512_fmadd_ps(___x446_10, ___x444, ___x445_10);
                    ___x445_11 = _mm512_fmadd_ps(___x446_11, ___x444, ___x445_11);
                    ___x445_12 = _mm512_fmadd_ps(___x446_12, ___x444, ___x445_12);
                    ___x445_13 = _mm512_fmadd_ps(___x446_13, ___x444, ___x445_13);
                    ___x445_14 = _mm512_fmadd_ps(___x446_14, ___x444, ___x445_14);
                    ___x445_15 = _mm512_fmadd_ps(___x446_15, ___x444, ___x445_15);
                }
            }
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][0], ___x445_0);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][0], ___x445_1);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][0], ___x445_2);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][0], ___x445_3);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][0], ___x445_4);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][0], ___x445_5);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][0], ___x445_6);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][0], ___x445_7);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][0], ___x445_8);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][0], ___x445_9);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][0], ___x445_10);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][0], ___x445_11);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][0], ___x445_12);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][0], ___x445_13);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][0], ___x445_14);
            _mm512_store_ps(& ensemble152grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][0], ___x445_15);
        }
    }
    times[41] += omp_get_wtime();
    times[42] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 64; _neuron_index_1_outer += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                if (ensemble151inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] > 0.0) {
                    ensemble151grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = ensemble151grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner];
                } else {
                    ensemble151grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = 0.0;
                };
            }
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                ensemble150grad_bias[_neuron_index_0][_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble150grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner];
            }
        }
    }
    
    #pragma omp parallel for simd
    for (int x = 0; x < 1024; ++x) {
      float sum = _ensemble150grad_bias[x];
      #pragma unroll
      for (int i = 1; i < 128; ++ i) {
        sum += _ensemble150grad_bias[i * 1024 + x];
      }
      _ensemble150grad_bias[x] = sum;
    }
    times[42] += omp_get_wtime();
    times[43] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 64; _neuron_index_1_outer += 1) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 8; __unique_loopvar0_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x440_0 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_1 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_2 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_3 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_4 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_5 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_6 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_7 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_8 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_9 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_10 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_11 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_12 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_13 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_14 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x440_15 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    for (int __unique_loopvar1 = 0; __unique_loopvar1 < 4; __unique_loopvar1 += 1) {
                        for (int __unique_loopvar2 = 0; __unique_loopvar2 < 4; __unique_loopvar2 += 1) {
                            __m512 ___x438 = _mm512_load_ps(& ensemble149grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][_neuron_index_1_inner][0]);
                            __m512 ___x439_0 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_1 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_2 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_3 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_4 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_5 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_6 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_7 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_8 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_9 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_10 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_11 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_12 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_13 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_14 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x439_15 = _mm512_load_ps(& ensemble149inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            ___x438 = _mm512_fmadd_ps(___x440_0, ___x439_0, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_1, ___x439_1, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_2, ___x439_2, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_3, ___x439_3, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_4, ___x439_4, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_5, ___x439_5, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_6, ___x439_6, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_7, ___x439_7, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_8, ___x439_8, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_9, ___x439_9, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_10, ___x439_10, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_11, ___x439_11, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_12, ___x439_12, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_13, ___x439_13, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_14, ___x439_14, ___x438);
                            ___x438 = _mm512_fmadd_ps(___x440_15, ___x439_15, ___x438);
                            _mm512_store_ps(& ensemble149grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][_neuron_index_1_inner][0], ___x438);
                        }
                    }
                }
            }
        }
    }
    times[43] += omp_get_wtime();
    times[44] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 8; __unique_loopvar0_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 64; _neuron_index_1_outer += 1) {
                for (int __unique_loopvar1 = 0; __unique_loopvar1 < 4; __unique_loopvar1 += 1) {
                    for (int __unique_loopvar2 = 0; __unique_loopvar2 < 4; __unique_loopvar2 += 1) {
                        __m512 ___x435_0 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_1 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_2 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_3 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_4 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_5 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_6 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_7 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_8 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_9 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_10 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_11 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_12 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_13 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_14 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x435_15 = _mm512_load_ps(& ensemble149grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                            __m512 ___x436_0 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_1 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_2 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_3 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_4 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_5 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_6 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_7 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_8 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_9 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_10 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_11 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_12 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_13 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_14 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x436_15 = _mm512_set1_ps(ensemble149grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x437 = _mm512_load_ps(& ensemble149weights[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][_neuron_index_1_inner][0]);
                            ___x435_0 = _mm512_fmadd_ps(___x436_0, ___x437, ___x435_0);
                            ___x435_1 = _mm512_fmadd_ps(___x436_1, ___x437, ___x435_1);
                            ___x435_2 = _mm512_fmadd_ps(___x436_2, ___x437, ___x435_2);
                            ___x435_3 = _mm512_fmadd_ps(___x436_3, ___x437, ___x435_3);
                            ___x435_4 = _mm512_fmadd_ps(___x436_4, ___x437, ___x435_4);
                            ___x435_5 = _mm512_fmadd_ps(___x436_5, ___x437, ___x435_5);
                            ___x435_6 = _mm512_fmadd_ps(___x436_6, ___x437, ___x435_6);
                            ___x435_7 = _mm512_fmadd_ps(___x436_7, ___x437, ___x435_7);
                            ___x435_8 = _mm512_fmadd_ps(___x436_8, ___x437, ___x435_8);
                            ___x435_9 = _mm512_fmadd_ps(___x436_9, ___x437, ___x435_9);
                            ___x435_10 = _mm512_fmadd_ps(___x436_10, ___x437, ___x435_10);
                            ___x435_11 = _mm512_fmadd_ps(___x436_11, ___x437, ___x435_11);
                            ___x435_12 = _mm512_fmadd_ps(___x436_12, ___x437, ___x435_12);
                            ___x435_13 = _mm512_fmadd_ps(___x436_13, ___x437, ___x435_13);
                            ___x435_14 = _mm512_fmadd_ps(___x436_14, ___x437, ___x435_14);
                            ___x435_15 = _mm512_fmadd_ps(___x436_15, ___x437, ___x435_15);
                        }
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_0);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_1);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_2);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_3);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_4);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_5);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_6);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_7);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_8);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_9);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_10);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_11);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_12);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_13);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_14);
                        _mm512_store_ps(& ensemble149grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x435_15);
                    }
                }
            }
        }
    }
    times[44] += omp_get_wtime();
    times[45] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble148inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble148grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble148grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble148grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[45] += omp_get_wtime();
    times[46] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble147grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble147grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 33; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    __m512 ___x431_0 = _mm512_load_ps(& ensemble146inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x431_1 = _mm512_load_ps(& ensemble146inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x431_2 = _mm512_load_ps(& ensemble146inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x431_3 = _mm512_load_ps(& ensemble146inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x429_0 = _mm512_set1_ps(ensemble146grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x429_1 = _mm512_set1_ps(ensemble146grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x429_2 = _mm512_set1_ps(ensemble146grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x429_3 = _mm512_set1_ps(ensemble146grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x430 = _mm512_load_ps(& ensemble146grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x430 = _mm512_fmadd_ps(___x429_0, ___x431_0, ___x430);
                        ___x430 = _mm512_fmadd_ps(___x429_1, ___x431_1, ___x430);
                        ___x430 = _mm512_fmadd_ps(___x429_2, ___x431_2, ___x430);
                        ___x430 = _mm512_fmadd_ps(___x429_3, ___x431_3, ___x430);
                        _mm512_store_ps(& ensemble146grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x430);
                    }
                }
            }
        }
    }
    times[46] += omp_get_wtime();
    times[47] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 33; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    __m512 ___x428_0 = _mm512_load_ps(& ensemble146grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x428_1 = _mm512_load_ps(& ensemble146grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x428_2 = _mm512_load_ps(& ensemble146grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x428_3 = _mm512_load_ps(& ensemble146grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x426_0 = _mm512_set1_ps(ensemble146grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x426_1 = _mm512_set1_ps(ensemble146grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x426_2 = _mm512_set1_ps(ensemble146grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x426_3 = _mm512_set1_ps(ensemble146grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x427 = _mm512_load_ps(& ensemble146weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x428_0 = _mm512_fmadd_ps(___x426_0, ___x427, ___x428_0);
                        ___x428_1 = _mm512_fmadd_ps(___x426_1, ___x427, ___x428_1);
                        ___x428_2 = _mm512_fmadd_ps(___x426_2, ___x427, ___x428_2);
                        ___x428_3 = _mm512_fmadd_ps(___x426_3, ___x427, ___x428_3);
                    }
                    _mm512_store_ps(& ensemble146grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x428_0);
                    _mm512_store_ps(& ensemble146grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x428_1);
                    _mm512_store_ps(& ensemble146grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x428_2);
                    _mm512_store_ps(& ensemble146grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x428_3);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 33; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 3 - 0;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 3 - 0;
                        int _input_offset_3 = in_x;
                        float val = ensemble145grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / ensemble145kernel[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                ensemble145grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner] += val;
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 7; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x419 = _mm512_load_ps(& ensemble144grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble144grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x419);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 18; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x420 = _mm512_load_ps(& ensemble144grad[_neuron_index_0][(_neuron_index_1_outer + 7)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble144grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x420);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x421 = _mm512_load_ps(& ensemble144grad[_neuron_index_0][(_neuron_index_1_outer + 25)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble144grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x421);
                }
            }
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x422 = _mm512_load_ps(& ensemble144grad[_neuron_index_0][(_neuron_index_1_outer + 29)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble144grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x422);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble143inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble143grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble143grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble143grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[47] += omp_get_wtime();
    times[48] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble142grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble142grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x413_0 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x413_1 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x413_2 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x413_3 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x413_4 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x413_5 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x413_6 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x413_7 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x413_8 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x413_9 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x413_10 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x413_11 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x413_12 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x413_13 = _mm512_load_ps(& ensemble141inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x412_0 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x412_1 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x412_2 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x412_3 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x412_4 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x412_5 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x412_6 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x412_7 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x412_8 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x412_9 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x412_10 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x412_11 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x412_12 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x412_13 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x414 = _mm512_load_ps(& ensemble141grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x414 = _mm512_fmadd_ps(___x412_0, ___x413_0, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_1, ___x413_1, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_2, ___x413_2, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_3, ___x413_3, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_4, ___x413_4, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_5, ___x413_5, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_6, ___x413_6, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_7, ___x413_7, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_8, ___x413_8, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_9, ___x413_9, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_10, ___x413_10, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_11, ___x413_11, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_12, ___x413_12, ___x414);
                        ___x414 = _mm512_fmadd_ps(___x412_13, ___x413_13, ___x414);
                        _mm512_store_ps(& ensemble141grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x414);
                    }
                }
            }
        }
    }
    times[48] += omp_get_wtime();
    times[49] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x410_0 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x410_1 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x410_2 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x410_3 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x410_4 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x410_5 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x410_6 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x410_7 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x410_8 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x410_9 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x410_10 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x410_11 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x410_12 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x410_13 = _mm512_load_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x409_0 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x409_1 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x409_2 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x409_3 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x409_4 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x409_5 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x409_6 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x409_7 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x409_8 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x409_9 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x409_10 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x409_11 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x409_12 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x409_13 = _mm512_set1_ps(ensemble141grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x411 = _mm512_load_ps(& ensemble141weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x410_0 = _mm512_fmadd_ps(___x409_0, ___x411, ___x410_0);
                        ___x410_1 = _mm512_fmadd_ps(___x409_1, ___x411, ___x410_1);
                        ___x410_2 = _mm512_fmadd_ps(___x409_2, ___x411, ___x410_2);
                        ___x410_3 = _mm512_fmadd_ps(___x409_3, ___x411, ___x410_3);
                        ___x410_4 = _mm512_fmadd_ps(___x409_4, ___x411, ___x410_4);
                        ___x410_5 = _mm512_fmadd_ps(___x409_5, ___x411, ___x410_5);
                        ___x410_6 = _mm512_fmadd_ps(___x409_6, ___x411, ___x410_6);
                        ___x410_7 = _mm512_fmadd_ps(___x409_7, ___x411, ___x410_7);
                        ___x410_8 = _mm512_fmadd_ps(___x409_8, ___x411, ___x410_8);
                        ___x410_9 = _mm512_fmadd_ps(___x409_9, ___x411, ___x410_9);
                        ___x410_10 = _mm512_fmadd_ps(___x409_10, ___x411, ___x410_10);
                        ___x410_11 = _mm512_fmadd_ps(___x409_11, ___x411, ___x410_11);
                        ___x410_12 = _mm512_fmadd_ps(___x409_12, ___x411, ___x410_12);
                        ___x410_13 = _mm512_fmadd_ps(___x409_13, ___x411, ___x410_13);
                    }
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x410_0);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x410_1);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x410_2);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x410_3);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x410_4);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x410_5);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x410_6);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x410_7);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x410_8);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x410_9);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x410_10);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x410_11);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x410_12);
                    _mm512_store_ps(& ensemble141grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x410_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 32; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble140mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble140mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble140grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 13)][MIN(MAX(k + _input_offset_3, 0), 13)][_input_offset_1_inner] += ensemble140grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble139inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble139grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble139grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble139grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[49] += omp_get_wtime();
    times[50] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble138grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble138grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x405_0 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x405_1 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x405_2 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x405_3 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x405_4 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x405_5 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x405_6 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x405_7 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x405_8 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x405_9 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x405_10 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x405_11 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x405_12 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x405_13 = _mm512_load_ps(& ensemble137inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x403 = _mm512_load_ps(& ensemble137grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x404_0 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x404_1 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x404_2 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x404_3 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x404_4 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x404_5 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x404_6 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x404_7 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x404_8 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x404_9 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x404_10 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x404_11 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x404_12 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x404_13 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                ___x403 = _mm512_fmadd_ps(___x404_0, ___x405_0, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_1, ___x405_1, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_2, ___x405_2, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_3, ___x405_3, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_4, ___x405_4, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_5, ___x405_5, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_6, ___x405_6, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_7, ___x405_7, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_8, ___x405_8, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_9, ___x405_9, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_10, ___x405_10, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_11, ___x405_11, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_12, ___x405_12, ___x403);
                                ___x403 = _mm512_fmadd_ps(___x404_13, ___x405_13, ___x403);
                                _mm512_store_ps(& ensemble137grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x403);
                            }
                        }
                    }
                }
            }
        }
    }
    times[50] += omp_get_wtime();
    times[51] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x400_0 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x400_1 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x400_2 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x400_3 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x400_4 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x400_5 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x400_6 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x400_7 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x400_8 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x400_9 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x400_10 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x400_11 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x400_12 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x400_13 = _mm512_load_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x401_0 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x401_1 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x401_2 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x401_3 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x401_4 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x401_5 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x401_6 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x401_7 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x401_8 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x401_9 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x401_10 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x401_11 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x401_12 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x401_13 = _mm512_set1_ps(ensemble137grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x402 = _mm512_load_ps(& ensemble137weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x400_0 = _mm512_fmadd_ps(___x401_0, ___x402, ___x400_0);
                                ___x400_1 = _mm512_fmadd_ps(___x401_1, ___x402, ___x400_1);
                                ___x400_2 = _mm512_fmadd_ps(___x401_2, ___x402, ___x400_2);
                                ___x400_3 = _mm512_fmadd_ps(___x401_3, ___x402, ___x400_3);
                                ___x400_4 = _mm512_fmadd_ps(___x401_4, ___x402, ___x400_4);
                                ___x400_5 = _mm512_fmadd_ps(___x401_5, ___x402, ___x400_5);
                                ___x400_6 = _mm512_fmadd_ps(___x401_6, ___x402, ___x400_6);
                                ___x400_7 = _mm512_fmadd_ps(___x401_7, ___x402, ___x400_7);
                                ___x400_8 = _mm512_fmadd_ps(___x401_8, ___x402, ___x400_8);
                                ___x400_9 = _mm512_fmadd_ps(___x401_9, ___x402, ___x400_9);
                                ___x400_10 = _mm512_fmadd_ps(___x401_10, ___x402, ___x400_10);
                                ___x400_11 = _mm512_fmadd_ps(___x401_11, ___x402, ___x400_11);
                                ___x400_12 = _mm512_fmadd_ps(___x401_12, ___x402, ___x400_12);
                                ___x400_13 = _mm512_fmadd_ps(___x401_13, ___x402, ___x400_13);
                            }
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x400_0);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x400_1);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x400_2);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x400_3);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x400_4);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x400_5);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x400_6);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x400_7);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x400_8);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x400_9);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x400_10);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x400_11);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x400_12);
                            _mm512_store_ps(& ensemble137grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x400_13);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble136inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] > 0.0) {
                            ensemble136grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble136grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                        } else {
                            ensemble136grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[51] += omp_get_wtime();
    times[52] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble135grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble135grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x394_0 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x394_1 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x394_2 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x394_3 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x394_4 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x394_5 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x394_6 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x394_7 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x394_8 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x394_9 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x394_10 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x394_11 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x394_12 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x394_13 = _mm512_load_ps(& ensemble134inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x395 = _mm512_load_ps(& ensemble134grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x396_0 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_1 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_2 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_3 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_4 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_5 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_6 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_7 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_8 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_9 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_10 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_11 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_12 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                        __m512 ___x396_13 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                        ___x395 = _mm512_fmadd_ps(___x396_0, ___x394_0, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_1, ___x394_1, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_2, ___x394_2, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_3, ___x394_3, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_4, ___x394_4, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_5, ___x394_5, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_6, ___x394_6, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_7, ___x394_7, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_8, ___x394_8, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_9, ___x394_9, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_10, ___x394_10, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_11, ___x394_11, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_12, ___x394_12, ___x395);
                        ___x395 = _mm512_fmadd_ps(___x396_13, ___x394_13, ___x395);
                        _mm512_store_ps(& ensemble134grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x395);
                    }
                }
            }
        }
    }
    times[52] += omp_get_wtime();
    times[53] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x392_0 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x392_1 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x392_2 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x392_3 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x392_4 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x392_5 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x392_6 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x392_7 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x392_8 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x392_9 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x392_10 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x392_11 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x392_12 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x392_13 = _mm512_load_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x391 = _mm512_load_ps(& ensemble134weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x393_0 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_1 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_2 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_3 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_4 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_5 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_6 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_7 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_8 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_9 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_10 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_11 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_12 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                        __m512 ___x393_13 = _mm512_set1_ps(ensemble134grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                        ___x392_0 = _mm512_fmadd_ps(___x393_0, ___x391, ___x392_0);
                        ___x392_1 = _mm512_fmadd_ps(___x393_1, ___x391, ___x392_1);
                        ___x392_2 = _mm512_fmadd_ps(___x393_2, ___x391, ___x392_2);
                        ___x392_3 = _mm512_fmadd_ps(___x393_3, ___x391, ___x392_3);
                        ___x392_4 = _mm512_fmadd_ps(___x393_4, ___x391, ___x392_4);
                        ___x392_5 = _mm512_fmadd_ps(___x393_5, ___x391, ___x392_5);
                        ___x392_6 = _mm512_fmadd_ps(___x393_6, ___x391, ___x392_6);
                        ___x392_7 = _mm512_fmadd_ps(___x393_7, ___x391, ___x392_7);
                        ___x392_8 = _mm512_fmadd_ps(___x393_8, ___x391, ___x392_8);
                        ___x392_9 = _mm512_fmadd_ps(___x393_9, ___x391, ___x392_9);
                        ___x392_10 = _mm512_fmadd_ps(___x393_10, ___x391, ___x392_10);
                        ___x392_11 = _mm512_fmadd_ps(___x393_11, ___x391, ___x392_11);
                        ___x392_12 = _mm512_fmadd_ps(___x393_12, ___x391, ___x392_12);
                        ___x392_13 = _mm512_fmadd_ps(___x393_13, ___x391, ___x392_13);
                    }
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x392_0);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x392_1);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x392_2);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x392_3);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x392_4);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x392_5);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x392_6);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x392_7);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x392_8);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x392_9);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x392_10);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x392_11);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x392_12);
                    _mm512_store_ps(& ensemble134grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x392_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 18; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble133inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble133grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble133grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble133grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[53] += omp_get_wtime();
    times[54] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 18; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble132grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble132grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 9; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x386_0 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x386_1 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x386_2 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x386_3 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x386_4 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x386_5 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x386_6 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x386_7 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x386_8 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x386_9 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x386_10 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x386_11 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x386_12 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x386_13 = _mm512_load_ps(& ensemble131inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x385_0 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x385_1 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x385_2 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x385_3 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x385_4 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x385_5 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x385_6 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x385_7 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x385_8 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x385_9 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x385_10 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x385_11 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x385_12 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x385_13 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x387 = _mm512_load_ps(& ensemble131grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x387 = _mm512_fmadd_ps(___x385_0, ___x386_0, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_1, ___x386_1, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_2, ___x386_2, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_3, ___x386_3, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_4, ___x386_4, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_5, ___x386_5, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_6, ___x386_6, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_7, ___x386_7, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_8, ___x386_8, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_9, ___x386_9, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_10, ___x386_10, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_11, ___x386_11, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_12, ___x386_12, ___x387);
                                ___x387 = _mm512_fmadd_ps(___x385_13, ___x386_13, ___x387);
                                _mm512_store_ps(& ensemble131grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x387);
                            }
                        }
                    }
                }
            }
        }
    }
    times[54] += omp_get_wtime();
    times[55] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 9; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 18; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x382_0 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x382_1 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x382_2 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x382_3 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x382_4 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x382_5 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x382_6 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x382_7 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x382_8 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x382_9 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x382_10 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x382_11 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x382_12 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x382_13 = _mm512_load_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x383 = _mm512_load_ps(& ensemble131weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x384_0 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x384_1 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x384_2 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x384_3 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x384_4 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x384_5 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x384_6 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x384_7 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x384_8 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x384_9 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x384_10 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x384_11 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x384_12 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x384_13 = _mm512_set1_ps(ensemble131grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                ___x382_0 = _mm512_fmadd_ps(___x384_0, ___x383, ___x382_0);
                                ___x382_1 = _mm512_fmadd_ps(___x384_1, ___x383, ___x382_1);
                                ___x382_2 = _mm512_fmadd_ps(___x384_2, ___x383, ___x382_2);
                                ___x382_3 = _mm512_fmadd_ps(___x384_3, ___x383, ___x382_3);
                                ___x382_4 = _mm512_fmadd_ps(___x384_4, ___x383, ___x382_4);
                                ___x382_5 = _mm512_fmadd_ps(___x384_5, ___x383, ___x382_5);
                                ___x382_6 = _mm512_fmadd_ps(___x384_6, ___x383, ___x382_6);
                                ___x382_7 = _mm512_fmadd_ps(___x384_7, ___x383, ___x382_7);
                                ___x382_8 = _mm512_fmadd_ps(___x384_8, ___x383, ___x382_8);
                                ___x382_9 = _mm512_fmadd_ps(___x384_9, ___x383, ___x382_9);
                                ___x382_10 = _mm512_fmadd_ps(___x384_10, ___x383, ___x382_10);
                                ___x382_11 = _mm512_fmadd_ps(___x384_11, ___x383, ___x382_11);
                                ___x382_12 = _mm512_fmadd_ps(___x384_12, ___x383, ___x382_12);
                                ___x382_13 = _mm512_fmadd_ps(___x384_13, ___x383, ___x382_13);
                            }
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x382_0);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x382_1);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x382_2);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x382_3);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x382_4);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x382_5);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x382_6);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x382_7);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x382_8);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x382_9);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x382_10);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x382_11);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x382_12);
                            _mm512_store_ps(& ensemble131grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x382_13);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 9; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble130inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] > 0.0) {
                            ensemble130grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble130grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                        } else {
                            ensemble130grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[55] += omp_get_wtime();
    times[56] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 9; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble129grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble129grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x376_0 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x376_1 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x376_2 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x376_3 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x376_4 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x376_5 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x376_6 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x376_7 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x376_8 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x376_9 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x376_10 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x376_11 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x376_12 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x376_13 = _mm512_load_ps(& ensemble128inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x377_0 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_1 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_2 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_3 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_4 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_5 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_6 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_7 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_8 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_9 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_10 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_11 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_12 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x377_13 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        __m512 ___x378 = _mm512_load_ps(& ensemble128grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x378 = _mm512_fmadd_ps(___x377_0, ___x376_0, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_1, ___x376_1, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_2, ___x376_2, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_3, ___x376_3, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_4, ___x376_4, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_5, ___x376_5, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_6, ___x376_6, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_7, ___x376_7, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_8, ___x376_8, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_9, ___x376_9, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_10, ___x376_10, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_11, ___x376_11, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_12, ___x376_12, ___x378);
                        ___x378 = _mm512_fmadd_ps(___x377_13, ___x376_13, ___x378);
                        _mm512_store_ps(& ensemble128grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x378);
                    }
                }
            }
        }
    }
    times[56] += omp_get_wtime();
    times[57] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 9; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x375_0 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x375_1 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x375_2 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x375_3 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x375_4 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x375_5 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x375_6 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x375_7 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x375_8 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x375_9 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x375_10 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x375_11 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x375_12 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x375_13 = _mm512_load_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x373 = _mm512_load_ps(& ensemble128weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x374_0 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_1 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_2 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_3 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_4 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_5 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_6 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_7 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_8 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_9 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_10 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_11 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_12 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x374_13 = _mm512_set1_ps(ensemble128grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        ___x375_0 = _mm512_fmadd_ps(___x374_0, ___x373, ___x375_0);
                        ___x375_1 = _mm512_fmadd_ps(___x374_1, ___x373, ___x375_1);
                        ___x375_2 = _mm512_fmadd_ps(___x374_2, ___x373, ___x375_2);
                        ___x375_3 = _mm512_fmadd_ps(___x374_3, ___x373, ___x375_3);
                        ___x375_4 = _mm512_fmadd_ps(___x374_4, ___x373, ___x375_4);
                        ___x375_5 = _mm512_fmadd_ps(___x374_5, ___x373, ___x375_5);
                        ___x375_6 = _mm512_fmadd_ps(___x374_6, ___x373, ___x375_6);
                        ___x375_7 = _mm512_fmadd_ps(___x374_7, ___x373, ___x375_7);
                        ___x375_8 = _mm512_fmadd_ps(___x374_8, ___x373, ___x375_8);
                        ___x375_9 = _mm512_fmadd_ps(___x374_9, ___x373, ___x375_9);
                        ___x375_10 = _mm512_fmadd_ps(___x374_10, ___x373, ___x375_10);
                        ___x375_11 = _mm512_fmadd_ps(___x374_11, ___x373, ___x375_11);
                        ___x375_12 = _mm512_fmadd_ps(___x374_12, ___x373, ___x375_12);
                        ___x375_13 = _mm512_fmadd_ps(___x374_13, ___x373, ___x375_13);
                    }
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x375_0);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x375_1);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x375_2);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x375_3);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x375_4);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x375_5);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x375_6);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x375_7);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x375_8);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x375_9);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x375_10);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x375_11);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x375_12);
                    _mm512_store_ps(& ensemble128grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x375_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 7; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble127inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble127grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble127grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble127grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[57] += omp_get_wtime();
    times[58] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 7; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble126grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble126grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x368_0 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x368_1 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x368_2 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x368_3 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x368_4 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x368_5 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x368_6 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x368_7 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x368_8 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x368_9 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x368_10 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x368_11 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x368_12 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x368_13 = _mm512_load_ps(& ensemble125inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x367 = _mm512_load_ps(& ensemble125grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x369_0 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x369_1 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x369_2 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x369_3 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x369_4 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x369_5 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x369_6 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x369_7 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x369_8 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x369_9 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x369_10 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x369_11 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x369_12 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x369_13 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        ___x367 = _mm512_fmadd_ps(___x369_0, ___x368_0, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_1, ___x368_1, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_2, ___x368_2, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_3, ___x368_3, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_4, ___x368_4, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_5, ___x368_5, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_6, ___x368_6, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_7, ___x368_7, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_8, ___x368_8, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_9, ___x368_9, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_10, ___x368_10, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_11, ___x368_11, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_12, ___x368_12, ___x367);
                        ___x367 = _mm512_fmadd_ps(___x369_13, ___x368_13, ___x367);
                        _mm512_store_ps(& ensemble125grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x367);
                    }
                }
            }
        }
    }
    times[58] += omp_get_wtime();
    times[59] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 7; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x364_0 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x364_1 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x364_2 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x364_3 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x364_4 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x364_5 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x364_6 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x364_7 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x364_8 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x364_9 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x364_10 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x364_11 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x364_12 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x364_13 = _mm512_load_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x365 = _mm512_load_ps(& ensemble125weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x366_0 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x366_1 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x366_2 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x366_3 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x366_4 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x366_5 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x366_6 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x366_7 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x366_8 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x366_9 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x366_10 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x366_11 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x366_12 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x366_13 = _mm512_set1_ps(ensemble125grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        ___x364_0 = _mm512_fmadd_ps(___x366_0, ___x365, ___x364_0);
                        ___x364_1 = _mm512_fmadd_ps(___x366_1, ___x365, ___x364_1);
                        ___x364_2 = _mm512_fmadd_ps(___x366_2, ___x365, ___x364_2);
                        ___x364_3 = _mm512_fmadd_ps(___x366_3, ___x365, ___x364_3);
                        ___x364_4 = _mm512_fmadd_ps(___x366_4, ___x365, ___x364_4);
                        ___x364_5 = _mm512_fmadd_ps(___x366_5, ___x365, ___x364_5);
                        ___x364_6 = _mm512_fmadd_ps(___x366_6, ___x365, ___x364_6);
                        ___x364_7 = _mm512_fmadd_ps(___x366_7, ___x365, ___x364_7);
                        ___x364_8 = _mm512_fmadd_ps(___x366_8, ___x365, ___x364_8);
                        ___x364_9 = _mm512_fmadd_ps(___x366_9, ___x365, ___x364_9);
                        ___x364_10 = _mm512_fmadd_ps(___x366_10, ___x365, ___x364_10);
                        ___x364_11 = _mm512_fmadd_ps(___x366_11, ___x365, ___x364_11);
                        ___x364_12 = _mm512_fmadd_ps(___x366_12, ___x365, ___x364_12);
                        ___x364_13 = _mm512_fmadd_ps(___x366_13, ___x365, ___x364_13);
                    }
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x364_0);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x364_1);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x364_2);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x364_3);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x364_4);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x364_5);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x364_6);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x364_7);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x364_8);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x364_9);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x364_10);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x364_11);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x364_12);
                    _mm512_store_ps(& ensemble125grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x364_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x357 = _mm512_load_ps(& ensemble124grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble124grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x357);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x358 = _mm512_load_ps(& ensemble124grad[_neuron_index_0][(_neuron_index_1_outer + 8)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble124grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x358);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x359 = _mm512_load_ps(& ensemble124grad[_neuron_index_0][(_neuron_index_1_outer + 24)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble124grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x359);
                }
            }
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x360 = _mm512_load_ps(& ensemble124grad[_neuron_index_0][(_neuron_index_1_outer + 28)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble124grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x360);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble123inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble123grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble123grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble123grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[59] += omp_get_wtime();
    times[60] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble122grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble122grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x351_0 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x351_1 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x351_2 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x351_3 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x351_4 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x351_5 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x351_6 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x351_7 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x351_8 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x351_9 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x351_10 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x351_11 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x351_12 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x351_13 = _mm512_load_ps(& ensemble121inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x350_0 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x350_1 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x350_2 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x350_3 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x350_4 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x350_5 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x350_6 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x350_7 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x350_8 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x350_9 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x350_10 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x350_11 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x350_12 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x350_13 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x352 = _mm512_load_ps(& ensemble121grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x352 = _mm512_fmadd_ps(___x350_0, ___x351_0, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_1, ___x351_1, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_2, ___x351_2, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_3, ___x351_3, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_4, ___x351_4, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_5, ___x351_5, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_6, ___x351_6, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_7, ___x351_7, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_8, ___x351_8, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_9, ___x351_9, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_10, ___x351_10, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_11, ___x351_11, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_12, ___x351_12, ___x352);
                        ___x352 = _mm512_fmadd_ps(___x350_13, ___x351_13, ___x352);
                        _mm512_store_ps(& ensemble121grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x352);
                    }
                }
            }
        }
    }
    times[60] += omp_get_wtime();
    times[61] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x349_0 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x349_1 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x349_2 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x349_3 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x349_4 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x349_5 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x349_6 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x349_7 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x349_8 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x349_9 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x349_10 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x349_11 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x349_12 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x349_13 = _mm512_load_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x347_0 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x347_1 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x347_2 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x347_3 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x347_4 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x347_5 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x347_6 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x347_7 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x347_8 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x347_9 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x347_10 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x347_11 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x347_12 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x347_13 = _mm512_set1_ps(ensemble121grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x348 = _mm512_load_ps(& ensemble121weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x349_0 = _mm512_fmadd_ps(___x347_0, ___x348, ___x349_0);
                        ___x349_1 = _mm512_fmadd_ps(___x347_1, ___x348, ___x349_1);
                        ___x349_2 = _mm512_fmadd_ps(___x347_2, ___x348, ___x349_2);
                        ___x349_3 = _mm512_fmadd_ps(___x347_3, ___x348, ___x349_3);
                        ___x349_4 = _mm512_fmadd_ps(___x347_4, ___x348, ___x349_4);
                        ___x349_5 = _mm512_fmadd_ps(___x347_5, ___x348, ___x349_5);
                        ___x349_6 = _mm512_fmadd_ps(___x347_6, ___x348, ___x349_6);
                        ___x349_7 = _mm512_fmadd_ps(___x347_7, ___x348, ___x349_7);
                        ___x349_8 = _mm512_fmadd_ps(___x347_8, ___x348, ___x349_8);
                        ___x349_9 = _mm512_fmadd_ps(___x347_9, ___x348, ___x349_9);
                        ___x349_10 = _mm512_fmadd_ps(___x347_10, ___x348, ___x349_10);
                        ___x349_11 = _mm512_fmadd_ps(___x347_11, ___x348, ___x349_11);
                        ___x349_12 = _mm512_fmadd_ps(___x347_12, ___x348, ___x349_12);
                        ___x349_13 = _mm512_fmadd_ps(___x347_13, ___x348, ___x349_13);
                    }
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x349_0);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x349_1);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x349_2);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x349_3);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x349_4);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x349_5);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x349_6);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x349_7);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x349_8);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x349_9);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x349_10);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x349_11);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x349_12);
                    _mm512_store_ps(& ensemble121grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x349_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 32; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble120mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble120mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble120grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 13)][MIN(MAX(k + _input_offset_3, 0), 13)][_input_offset_1_inner] += ensemble120grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble119inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble119grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble119grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble119grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[61] += omp_get_wtime();
    times[62] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble118grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble118grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x341_0 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x341_1 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x341_2 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x341_3 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x341_4 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x341_5 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x341_6 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x341_7 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x341_8 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x341_9 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x341_10 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x341_11 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x341_12 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x341_13 = _mm512_load_ps(& ensemble117inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x342 = _mm512_load_ps(& ensemble117grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x343_0 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x343_1 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x343_2 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x343_3 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x343_4 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x343_5 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x343_6 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x343_7 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x343_8 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x343_9 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x343_10 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x343_11 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x343_12 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x343_13 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                ___x342 = _mm512_fmadd_ps(___x343_0, ___x341_0, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_1, ___x341_1, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_2, ___x341_2, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_3, ___x341_3, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_4, ___x341_4, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_5, ___x341_5, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_6, ___x341_6, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_7, ___x341_7, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_8, ___x341_8, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_9, ___x341_9, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_10, ___x341_10, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_11, ___x341_11, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_12, ___x341_12, ___x342);
                                ___x342 = _mm512_fmadd_ps(___x343_13, ___x341_13, ___x342);
                                _mm512_store_ps(& ensemble117grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x342);
                            }
                        }
                    }
                }
            }
        }
    }
    times[62] += omp_get_wtime();
    times[63] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x339_0 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x339_1 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x339_2 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x339_3 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x339_4 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x339_5 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x339_6 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x339_7 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x339_8 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x339_9 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x339_10 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x339_11 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x339_12 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x339_13 = _mm512_load_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x338 = _mm512_load_ps(& ensemble117weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x340_0 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x340_1 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x340_2 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x340_3 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x340_4 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x340_5 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x340_6 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x340_7 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x340_8 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x340_9 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x340_10 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x340_11 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x340_12 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x340_13 = _mm512_set1_ps(ensemble117grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                ___x339_0 = _mm512_fmadd_ps(___x340_0, ___x338, ___x339_0);
                                ___x339_1 = _mm512_fmadd_ps(___x340_1, ___x338, ___x339_1);
                                ___x339_2 = _mm512_fmadd_ps(___x340_2, ___x338, ___x339_2);
                                ___x339_3 = _mm512_fmadd_ps(___x340_3, ___x338, ___x339_3);
                                ___x339_4 = _mm512_fmadd_ps(___x340_4, ___x338, ___x339_4);
                                ___x339_5 = _mm512_fmadd_ps(___x340_5, ___x338, ___x339_5);
                                ___x339_6 = _mm512_fmadd_ps(___x340_6, ___x338, ___x339_6);
                                ___x339_7 = _mm512_fmadd_ps(___x340_7, ___x338, ___x339_7);
                                ___x339_8 = _mm512_fmadd_ps(___x340_8, ___x338, ___x339_8);
                                ___x339_9 = _mm512_fmadd_ps(___x340_9, ___x338, ___x339_9);
                                ___x339_10 = _mm512_fmadd_ps(___x340_10, ___x338, ___x339_10);
                                ___x339_11 = _mm512_fmadd_ps(___x340_11, ___x338, ___x339_11);
                                ___x339_12 = _mm512_fmadd_ps(___x340_12, ___x338, ___x339_12);
                                ___x339_13 = _mm512_fmadd_ps(___x340_13, ___x338, ___x339_13);
                            }
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x339_0);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x339_1);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x339_2);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x339_3);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x339_4);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x339_5);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x339_6);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x339_7);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x339_8);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x339_9);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x339_10);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x339_11);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x339_12);
                            _mm512_store_ps(& ensemble117grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x339_13);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble116inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] > 0.0) {
                            ensemble116grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble116grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                        } else {
                            ensemble116grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[63] += omp_get_wtime();
    times[64] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble115grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble115grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x332_0 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x332_1 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x332_2 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x332_3 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x332_4 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x332_5 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x332_6 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x332_7 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x332_8 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x332_9 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x332_10 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x332_11 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x332_12 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x332_13 = _mm512_load_ps(& ensemble114inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x333 = _mm512_load_ps(& ensemble114grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x334_0 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_1 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_2 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_3 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_4 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_5 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_6 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_7 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_8 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_9 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_10 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_11 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_12 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                        __m512 ___x334_13 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                        ___x333 = _mm512_fmadd_ps(___x334_0, ___x332_0, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_1, ___x332_1, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_2, ___x332_2, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_3, ___x332_3, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_4, ___x332_4, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_5, ___x332_5, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_6, ___x332_6, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_7, ___x332_7, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_8, ___x332_8, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_9, ___x332_9, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_10, ___x332_10, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_11, ___x332_11, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_12, ___x332_12, ___x333);
                        ___x333 = _mm512_fmadd_ps(___x334_13, ___x332_13, ___x333);
                        _mm512_store_ps(& ensemble114grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x333);
                    }
                }
            }
        }
    }
    times[64] += omp_get_wtime();
    times[65] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x329_0 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x329_1 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x329_2 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x329_3 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x329_4 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x329_5 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x329_6 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x329_7 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x329_8 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x329_9 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x329_10 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x329_11 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x329_12 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x329_13 = _mm512_load_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x330 = _mm512_load_ps(& ensemble114weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x331_0 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_1 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_2 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_3 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_4 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_5 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_6 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_7 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_8 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_9 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_10 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_11 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_12 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                        __m512 ___x331_13 = _mm512_set1_ps(ensemble114grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                        ___x329_0 = _mm512_fmadd_ps(___x331_0, ___x330, ___x329_0);
                        ___x329_1 = _mm512_fmadd_ps(___x331_1, ___x330, ___x329_1);
                        ___x329_2 = _mm512_fmadd_ps(___x331_2, ___x330, ___x329_2);
                        ___x329_3 = _mm512_fmadd_ps(___x331_3, ___x330, ___x329_3);
                        ___x329_4 = _mm512_fmadd_ps(___x331_4, ___x330, ___x329_4);
                        ___x329_5 = _mm512_fmadd_ps(___x331_5, ___x330, ___x329_5);
                        ___x329_6 = _mm512_fmadd_ps(___x331_6, ___x330, ___x329_6);
                        ___x329_7 = _mm512_fmadd_ps(___x331_7, ___x330, ___x329_7);
                        ___x329_8 = _mm512_fmadd_ps(___x331_8, ___x330, ___x329_8);
                        ___x329_9 = _mm512_fmadd_ps(___x331_9, ___x330, ___x329_9);
                        ___x329_10 = _mm512_fmadd_ps(___x331_10, ___x330, ___x329_10);
                        ___x329_11 = _mm512_fmadd_ps(___x331_11, ___x330, ___x329_11);
                        ___x329_12 = _mm512_fmadd_ps(___x331_12, ___x330, ___x329_12);
                        ___x329_13 = _mm512_fmadd_ps(___x331_13, ___x330, ___x329_13);
                    }
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x329_0);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x329_1);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x329_2);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x329_3);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x329_4);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x329_5);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x329_6);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x329_7);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x329_8);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x329_9);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x329_10);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x329_11);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x329_12);
                    _mm512_store_ps(& ensemble114grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x329_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble113inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble113grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble113grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble113grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[65] += omp_get_wtime();
    times[66] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble112grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble112grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 8; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x325_0 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x325_1 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x325_2 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x325_3 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x325_4 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x325_5 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x325_6 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x325_7 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x325_8 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x325_9 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x325_10 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x325_11 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x325_12 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x325_13 = _mm512_load_ps(& ensemble111inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x323 = _mm512_load_ps(& ensemble111grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x324_0 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x324_1 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x324_2 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x324_3 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x324_4 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x324_5 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x324_6 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x324_7 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x324_8 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x324_9 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x324_10 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x324_11 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x324_12 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x324_13 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                ___x323 = _mm512_fmadd_ps(___x324_0, ___x325_0, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_1, ___x325_1, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_2, ___x325_2, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_3, ___x325_3, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_4, ___x325_4, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_5, ___x325_5, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_6, ___x325_6, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_7, ___x325_7, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_8, ___x325_8, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_9, ___x325_9, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_10, ___x325_10, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_11, ___x325_11, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_12, ___x325_12, ___x323);
                                ___x323 = _mm512_fmadd_ps(___x324_13, ___x325_13, ___x323);
                                _mm512_store_ps(& ensemble111grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x323);
                            }
                        }
                    }
                }
            }
        }
    }
    times[66] += omp_get_wtime();
    times[67] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 8; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x322_0 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x322_1 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x322_2 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x322_3 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x322_4 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x322_5 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x322_6 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x322_7 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x322_8 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x322_9 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x322_10 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x322_11 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x322_12 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x322_13 = _mm512_load_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x320_0 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x320_1 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x320_2 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x320_3 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x320_4 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x320_5 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x320_6 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x320_7 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x320_8 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x320_9 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x320_10 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x320_11 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x320_12 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x320_13 = _mm512_set1_ps(ensemble111grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x321 = _mm512_load_ps(& ensemble111weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x322_0 = _mm512_fmadd_ps(___x320_0, ___x321, ___x322_0);
                                ___x322_1 = _mm512_fmadd_ps(___x320_1, ___x321, ___x322_1);
                                ___x322_2 = _mm512_fmadd_ps(___x320_2, ___x321, ___x322_2);
                                ___x322_3 = _mm512_fmadd_ps(___x320_3, ___x321, ___x322_3);
                                ___x322_4 = _mm512_fmadd_ps(___x320_4, ___x321, ___x322_4);
                                ___x322_5 = _mm512_fmadd_ps(___x320_5, ___x321, ___x322_5);
                                ___x322_6 = _mm512_fmadd_ps(___x320_6, ___x321, ___x322_6);
                                ___x322_7 = _mm512_fmadd_ps(___x320_7, ___x321, ___x322_7);
                                ___x322_8 = _mm512_fmadd_ps(___x320_8, ___x321, ___x322_8);
                                ___x322_9 = _mm512_fmadd_ps(___x320_9, ___x321, ___x322_9);
                                ___x322_10 = _mm512_fmadd_ps(___x320_10, ___x321, ___x322_10);
                                ___x322_11 = _mm512_fmadd_ps(___x320_11, ___x321, ___x322_11);
                                ___x322_12 = _mm512_fmadd_ps(___x320_12, ___x321, ___x322_12);
                                ___x322_13 = _mm512_fmadd_ps(___x320_13, ___x321, ___x322_13);
                            }
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x322_0);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x322_1);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x322_2);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x322_3);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x322_4);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x322_5);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x322_6);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x322_7);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x322_8);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x322_9);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x322_10);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x322_11);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x322_12);
                            _mm512_store_ps(& ensemble111grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x322_13);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble110inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] > 0.0) {
                            ensemble110grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble110grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                        } else {
                            ensemble110grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[67] += omp_get_wtime();
    times[68] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble109grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble109grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x314_0 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x314_1 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x314_2 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x314_3 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x314_4 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x314_5 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x314_6 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x314_7 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x314_8 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x314_9 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x314_10 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x314_11 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x314_12 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x314_13 = _mm512_load_ps(& ensemble108inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x315 = _mm512_load_ps(& ensemble108grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x316_0 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_1 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_2 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_3 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_4 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_5 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_6 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_7 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_8 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_9 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_10 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_11 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_12 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x316_13 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        ___x315 = _mm512_fmadd_ps(___x316_0, ___x314_0, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_1, ___x314_1, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_2, ___x314_2, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_3, ___x314_3, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_4, ___x314_4, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_5, ___x314_5, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_6, ___x314_6, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_7, ___x314_7, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_8, ___x314_8, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_9, ___x314_9, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_10, ___x314_10, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_11, ___x314_11, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_12, ___x314_12, ___x315);
                        ___x315 = _mm512_fmadd_ps(___x316_13, ___x314_13, ___x315);
                        _mm512_store_ps(& ensemble108grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x315);
                    }
                }
            }
        }
    }
    times[68] += omp_get_wtime();
    times[69] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x313_0 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x313_1 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x313_2 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x313_3 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x313_4 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x313_5 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x313_6 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x313_7 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x313_8 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x313_9 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x313_10 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x313_11 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x313_12 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x313_13 = _mm512_load_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x311 = _mm512_load_ps(& ensemble108weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x312_0 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_1 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_2 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_3 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_4 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_5 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_6 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_7 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_8 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_9 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_10 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_11 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_12 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x312_13 = _mm512_set1_ps(ensemble108grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        ___x313_0 = _mm512_fmadd_ps(___x312_0, ___x311, ___x313_0);
                        ___x313_1 = _mm512_fmadd_ps(___x312_1, ___x311, ___x313_1);
                        ___x313_2 = _mm512_fmadd_ps(___x312_2, ___x311, ___x313_2);
                        ___x313_3 = _mm512_fmadd_ps(___x312_3, ___x311, ___x313_3);
                        ___x313_4 = _mm512_fmadd_ps(___x312_4, ___x311, ___x313_4);
                        ___x313_5 = _mm512_fmadd_ps(___x312_5, ___x311, ___x313_5);
                        ___x313_6 = _mm512_fmadd_ps(___x312_6, ___x311, ___x313_6);
                        ___x313_7 = _mm512_fmadd_ps(___x312_7, ___x311, ___x313_7);
                        ___x313_8 = _mm512_fmadd_ps(___x312_8, ___x311, ___x313_8);
                        ___x313_9 = _mm512_fmadd_ps(___x312_9, ___x311, ___x313_9);
                        ___x313_10 = _mm512_fmadd_ps(___x312_10, ___x311, ___x313_10);
                        ___x313_11 = _mm512_fmadd_ps(___x312_11, ___x311, ___x313_11);
                        ___x313_12 = _mm512_fmadd_ps(___x312_12, ___x311, ___x313_12);
                        ___x313_13 = _mm512_fmadd_ps(___x312_13, ___x311, ___x313_13);
                    }
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x313_0);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x313_1);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x313_2);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x313_3);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x313_4);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x313_5);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x313_6);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x313_7);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x313_8);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x313_9);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x313_10);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x313_11);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x313_12);
                    _mm512_store_ps(& ensemble108grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x313_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble107inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble107grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble107grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble107grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[69] += omp_get_wtime();
    times[70] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble106grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble106grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x307_0 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x307_1 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x307_2 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x307_3 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x307_4 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x307_5 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x307_6 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x307_7 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x307_8 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x307_9 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x307_10 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x307_11 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x307_12 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x307_13 = _mm512_load_ps(& ensemble105inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x305 = _mm512_load_ps(& ensemble105grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x306_0 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x306_1 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x306_2 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x306_3 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x306_4 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x306_5 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x306_6 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x306_7 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x306_8 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x306_9 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x306_10 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x306_11 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x306_12 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x306_13 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        ___x305 = _mm512_fmadd_ps(___x306_0, ___x307_0, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_1, ___x307_1, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_2, ___x307_2, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_3, ___x307_3, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_4, ___x307_4, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_5, ___x307_5, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_6, ___x307_6, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_7, ___x307_7, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_8, ___x307_8, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_9, ___x307_9, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_10, ___x307_10, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_11, ___x307_11, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_12, ___x307_12, ___x305);
                        ___x305 = _mm512_fmadd_ps(___x306_13, ___x307_13, ___x305);
                        _mm512_store_ps(& ensemble105grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x305);
                    }
                }
            }
        }
    }
    times[70] += omp_get_wtime();
    times[71] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x304_0 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x304_1 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x304_2 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x304_3 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x304_4 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x304_5 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x304_6 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x304_7 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x304_8 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x304_9 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x304_10 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x304_11 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x304_12 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x304_13 = _mm512_load_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x302_0 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x302_1 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x302_2 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x302_3 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x302_4 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x302_5 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x302_6 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x302_7 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x302_8 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x302_9 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x302_10 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x302_11 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x302_12 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x302_13 = _mm512_set1_ps(ensemble105grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x303 = _mm512_load_ps(& ensemble105weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x304_0 = _mm512_fmadd_ps(___x302_0, ___x303, ___x304_0);
                        ___x304_1 = _mm512_fmadd_ps(___x302_1, ___x303, ___x304_1);
                        ___x304_2 = _mm512_fmadd_ps(___x302_2, ___x303, ___x304_2);
                        ___x304_3 = _mm512_fmadd_ps(___x302_3, ___x303, ___x304_3);
                        ___x304_4 = _mm512_fmadd_ps(___x302_4, ___x303, ___x304_4);
                        ___x304_5 = _mm512_fmadd_ps(___x302_5, ___x303, ___x304_5);
                        ___x304_6 = _mm512_fmadd_ps(___x302_6, ___x303, ___x304_6);
                        ___x304_7 = _mm512_fmadd_ps(___x302_7, ___x303, ___x304_7);
                        ___x304_8 = _mm512_fmadd_ps(___x302_8, ___x303, ___x304_8);
                        ___x304_9 = _mm512_fmadd_ps(___x302_9, ___x303, ___x304_9);
                        ___x304_10 = _mm512_fmadd_ps(___x302_10, ___x303, ___x304_10);
                        ___x304_11 = _mm512_fmadd_ps(___x302_11, ___x303, ___x304_11);
                        ___x304_12 = _mm512_fmadd_ps(___x302_12, ___x303, ___x304_12);
                        ___x304_13 = _mm512_fmadd_ps(___x302_13, ___x303, ___x304_13);
                    }
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x304_0);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x304_1);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x304_2);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x304_3);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x304_4);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x304_5);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x304_6);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x304_7);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x304_8);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x304_9);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x304_10);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x304_11);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x304_12);
                    _mm512_store_ps(& ensemble105grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x304_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x295 = _mm512_load_ps(& ensemble104grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble104grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x295);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 14; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x296 = _mm512_load_ps(& ensemble104grad[_neuron_index_0][(_neuron_index_1_outer + 10)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble104grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x296);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x297 = _mm512_load_ps(& ensemble104grad[_neuron_index_0][(_neuron_index_1_outer + 24)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble104grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x297);
                }
            }
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x298 = _mm512_load_ps(& ensemble104grad[_neuron_index_0][(_neuron_index_1_outer + 28)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble104grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x298);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble103inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble103grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble103grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble103grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[71] += omp_get_wtime();
    times[72] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble102grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble102grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x290_0 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x290_1 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x290_2 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x290_3 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x290_4 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x290_5 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x290_6 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x290_7 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x290_8 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x290_9 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x290_10 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x290_11 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x290_12 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x290_13 = _mm512_load_ps(& ensemble101inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x288 = _mm512_load_ps(& ensemble101grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x289_0 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x289_1 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x289_2 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x289_3 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x289_4 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x289_5 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x289_6 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x289_7 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x289_8 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x289_9 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x289_10 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x289_11 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x289_12 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x289_13 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        ___x288 = _mm512_fmadd_ps(___x289_0, ___x290_0, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_1, ___x290_1, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_2, ___x290_2, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_3, ___x290_3, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_4, ___x290_4, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_5, ___x290_5, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_6, ___x290_6, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_7, ___x290_7, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_8, ___x290_8, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_9, ___x290_9, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_10, ___x290_10, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_11, ___x290_11, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_12, ___x290_12, ___x288);
                        ___x288 = _mm512_fmadd_ps(___x289_13, ___x290_13, ___x288);
                        _mm512_store_ps(& ensemble101grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x288);
                    }
                }
            }
        }
    }
    times[72] += omp_get_wtime();
    times[73] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x285_0 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x285_1 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x285_2 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x285_3 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x285_4 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x285_5 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x285_6 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x285_7 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x285_8 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x285_9 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x285_10 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x285_11 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x285_12 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x285_13 = _mm512_load_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x286 = _mm512_load_ps(& ensemble101weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x287_0 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x287_1 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x287_2 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x287_3 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x287_4 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x287_5 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x287_6 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x287_7 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x287_8 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x287_9 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x287_10 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x287_11 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x287_12 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x287_13 = _mm512_set1_ps(ensemble101grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        ___x285_0 = _mm512_fmadd_ps(___x287_0, ___x286, ___x285_0);
                        ___x285_1 = _mm512_fmadd_ps(___x287_1, ___x286, ___x285_1);
                        ___x285_2 = _mm512_fmadd_ps(___x287_2, ___x286, ___x285_2);
                        ___x285_3 = _mm512_fmadd_ps(___x287_3, ___x286, ___x285_3);
                        ___x285_4 = _mm512_fmadd_ps(___x287_4, ___x286, ___x285_4);
                        ___x285_5 = _mm512_fmadd_ps(___x287_5, ___x286, ___x285_5);
                        ___x285_6 = _mm512_fmadd_ps(___x287_6, ___x286, ___x285_6);
                        ___x285_7 = _mm512_fmadd_ps(___x287_7, ___x286, ___x285_7);
                        ___x285_8 = _mm512_fmadd_ps(___x287_8, ___x286, ___x285_8);
                        ___x285_9 = _mm512_fmadd_ps(___x287_9, ___x286, ___x285_9);
                        ___x285_10 = _mm512_fmadd_ps(___x287_10, ___x286, ___x285_10);
                        ___x285_11 = _mm512_fmadd_ps(___x287_11, ___x286, ___x285_11);
                        ___x285_12 = _mm512_fmadd_ps(___x287_12, ___x286, ___x285_12);
                        ___x285_13 = _mm512_fmadd_ps(___x287_13, ___x286, ___x285_13);
                    }
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x285_0);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x285_1);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x285_2);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x285_3);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x285_4);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x285_5);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x285_6);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x285_7);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x285_8);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x285_9);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x285_10);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x285_11);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x285_12);
                    _mm512_store_ps(& ensemble101grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x285_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 32; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble100mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble100mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble100grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 13)][MIN(MAX(k + _input_offset_3, 0), 13)][_input_offset_1_inner] += ensemble100grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble99inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble99grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble99grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble99grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[73] += omp_get_wtime();
    times[74] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble98grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble98grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x280_0 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x280_1 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x280_2 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x280_3 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x280_4 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x280_5 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x280_6 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x280_7 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x280_8 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x280_9 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x280_10 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x280_11 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x280_12 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x280_13 = _mm512_load_ps(& ensemble97inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x279_0 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x279_1 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x279_2 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x279_3 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x279_4 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x279_5 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x279_6 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x279_7 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x279_8 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x279_9 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x279_10 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x279_11 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x279_12 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x279_13 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x281 = _mm512_load_ps(& ensemble97grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x281 = _mm512_fmadd_ps(___x279_0, ___x280_0, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_1, ___x280_1, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_2, ___x280_2, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_3, ___x280_3, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_4, ___x280_4, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_5, ___x280_5, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_6, ___x280_6, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_7, ___x280_7, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_8, ___x280_8, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_9, ___x280_9, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_10, ___x280_10, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_11, ___x280_11, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_12, ___x280_12, ___x281);
                                ___x281 = _mm512_fmadd_ps(___x279_13, ___x280_13, ___x281);
                                _mm512_store_ps(& ensemble97grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x281);
                            }
                        }
                    }
                }
            }
        }
    }
    times[74] += omp_get_wtime();
    times[75] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x278_0 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x278_1 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x278_2 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x278_3 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x278_4 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x278_5 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x278_6 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x278_7 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x278_8 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x278_9 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x278_10 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x278_11 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x278_12 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x278_13 = _mm512_load_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x276 = _mm512_load_ps(& ensemble97weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x277_0 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x277_1 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x277_2 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x277_3 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x277_4 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x277_5 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x277_6 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x277_7 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x277_8 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x277_9 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x277_10 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x277_11 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x277_12 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x277_13 = _mm512_set1_ps(ensemble97grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                ___x278_0 = _mm512_fmadd_ps(___x277_0, ___x276, ___x278_0);
                                ___x278_1 = _mm512_fmadd_ps(___x277_1, ___x276, ___x278_1);
                                ___x278_2 = _mm512_fmadd_ps(___x277_2, ___x276, ___x278_2);
                                ___x278_3 = _mm512_fmadd_ps(___x277_3, ___x276, ___x278_3);
                                ___x278_4 = _mm512_fmadd_ps(___x277_4, ___x276, ___x278_4);
                                ___x278_5 = _mm512_fmadd_ps(___x277_5, ___x276, ___x278_5);
                                ___x278_6 = _mm512_fmadd_ps(___x277_6, ___x276, ___x278_6);
                                ___x278_7 = _mm512_fmadd_ps(___x277_7, ___x276, ___x278_7);
                                ___x278_8 = _mm512_fmadd_ps(___x277_8, ___x276, ___x278_8);
                                ___x278_9 = _mm512_fmadd_ps(___x277_9, ___x276, ___x278_9);
                                ___x278_10 = _mm512_fmadd_ps(___x277_10, ___x276, ___x278_10);
                                ___x278_11 = _mm512_fmadd_ps(___x277_11, ___x276, ___x278_11);
                                ___x278_12 = _mm512_fmadd_ps(___x277_12, ___x276, ___x278_12);
                                ___x278_13 = _mm512_fmadd_ps(___x277_13, ___x276, ___x278_13);
                            }
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x278_0);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x278_1);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x278_2);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x278_3);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x278_4);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x278_5);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x278_6);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x278_7);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x278_8);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x278_9);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x278_10);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x278_11);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x278_12);
                            _mm512_store_ps(& ensemble97grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x278_13);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble96inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] > 0.0) {
                            ensemble96grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble96grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                        } else {
                            ensemble96grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[75] += omp_get_wtime();
    times[76] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble95grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble95grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x270_0 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x270_1 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x270_2 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x270_3 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x270_4 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x270_5 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x270_6 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x270_7 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x270_8 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x270_9 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x270_10 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x270_11 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x270_12 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x270_13 = _mm512_load_ps(& ensemble94inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x271 = _mm512_load_ps(& ensemble94grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x272_0 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_1 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_2 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_3 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_4 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_5 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_6 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_7 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_8 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_9 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_10 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_11 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_12 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                        __m512 ___x272_13 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                        ___x271 = _mm512_fmadd_ps(___x272_0, ___x270_0, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_1, ___x270_1, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_2, ___x270_2, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_3, ___x270_3, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_4, ___x270_4, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_5, ___x270_5, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_6, ___x270_6, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_7, ___x270_7, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_8, ___x270_8, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_9, ___x270_9, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_10, ___x270_10, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_11, ___x270_11, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_12, ___x270_12, ___x271);
                        ___x271 = _mm512_fmadd_ps(___x272_13, ___x270_13, ___x271);
                        _mm512_store_ps(& ensemble94grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x271);
                    }
                }
            }
        }
    }
    times[76] += omp_get_wtime();
    times[77] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x268_0 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x268_1 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x268_2 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x268_3 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x268_4 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x268_5 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x268_6 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x268_7 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x268_8 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x268_9 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x268_10 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x268_11 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x268_12 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x268_13 = _mm512_load_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x267 = _mm512_load_ps(& ensemble94weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x269_0 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_1 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_2 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_3 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_4 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_5 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_6 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_7 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_8 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_9 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_10 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_11 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_12 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                        __m512 ___x269_13 = _mm512_set1_ps(ensemble94grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                        ___x268_0 = _mm512_fmadd_ps(___x269_0, ___x267, ___x268_0);
                        ___x268_1 = _mm512_fmadd_ps(___x269_1, ___x267, ___x268_1);
                        ___x268_2 = _mm512_fmadd_ps(___x269_2, ___x267, ___x268_2);
                        ___x268_3 = _mm512_fmadd_ps(___x269_3, ___x267, ___x268_3);
                        ___x268_4 = _mm512_fmadd_ps(___x269_4, ___x267, ___x268_4);
                        ___x268_5 = _mm512_fmadd_ps(___x269_5, ___x267, ___x268_5);
                        ___x268_6 = _mm512_fmadd_ps(___x269_6, ___x267, ___x268_6);
                        ___x268_7 = _mm512_fmadd_ps(___x269_7, ___x267, ___x268_7);
                        ___x268_8 = _mm512_fmadd_ps(___x269_8, ___x267, ___x268_8);
                        ___x268_9 = _mm512_fmadd_ps(___x269_9, ___x267, ___x268_9);
                        ___x268_10 = _mm512_fmadd_ps(___x269_10, ___x267, ___x268_10);
                        ___x268_11 = _mm512_fmadd_ps(___x269_11, ___x267, ___x268_11);
                        ___x268_12 = _mm512_fmadd_ps(___x269_12, ___x267, ___x268_12);
                        ___x268_13 = _mm512_fmadd_ps(___x269_13, ___x267, ___x268_13);
                    }
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x268_0);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x268_1);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x268_2);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x268_3);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x268_4);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x268_5);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x268_6);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x268_7);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x268_8);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x268_9);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x268_10);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x268_11);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x268_12);
                    _mm512_store_ps(& ensemble94grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x268_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 14; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble93inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble93grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble93grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble93grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[77] += omp_get_wtime();
    times[78] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 14; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble92grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble92grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 7; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x262_0 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x262_1 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x262_2 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x262_3 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x262_4 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x262_5 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x262_6 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x262_7 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x262_8 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x262_9 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x262_10 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x262_11 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x262_12 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x262_13 = _mm512_load_ps(& ensemble91inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x261_0 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x261_1 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x261_2 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x261_3 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x261_4 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x261_5 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x261_6 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x261_7 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x261_8 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x261_9 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x261_10 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x261_11 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x261_12 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x261_13 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x263 = _mm512_load_ps(& ensemble91grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x263 = _mm512_fmadd_ps(___x261_0, ___x262_0, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_1, ___x262_1, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_2, ___x262_2, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_3, ___x262_3, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_4, ___x262_4, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_5, ___x262_5, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_6, ___x262_6, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_7, ___x262_7, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_8, ___x262_8, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_9, ___x262_9, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_10, ___x262_10, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_11, ___x262_11, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_12, ___x262_12, ___x263);
                                ___x263 = _mm512_fmadd_ps(___x261_13, ___x262_13, ___x263);
                                _mm512_store_ps(& ensemble91grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x263);
                            }
                        }
                    }
                }
            }
        }
    }
    times[78] += omp_get_wtime();
    times[79] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 7; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 14; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x258_0 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x258_1 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x258_2 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x258_3 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x258_4 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x258_5 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x258_6 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x258_7 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x258_8 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x258_9 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x258_10 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x258_11 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x258_12 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x258_13 = _mm512_load_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x259 = _mm512_load_ps(& ensemble91weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x260_0 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x260_1 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x260_2 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x260_3 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x260_4 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x260_5 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x260_6 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x260_7 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x260_8 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x260_9 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x260_10 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x260_11 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x260_12 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x260_13 = _mm512_set1_ps(ensemble91grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                ___x258_0 = _mm512_fmadd_ps(___x260_0, ___x259, ___x258_0);
                                ___x258_1 = _mm512_fmadd_ps(___x260_1, ___x259, ___x258_1);
                                ___x258_2 = _mm512_fmadd_ps(___x260_2, ___x259, ___x258_2);
                                ___x258_3 = _mm512_fmadd_ps(___x260_3, ___x259, ___x258_3);
                                ___x258_4 = _mm512_fmadd_ps(___x260_4, ___x259, ___x258_4);
                                ___x258_5 = _mm512_fmadd_ps(___x260_5, ___x259, ___x258_5);
                                ___x258_6 = _mm512_fmadd_ps(___x260_6, ___x259, ___x258_6);
                                ___x258_7 = _mm512_fmadd_ps(___x260_7, ___x259, ___x258_7);
                                ___x258_8 = _mm512_fmadd_ps(___x260_8, ___x259, ___x258_8);
                                ___x258_9 = _mm512_fmadd_ps(___x260_9, ___x259, ___x258_9);
                                ___x258_10 = _mm512_fmadd_ps(___x260_10, ___x259, ___x258_10);
                                ___x258_11 = _mm512_fmadd_ps(___x260_11, ___x259, ___x258_11);
                                ___x258_12 = _mm512_fmadd_ps(___x260_12, ___x259, ___x258_12);
                                ___x258_13 = _mm512_fmadd_ps(___x260_13, ___x259, ___x258_13);
                            }
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x258_0);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x258_1);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x258_2);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x258_3);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x258_4);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x258_5);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x258_6);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x258_7);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x258_8);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x258_9);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x258_10);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x258_11);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x258_12);
                            _mm512_store_ps(& ensemble91grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x258_13);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 7; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble90inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] > 0.0) {
                            ensemble90grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble90grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                        } else {
                            ensemble90grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[79] += omp_get_wtime();
    times[80] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 7; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble89grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble89grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x253_0 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x253_1 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x253_2 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x253_3 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x253_4 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x253_5 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x253_6 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x253_7 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x253_8 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x253_9 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x253_10 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x253_11 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x253_12 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x253_13 = _mm512_load_ps(& ensemble88inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x252_0 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_1 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_2 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_3 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_4 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_5 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_6 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_7 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_8 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_9 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_10 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_11 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_12 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x252_13 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        __m512 ___x254 = _mm512_load_ps(& ensemble88grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x254 = _mm512_fmadd_ps(___x252_0, ___x253_0, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_1, ___x253_1, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_2, ___x253_2, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_3, ___x253_3, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_4, ___x253_4, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_5, ___x253_5, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_6, ___x253_6, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_7, ___x253_7, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_8, ___x253_8, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_9, ___x253_9, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_10, ___x253_10, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_11, ___x253_11, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_12, ___x253_12, ___x254);
                        ___x254 = _mm512_fmadd_ps(___x252_13, ___x253_13, ___x254);
                        _mm512_store_ps(& ensemble88grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x254);
                    }
                }
            }
        }
    }
    times[80] += omp_get_wtime();
    times[81] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 7; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x250_0 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x250_1 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x250_2 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x250_3 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x250_4 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x250_5 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x250_6 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x250_7 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x250_8 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x250_9 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x250_10 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x250_11 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x250_12 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x250_13 = _mm512_load_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x249_0 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_1 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_2 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_3 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_4 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_5 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_6 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_7 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_8 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_9 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_10 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_11 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_12 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x249_13 = _mm512_set1_ps(ensemble88grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        __m512 ___x251 = _mm512_load_ps(& ensemble88weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x250_0 = _mm512_fmadd_ps(___x249_0, ___x251, ___x250_0);
                        ___x250_1 = _mm512_fmadd_ps(___x249_1, ___x251, ___x250_1);
                        ___x250_2 = _mm512_fmadd_ps(___x249_2, ___x251, ___x250_2);
                        ___x250_3 = _mm512_fmadd_ps(___x249_3, ___x251, ___x250_3);
                        ___x250_4 = _mm512_fmadd_ps(___x249_4, ___x251, ___x250_4);
                        ___x250_5 = _mm512_fmadd_ps(___x249_5, ___x251, ___x250_5);
                        ___x250_6 = _mm512_fmadd_ps(___x249_6, ___x251, ___x250_6);
                        ___x250_7 = _mm512_fmadd_ps(___x249_7, ___x251, ___x250_7);
                        ___x250_8 = _mm512_fmadd_ps(___x249_8, ___x251, ___x250_8);
                        ___x250_9 = _mm512_fmadd_ps(___x249_9, ___x251, ___x250_9);
                        ___x250_10 = _mm512_fmadd_ps(___x249_10, ___x251, ___x250_10);
                        ___x250_11 = _mm512_fmadd_ps(___x249_11, ___x251, ___x250_11);
                        ___x250_12 = _mm512_fmadd_ps(___x249_12, ___x251, ___x250_12);
                        ___x250_13 = _mm512_fmadd_ps(___x249_13, ___x251, ___x250_13);
                    }
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x250_0);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x250_1);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x250_2);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x250_3);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x250_4);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x250_5);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x250_6);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x250_7);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x250_8);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x250_9);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x250_10);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x250_11);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x250_12);
                    _mm512_store_ps(& ensemble88grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x250_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble87inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble87grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble87grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble87grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[81] += omp_get_wtime();
    times[82] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble86grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble86grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x244_0 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x244_1 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x244_2 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x244_3 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x244_4 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x244_5 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x244_6 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x244_7 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x244_8 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x244_9 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x244_10 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x244_11 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x244_12 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x244_13 = _mm512_load_ps(& ensemble85inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x243 = _mm512_load_ps(& ensemble85grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x245_0 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x245_1 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x245_2 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x245_3 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x245_4 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x245_5 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x245_6 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x245_7 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x245_8 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x245_9 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x245_10 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x245_11 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x245_12 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x245_13 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        ___x243 = _mm512_fmadd_ps(___x245_0, ___x244_0, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_1, ___x244_1, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_2, ___x244_2, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_3, ___x244_3, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_4, ___x244_4, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_5, ___x244_5, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_6, ___x244_6, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_7, ___x244_7, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_8, ___x244_8, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_9, ___x244_9, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_10, ___x244_10, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_11, ___x244_11, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_12, ___x244_12, ___x243);
                        ___x243 = _mm512_fmadd_ps(___x245_13, ___x244_13, ___x243);
                        _mm512_store_ps(& ensemble85grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x243);
                    }
                }
            }
        }
    }
    times[82] += omp_get_wtime();
    times[83] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 10; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x241_0 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x241_1 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x241_2 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x241_3 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x241_4 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x241_5 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x241_6 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x241_7 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x241_8 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x241_9 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x241_10 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x241_11 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x241_12 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x241_13 = _mm512_load_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x240 = _mm512_load_ps(& ensemble85weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x242_0 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x242_1 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x242_2 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x242_3 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x242_4 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x242_5 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x242_6 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x242_7 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x242_8 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x242_9 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x242_10 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x242_11 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x242_12 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x242_13 = _mm512_set1_ps(ensemble85grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        ___x241_0 = _mm512_fmadd_ps(___x242_0, ___x240, ___x241_0);
                        ___x241_1 = _mm512_fmadd_ps(___x242_1, ___x240, ___x241_1);
                        ___x241_2 = _mm512_fmadd_ps(___x242_2, ___x240, ___x241_2);
                        ___x241_3 = _mm512_fmadd_ps(___x242_3, ___x240, ___x241_3);
                        ___x241_4 = _mm512_fmadd_ps(___x242_4, ___x240, ___x241_4);
                        ___x241_5 = _mm512_fmadd_ps(___x242_5, ___x240, ___x241_5);
                        ___x241_6 = _mm512_fmadd_ps(___x242_6, ___x240, ___x241_6);
                        ___x241_7 = _mm512_fmadd_ps(___x242_7, ___x240, ___x241_7);
                        ___x241_8 = _mm512_fmadd_ps(___x242_8, ___x240, ___x241_8);
                        ___x241_9 = _mm512_fmadd_ps(___x242_9, ___x240, ___x241_9);
                        ___x241_10 = _mm512_fmadd_ps(___x242_10, ___x240, ___x241_10);
                        ___x241_11 = _mm512_fmadd_ps(___x242_11, ___x240, ___x241_11);
                        ___x241_12 = _mm512_fmadd_ps(___x242_12, ___x240, ___x241_12);
                        ___x241_13 = _mm512_fmadd_ps(___x242_13, ___x240, ___x241_13);
                    }
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x241_0);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x241_1);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x241_2);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x241_3);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x241_4);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x241_5);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x241_6);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x241_7);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x241_8);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x241_9);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x241_10);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x241_11);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x241_12);
                    _mm512_store_ps(& ensemble85grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x241_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                ensemble84grad_bias[_neuron_index_0][_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble84grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner];
            }
        }
    }
    
    #pragma omp parallel for simd
    for (int x = 0; x < 1008; ++x) {
      float sum = _ensemble84grad_bias[x];
      #pragma unroll
      for (int i = 1; i < 128; ++ i) {
        sum += _ensemble84grad_bias[i * 1008 + x];
      }
      _ensemble84grad_bias[x] = sum;
    }
    times[83] += omp_get_wtime();
    times[84] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 64; __unique_loopvar0_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
                __m512 ___x234_0 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][0]);
                __m512 ___x234_1 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][0]);
                __m512 ___x234_2 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][0]);
                __m512 ___x234_3 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][0]);
                __m512 ___x234_4 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][0]);
                __m512 ___x234_5 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][0]);
                __m512 ___x234_6 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][0]);
                __m512 ___x234_7 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][0]);
                __m512 ___x234_8 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][0]);
                __m512 ___x234_9 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][0]);
                __m512 ___x234_10 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][0]);
                __m512 ___x234_11 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][0]);
                __m512 ___x234_12 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][0]);
                __m512 ___x234_13 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][0]);
                __m512 ___x234_14 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][0]);
                __m512 ___x234_15 = _mm512_load_ps(& ensemble83inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][0]);
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x235 = _mm512_load_ps(& ensemble83grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][_neuron_index_1_inner][0]);
                    __m512 ___x236_0 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_1 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_2 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_3 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_4 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_5 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_6 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_7 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_8 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_9 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_10 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_11 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_12 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_13 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_14 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x236_15 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    ___x235 = _mm512_fmadd_ps(___x236_0, ___x234_0, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_1, ___x234_1, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_2, ___x234_2, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_3, ___x234_3, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_4, ___x234_4, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_5, ___x234_5, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_6, ___x234_6, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_7, ___x234_7, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_8, ___x234_8, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_9, ___x234_9, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_10, ___x234_10, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_11, ___x234_11, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_12, ___x234_12, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_13, ___x234_13, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_14, ___x234_14, ___x235);
                    ___x235 = _mm512_fmadd_ps(___x236_15, ___x234_15, ___x235);
                    _mm512_store_ps(& ensemble83grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][_neuron_index_1_inner][0], ___x235);
                }
            }
        }
    }
    times[84] += omp_get_wtime();
    times[85] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 64; __unique_loopvar0_outer += 1) {
            __m512 ___x232_0 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][0]);
            __m512 ___x232_1 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][0]);
            __m512 ___x232_2 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][0]);
            __m512 ___x232_3 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][0]);
            __m512 ___x232_4 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][0]);
            __m512 ___x232_5 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][0]);
            __m512 ___x232_6 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][0]);
            __m512 ___x232_7 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][0]);
            __m512 ___x232_8 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][0]);
            __m512 ___x232_9 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][0]);
            __m512 ___x232_10 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][0]);
            __m512 ___x232_11 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][0]);
            __m512 ___x232_12 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][0]);
            __m512 ___x232_13 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][0]);
            __m512 ___x232_14 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][0]);
            __m512 ___x232_15 = _mm512_load_ps(& ensemble83grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][0]);
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 63; _neuron_index_1_outer += 1) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x231 = _mm512_load_ps(& ensemble83weights[_neuron_index_1_outer][__unique_loopvar0_outer][_neuron_index_1_inner][0]);
                    __m512 ___x233_0 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_1 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_2 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_3 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_4 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_5 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_6 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_7 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_8 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_9 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_10 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_11 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_12 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_13 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_14 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x233_15 = _mm512_set1_ps(ensemble83grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    ___x232_0 = _mm512_fmadd_ps(___x233_0, ___x231, ___x232_0);
                    ___x232_1 = _mm512_fmadd_ps(___x233_1, ___x231, ___x232_1);
                    ___x232_2 = _mm512_fmadd_ps(___x233_2, ___x231, ___x232_2);
                    ___x232_3 = _mm512_fmadd_ps(___x233_3, ___x231, ___x232_3);
                    ___x232_4 = _mm512_fmadd_ps(___x233_4, ___x231, ___x232_4);
                    ___x232_5 = _mm512_fmadd_ps(___x233_5, ___x231, ___x232_5);
                    ___x232_6 = _mm512_fmadd_ps(___x233_6, ___x231, ___x232_6);
                    ___x232_7 = _mm512_fmadd_ps(___x233_7, ___x231, ___x232_7);
                    ___x232_8 = _mm512_fmadd_ps(___x233_8, ___x231, ___x232_8);
                    ___x232_9 = _mm512_fmadd_ps(___x233_9, ___x231, ___x232_9);
                    ___x232_10 = _mm512_fmadd_ps(___x233_10, ___x231, ___x232_10);
                    ___x232_11 = _mm512_fmadd_ps(___x233_11, ___x231, ___x232_11);
                    ___x232_12 = _mm512_fmadd_ps(___x233_12, ___x231, ___x232_12);
                    ___x232_13 = _mm512_fmadd_ps(___x233_13, ___x231, ___x232_13);
                    ___x232_14 = _mm512_fmadd_ps(___x233_14, ___x231, ___x232_14);
                    ___x232_15 = _mm512_fmadd_ps(___x233_15, ___x231, ___x232_15);
                }
            }
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][0], ___x232_0);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][0], ___x232_1);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][0], ___x232_2);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][0], ___x232_3);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][0], ___x232_4);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][0], ___x232_5);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][0], ___x232_6);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][0], ___x232_7);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][0], ___x232_8);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][0], ___x232_9);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][0], ___x232_10);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][0], ___x232_11);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][0], ___x232_12);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][0], ___x232_13);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][0], ___x232_14);
            _mm512_store_ps(& ensemble83grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][0], ___x232_15);
        }
    }
    times[85] += omp_get_wtime();
    times[86] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 64; _neuron_index_1_outer += 1) {
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                if (ensemble82inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] > 0.0) {
                    ensemble82grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = ensemble82grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner];
                } else {
                    ensemble82grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner] = 0.0;
                };
            }
            for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                ensemble81grad_bias[_neuron_index_0][_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble81grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_1_inner];
            }
        }
    }
    
    #pragma omp parallel for simd
    for (int x = 0; x < 1024; ++x) {
      float sum = _ensemble81grad_bias[x];
      #pragma unroll
      for (int i = 1; i < 128; ++ i) {
        sum += _ensemble81grad_bias[i * 1024 + x];
      }
      _ensemble81grad_bias[x] = sum;
    }
    times[86] += omp_get_wtime();
    times[87] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 64; _neuron_index_1_outer += 1) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 8; __unique_loopvar0_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x227_0 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_1 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_2 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_3 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_4 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_5 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_6 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_7 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_8 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_9 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_10 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_11 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_12 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_13 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_14 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    __m512 ___x227_15 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                    for (int __unique_loopvar1 = 0; __unique_loopvar1 < 4; __unique_loopvar1 += 1) {
                        for (int __unique_loopvar2 = 0; __unique_loopvar2 < 4; __unique_loopvar2 += 1) {
                            __m512 ___x225_0 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_1 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_2 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_3 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_4 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_5 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_6 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_7 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_8 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_9 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_10 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_11 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_12 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_13 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_14 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x225_15 = _mm512_load_ps(& ensemble80inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                            __m512 ___x226 = _mm512_load_ps(& ensemble80grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][_neuron_index_1_inner][0]);
                            ___x226 = _mm512_fmadd_ps(___x227_0, ___x225_0, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_1, ___x225_1, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_2, ___x225_2, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_3, ___x225_3, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_4, ___x225_4, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_5, ___x225_5, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_6, ___x225_6, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_7, ___x225_7, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_8, ___x225_8, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_9, ___x225_9, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_10, ___x225_10, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_11, ___x225_11, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_12, ___x225_12, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_13, ___x225_13, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_14, ___x225_14, ___x226);
                            ___x226 = _mm512_fmadd_ps(___x227_15, ___x225_15, ___x226);
                            _mm512_store_ps(& ensemble80grad_weights[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][_neuron_index_1_inner][0], ___x226);
                        }
                    }
                }
            }
        }
    }
    times[87] += omp_get_wtime();
    times[88] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 16) {
        for (int __unique_loopvar0_outer = 0; __unique_loopvar0_outer < 8; __unique_loopvar0_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 64; _neuron_index_1_outer += 1) {
                for (int __unique_loopvar1 = 0; __unique_loopvar1 < 4; __unique_loopvar1 += 1) {
                    for (int __unique_loopvar2 = 0; __unique_loopvar2 < 4; __unique_loopvar2 += 1) {
                        __m512 ___x222_0 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_1 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_2 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_3 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_4 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_5 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_6 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_7 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_8 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_9 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_10 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_11 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_12 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_13 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_14 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        __m512 ___x222_15 = _mm512_load_ps(& ensemble80grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0]);
                        for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                            __m512 ___x223 = _mm512_load_ps(& ensemble80weights[_neuron_index_1_outer][__unique_loopvar0_outer][__unique_loopvar1][__unique_loopvar2][_neuron_index_1_inner][0]);
                            __m512 ___x224_0 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 0)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_1 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 1)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_2 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 2)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_3 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 3)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_4 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 4)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_5 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 5)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_6 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 6)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_7 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 7)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_8 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 8)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_9 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 9)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_10 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 10)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_11 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 11)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_12 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 12)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_13 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 13)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_14 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 14)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            __m512 ___x224_15 = _mm512_set1_ps(ensemble80grad[(_neuron_index_0 + 15)][_neuron_index_1_outer][_neuron_index_1_inner]);
                            ___x222_0 = _mm512_fmadd_ps(___x224_0, ___x223, ___x222_0);
                            ___x222_1 = _mm512_fmadd_ps(___x224_1, ___x223, ___x222_1);
                            ___x222_2 = _mm512_fmadd_ps(___x224_2, ___x223, ___x222_2);
                            ___x222_3 = _mm512_fmadd_ps(___x224_3, ___x223, ___x222_3);
                            ___x222_4 = _mm512_fmadd_ps(___x224_4, ___x223, ___x222_4);
                            ___x222_5 = _mm512_fmadd_ps(___x224_5, ___x223, ___x222_5);
                            ___x222_6 = _mm512_fmadd_ps(___x224_6, ___x223, ___x222_6);
                            ___x222_7 = _mm512_fmadd_ps(___x224_7, ___x223, ___x222_7);
                            ___x222_8 = _mm512_fmadd_ps(___x224_8, ___x223, ___x222_8);
                            ___x222_9 = _mm512_fmadd_ps(___x224_9, ___x223, ___x222_9);
                            ___x222_10 = _mm512_fmadd_ps(___x224_10, ___x223, ___x222_10);
                            ___x222_11 = _mm512_fmadd_ps(___x224_11, ___x223, ___x222_11);
                            ___x222_12 = _mm512_fmadd_ps(___x224_12, ___x223, ___x222_12);
                            ___x222_13 = _mm512_fmadd_ps(___x224_13, ___x223, ___x222_13);
                            ___x222_14 = _mm512_fmadd_ps(___x224_14, ___x223, ___x222_14);
                            ___x222_15 = _mm512_fmadd_ps(___x224_15, ___x223, ___x222_15);
                        }
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 0)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_0);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 1)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_1);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 2)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_2);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 3)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_3);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 4)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_4);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 5)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_5);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 6)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_6);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 7)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_7);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 8)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_8);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 9)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_9);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 10)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_10);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 11)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_11);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 12)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_12);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 13)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_13);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 14)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_14);
                        _mm512_store_ps(& ensemble80grad_inputs[(_neuron_index_0 + 15)][__unique_loopvar0_outer][(__unique_loopvar1 * 1)][(__unique_loopvar2 * 1)][0], ___x222_15);
                    }
                }
            }
        }
    }
    times[88] += omp_get_wtime();
    times[89] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble79inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble79grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble79grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble79grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[89] += omp_get_wtime();
    times[90] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble78grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble78grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    __m512 ___x216_0 = _mm512_load_ps(& ensemble77inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x216_1 = _mm512_load_ps(& ensemble77inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x216_2 = _mm512_load_ps(& ensemble77inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x216_3 = _mm512_load_ps(& ensemble77inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x217 = _mm512_load_ps(& ensemble77grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x218_0 = _mm512_set1_ps(ensemble77grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x218_1 = _mm512_set1_ps(ensemble77grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x218_2 = _mm512_set1_ps(ensemble77grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x218_3 = _mm512_set1_ps(ensemble77grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        ___x217 = _mm512_fmadd_ps(___x218_0, ___x216_0, ___x217);
                        ___x217 = _mm512_fmadd_ps(___x218_1, ___x216_1, ___x217);
                        ___x217 = _mm512_fmadd_ps(___x218_2, ___x216_2, ___x217);
                        ___x217 = _mm512_fmadd_ps(___x218_3, ___x216_3, ___x217);
                        _mm512_store_ps(& ensemble77grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x217);
                    }
                }
            }
        }
    }
    times[90] += omp_get_wtime();
    times[91] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 32; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    __m512 ___x214_0 = _mm512_load_ps(& ensemble77grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x214_1 = _mm512_load_ps(& ensemble77grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x214_2 = _mm512_load_ps(& ensemble77grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x214_3 = _mm512_load_ps(& ensemble77grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x213 = _mm512_load_ps(& ensemble77weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x215_0 = _mm512_set1_ps(ensemble77grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x215_1 = _mm512_set1_ps(ensemble77grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x215_2 = _mm512_set1_ps(ensemble77grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x215_3 = _mm512_set1_ps(ensemble77grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        ___x214_0 = _mm512_fmadd_ps(___x215_0, ___x213, ___x214_0);
                        ___x214_1 = _mm512_fmadd_ps(___x215_1, ___x213, ___x214_1);
                        ___x214_2 = _mm512_fmadd_ps(___x215_2, ___x213, ___x214_2);
                        ___x214_3 = _mm512_fmadd_ps(___x215_3, ___x213, ___x214_3);
                    }
                    _mm512_store_ps(& ensemble77grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x214_0);
                    _mm512_store_ps(& ensemble77grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x214_1);
                    _mm512_store_ps(& ensemble77grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x214_2);
                    _mm512_store_ps(& ensemble77grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x214_3);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 32; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 4; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 4; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 3 - 0;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 3 - 0;
                        int _input_offset_3 = in_x;
                        float val = ensemble76grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / ensemble76kernel[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        for (int j = 0; j < 5; j += 1) {
                            for (int k = 0; k < 5; k += 1) {
                                ensemble76grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j * 1 + _input_offset_2, 0), 13)][MIN(MAX(k * 1 + _input_offset_3, 0), 13)][_input_offset_1_inner] += val;
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x206 = _mm512_load_ps(& ensemble75grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble75grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x206);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 13; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x207 = _mm512_load_ps(& ensemble75grad[_neuron_index_0][(_neuron_index_1_outer + 12)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble75grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x207);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x208 = _mm512_load_ps(& ensemble75grad[_neuron_index_0][(_neuron_index_1_outer + 25)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble75grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x208);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    __m512 ___x209 = _mm512_load_ps(& ensemble75grad[_neuron_index_0][(_neuron_index_1_outer + 28)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble75grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x209);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble74inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble74grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble74grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble74grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[91] += omp_get_wtime();
    times[92] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble73grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble73grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x201_0 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x201_1 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x201_2 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x201_3 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x201_4 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x201_5 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x201_6 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x201_7 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x201_8 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x201_9 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x201_10 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x201_11 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x201_12 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x201_13 = _mm512_load_ps(& ensemble72inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x199 = _mm512_load_ps(& ensemble72grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x200_0 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x200_1 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x200_2 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x200_3 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x200_4 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x200_5 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x200_6 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x200_7 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x200_8 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x200_9 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x200_10 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x200_11 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x200_12 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x200_13 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        ___x199 = _mm512_fmadd_ps(___x200_0, ___x201_0, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_1, ___x201_1, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_2, ___x201_2, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_3, ___x201_3, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_4, ___x201_4, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_5, ___x201_5, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_6, ___x201_6, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_7, ___x201_7, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_8, ___x201_8, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_9, ___x201_9, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_10, ___x201_10, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_11, ___x201_11, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_12, ___x201_12, ___x199);
                        ___x199 = _mm512_fmadd_ps(___x200_13, ___x201_13, ___x199);
                        _mm512_store_ps(& ensemble72grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x199);
                    }
                }
            }
        }
    }
    times[92] += omp_get_wtime();
    times[93] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x196_0 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x196_1 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x196_2 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x196_3 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x196_4 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x196_5 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x196_6 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x196_7 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x196_8 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x196_9 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x196_10 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x196_11 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x196_12 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x196_13 = _mm512_load_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x197_0 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x197_1 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x197_2 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x197_3 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x197_4 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x197_5 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x197_6 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x197_7 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x197_8 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x197_9 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x197_10 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x197_11 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x197_12 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x197_13 = _mm512_set1_ps(ensemble72grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x198 = _mm512_load_ps(& ensemble72weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x196_0 = _mm512_fmadd_ps(___x197_0, ___x198, ___x196_0);
                        ___x196_1 = _mm512_fmadd_ps(___x197_1, ___x198, ___x196_1);
                        ___x196_2 = _mm512_fmadd_ps(___x197_2, ___x198, ___x196_2);
                        ___x196_3 = _mm512_fmadd_ps(___x197_3, ___x198, ___x196_3);
                        ___x196_4 = _mm512_fmadd_ps(___x197_4, ___x198, ___x196_4);
                        ___x196_5 = _mm512_fmadd_ps(___x197_5, ___x198, ___x196_5);
                        ___x196_6 = _mm512_fmadd_ps(___x197_6, ___x198, ___x196_6);
                        ___x196_7 = _mm512_fmadd_ps(___x197_7, ___x198, ___x196_7);
                        ___x196_8 = _mm512_fmadd_ps(___x197_8, ___x198, ___x196_8);
                        ___x196_9 = _mm512_fmadd_ps(___x197_9, ___x198, ___x196_9);
                        ___x196_10 = _mm512_fmadd_ps(___x197_10, ___x198, ___x196_10);
                        ___x196_11 = _mm512_fmadd_ps(___x197_11, ___x198, ___x196_11);
                        ___x196_12 = _mm512_fmadd_ps(___x197_12, ___x198, ___x196_12);
                        ___x196_13 = _mm512_fmadd_ps(___x197_13, ___x198, ___x196_13);
                    }
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x196_0);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x196_1);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x196_2);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x196_3);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x196_4);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x196_5);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x196_6);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x196_7);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x196_8);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x196_9);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x196_10);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x196_11);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x196_12);
                    _mm512_store_ps(& ensemble72grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x196_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 30; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble71mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble71mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble71grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 13)][MIN(MAX(k + _input_offset_3, 0), 13)][_input_offset_1_inner] += ensemble71grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble70inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble70grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble70grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble70grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[93] += omp_get_wtime();
    times[94] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble69grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble69grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                int in_y = _neuron_index_2 * 1;
                int _input_offset_2 = in_y;
                int in_x_0 = (0 + 0) * 1;
                int in_x_1 = (0 + 1) * 1;
                int in_x_2 = (0 + 2) * 1;
                int in_x_3 = (0 + 3) * 1;
                int in_x_4 = (0 + 4) * 1;
                int in_x_5 = (0 + 5) * 1;
                int in_x_6 = (0 + 6) * 1;
                int in_x_7 = (0 + 7) * 1;
                int in_x_8 = (0 + 8) * 1;
                int in_x_9 = (0 + 9) * 1;
                int in_x_10 = (0 + 10) * 1;
                int in_x_11 = (0 + 11) * 1;
                int in_x_12 = (0 + 12) * 1;
                int in_x_13 = (0 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        __m512 ___x191_0 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                        __m512 ___x191_1 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                        __m512 ___x191_2 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                        __m512 ___x191_3 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                        __m512 ___x191_4 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                        __m512 ___x191_5 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                        __m512 ___x191_6 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                        __m512 ___x191_7 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                        __m512 ___x191_8 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                        __m512 ___x191_9 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                        __m512 ___x191_10 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                        __m512 ___x191_11 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                        __m512 ___x191_12 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                        __m512 ___x191_13 = _mm512_load_ps(& ensemble68inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                        for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                            __m512 ___x190_0 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                            __m512 ___x190_1 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                            __m512 ___x190_2 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                            __m512 ___x190_3 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                            __m512 ___x190_4 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                            __m512 ___x190_5 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                            __m512 ___x190_6 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                            __m512 ___x190_7 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                            __m512 ___x190_8 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                            __m512 ___x190_9 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                            __m512 ___x190_10 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                            __m512 ___x190_11 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                            __m512 ___x190_12 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                            __m512 ___x190_13 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                            __m512 ___x192 = _mm512_load_ps(& ensemble68grad_weights[_neuron_index_1_outer][0][j][k][_neuron_index_1_inner][0]);
                            ___x192 = _mm512_fmadd_ps(___x190_0, ___x191_0, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_1, ___x191_1, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_2, ___x191_2, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_3, ___x191_3, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_4, ___x191_4, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_5, ___x191_5, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_6, ___x191_6, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_7, ___x191_7, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_8, ___x191_8, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_9, ___x191_9, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_10, ___x191_10, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_11, ___x191_11, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_12, ___x191_12, ___x192);
                            ___x192 = _mm512_fmadd_ps(___x190_13, ___x191_13, ___x192);
                            _mm512_store_ps(& ensemble68grad_weights[_neuron_index_1_outer][0][j][k][_neuron_index_1_inner][0], ___x192);
                        }
                    }
                }
            }
        }
    }
    times[94] += omp_get_wtime();
    times[95] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 3; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                int in_y = _neuron_index_2 * 1;
                int _input_offset_2 = in_y;
                int in_x_0 = (0 + 0) * 1;
                int in_x_1 = (0 + 1) * 1;
                int in_x_2 = (0 + 2) * 1;
                int in_x_3 = (0 + 3) * 1;
                int in_x_4 = (0 + 4) * 1;
                int in_x_5 = (0 + 5) * 1;
                int in_x_6 = (0 + 6) * 1;
                int in_x_7 = (0 + 7) * 1;
                int in_x_8 = (0 + 8) * 1;
                int in_x_9 = (0 + 9) * 1;
                int in_x_10 = (0 + 10) * 1;
                int in_x_11 = (0 + 11) * 1;
                int in_x_12 = (0 + 12) * 1;
                int in_x_13 = (0 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        __m512 ___x188_0 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                        __m512 ___x188_1 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                        __m512 ___x188_2 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                        __m512 ___x188_3 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                        __m512 ___x188_4 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                        __m512 ___x188_5 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                        __m512 ___x188_6 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                        __m512 ___x188_7 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                        __m512 ___x188_8 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                        __m512 ___x188_9 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                        __m512 ___x188_10 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                        __m512 ___x188_11 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                        __m512 ___x188_12 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                        __m512 ___x188_13 = _mm512_load_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                        for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                            __m512 ___x187_0 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                            __m512 ___x187_1 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                            __m512 ___x187_2 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                            __m512 ___x187_3 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                            __m512 ___x187_4 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                            __m512 ___x187_5 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                            __m512 ___x187_6 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                            __m512 ___x187_7 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                            __m512 ___x187_8 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                            __m512 ___x187_9 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                            __m512 ___x187_10 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                            __m512 ___x187_11 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                            __m512 ___x187_12 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                            __m512 ___x187_13 = _mm512_set1_ps(ensemble68grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                            __m512 ___x189 = _mm512_load_ps(& ensemble68weights[_neuron_index_1_outer][0][j][k][_neuron_index_1_inner][0]);
                            ___x188_0 = _mm512_fmadd_ps(___x187_0, ___x189, ___x188_0);
                            ___x188_1 = _mm512_fmadd_ps(___x187_1, ___x189, ___x188_1);
                            ___x188_2 = _mm512_fmadd_ps(___x187_2, ___x189, ___x188_2);
                            ___x188_3 = _mm512_fmadd_ps(___x187_3, ___x189, ___x188_3);
                            ___x188_4 = _mm512_fmadd_ps(___x187_4, ___x189, ___x188_4);
                            ___x188_5 = _mm512_fmadd_ps(___x187_5, ___x189, ___x188_5);
                            ___x188_6 = _mm512_fmadd_ps(___x187_6, ___x189, ___x188_6);
                            ___x188_7 = _mm512_fmadd_ps(___x187_7, ___x189, ___x188_7);
                            ___x188_8 = _mm512_fmadd_ps(___x187_8, ___x189, ___x188_8);
                            ___x188_9 = _mm512_fmadd_ps(___x187_9, ___x189, ___x188_9);
                            ___x188_10 = _mm512_fmadd_ps(___x187_10, ___x189, ___x188_10);
                            ___x188_11 = _mm512_fmadd_ps(___x187_11, ___x189, ___x188_11);
                            ___x188_12 = _mm512_fmadd_ps(___x187_12, ___x189, ___x188_12);
                            ___x188_13 = _mm512_fmadd_ps(___x187_13, ___x189, ___x188_13);
                        }
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x188_0);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x188_1);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x188_2);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x188_3);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x188_4);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x188_5);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x188_6);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x188_7);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x188_8);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x188_9);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x188_10);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x188_11);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x188_12);
                        _mm512_store_ps(& ensemble68grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x188_13);
                    }
                }
            }
        }
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    if (ensemble67inputs[_neuron_index_0][0][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] > 0.0) {
                        ensemble67grad_inputs[_neuron_index_0][0][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble67grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    } else {
                        ensemble67grad_inputs[_neuron_index_0][0][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = 0.0;
                    };
                }
            }
        }
        for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    ensemble66grad_bias[0][0][_neuron_index_1_inner] += ensemble66grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                }
            }
        }
    }
    times[95] += omp_get_wtime();
    times[96] -= omp_get_wtime();
    #pragma omp parallel for
    for (int i_outer = 0; i_outer < 30; i_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                int in_y = _neuron_index_2 * 1;
                int _input_offset_2 = in_y;
                int in_x_0 = (0 + 0) * 1;
                int in_x_1 = (0 + 1) * 1;
                int in_x_2 = (0 + 2) * 1;
                int in_x_3 = (0 + 3) * 1;
                int in_x_4 = (0 + 4) * 1;
                int in_x_5 = (0 + 5) * 1;
                int in_x_6 = (0 + 6) * 1;
                int in_x_7 = (0 + 7) * 1;
                int in_x_8 = (0 + 8) * 1;
                int in_x_9 = (0 + 9) * 1;
                int in_x_10 = (0 + 10) * 1;
                int in_x_11 = (0 + 11) * 1;
                int in_x_12 = (0 + 12) * 1;
                int in_x_13 = (0 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m512 ___x181_0 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                __m512 ___x181_1 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                __m512 ___x181_2 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                __m512 ___x181_3 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                __m512 ___x181_4 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                __m512 ___x181_5 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                __m512 ___x181_6 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                __m512 ___x181_7 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                __m512 ___x181_8 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                __m512 ___x181_9 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                __m512 ___x181_10 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                __m512 ___x181_11 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                __m512 ___x181_12 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                __m512 ___x181_13 = _mm512_load_ps(& ensemble65inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x182_0 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_1 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_2 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_3 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_4 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_5 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_6 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_7 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_8 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_9 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_10 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_11 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_12 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                    __m512 ___x182_13 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                    __m512 ___x183 = _mm512_load_ps(& ensemble65grad_weights[0][i_outer][0][0][_neuron_index_1_inner][0]);
                    ___x183 = _mm512_fmadd_ps(___x182_0, ___x181_0, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_1, ___x181_1, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_2, ___x181_2, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_3, ___x181_3, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_4, ___x181_4, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_5, ___x181_5, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_6, ___x181_6, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_7, ___x181_7, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_8, ___x181_8, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_9, ___x181_9, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_10, ___x181_10, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_11, ___x181_11, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_12, ___x181_12, ___x183);
                    ___x183 = _mm512_fmadd_ps(___x182_13, ___x181_13, ___x183);
                    _mm512_store_ps(& ensemble65grad_weights[0][i_outer][0][0][_neuron_index_1_inner][0], ___x183);
                }
            }
        }
    }
    times[96] += omp_get_wtime();
    times[97] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                int in_y = _neuron_index_2 * 1;
                int _input_offset_2 = in_y;
                int in_x_0 = (0 + 0) * 1;
                int in_x_1 = (0 + 1) * 1;
                int in_x_2 = (0 + 2) * 1;
                int in_x_3 = (0 + 3) * 1;
                int in_x_4 = (0 + 4) * 1;
                int in_x_5 = (0 + 5) * 1;
                int in_x_6 = (0 + 6) * 1;
                int in_x_7 = (0 + 7) * 1;
                int in_x_8 = (0 + 8) * 1;
                int in_x_9 = (0 + 9) * 1;
                int in_x_10 = (0 + 10) * 1;
                int in_x_11 = (0 + 11) * 1;
                int in_x_12 = (0 + 12) * 1;
                int in_x_13 = (0 + 13) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                __m512 ___x178_0 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                __m512 ___x178_1 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                __m512 ___x178_2 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                __m512 ___x178_3 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                __m512 ___x178_4 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                __m512 ___x178_5 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                __m512 ___x178_6 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                __m512 ___x178_7 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                __m512 ___x178_8 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                __m512 ___x178_9 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                __m512 ___x178_10 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                __m512 ___x178_11 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                __m512 ___x178_12 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                __m512 ___x178_13 = _mm512_load_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x179_0 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_1 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_2 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_3 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_4 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_5 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_6 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_7 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_8 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_9 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_10 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_11 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_12 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                    __m512 ___x179_13 = _mm512_set1_ps(ensemble65grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                    __m512 ___x180 = _mm512_load_ps(& ensemble65weights[0][i_outer][0][0][_neuron_index_1_inner][0]);
                    ___x178_0 = _mm512_fmadd_ps(___x179_0, ___x180, ___x178_0);
                    ___x178_1 = _mm512_fmadd_ps(___x179_1, ___x180, ___x178_1);
                    ___x178_2 = _mm512_fmadd_ps(___x179_2, ___x180, ___x178_2);
                    ___x178_3 = _mm512_fmadd_ps(___x179_3, ___x180, ___x178_3);
                    ___x178_4 = _mm512_fmadd_ps(___x179_4, ___x180, ___x178_4);
                    ___x178_5 = _mm512_fmadd_ps(___x179_5, ___x180, ___x178_5);
                    ___x178_6 = _mm512_fmadd_ps(___x179_6, ___x180, ___x178_6);
                    ___x178_7 = _mm512_fmadd_ps(___x179_7, ___x180, ___x178_7);
                    ___x178_8 = _mm512_fmadd_ps(___x179_8, ___x180, ___x178_8);
                    ___x178_9 = _mm512_fmadd_ps(___x179_9, ___x180, ___x178_9);
                    ___x178_10 = _mm512_fmadd_ps(___x179_10, ___x180, ___x178_10);
                    ___x178_11 = _mm512_fmadd_ps(___x179_11, ___x180, ___x178_11);
                    ___x178_12 = _mm512_fmadd_ps(___x179_12, ___x180, ___x178_12);
                    ___x178_13 = _mm512_fmadd_ps(___x179_13, ___x180, ___x178_13);
                }
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x178_0);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x178_1);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x178_2);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x178_3);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x178_4);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x178_5);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x178_6);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x178_7);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x178_8);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x178_9);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x178_10);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x178_11);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x178_12);
                _mm512_store_ps(& ensemble65grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x178_13);
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 13; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble64inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble64grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble64grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble64grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[97] += omp_get_wtime();
    times[98] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 13; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble63grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble63grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 6; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x173_0 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x173_1 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x173_2 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x173_3 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x173_4 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x173_5 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x173_6 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x173_7 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x173_8 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x173_9 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x173_10 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x173_11 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x173_12 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x173_13 = _mm512_load_ps(& ensemble62inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x172 = _mm512_load_ps(& ensemble62grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x174_0 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x174_1 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x174_2 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x174_3 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x174_4 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x174_5 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x174_6 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x174_7 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x174_8 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x174_9 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x174_10 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x174_11 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x174_12 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x174_13 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                ___x172 = _mm512_fmadd_ps(___x174_0, ___x173_0, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_1, ___x173_1, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_2, ___x173_2, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_3, ___x173_3, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_4, ___x173_4, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_5, ___x173_5, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_6, ___x173_6, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_7, ___x173_7, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_8, ___x173_8, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_9, ___x173_9, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_10, ___x173_10, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_11, ___x173_11, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_12, ___x173_12, ___x172);
                                ___x172 = _mm512_fmadd_ps(___x174_13, ___x173_13, ___x172);
                                _mm512_store_ps(& ensemble62grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x172);
                            }
                        }
                    }
                }
            }
        }
    }
    times[98] += omp_get_wtime();
    times[99] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 6; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 13; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x169_0 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x169_1 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x169_2 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x169_3 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x169_4 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x169_5 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x169_6 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x169_7 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x169_8 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x169_9 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x169_10 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x169_11 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x169_12 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x169_13 = _mm512_load_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x170 = _mm512_load_ps(& ensemble62weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x171_0 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x171_1 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x171_2 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x171_3 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x171_4 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x171_5 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x171_6 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x171_7 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x171_8 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x171_9 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x171_10 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x171_11 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x171_12 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x171_13 = _mm512_set1_ps(ensemble62grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                ___x169_0 = _mm512_fmadd_ps(___x171_0, ___x170, ___x169_0);
                                ___x169_1 = _mm512_fmadd_ps(___x171_1, ___x170, ___x169_1);
                                ___x169_2 = _mm512_fmadd_ps(___x171_2, ___x170, ___x169_2);
                                ___x169_3 = _mm512_fmadd_ps(___x171_3, ___x170, ___x169_3);
                                ___x169_4 = _mm512_fmadd_ps(___x171_4, ___x170, ___x169_4);
                                ___x169_5 = _mm512_fmadd_ps(___x171_5, ___x170, ___x169_5);
                                ___x169_6 = _mm512_fmadd_ps(___x171_6, ___x170, ___x169_6);
                                ___x169_7 = _mm512_fmadd_ps(___x171_7, ___x170, ___x169_7);
                                ___x169_8 = _mm512_fmadd_ps(___x171_8, ___x170, ___x169_8);
                                ___x169_9 = _mm512_fmadd_ps(___x171_9, ___x170, ___x169_9);
                                ___x169_10 = _mm512_fmadd_ps(___x171_10, ___x170, ___x169_10);
                                ___x169_11 = _mm512_fmadd_ps(___x171_11, ___x170, ___x169_11);
                                ___x169_12 = _mm512_fmadd_ps(___x171_12, ___x170, ___x169_12);
                                ___x169_13 = _mm512_fmadd_ps(___x171_13, ___x170, ___x169_13);
                            }
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x169_0);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x169_1);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x169_2);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x169_3);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x169_4);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x169_5);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x169_6);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x169_7);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x169_8);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x169_9);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x169_10);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x169_11);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x169_12);
                            _mm512_store_ps(& ensemble62grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x169_13);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble61inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] > 0.0) {
                            ensemble61grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble61grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                        } else {
                            ensemble61grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[99] += omp_get_wtime();
    times[100] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble60grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble60grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x164_0 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x164_1 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x164_2 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x164_3 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x164_4 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x164_5 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x164_6 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x164_7 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x164_8 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x164_9 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x164_10 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x164_11 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x164_12 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x164_13 = _mm512_load_ps(& ensemble59inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x163_0 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_1 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_2 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_3 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_4 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_5 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_6 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_7 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_8 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_9 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_10 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_11 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_12 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x163_13 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        __m512 ___x165 = _mm512_load_ps(& ensemble59grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x165 = _mm512_fmadd_ps(___x163_0, ___x164_0, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_1, ___x164_1, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_2, ___x164_2, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_3, ___x164_3, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_4, ___x164_4, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_5, ___x164_5, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_6, ___x164_6, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_7, ___x164_7, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_8, ___x164_8, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_9, ___x164_9, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_10, ___x164_10, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_11, ___x164_11, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_12, ___x164_12, ___x165);
                        ___x165 = _mm512_fmadd_ps(___x163_13, ___x164_13, ___x165);
                        _mm512_store_ps(& ensemble59grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x165);
                    }
                }
            }
        }
    }
    times[100] += omp_get_wtime();
    times[101] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x162_0 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x162_1 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x162_2 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x162_3 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x162_4 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x162_5 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x162_6 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x162_7 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x162_8 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x162_9 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x162_10 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x162_11 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x162_12 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x162_13 = _mm512_load_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x160_0 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_1 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_2 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_3 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_4 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_5 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_6 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_7 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_8 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_9 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_10 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_11 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_12 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x160_13 = _mm512_set1_ps(ensemble59grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        __m512 ___x161 = _mm512_load_ps(& ensemble59weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x162_0 = _mm512_fmadd_ps(___x160_0, ___x161, ___x162_0);
                        ___x162_1 = _mm512_fmadd_ps(___x160_1, ___x161, ___x162_1);
                        ___x162_2 = _mm512_fmadd_ps(___x160_2, ___x161, ___x162_2);
                        ___x162_3 = _mm512_fmadd_ps(___x160_3, ___x161, ___x162_3);
                        ___x162_4 = _mm512_fmadd_ps(___x160_4, ___x161, ___x162_4);
                        ___x162_5 = _mm512_fmadd_ps(___x160_5, ___x161, ___x162_5);
                        ___x162_6 = _mm512_fmadd_ps(___x160_6, ___x161, ___x162_6);
                        ___x162_7 = _mm512_fmadd_ps(___x160_7, ___x161, ___x162_7);
                        ___x162_8 = _mm512_fmadd_ps(___x160_8, ___x161, ___x162_8);
                        ___x162_9 = _mm512_fmadd_ps(___x160_9, ___x161, ___x162_9);
                        ___x162_10 = _mm512_fmadd_ps(___x160_10, ___x161, ___x162_10);
                        ___x162_11 = _mm512_fmadd_ps(___x160_11, ___x161, ___x162_11);
                        ___x162_12 = _mm512_fmadd_ps(___x160_12, ___x161, ___x162_12);
                        ___x162_13 = _mm512_fmadd_ps(___x160_13, ___x161, ___x162_13);
                    }
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x162_0);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x162_1);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x162_2);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x162_3);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x162_4);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x162_5);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x162_6);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x162_7);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x162_8);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x162_9);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x162_10);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x162_11);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x162_12);
                    _mm512_store_ps(& ensemble59grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x162_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble58inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble58grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble58grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble58grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[101] += omp_get_wtime();
    times[102] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble57grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble57grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x155_0 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x155_1 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x155_2 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x155_3 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x155_4 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x155_5 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x155_6 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x155_7 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x155_8 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x155_9 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x155_10 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x155_11 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x155_12 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x155_13 = _mm512_load_ps(& ensemble56inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x154_0 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x154_1 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x154_2 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x154_3 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x154_4 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x154_5 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x154_6 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x154_7 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x154_8 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x154_9 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x154_10 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x154_11 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x154_12 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x154_13 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x156 = _mm512_load_ps(& ensemble56grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x156 = _mm512_fmadd_ps(___x154_0, ___x155_0, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_1, ___x155_1, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_2, ___x155_2, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_3, ___x155_3, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_4, ___x155_4, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_5, ___x155_5, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_6, ___x155_6, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_7, ___x155_7, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_8, ___x155_8, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_9, ___x155_9, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_10, ___x155_10, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_11, ___x155_11, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_12, ___x155_12, ___x156);
                        ___x156 = _mm512_fmadd_ps(___x154_13, ___x155_13, ___x156);
                        _mm512_store_ps(& ensemble56grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x156);
                    }
                }
            }
        }
    }
    times[102] += omp_get_wtime();
    times[103] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 30; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    __m512 ___x151_0 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x151_1 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x151_2 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x151_3 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x151_4 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x151_5 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x151_6 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x151_7 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x151_8 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x151_9 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x151_10 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x151_11 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x151_12 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x151_13 = _mm512_load_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x152_0 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x152_1 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x152_2 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x152_3 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x152_4 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x152_5 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x152_6 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x152_7 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x152_8 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x152_9 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x152_10 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x152_11 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x152_12 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x152_13 = _mm512_set1_ps(ensemble56grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x153 = _mm512_load_ps(& ensemble56weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x151_0 = _mm512_fmadd_ps(___x152_0, ___x153, ___x151_0);
                        ___x151_1 = _mm512_fmadd_ps(___x152_1, ___x153, ___x151_1);
                        ___x151_2 = _mm512_fmadd_ps(___x152_2, ___x153, ___x151_2);
                        ___x151_3 = _mm512_fmadd_ps(___x152_3, ___x153, ___x151_3);
                        ___x151_4 = _mm512_fmadd_ps(___x152_4, ___x153, ___x151_4);
                        ___x151_5 = _mm512_fmadd_ps(___x152_5, ___x153, ___x151_5);
                        ___x151_6 = _mm512_fmadd_ps(___x152_6, ___x153, ___x151_6);
                        ___x151_7 = _mm512_fmadd_ps(___x152_7, ___x153, ___x151_7);
                        ___x151_8 = _mm512_fmadd_ps(___x152_8, ___x153, ___x151_8);
                        ___x151_9 = _mm512_fmadd_ps(___x152_9, ___x153, ___x151_9);
                        ___x151_10 = _mm512_fmadd_ps(___x152_10, ___x153, ___x151_10);
                        ___x151_11 = _mm512_fmadd_ps(___x152_11, ___x153, ___x151_11);
                        ___x151_12 = _mm512_fmadd_ps(___x152_12, ___x153, ___x151_12);
                        ___x151_13 = _mm512_fmadd_ps(___x152_13, ___x153, ___x151_13);
                    }
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x151_0);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x151_1);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x151_2);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x151_3);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x151_4);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x151_5);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x151_6);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x151_7);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x151_8);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x151_9);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x151_10);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x151_11);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x151_12);
                    _mm512_store_ps(& ensemble56grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x151_13);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 30; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 14; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 14; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 2 - 0;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 2 - 0;
                        int _input_offset_3 = in_x;
                        long j = ensemble55mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble55mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble55grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 27)][MIN(MAX(k + _input_offset_3, 0), 27)][_input_offset_1_inner] += ensemble55grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x144 = _mm512_load_ps(& ensemble54grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble54grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x144);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x145 = _mm512_load_ps(& ensemble54grad[_neuron_index_0][(_neuron_index_1_outer + 8)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble54grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x145);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x146 = _mm512_load_ps(& ensemble54grad[_neuron_index_0][(_neuron_index_1_outer + 20)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble54grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x146);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x147 = _mm512_load_ps(& ensemble54grad[_neuron_index_0][(_neuron_index_1_outer + 26)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble54grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x147);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble53inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble53grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble53grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble53grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[103] += omp_get_wtime();
    times[104] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble52grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble52grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x139_0 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x139_1 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x139_2 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x139_3 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x139_4 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x139_5 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x139_6 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x139_7 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x139_8 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x139_9 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x139_10 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x139_11 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x139_12 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x139_13 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x139_14 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x139_15 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x139_16 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x139_17 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x139_18 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x139_19 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x139_20 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x139_21 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x139_22 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x139_23 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x139_24 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x139_25 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x139_26 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x139_27 = _mm512_load_ps(& ensemble51inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x137_0 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x137_1 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x137_2 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x137_3 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x137_4 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x137_5 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x137_6 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x137_7 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x137_8 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x137_9 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x137_10 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x137_11 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x137_12 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x137_13 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x137_14 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                        __m512 ___x137_15 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                        __m512 ___x137_16 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                        __m512 ___x137_17 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                        __m512 ___x137_18 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                        __m512 ___x137_19 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                        __m512 ___x137_20 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                        __m512 ___x137_21 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                        __m512 ___x137_22 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                        __m512 ___x137_23 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                        __m512 ___x137_24 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                        __m512 ___x137_25 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                        __m512 ___x137_26 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                        __m512 ___x137_27 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                        __m512 ___x138 = _mm512_load_ps(& ensemble51grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x138 = _mm512_fmadd_ps(___x137_0, ___x139_0, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_1, ___x139_1, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_2, ___x139_2, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_3, ___x139_3, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_4, ___x139_4, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_5, ___x139_5, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_6, ___x139_6, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_7, ___x139_7, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_8, ___x139_8, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_9, ___x139_9, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_10, ___x139_10, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_11, ___x139_11, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_12, ___x139_12, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_13, ___x139_13, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_14, ___x139_14, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_15, ___x139_15, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_16, ___x139_16, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_17, ___x139_17, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_18, ___x139_18, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_19, ___x139_19, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_20, ___x139_20, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_21, ___x139_21, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_22, ___x139_22, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_23, ___x139_23, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_24, ___x139_24, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_25, ___x139_25, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_26, ___x139_26, ___x138);
                        ___x138 = _mm512_fmadd_ps(___x137_27, ___x139_27, ___x138);
                        _mm512_store_ps(& ensemble51grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x138);
                    }
                }
            }
        }
    }
    times[104] += omp_get_wtime();
    times[105] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x134_0 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x134_1 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x134_2 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x134_3 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x134_4 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x134_5 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x134_6 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x134_7 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x134_8 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x134_9 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x134_10 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x134_11 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x134_12 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x134_13 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x134_14 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x134_15 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x134_16 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x134_17 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x134_18 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x134_19 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x134_20 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x134_21 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x134_22 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x134_23 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x134_24 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x134_25 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x134_26 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x134_27 = _mm512_load_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x135 = _mm512_load_ps(& ensemble51weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x136_0 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x136_1 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x136_2 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x136_3 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x136_4 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x136_5 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x136_6 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x136_7 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x136_8 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x136_9 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x136_10 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x136_11 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x136_12 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x136_13 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x136_14 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                        __m512 ___x136_15 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                        __m512 ___x136_16 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                        __m512 ___x136_17 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                        __m512 ___x136_18 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                        __m512 ___x136_19 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                        __m512 ___x136_20 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                        __m512 ___x136_21 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                        __m512 ___x136_22 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                        __m512 ___x136_23 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                        __m512 ___x136_24 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                        __m512 ___x136_25 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                        __m512 ___x136_26 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                        __m512 ___x136_27 = _mm512_set1_ps(ensemble51grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                        ___x134_0 = _mm512_fmadd_ps(___x136_0, ___x135, ___x134_0);
                        ___x134_1 = _mm512_fmadd_ps(___x136_1, ___x135, ___x134_1);
                        ___x134_2 = _mm512_fmadd_ps(___x136_2, ___x135, ___x134_2);
                        ___x134_3 = _mm512_fmadd_ps(___x136_3, ___x135, ___x134_3);
                        ___x134_4 = _mm512_fmadd_ps(___x136_4, ___x135, ___x134_4);
                        ___x134_5 = _mm512_fmadd_ps(___x136_5, ___x135, ___x134_5);
                        ___x134_6 = _mm512_fmadd_ps(___x136_6, ___x135, ___x134_6);
                        ___x134_7 = _mm512_fmadd_ps(___x136_7, ___x135, ___x134_7);
                        ___x134_8 = _mm512_fmadd_ps(___x136_8, ___x135, ___x134_8);
                        ___x134_9 = _mm512_fmadd_ps(___x136_9, ___x135, ___x134_9);
                        ___x134_10 = _mm512_fmadd_ps(___x136_10, ___x135, ___x134_10);
                        ___x134_11 = _mm512_fmadd_ps(___x136_11, ___x135, ___x134_11);
                        ___x134_12 = _mm512_fmadd_ps(___x136_12, ___x135, ___x134_12);
                        ___x134_13 = _mm512_fmadd_ps(___x136_13, ___x135, ___x134_13);
                        ___x134_14 = _mm512_fmadd_ps(___x136_14, ___x135, ___x134_14);
                        ___x134_15 = _mm512_fmadd_ps(___x136_15, ___x135, ___x134_15);
                        ___x134_16 = _mm512_fmadd_ps(___x136_16, ___x135, ___x134_16);
                        ___x134_17 = _mm512_fmadd_ps(___x136_17, ___x135, ___x134_17);
                        ___x134_18 = _mm512_fmadd_ps(___x136_18, ___x135, ___x134_18);
                        ___x134_19 = _mm512_fmadd_ps(___x136_19, ___x135, ___x134_19);
                        ___x134_20 = _mm512_fmadd_ps(___x136_20, ___x135, ___x134_20);
                        ___x134_21 = _mm512_fmadd_ps(___x136_21, ___x135, ___x134_21);
                        ___x134_22 = _mm512_fmadd_ps(___x136_22, ___x135, ___x134_22);
                        ___x134_23 = _mm512_fmadd_ps(___x136_23, ___x135, ___x134_23);
                        ___x134_24 = _mm512_fmadd_ps(___x136_24, ___x135, ___x134_24);
                        ___x134_25 = _mm512_fmadd_ps(___x136_25, ___x135, ___x134_25);
                        ___x134_26 = _mm512_fmadd_ps(___x136_26, ___x135, ___x134_26);
                        ___x134_27 = _mm512_fmadd_ps(___x136_27, ___x135, ___x134_27);
                    }
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x134_0);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x134_1);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x134_2);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x134_3);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x134_4);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x134_5);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x134_6);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x134_7);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x134_8);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x134_9);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x134_10);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x134_11);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x134_12);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x134_13);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0], ___x134_14);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0], ___x134_15);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0], ___x134_16);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0], ___x134_17);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0], ___x134_18);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0], ___x134_19);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0], ___x134_20);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0], ___x134_21);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0], ___x134_22);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0], ___x134_23);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0], ___x134_24);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0], ___x134_25);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0], ___x134_26);
                    _mm512_store_ps(& ensemble51grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0], ___x134_27);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 16; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble50mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble50mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble50grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 27)][MIN(MAX(k + _input_offset_3, 0), 27)][_input_offset_1_inner] += ensemble50grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble49inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble49grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble49grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble49grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[105] += omp_get_wtime();
    times[106] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble48grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble48grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x128_0 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x128_1 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x128_2 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x128_3 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x128_4 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x128_5 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x128_6 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x128_7 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x128_8 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x128_9 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x128_10 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x128_11 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x128_12 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x128_13 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            __m512 ___x128_14 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0]);
                            __m512 ___x128_15 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0]);
                            __m512 ___x128_16 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0]);
                            __m512 ___x128_17 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0]);
                            __m512 ___x128_18 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0]);
                            __m512 ___x128_19 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0]);
                            __m512 ___x128_20 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0]);
                            __m512 ___x128_21 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0]);
                            __m512 ___x128_22 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0]);
                            __m512 ___x128_23 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0]);
                            __m512 ___x128_24 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0]);
                            __m512 ___x128_25 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0]);
                            __m512 ___x128_26 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0]);
                            __m512 ___x128_27 = _mm512_load_ps(& ensemble47inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x129_0 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x129_1 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x129_2 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x129_3 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x129_4 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x129_5 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x129_6 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x129_7 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x129_8 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x129_9 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x129_10 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x129_11 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x129_12 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x129_13 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x129_14 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                                __m512 ___x129_15 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                                __m512 ___x129_16 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                                __m512 ___x129_17 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                                __m512 ___x129_18 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                                __m512 ___x129_19 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                                __m512 ___x129_20 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                                __m512 ___x129_21 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                                __m512 ___x129_22 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                                __m512 ___x129_23 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                                __m512 ___x129_24 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                                __m512 ___x129_25 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                                __m512 ___x129_26 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                                __m512 ___x129_27 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                                __m512 ___x130 = _mm512_load_ps(& ensemble47grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x130 = _mm512_fmadd_ps(___x129_0, ___x128_0, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_1, ___x128_1, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_2, ___x128_2, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_3, ___x128_3, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_4, ___x128_4, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_5, ___x128_5, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_6, ___x128_6, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_7, ___x128_7, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_8, ___x128_8, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_9, ___x128_9, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_10, ___x128_10, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_11, ___x128_11, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_12, ___x128_12, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_13, ___x128_13, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_14, ___x128_14, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_15, ___x128_15, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_16, ___x128_16, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_17, ___x128_17, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_18, ___x128_18, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_19, ___x128_19, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_20, ___x128_20, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_21, ___x128_21, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_22, ___x128_22, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_23, ___x128_23, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_24, ___x128_24, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_25, ___x128_25, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_26, ___x128_26, ___x130);
                                ___x130 = _mm512_fmadd_ps(___x129_27, ___x128_27, ___x130);
                                _mm512_store_ps(& ensemble47grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x130);
                            }
                        }
                    }
                }
            }
        }
    }
    times[106] += omp_get_wtime();
    times[107] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 2; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    for (int j = 0; j < 5; j += 1) {
                        for (int k = 0; k < 5; k += 1) {
                            __m512 ___x126_0 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x126_1 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x126_2 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x126_3 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x126_4 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x126_5 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x126_6 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x126_7 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x126_8 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x126_9 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x126_10 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x126_11 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x126_12 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x126_13 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            __m512 ___x126_14 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0]);
                            __m512 ___x126_15 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0]);
                            __m512 ___x126_16 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0]);
                            __m512 ___x126_17 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0]);
                            __m512 ___x126_18 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0]);
                            __m512 ___x126_19 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0]);
                            __m512 ___x126_20 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0]);
                            __m512 ___x126_21 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0]);
                            __m512 ___x126_22 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0]);
                            __m512 ___x126_23 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0]);
                            __m512 ___x126_24 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0]);
                            __m512 ___x126_25 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0]);
                            __m512 ___x126_26 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0]);
                            __m512 ___x126_27 = _mm512_load_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x125 = _mm512_load_ps(& ensemble47weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x127_0 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x127_1 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x127_2 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x127_3 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x127_4 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x127_5 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x127_6 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x127_7 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x127_8 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x127_9 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x127_10 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x127_11 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x127_12 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x127_13 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x127_14 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                                __m512 ___x127_15 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                                __m512 ___x127_16 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                                __m512 ___x127_17 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                                __m512 ___x127_18 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                                __m512 ___x127_19 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                                __m512 ___x127_20 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                                __m512 ___x127_21 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                                __m512 ___x127_22 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                                __m512 ___x127_23 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                                __m512 ___x127_24 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                                __m512 ___x127_25 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                                __m512 ___x127_26 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                                __m512 ___x127_27 = _mm512_set1_ps(ensemble47grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                                ___x126_0 = _mm512_fmadd_ps(___x127_0, ___x125, ___x126_0);
                                ___x126_1 = _mm512_fmadd_ps(___x127_1, ___x125, ___x126_1);
                                ___x126_2 = _mm512_fmadd_ps(___x127_2, ___x125, ___x126_2);
                                ___x126_3 = _mm512_fmadd_ps(___x127_3, ___x125, ___x126_3);
                                ___x126_4 = _mm512_fmadd_ps(___x127_4, ___x125, ___x126_4);
                                ___x126_5 = _mm512_fmadd_ps(___x127_5, ___x125, ___x126_5);
                                ___x126_6 = _mm512_fmadd_ps(___x127_6, ___x125, ___x126_6);
                                ___x126_7 = _mm512_fmadd_ps(___x127_7, ___x125, ___x126_7);
                                ___x126_8 = _mm512_fmadd_ps(___x127_8, ___x125, ___x126_8);
                                ___x126_9 = _mm512_fmadd_ps(___x127_9, ___x125, ___x126_9);
                                ___x126_10 = _mm512_fmadd_ps(___x127_10, ___x125, ___x126_10);
                                ___x126_11 = _mm512_fmadd_ps(___x127_11, ___x125, ___x126_11);
                                ___x126_12 = _mm512_fmadd_ps(___x127_12, ___x125, ___x126_12);
                                ___x126_13 = _mm512_fmadd_ps(___x127_13, ___x125, ___x126_13);
                                ___x126_14 = _mm512_fmadd_ps(___x127_14, ___x125, ___x126_14);
                                ___x126_15 = _mm512_fmadd_ps(___x127_15, ___x125, ___x126_15);
                                ___x126_16 = _mm512_fmadd_ps(___x127_16, ___x125, ___x126_16);
                                ___x126_17 = _mm512_fmadd_ps(___x127_17, ___x125, ___x126_17);
                                ___x126_18 = _mm512_fmadd_ps(___x127_18, ___x125, ___x126_18);
                                ___x126_19 = _mm512_fmadd_ps(___x127_19, ___x125, ___x126_19);
                                ___x126_20 = _mm512_fmadd_ps(___x127_20, ___x125, ___x126_20);
                                ___x126_21 = _mm512_fmadd_ps(___x127_21, ___x125, ___x126_21);
                                ___x126_22 = _mm512_fmadd_ps(___x127_22, ___x125, ___x126_22);
                                ___x126_23 = _mm512_fmadd_ps(___x127_23, ___x125, ___x126_23);
                                ___x126_24 = _mm512_fmadd_ps(___x127_24, ___x125, ___x126_24);
                                ___x126_25 = _mm512_fmadd_ps(___x127_25, ___x125, ___x126_25);
                                ___x126_26 = _mm512_fmadd_ps(___x127_26, ___x125, ___x126_26);
                                ___x126_27 = _mm512_fmadd_ps(___x127_27, ___x125, ___x126_27);
                            }
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x126_0);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x126_1);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x126_2);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x126_3);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x126_4);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x126_5);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x126_6);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x126_7);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x126_8);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x126_9);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x126_10);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x126_11);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x126_12);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x126_13);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0], ___x126_14);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0], ___x126_15);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0], ___x126_16);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0], ___x126_17);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0], ___x126_18);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0], ___x126_19);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0], ___x126_20);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0], ___x126_21);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0], ___x126_22);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0], ___x126_23);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0], ___x126_24);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0], ___x126_25);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0], ___x126_26);
                            _mm512_store_ps(& ensemble47grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0], ___x126_27);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble46inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] > 0.0) {
                            ensemble46grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble46grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                        } else {
                            ensemble46grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[107] += omp_get_wtime();
    times[108] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble45grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble45grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x119_0 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x119_1 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x119_2 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x119_3 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x119_4 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x119_5 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x119_6 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x119_7 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x119_8 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x119_9 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x119_10 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x119_11 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x119_12 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x119_13 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x119_14 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x119_15 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x119_16 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x119_17 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x119_18 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x119_19 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x119_20 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x119_21 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x119_22 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x119_23 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x119_24 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x119_25 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x119_26 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x119_27 = _mm512_load_ps(& ensemble44inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x120 = _mm512_load_ps(& ensemble44grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x121_0 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_1 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_2 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_3 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_4 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_5 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_6 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_7 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_8 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_9 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_10 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_11 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_12 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_13 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_14 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 14 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_15 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 15 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_16 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 16 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_17 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 17 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_18 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 18 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_19 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 19 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_20 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 20 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_21 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 21 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_22 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 22 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_23 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 23 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_24 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 24 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_25 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 25 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_26 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 26 + 2)][_neuron_index_1_inner]);
                        __m512 ___x121_27 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 27 + 2)][_neuron_index_1_inner]);
                        ___x120 = _mm512_fmadd_ps(___x121_0, ___x119_0, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_1, ___x119_1, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_2, ___x119_2, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_3, ___x119_3, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_4, ___x119_4, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_5, ___x119_5, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_6, ___x119_6, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_7, ___x119_7, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_8, ___x119_8, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_9, ___x119_9, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_10, ___x119_10, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_11, ___x119_11, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_12, ___x119_12, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_13, ___x119_13, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_14, ___x119_14, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_15, ___x119_15, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_16, ___x119_16, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_17, ___x119_17, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_18, ___x119_18, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_19, ___x119_19, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_20, ___x119_20, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_21, ___x119_21, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_22, ___x119_22, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_23, ___x119_23, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_24, ___x119_24, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_25, ___x119_25, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_26, ___x119_26, ___x120);
                        ___x120 = _mm512_fmadd_ps(___x121_27, ___x119_27, ___x120);
                        _mm512_store_ps(& ensemble44grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x120);
                    }
                }
            }
        }
    }
    times[108] += omp_get_wtime();
    times[109] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x117_0 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x117_1 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x117_2 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x117_3 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x117_4 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x117_5 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x117_6 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x117_7 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x117_8 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x117_9 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x117_10 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x117_11 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x117_12 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x117_13 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x117_14 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x117_15 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x117_16 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x117_17 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x117_18 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x117_19 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x117_20 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x117_21 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x117_22 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x117_23 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x117_24 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x117_25 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x117_26 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x117_27 = _mm512_load_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x116 = _mm512_load_ps(& ensemble44weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x118_0 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_1 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_2 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_3 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_4 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_5 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_6 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_7 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_8 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_9 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_10 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_11 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_12 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_13 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_14 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 14 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_15 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 15 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_16 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 16 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_17 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 17 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_18 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 18 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_19 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 19 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_20 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 20 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_21 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 21 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_22 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 22 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_23 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 23 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_24 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 24 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_25 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 25 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_26 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 26 + 2)][_neuron_index_1_inner]);
                        __m512 ___x118_27 = _mm512_set1_ps(ensemble44grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 2)][(0 + 27 + 2)][_neuron_index_1_inner]);
                        ___x117_0 = _mm512_fmadd_ps(___x118_0, ___x116, ___x117_0);
                        ___x117_1 = _mm512_fmadd_ps(___x118_1, ___x116, ___x117_1);
                        ___x117_2 = _mm512_fmadd_ps(___x118_2, ___x116, ___x117_2);
                        ___x117_3 = _mm512_fmadd_ps(___x118_3, ___x116, ___x117_3);
                        ___x117_4 = _mm512_fmadd_ps(___x118_4, ___x116, ___x117_4);
                        ___x117_5 = _mm512_fmadd_ps(___x118_5, ___x116, ___x117_5);
                        ___x117_6 = _mm512_fmadd_ps(___x118_6, ___x116, ___x117_6);
                        ___x117_7 = _mm512_fmadd_ps(___x118_7, ___x116, ___x117_7);
                        ___x117_8 = _mm512_fmadd_ps(___x118_8, ___x116, ___x117_8);
                        ___x117_9 = _mm512_fmadd_ps(___x118_9, ___x116, ___x117_9);
                        ___x117_10 = _mm512_fmadd_ps(___x118_10, ___x116, ___x117_10);
                        ___x117_11 = _mm512_fmadd_ps(___x118_11, ___x116, ___x117_11);
                        ___x117_12 = _mm512_fmadd_ps(___x118_12, ___x116, ___x117_12);
                        ___x117_13 = _mm512_fmadd_ps(___x118_13, ___x116, ___x117_13);
                        ___x117_14 = _mm512_fmadd_ps(___x118_14, ___x116, ___x117_14);
                        ___x117_15 = _mm512_fmadd_ps(___x118_15, ___x116, ___x117_15);
                        ___x117_16 = _mm512_fmadd_ps(___x118_16, ___x116, ___x117_16);
                        ___x117_17 = _mm512_fmadd_ps(___x118_17, ___x116, ___x117_17);
                        ___x117_18 = _mm512_fmadd_ps(___x118_18, ___x116, ___x117_18);
                        ___x117_19 = _mm512_fmadd_ps(___x118_19, ___x116, ___x117_19);
                        ___x117_20 = _mm512_fmadd_ps(___x118_20, ___x116, ___x117_20);
                        ___x117_21 = _mm512_fmadd_ps(___x118_21, ___x116, ___x117_21);
                        ___x117_22 = _mm512_fmadd_ps(___x118_22, ___x116, ___x117_22);
                        ___x117_23 = _mm512_fmadd_ps(___x118_23, ___x116, ___x117_23);
                        ___x117_24 = _mm512_fmadd_ps(___x118_24, ___x116, ___x117_24);
                        ___x117_25 = _mm512_fmadd_ps(___x118_25, ___x116, ___x117_25);
                        ___x117_26 = _mm512_fmadd_ps(___x118_26, ___x116, ___x117_26);
                        ___x117_27 = _mm512_fmadd_ps(___x118_27, ___x116, ___x117_27);
                    }
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x117_0);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x117_1);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x117_2);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x117_3);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x117_4);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x117_5);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x117_6);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x117_7);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x117_8);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x117_9);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x117_10);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x117_11);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x117_12);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x117_13);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0], ___x117_14);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0], ___x117_15);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0], ___x117_16);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0], ___x117_17);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0], ___x117_18);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0], ___x117_19);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0], ___x117_20);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0], ___x117_21);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0], ___x117_22);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0], ___x117_23);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0], ___x117_24);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0], ___x117_25);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0], ___x117_26);
                    _mm512_store_ps(& ensemble44grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0], ___x117_27);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble43inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble43grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble43grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble43grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[109] += omp_get_wtime();
    times[110] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble42grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble42grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 8; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x110_0 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x110_1 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x110_2 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x110_3 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x110_4 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x110_5 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x110_6 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x110_7 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x110_8 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x110_9 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x110_10 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x110_11 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x110_12 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x110_13 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            __m512 ___x110_14 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0]);
                            __m512 ___x110_15 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0]);
                            __m512 ___x110_16 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0]);
                            __m512 ___x110_17 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0]);
                            __m512 ___x110_18 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0]);
                            __m512 ___x110_19 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0]);
                            __m512 ___x110_20 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0]);
                            __m512 ___x110_21 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0]);
                            __m512 ___x110_22 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0]);
                            __m512 ___x110_23 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0]);
                            __m512 ___x110_24 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0]);
                            __m512 ___x110_25 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0]);
                            __m512 ___x110_26 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0]);
                            __m512 ___x110_27 = _mm512_load_ps(& ensemble41inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x111_0 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x111_1 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x111_2 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x111_3 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x111_4 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x111_5 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x111_6 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x111_7 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x111_8 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x111_9 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x111_10 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x111_11 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x111_12 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x111_13 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x111_14 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                                __m512 ___x111_15 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                                __m512 ___x111_16 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                                __m512 ___x111_17 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                                __m512 ___x111_18 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                                __m512 ___x111_19 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                                __m512 ___x111_20 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                                __m512 ___x111_21 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                                __m512 ___x111_22 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                                __m512 ___x111_23 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                                __m512 ___x111_24 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                                __m512 ___x111_25 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                                __m512 ___x111_26 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                                __m512 ___x111_27 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                                __m512 ___x112 = _mm512_load_ps(& ensemble41grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x112 = _mm512_fmadd_ps(___x111_0, ___x110_0, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_1, ___x110_1, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_2, ___x110_2, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_3, ___x110_3, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_4, ___x110_4, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_5, ___x110_5, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_6, ___x110_6, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_7, ___x110_7, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_8, ___x110_8, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_9, ___x110_9, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_10, ___x110_10, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_11, ___x110_11, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_12, ___x110_12, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_13, ___x110_13, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_14, ___x110_14, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_15, ___x110_15, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_16, ___x110_16, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_17, ___x110_17, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_18, ___x110_18, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_19, ___x110_19, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_20, ___x110_20, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_21, ___x110_21, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_22, ___x110_22, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_23, ___x110_23, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_24, ___x110_24, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_25, ___x110_25, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_26, ___x110_26, ___x112);
                                ___x112 = _mm512_fmadd_ps(___x111_27, ___x110_27, ___x112);
                                _mm512_store_ps(& ensemble41grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x112);
                            }
                        }
                    }
                }
            }
        }
    }
    times[110] += omp_get_wtime();
    times[111] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 8; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x107_0 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x107_1 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x107_2 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x107_3 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x107_4 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x107_5 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x107_6 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x107_7 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x107_8 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x107_9 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x107_10 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x107_11 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x107_12 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x107_13 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            __m512 ___x107_14 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0]);
                            __m512 ___x107_15 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0]);
                            __m512 ___x107_16 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0]);
                            __m512 ___x107_17 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0]);
                            __m512 ___x107_18 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0]);
                            __m512 ___x107_19 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0]);
                            __m512 ___x107_20 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0]);
                            __m512 ___x107_21 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0]);
                            __m512 ___x107_22 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0]);
                            __m512 ___x107_23 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0]);
                            __m512 ___x107_24 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0]);
                            __m512 ___x107_25 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0]);
                            __m512 ___x107_26 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0]);
                            __m512 ___x107_27 = _mm512_load_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x108_0 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x108_1 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x108_2 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x108_3 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x108_4 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x108_5 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x108_6 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x108_7 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x108_8 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x108_9 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x108_10 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x108_11 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x108_12 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x108_13 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x108_14 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                                __m512 ___x108_15 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                                __m512 ___x108_16 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                                __m512 ___x108_17 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                                __m512 ___x108_18 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                                __m512 ___x108_19 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                                __m512 ___x108_20 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                                __m512 ___x108_21 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                                __m512 ___x108_22 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                                __m512 ___x108_23 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                                __m512 ___x108_24 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                                __m512 ___x108_25 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                                __m512 ___x108_26 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                                __m512 ___x108_27 = _mm512_set1_ps(ensemble41grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                                __m512 ___x109 = _mm512_load_ps(& ensemble41weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x107_0 = _mm512_fmadd_ps(___x108_0, ___x109, ___x107_0);
                                ___x107_1 = _mm512_fmadd_ps(___x108_1, ___x109, ___x107_1);
                                ___x107_2 = _mm512_fmadd_ps(___x108_2, ___x109, ___x107_2);
                                ___x107_3 = _mm512_fmadd_ps(___x108_3, ___x109, ___x107_3);
                                ___x107_4 = _mm512_fmadd_ps(___x108_4, ___x109, ___x107_4);
                                ___x107_5 = _mm512_fmadd_ps(___x108_5, ___x109, ___x107_5);
                                ___x107_6 = _mm512_fmadd_ps(___x108_6, ___x109, ___x107_6);
                                ___x107_7 = _mm512_fmadd_ps(___x108_7, ___x109, ___x107_7);
                                ___x107_8 = _mm512_fmadd_ps(___x108_8, ___x109, ___x107_8);
                                ___x107_9 = _mm512_fmadd_ps(___x108_9, ___x109, ___x107_9);
                                ___x107_10 = _mm512_fmadd_ps(___x108_10, ___x109, ___x107_10);
                                ___x107_11 = _mm512_fmadd_ps(___x108_11, ___x109, ___x107_11);
                                ___x107_12 = _mm512_fmadd_ps(___x108_12, ___x109, ___x107_12);
                                ___x107_13 = _mm512_fmadd_ps(___x108_13, ___x109, ___x107_13);
                                ___x107_14 = _mm512_fmadd_ps(___x108_14, ___x109, ___x107_14);
                                ___x107_15 = _mm512_fmadd_ps(___x108_15, ___x109, ___x107_15);
                                ___x107_16 = _mm512_fmadd_ps(___x108_16, ___x109, ___x107_16);
                                ___x107_17 = _mm512_fmadd_ps(___x108_17, ___x109, ___x107_17);
                                ___x107_18 = _mm512_fmadd_ps(___x108_18, ___x109, ___x107_18);
                                ___x107_19 = _mm512_fmadd_ps(___x108_19, ___x109, ___x107_19);
                                ___x107_20 = _mm512_fmadd_ps(___x108_20, ___x109, ___x107_20);
                                ___x107_21 = _mm512_fmadd_ps(___x108_21, ___x109, ___x107_21);
                                ___x107_22 = _mm512_fmadd_ps(___x108_22, ___x109, ___x107_22);
                                ___x107_23 = _mm512_fmadd_ps(___x108_23, ___x109, ___x107_23);
                                ___x107_24 = _mm512_fmadd_ps(___x108_24, ___x109, ___x107_24);
                                ___x107_25 = _mm512_fmadd_ps(___x108_25, ___x109, ___x107_25);
                                ___x107_26 = _mm512_fmadd_ps(___x108_26, ___x109, ___x107_26);
                                ___x107_27 = _mm512_fmadd_ps(___x108_27, ___x109, ___x107_27);
                            }
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x107_0);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x107_1);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x107_2);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x107_3);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x107_4);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x107_5);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x107_6);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x107_7);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x107_8);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x107_9);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x107_10);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x107_11);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x107_12);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x107_13);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0], ___x107_14);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0], ___x107_15);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0], ___x107_16);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0], ___x107_17);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0], ___x107_18);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0], ___x107_19);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0], ___x107_20);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0], ___x107_21);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0], ___x107_22);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0], ___x107_23);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0], ___x107_24);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0], ___x107_25);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0], ___x107_26);
                            _mm512_store_ps(& ensemble41grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0], ___x107_27);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble40inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] > 0.0) {
                            ensemble40grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble40grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                        } else {
                            ensemble40grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[111] += omp_get_wtime();
    times[112] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble39grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble39grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x103_0 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x103_1 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x103_2 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x103_3 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x103_4 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x103_5 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x103_6 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x103_7 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x103_8 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x103_9 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x103_10 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x103_11 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x103_12 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x103_13 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x103_14 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x103_15 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x103_16 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x103_17 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x103_18 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x103_19 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x103_20 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x103_21 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x103_22 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x103_23 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x103_24 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x103_25 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x103_26 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x103_27 = _mm512_load_ps(& ensemble38inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x101 = _mm512_load_ps(& ensemble38grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x102_0 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_1 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_2 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_3 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_4 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_5 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_6 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_7 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_8 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_9 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_10 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_11 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_12 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_13 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_14 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 14 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_15 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 15 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_16 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 16 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_17 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 17 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_18 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 18 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_19 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 19 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_20 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 20 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_21 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 21 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_22 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 22 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_23 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 23 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_24 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 24 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_25 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 25 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_26 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 26 + 1)][_neuron_index_1_inner]);
                        __m512 ___x102_27 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 27 + 1)][_neuron_index_1_inner]);
                        ___x101 = _mm512_fmadd_ps(___x102_0, ___x103_0, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_1, ___x103_1, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_2, ___x103_2, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_3, ___x103_3, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_4, ___x103_4, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_5, ___x103_5, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_6, ___x103_6, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_7, ___x103_7, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_8, ___x103_8, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_9, ___x103_9, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_10, ___x103_10, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_11, ___x103_11, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_12, ___x103_12, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_13, ___x103_13, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_14, ___x103_14, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_15, ___x103_15, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_16, ___x103_16, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_17, ___x103_17, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_18, ___x103_18, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_19, ___x103_19, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_20, ___x103_20, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_21, ___x103_21, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_22, ___x103_22, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_23, ___x103_23, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_24, ___x103_24, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_25, ___x103_25, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_26, ___x103_26, ___x101);
                        ___x101 = _mm512_fmadd_ps(___x102_27, ___x103_27, ___x101);
                        _mm512_store_ps(& ensemble38grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x101);
                    }
                }
            }
        }
    }
    times[112] += omp_get_wtime();
    times[113] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x98_0 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x98_1 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x98_2 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x98_3 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x98_4 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x98_5 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x98_6 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x98_7 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x98_8 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x98_9 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x98_10 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x98_11 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x98_12 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x98_13 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x98_14 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x98_15 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x98_16 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x98_17 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x98_18 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x98_19 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x98_20 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x98_21 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x98_22 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x98_23 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x98_24 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x98_25 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x98_26 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x98_27 = _mm512_load_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x99_0 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_1 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_2 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_3 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_4 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_5 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_6 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_7 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_8 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_9 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_10 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_11 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_12 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_13 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_14 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 14 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_15 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 15 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_16 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 16 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_17 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 17 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_18 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 18 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_19 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 19 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_20 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 20 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_21 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 21 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_22 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 22 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_23 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 23 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_24 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 24 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_25 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 25 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_26 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 26 + 1)][_neuron_index_1_inner]);
                        __m512 ___x99_27 = _mm512_set1_ps(ensemble38grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 27 + 1)][_neuron_index_1_inner]);
                        __m512 ___x100 = _mm512_load_ps(& ensemble38weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x98_0 = _mm512_fmadd_ps(___x99_0, ___x100, ___x98_0);
                        ___x98_1 = _mm512_fmadd_ps(___x99_1, ___x100, ___x98_1);
                        ___x98_2 = _mm512_fmadd_ps(___x99_2, ___x100, ___x98_2);
                        ___x98_3 = _mm512_fmadd_ps(___x99_3, ___x100, ___x98_3);
                        ___x98_4 = _mm512_fmadd_ps(___x99_4, ___x100, ___x98_4);
                        ___x98_5 = _mm512_fmadd_ps(___x99_5, ___x100, ___x98_5);
                        ___x98_6 = _mm512_fmadd_ps(___x99_6, ___x100, ___x98_6);
                        ___x98_7 = _mm512_fmadd_ps(___x99_7, ___x100, ___x98_7);
                        ___x98_8 = _mm512_fmadd_ps(___x99_8, ___x100, ___x98_8);
                        ___x98_9 = _mm512_fmadd_ps(___x99_9, ___x100, ___x98_9);
                        ___x98_10 = _mm512_fmadd_ps(___x99_10, ___x100, ___x98_10);
                        ___x98_11 = _mm512_fmadd_ps(___x99_11, ___x100, ___x98_11);
                        ___x98_12 = _mm512_fmadd_ps(___x99_12, ___x100, ___x98_12);
                        ___x98_13 = _mm512_fmadd_ps(___x99_13, ___x100, ___x98_13);
                        ___x98_14 = _mm512_fmadd_ps(___x99_14, ___x100, ___x98_14);
                        ___x98_15 = _mm512_fmadd_ps(___x99_15, ___x100, ___x98_15);
                        ___x98_16 = _mm512_fmadd_ps(___x99_16, ___x100, ___x98_16);
                        ___x98_17 = _mm512_fmadd_ps(___x99_17, ___x100, ___x98_17);
                        ___x98_18 = _mm512_fmadd_ps(___x99_18, ___x100, ___x98_18);
                        ___x98_19 = _mm512_fmadd_ps(___x99_19, ___x100, ___x98_19);
                        ___x98_20 = _mm512_fmadd_ps(___x99_20, ___x100, ___x98_20);
                        ___x98_21 = _mm512_fmadd_ps(___x99_21, ___x100, ___x98_21);
                        ___x98_22 = _mm512_fmadd_ps(___x99_22, ___x100, ___x98_22);
                        ___x98_23 = _mm512_fmadd_ps(___x99_23, ___x100, ___x98_23);
                        ___x98_24 = _mm512_fmadd_ps(___x99_24, ___x100, ___x98_24);
                        ___x98_25 = _mm512_fmadd_ps(___x99_25, ___x100, ___x98_25);
                        ___x98_26 = _mm512_fmadd_ps(___x99_26, ___x100, ___x98_26);
                        ___x98_27 = _mm512_fmadd_ps(___x99_27, ___x100, ___x98_27);
                    }
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x98_0);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x98_1);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x98_2);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x98_3);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x98_4);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x98_5);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x98_6);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x98_7);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x98_8);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x98_9);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x98_10);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x98_11);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x98_12);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x98_13);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0], ___x98_14);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0], ___x98_15);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0], ___x98_16);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0], ___x98_17);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0], ___x98_18);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0], ___x98_19);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0], ___x98_20);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0], ___x98_21);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0], ___x98_22);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0], ___x98_23);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0], ___x98_24);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0], ___x98_25);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0], ___x98_26);
                    _mm512_store_ps(& ensemble38grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0], ___x98_27);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble37inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble37grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble37grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble37grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[113] += omp_get_wtime();
    times[114] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble36grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble36grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x94_0 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x94_1 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x94_2 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x94_3 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x94_4 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x94_5 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x94_6 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x94_7 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x94_8 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x94_9 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x94_10 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x94_11 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x94_12 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x94_13 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x94_14 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x94_15 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x94_16 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x94_17 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x94_18 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x94_19 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x94_20 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x94_21 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x94_22 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x94_23 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x94_24 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x94_25 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x94_26 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x94_27 = _mm512_load_ps(& ensemble35inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x92_0 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x92_1 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x92_2 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x92_3 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x92_4 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x92_5 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x92_6 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x92_7 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x92_8 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x92_9 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x92_10 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x92_11 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x92_12 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x92_13 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x92_14 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                        __m512 ___x92_15 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                        __m512 ___x92_16 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                        __m512 ___x92_17 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                        __m512 ___x92_18 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                        __m512 ___x92_19 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                        __m512 ___x92_20 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                        __m512 ___x92_21 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                        __m512 ___x92_22 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                        __m512 ___x92_23 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                        __m512 ___x92_24 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                        __m512 ___x92_25 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                        __m512 ___x92_26 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                        __m512 ___x92_27 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                        __m512 ___x93 = _mm512_load_ps(& ensemble35grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x93 = _mm512_fmadd_ps(___x92_0, ___x94_0, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_1, ___x94_1, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_2, ___x94_2, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_3, ___x94_3, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_4, ___x94_4, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_5, ___x94_5, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_6, ___x94_6, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_7, ___x94_7, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_8, ___x94_8, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_9, ___x94_9, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_10, ___x94_10, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_11, ___x94_11, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_12, ___x94_12, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_13, ___x94_13, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_14, ___x94_14, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_15, ___x94_15, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_16, ___x94_16, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_17, ___x94_17, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_18, ___x94_18, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_19, ___x94_19, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_20, ___x94_20, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_21, ___x94_21, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_22, ___x94_22, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_23, ___x94_23, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_24, ___x94_24, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_25, ___x94_25, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_26, ___x94_26, ___x93);
                        ___x93 = _mm512_fmadd_ps(___x92_27, ___x94_27, ___x93);
                        _mm512_store_ps(& ensemble35grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x93);
                    }
                }
            }
        }
    }
    times[114] += omp_get_wtime();
    times[115] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 16; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x91_0 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x91_1 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x91_2 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x91_3 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x91_4 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x91_5 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x91_6 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x91_7 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x91_8 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x91_9 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x91_10 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x91_11 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x91_12 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x91_13 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x91_14 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x91_15 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x91_16 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x91_17 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x91_18 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x91_19 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x91_20 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x91_21 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x91_22 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x91_23 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x91_24 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x91_25 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x91_26 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x91_27 = _mm512_load_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x89 = _mm512_load_ps(& ensemble35weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x90_0 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x90_1 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x90_2 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x90_3 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x90_4 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x90_5 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x90_6 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x90_7 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x90_8 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x90_9 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x90_10 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x90_11 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x90_12 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x90_13 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x90_14 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                        __m512 ___x90_15 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                        __m512 ___x90_16 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                        __m512 ___x90_17 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                        __m512 ___x90_18 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                        __m512 ___x90_19 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                        __m512 ___x90_20 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                        __m512 ___x90_21 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                        __m512 ___x90_22 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                        __m512 ___x90_23 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                        __m512 ___x90_24 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                        __m512 ___x90_25 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                        __m512 ___x90_26 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                        __m512 ___x90_27 = _mm512_set1_ps(ensemble35grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                        ___x91_0 = _mm512_fmadd_ps(___x90_0, ___x89, ___x91_0);
                        ___x91_1 = _mm512_fmadd_ps(___x90_1, ___x89, ___x91_1);
                        ___x91_2 = _mm512_fmadd_ps(___x90_2, ___x89, ___x91_2);
                        ___x91_3 = _mm512_fmadd_ps(___x90_3, ___x89, ___x91_3);
                        ___x91_4 = _mm512_fmadd_ps(___x90_4, ___x89, ___x91_4);
                        ___x91_5 = _mm512_fmadd_ps(___x90_5, ___x89, ___x91_5);
                        ___x91_6 = _mm512_fmadd_ps(___x90_6, ___x89, ___x91_6);
                        ___x91_7 = _mm512_fmadd_ps(___x90_7, ___x89, ___x91_7);
                        ___x91_8 = _mm512_fmadd_ps(___x90_8, ___x89, ___x91_8);
                        ___x91_9 = _mm512_fmadd_ps(___x90_9, ___x89, ___x91_9);
                        ___x91_10 = _mm512_fmadd_ps(___x90_10, ___x89, ___x91_10);
                        ___x91_11 = _mm512_fmadd_ps(___x90_11, ___x89, ___x91_11);
                        ___x91_12 = _mm512_fmadd_ps(___x90_12, ___x89, ___x91_12);
                        ___x91_13 = _mm512_fmadd_ps(___x90_13, ___x89, ___x91_13);
                        ___x91_14 = _mm512_fmadd_ps(___x90_14, ___x89, ___x91_14);
                        ___x91_15 = _mm512_fmadd_ps(___x90_15, ___x89, ___x91_15);
                        ___x91_16 = _mm512_fmadd_ps(___x90_16, ___x89, ___x91_16);
                        ___x91_17 = _mm512_fmadd_ps(___x90_17, ___x89, ___x91_17);
                        ___x91_18 = _mm512_fmadd_ps(___x90_18, ___x89, ___x91_18);
                        ___x91_19 = _mm512_fmadd_ps(___x90_19, ___x89, ___x91_19);
                        ___x91_20 = _mm512_fmadd_ps(___x90_20, ___x89, ___x91_20);
                        ___x91_21 = _mm512_fmadd_ps(___x90_21, ___x89, ___x91_21);
                        ___x91_22 = _mm512_fmadd_ps(___x90_22, ___x89, ___x91_22);
                        ___x91_23 = _mm512_fmadd_ps(___x90_23, ___x89, ___x91_23);
                        ___x91_24 = _mm512_fmadd_ps(___x90_24, ___x89, ___x91_24);
                        ___x91_25 = _mm512_fmadd_ps(___x90_25, ___x89, ___x91_25);
                        ___x91_26 = _mm512_fmadd_ps(___x90_26, ___x89, ___x91_26);
                        ___x91_27 = _mm512_fmadd_ps(___x90_27, ___x89, ___x91_27);
                    }
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x91_0);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x91_1);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x91_2);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x91_3);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x91_4);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x91_5);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x91_6);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x91_7);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x91_8);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x91_9);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x91_10);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x91_11);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x91_12);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x91_13);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0], ___x91_14);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0], ___x91_15);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0], ___x91_16);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0], ___x91_17);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0], ___x91_18);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0], ___x91_19);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0], ___x91_20);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0], ___x91_21);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0], ___x91_22);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0], ___x91_23);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0], ___x91_24);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0], ___x91_25);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0], ___x91_26);
                    _mm512_store_ps(& ensemble35grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0], ___x91_27);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x82 = _mm512_load_ps(& ensemble34grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble34grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x82);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x83 = _mm512_load_ps(& ensemble34grad[_neuron_index_0][(_neuron_index_1_outer + 4)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble34grad_inputs1[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x83);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (long _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x84 = _mm512_load_ps(& ensemble34grad[_neuron_index_0][(_neuron_index_1_outer + 12)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble34grad_inputs2[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x84);
                }
            }
            for (long _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (long _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    __m512 ___x85 = _mm512_load_ps(& ensemble34grad[_neuron_index_0][(_neuron_index_1_outer + 14)][_neuron_index_2][_neuron_index_3][0]);
                    _mm512_store_ps(& ensemble34grad_inputs3[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][0], ___x85);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble33inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble33grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble33grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble33grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[115] += omp_get_wtime();
    times[116] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble32grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble32grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x77_0 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x77_1 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x77_2 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x77_3 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x77_4 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x77_5 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x77_6 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x77_7 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x77_8 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x77_9 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x77_10 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x77_11 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x77_12 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x77_13 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x77_14 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x77_15 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x77_16 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x77_17 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x77_18 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x77_19 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x77_20 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x77_21 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x77_22 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x77_23 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x77_24 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x77_25 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x77_26 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x77_27 = _mm512_load_ps(& ensemble31inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x75 = _mm512_load_ps(& ensemble31grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x76_0 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x76_1 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x76_2 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x76_3 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x76_4 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x76_5 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x76_6 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x76_7 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x76_8 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x76_9 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x76_10 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x76_11 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x76_12 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x76_13 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x76_14 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                        __m512 ___x76_15 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                        __m512 ___x76_16 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                        __m512 ___x76_17 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                        __m512 ___x76_18 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                        __m512 ___x76_19 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                        __m512 ___x76_20 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                        __m512 ___x76_21 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                        __m512 ___x76_22 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                        __m512 ___x76_23 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                        __m512 ___x76_24 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                        __m512 ___x76_25 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                        __m512 ___x76_26 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                        __m512 ___x76_27 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                        ___x75 = _mm512_fmadd_ps(___x76_0, ___x77_0, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_1, ___x77_1, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_2, ___x77_2, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_3, ___x77_3, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_4, ___x77_4, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_5, ___x77_5, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_6, ___x77_6, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_7, ___x77_7, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_8, ___x77_8, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_9, ___x77_9, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_10, ___x77_10, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_11, ___x77_11, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_12, ___x77_12, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_13, ___x77_13, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_14, ___x77_14, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_15, ___x77_15, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_16, ___x77_16, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_17, ___x77_17, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_18, ___x77_18, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_19, ___x77_19, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_20, ___x77_20, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_21, ___x77_21, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_22, ___x77_22, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_23, ___x77_23, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_24, ___x77_24, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_25, ___x77_25, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_26, ___x77_26, ___x75);
                        ___x75 = _mm512_fmadd_ps(___x76_27, ___x77_27, ___x75);
                        _mm512_store_ps(& ensemble31grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x75);
                    }
                }
            }
        }
    }
    times[116] += omp_get_wtime();
    times[117] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x72_0 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x72_1 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x72_2 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x72_3 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x72_4 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x72_5 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x72_6 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x72_7 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x72_8 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x72_9 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x72_10 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x72_11 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x72_12 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x72_13 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x72_14 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x72_15 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x72_16 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x72_17 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x72_18 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x72_19 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x72_20 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x72_21 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x72_22 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x72_23 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x72_24 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x72_25 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x72_26 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x72_27 = _mm512_load_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x73_0 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x73_1 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x73_2 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x73_3 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x73_4 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x73_5 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x73_6 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x73_7 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x73_8 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x73_9 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x73_10 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x73_11 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x73_12 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x73_13 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x73_14 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                        __m512 ___x73_15 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                        __m512 ___x73_16 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                        __m512 ___x73_17 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                        __m512 ___x73_18 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                        __m512 ___x73_19 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                        __m512 ___x73_20 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                        __m512 ___x73_21 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                        __m512 ___x73_22 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                        __m512 ___x73_23 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                        __m512 ___x73_24 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                        __m512 ___x73_25 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                        __m512 ___x73_26 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                        __m512 ___x73_27 = _mm512_set1_ps(ensemble31grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                        __m512 ___x74 = _mm512_load_ps(& ensemble31weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x72_0 = _mm512_fmadd_ps(___x73_0, ___x74, ___x72_0);
                        ___x72_1 = _mm512_fmadd_ps(___x73_1, ___x74, ___x72_1);
                        ___x72_2 = _mm512_fmadd_ps(___x73_2, ___x74, ___x72_2);
                        ___x72_3 = _mm512_fmadd_ps(___x73_3, ___x74, ___x72_3);
                        ___x72_4 = _mm512_fmadd_ps(___x73_4, ___x74, ___x72_4);
                        ___x72_5 = _mm512_fmadd_ps(___x73_5, ___x74, ___x72_5);
                        ___x72_6 = _mm512_fmadd_ps(___x73_6, ___x74, ___x72_6);
                        ___x72_7 = _mm512_fmadd_ps(___x73_7, ___x74, ___x72_7);
                        ___x72_8 = _mm512_fmadd_ps(___x73_8, ___x74, ___x72_8);
                        ___x72_9 = _mm512_fmadd_ps(___x73_9, ___x74, ___x72_9);
                        ___x72_10 = _mm512_fmadd_ps(___x73_10, ___x74, ___x72_10);
                        ___x72_11 = _mm512_fmadd_ps(___x73_11, ___x74, ___x72_11);
                        ___x72_12 = _mm512_fmadd_ps(___x73_12, ___x74, ___x72_12);
                        ___x72_13 = _mm512_fmadd_ps(___x73_13, ___x74, ___x72_13);
                        ___x72_14 = _mm512_fmadd_ps(___x73_14, ___x74, ___x72_14);
                        ___x72_15 = _mm512_fmadd_ps(___x73_15, ___x74, ___x72_15);
                        ___x72_16 = _mm512_fmadd_ps(___x73_16, ___x74, ___x72_16);
                        ___x72_17 = _mm512_fmadd_ps(___x73_17, ___x74, ___x72_17);
                        ___x72_18 = _mm512_fmadd_ps(___x73_18, ___x74, ___x72_18);
                        ___x72_19 = _mm512_fmadd_ps(___x73_19, ___x74, ___x72_19);
                        ___x72_20 = _mm512_fmadd_ps(___x73_20, ___x74, ___x72_20);
                        ___x72_21 = _mm512_fmadd_ps(___x73_21, ___x74, ___x72_21);
                        ___x72_22 = _mm512_fmadd_ps(___x73_22, ___x74, ___x72_22);
                        ___x72_23 = _mm512_fmadd_ps(___x73_23, ___x74, ___x72_23);
                        ___x72_24 = _mm512_fmadd_ps(___x73_24, ___x74, ___x72_24);
                        ___x72_25 = _mm512_fmadd_ps(___x73_25, ___x74, ___x72_25);
                        ___x72_26 = _mm512_fmadd_ps(___x73_26, ___x74, ___x72_26);
                        ___x72_27 = _mm512_fmadd_ps(___x73_27, ___x74, ___x72_27);
                    }
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x72_0);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x72_1);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x72_2);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x72_3);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x72_4);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x72_5);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x72_6);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x72_7);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x72_8);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x72_9);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x72_10);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x72_11);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x72_12);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x72_13);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0], ___x72_14);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0], ___x72_15);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0], ___x72_16);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0], ___x72_17);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0], ___x72_18);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0], ___x72_19);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0], ___x72_20);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0], ___x72_21);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0], ___x72_22);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0], ___x72_23);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0], ___x72_24);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0], ___x72_25);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0], ___x72_26);
                    _mm512_store_ps(& ensemble31grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0], ___x72_27);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 1 - 1;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 1 - 1;
                        int _input_offset_3 = in_x;
                        long j = ensemble30mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble30mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble30grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 27)][MIN(MAX(k + _input_offset_3, 0), 27)][_input_offset_1_inner] += ensemble30grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble29inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble29grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble29grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble29grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[117] += omp_get_wtime();
    times[118] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble28grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble28grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                int in_y = _neuron_index_2 * 1;
                int _input_offset_2 = in_y;
                int in_x_0 = (0 + 0) * 1;
                int in_x_1 = (0 + 1) * 1;
                int in_x_2 = (0 + 2) * 1;
                int in_x_3 = (0 + 3) * 1;
                int in_x_4 = (0 + 4) * 1;
                int in_x_5 = (0 + 5) * 1;
                int in_x_6 = (0 + 6) * 1;
                int in_x_7 = (0 + 7) * 1;
                int in_x_8 = (0 + 8) * 1;
                int in_x_9 = (0 + 9) * 1;
                int in_x_10 = (0 + 10) * 1;
                int in_x_11 = (0 + 11) * 1;
                int in_x_12 = (0 + 12) * 1;
                int in_x_13 = (0 + 13) * 1;
                int in_x_14 = (0 + 14) * 1;
                int in_x_15 = (0 + 15) * 1;
                int in_x_16 = (0 + 16) * 1;
                int in_x_17 = (0 + 17) * 1;
                int in_x_18 = (0 + 18) * 1;
                int in_x_19 = (0 + 19) * 1;
                int in_x_20 = (0 + 20) * 1;
                int in_x_21 = (0 + 21) * 1;
                int in_x_22 = (0 + 22) * 1;
                int in_x_23 = (0 + 23) * 1;
                int in_x_24 = (0 + 24) * 1;
                int in_x_25 = (0 + 25) * 1;
                int in_x_26 = (0 + 26) * 1;
                int in_x_27 = (0 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        __m512 ___x66_0 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                        __m512 ___x66_1 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                        __m512 ___x66_2 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                        __m512 ___x66_3 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                        __m512 ___x66_4 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                        __m512 ___x66_5 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                        __m512 ___x66_6 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                        __m512 ___x66_7 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                        __m512 ___x66_8 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                        __m512 ___x66_9 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                        __m512 ___x66_10 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                        __m512 ___x66_11 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                        __m512 ___x66_12 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                        __m512 ___x66_13 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                        __m512 ___x66_14 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0]);
                        __m512 ___x66_15 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0]);
                        __m512 ___x66_16 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0]);
                        __m512 ___x66_17 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0]);
                        __m512 ___x66_18 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0]);
                        __m512 ___x66_19 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0]);
                        __m512 ___x66_20 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0]);
                        __m512 ___x66_21 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0]);
                        __m512 ___x66_22 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0]);
                        __m512 ___x66_23 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0]);
                        __m512 ___x66_24 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0]);
                        __m512 ___x66_25 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0]);
                        __m512 ___x66_26 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0]);
                        __m512 ___x66_27 = _mm512_load_ps(& ensemble27inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0]);
                        for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                            __m512 ___x67 = _mm512_load_ps(& ensemble27grad_weights[_neuron_index_1_outer][0][j][k][_neuron_index_1_inner][0]);
                            __m512 ___x68_0 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                            __m512 ___x68_1 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                            __m512 ___x68_2 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                            __m512 ___x68_3 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                            __m512 ___x68_4 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                            __m512 ___x68_5 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                            __m512 ___x68_6 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                            __m512 ___x68_7 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                            __m512 ___x68_8 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                            __m512 ___x68_9 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                            __m512 ___x68_10 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                            __m512 ___x68_11 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                            __m512 ___x68_12 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                            __m512 ___x68_13 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                            __m512 ___x68_14 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                            __m512 ___x68_15 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                            __m512 ___x68_16 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                            __m512 ___x68_17 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                            __m512 ___x68_18 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                            __m512 ___x68_19 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                            __m512 ___x68_20 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                            __m512 ___x68_21 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                            __m512 ___x68_22 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                            __m512 ___x68_23 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                            __m512 ___x68_24 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                            __m512 ___x68_25 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                            __m512 ___x68_26 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                            __m512 ___x68_27 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                            ___x67 = _mm512_fmadd_ps(___x68_0, ___x66_0, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_1, ___x66_1, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_2, ___x66_2, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_3, ___x66_3, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_4, ___x66_4, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_5, ___x66_5, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_6, ___x66_6, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_7, ___x66_7, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_8, ___x66_8, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_9, ___x66_9, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_10, ___x66_10, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_11, ___x66_11, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_12, ___x66_12, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_13, ___x66_13, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_14, ___x66_14, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_15, ___x66_15, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_16, ___x66_16, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_17, ___x66_17, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_18, ___x66_18, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_19, ___x66_19, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_20, ___x66_20, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_21, ___x66_21, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_22, ___x66_22, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_23, ___x66_23, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_24, ___x66_24, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_25, ___x66_25, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_26, ___x66_26, ___x67);
                            ___x67 = _mm512_fmadd_ps(___x68_27, ___x66_27, ___x67);
                            _mm512_store_ps(& ensemble27grad_weights[_neuron_index_1_outer][0][j][k][_neuron_index_1_inner][0], ___x67);
                        }
                    }
                }
            }
        }
    }
    times[118] += omp_get_wtime();
    times[119] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 2; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                int in_y = _neuron_index_2 * 1;
                int _input_offset_2 = in_y;
                int in_x_0 = (0 + 0) * 1;
                int in_x_1 = (0 + 1) * 1;
                int in_x_2 = (0 + 2) * 1;
                int in_x_3 = (0 + 3) * 1;
                int in_x_4 = (0 + 4) * 1;
                int in_x_5 = (0 + 5) * 1;
                int in_x_6 = (0 + 6) * 1;
                int in_x_7 = (0 + 7) * 1;
                int in_x_8 = (0 + 8) * 1;
                int in_x_9 = (0 + 9) * 1;
                int in_x_10 = (0 + 10) * 1;
                int in_x_11 = (0 + 11) * 1;
                int in_x_12 = (0 + 12) * 1;
                int in_x_13 = (0 + 13) * 1;
                int in_x_14 = (0 + 14) * 1;
                int in_x_15 = (0 + 15) * 1;
                int in_x_16 = (0 + 16) * 1;
                int in_x_17 = (0 + 17) * 1;
                int in_x_18 = (0 + 18) * 1;
                int in_x_19 = (0 + 19) * 1;
                int in_x_20 = (0 + 20) * 1;
                int in_x_21 = (0 + 21) * 1;
                int in_x_22 = (0 + 22) * 1;
                int in_x_23 = (0 + 23) * 1;
                int in_x_24 = (0 + 24) * 1;
                int in_x_25 = (0 + 25) * 1;
                int in_x_26 = (0 + 26) * 1;
                int in_x_27 = (0 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                for (int j = 0; j < 5; j += 1) {
                    for (int k = 0; k < 5; k += 1) {
                        __m512 ___x64_0 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                        __m512 ___x64_1 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                        __m512 ___x64_2 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                        __m512 ___x64_3 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                        __m512 ___x64_4 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                        __m512 ___x64_5 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                        __m512 ___x64_6 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                        __m512 ___x64_7 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                        __m512 ___x64_8 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                        __m512 ___x64_9 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                        __m512 ___x64_10 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                        __m512 ___x64_11 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                        __m512 ___x64_12 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                        __m512 ___x64_13 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                        __m512 ___x64_14 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0]);
                        __m512 ___x64_15 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0]);
                        __m512 ___x64_16 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0]);
                        __m512 ___x64_17 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0]);
                        __m512 ___x64_18 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0]);
                        __m512 ___x64_19 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0]);
                        __m512 ___x64_20 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0]);
                        __m512 ___x64_21 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0]);
                        __m512 ___x64_22 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0]);
                        __m512 ___x64_23 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0]);
                        __m512 ___x64_24 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0]);
                        __m512 ___x64_25 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0]);
                        __m512 ___x64_26 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0]);
                        __m512 ___x64_27 = _mm512_load_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0]);
                        for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                            __m512 ___x63 = _mm512_load_ps(& ensemble27weights[_neuron_index_1_outer][0][j][k][_neuron_index_1_inner][0]);
                            __m512 ___x65_0 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                            __m512 ___x65_1 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                            __m512 ___x65_2 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                            __m512 ___x65_3 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                            __m512 ___x65_4 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                            __m512 ___x65_5 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                            __m512 ___x65_6 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                            __m512 ___x65_7 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                            __m512 ___x65_8 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                            __m512 ___x65_9 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                            __m512 ___x65_10 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                            __m512 ___x65_11 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                            __m512 ___x65_12 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                            __m512 ___x65_13 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                            __m512 ___x65_14 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                            __m512 ___x65_15 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                            __m512 ___x65_16 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                            __m512 ___x65_17 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                            __m512 ___x65_18 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                            __m512 ___x65_19 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                            __m512 ___x65_20 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                            __m512 ___x65_21 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                            __m512 ___x65_22 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                            __m512 ___x65_23 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                            __m512 ___x65_24 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                            __m512 ___x65_25 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                            __m512 ___x65_26 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                            __m512 ___x65_27 = _mm512_set1_ps(ensemble27grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                            ___x64_0 = _mm512_fmadd_ps(___x65_0, ___x63, ___x64_0);
                            ___x64_1 = _mm512_fmadd_ps(___x65_1, ___x63, ___x64_1);
                            ___x64_2 = _mm512_fmadd_ps(___x65_2, ___x63, ___x64_2);
                            ___x64_3 = _mm512_fmadd_ps(___x65_3, ___x63, ___x64_3);
                            ___x64_4 = _mm512_fmadd_ps(___x65_4, ___x63, ___x64_4);
                            ___x64_5 = _mm512_fmadd_ps(___x65_5, ___x63, ___x64_5);
                            ___x64_6 = _mm512_fmadd_ps(___x65_6, ___x63, ___x64_6);
                            ___x64_7 = _mm512_fmadd_ps(___x65_7, ___x63, ___x64_7);
                            ___x64_8 = _mm512_fmadd_ps(___x65_8, ___x63, ___x64_8);
                            ___x64_9 = _mm512_fmadd_ps(___x65_9, ___x63, ___x64_9);
                            ___x64_10 = _mm512_fmadd_ps(___x65_10, ___x63, ___x64_10);
                            ___x64_11 = _mm512_fmadd_ps(___x65_11, ___x63, ___x64_11);
                            ___x64_12 = _mm512_fmadd_ps(___x65_12, ___x63, ___x64_12);
                            ___x64_13 = _mm512_fmadd_ps(___x65_13, ___x63, ___x64_13);
                            ___x64_14 = _mm512_fmadd_ps(___x65_14, ___x63, ___x64_14);
                            ___x64_15 = _mm512_fmadd_ps(___x65_15, ___x63, ___x64_15);
                            ___x64_16 = _mm512_fmadd_ps(___x65_16, ___x63, ___x64_16);
                            ___x64_17 = _mm512_fmadd_ps(___x65_17, ___x63, ___x64_17);
                            ___x64_18 = _mm512_fmadd_ps(___x65_18, ___x63, ___x64_18);
                            ___x64_19 = _mm512_fmadd_ps(___x65_19, ___x63, ___x64_19);
                            ___x64_20 = _mm512_fmadd_ps(___x65_20, ___x63, ___x64_20);
                            ___x64_21 = _mm512_fmadd_ps(___x65_21, ___x63, ___x64_21);
                            ___x64_22 = _mm512_fmadd_ps(___x65_22, ___x63, ___x64_22);
                            ___x64_23 = _mm512_fmadd_ps(___x65_23, ___x63, ___x64_23);
                            ___x64_24 = _mm512_fmadd_ps(___x65_24, ___x63, ___x64_24);
                            ___x64_25 = _mm512_fmadd_ps(___x65_25, ___x63, ___x64_25);
                            ___x64_26 = _mm512_fmadd_ps(___x65_26, ___x63, ___x64_26);
                            ___x64_27 = _mm512_fmadd_ps(___x65_27, ___x63, ___x64_27);
                        }
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x64_0);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x64_1);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x64_2);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x64_3);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x64_4);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x64_5);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x64_6);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x64_7);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x64_8);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x64_9);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x64_10);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x64_11);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x64_12);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x64_13);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0], ___x64_14);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0], ___x64_15);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0], ___x64_16);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0], ___x64_17);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0], ___x64_18);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0], ___x64_19);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0], ___x64_20);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0], ___x64_21);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0], ___x64_22);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0], ___x64_23);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0], ___x64_24);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0], ___x64_25);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0], ___x64_26);
                        _mm512_store_ps(& ensemble27grad_inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0], ___x64_27);
                    }
                }
            }
        }
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    if (ensemble26inputs[_neuron_index_0][0][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] > 0.0) {
                        ensemble26grad_inputs[_neuron_index_0][0][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = ensemble26grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                    } else {
                        ensemble26grad_inputs[_neuron_index_0][0][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner] = 0.0;
                    };
                }
            }
        }
        for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
            for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    ensemble25grad_bias[0][0][_neuron_index_1_inner] += ensemble25grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(_neuron_index_3 + 2)][_neuron_index_1_inner];
                }
            }
        }
    }
    times[119] += omp_get_wtime();
    times[120] -= omp_get_wtime();
    #pragma omp parallel for
    for (int i_outer = 0; i_outer < 12; i_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                int in_y = _neuron_index_2 * 1;
                int _input_offset_2 = in_y;
                int in_x_0 = (0 + 0) * 1;
                int in_x_1 = (0 + 1) * 1;
                int in_x_2 = (0 + 2) * 1;
                int in_x_3 = (0 + 3) * 1;
                int in_x_4 = (0 + 4) * 1;
                int in_x_5 = (0 + 5) * 1;
                int in_x_6 = (0 + 6) * 1;
                int in_x_7 = (0 + 7) * 1;
                int in_x_8 = (0 + 8) * 1;
                int in_x_9 = (0 + 9) * 1;
                int in_x_10 = (0 + 10) * 1;
                int in_x_11 = (0 + 11) * 1;
                int in_x_12 = (0 + 12) * 1;
                int in_x_13 = (0 + 13) * 1;
                int in_x_14 = (0 + 14) * 1;
                int in_x_15 = (0 + 15) * 1;
                int in_x_16 = (0 + 16) * 1;
                int in_x_17 = (0 + 17) * 1;
                int in_x_18 = (0 + 18) * 1;
                int in_x_19 = (0 + 19) * 1;
                int in_x_20 = (0 + 20) * 1;
                int in_x_21 = (0 + 21) * 1;
                int in_x_22 = (0 + 22) * 1;
                int in_x_23 = (0 + 23) * 1;
                int in_x_24 = (0 + 24) * 1;
                int in_x_25 = (0 + 25) * 1;
                int in_x_26 = (0 + 26) * 1;
                int in_x_27 = (0 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m512 ___x59_0 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                __m512 ___x59_1 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                __m512 ___x59_2 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                __m512 ___x59_3 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                __m512 ___x59_4 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                __m512 ___x59_5 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                __m512 ___x59_6 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                __m512 ___x59_7 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                __m512 ___x59_8 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                __m512 ___x59_9 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                __m512 ___x59_10 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                __m512 ___x59_11 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                __m512 ___x59_12 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                __m512 ___x59_13 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                __m512 ___x59_14 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                __m512 ___x59_15 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                __m512 ___x59_16 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                __m512 ___x59_17 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                __m512 ___x59_18 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                __m512 ___x59_19 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                __m512 ___x59_20 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                __m512 ___x59_21 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                __m512 ___x59_22 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                __m512 ___x59_23 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                __m512 ___x59_24 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                __m512 ___x59_25 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                __m512 ___x59_26 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                __m512 ___x59_27 = _mm512_load_ps(& ensemble24inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x57 = _mm512_load_ps(& ensemble24grad_weights[0][i_outer][0][0][_neuron_index_1_inner][0]);
                    __m512 ___x58_0 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_1 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_2 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_3 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_4 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_5 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_6 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_7 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_8 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_9 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_10 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_11 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_12 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_13 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_14 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 14 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_15 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 15 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_16 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 16 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_17 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 17 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_18 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 18 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_19 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 19 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_20 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 20 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_21 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 21 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_22 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 22 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_23 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 23 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_24 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 24 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_25 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 25 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_26 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 26 + 2)][_neuron_index_1_inner]);
                    __m512 ___x58_27 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 27 + 2)][_neuron_index_1_inner]);
                    ___x57 = _mm512_fmadd_ps(___x58_0, ___x59_0, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_1, ___x59_1, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_2, ___x59_2, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_3, ___x59_3, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_4, ___x59_4, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_5, ___x59_5, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_6, ___x59_6, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_7, ___x59_7, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_8, ___x59_8, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_9, ___x59_9, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_10, ___x59_10, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_11, ___x59_11, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_12, ___x59_12, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_13, ___x59_13, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_14, ___x59_14, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_15, ___x59_15, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_16, ___x59_16, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_17, ___x59_17, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_18, ___x59_18, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_19, ___x59_19, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_20, ___x59_20, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_21, ___x59_21, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_22, ___x59_22, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_23, ___x59_23, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_24, ___x59_24, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_25, ___x59_25, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_26, ___x59_26, ___x57);
                    ___x57 = _mm512_fmadd_ps(___x58_27, ___x59_27, ___x57);
                    _mm512_store_ps(& ensemble24grad_weights[0][i_outer][0][0][_neuron_index_1_inner][0], ___x57);
                }
            }
        }
    }
    times[120] += omp_get_wtime();
    times[121] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                int in_y = _neuron_index_2 * 1;
                int _input_offset_2 = in_y;
                int in_x_0 = (0 + 0) * 1;
                int in_x_1 = (0 + 1) * 1;
                int in_x_2 = (0 + 2) * 1;
                int in_x_3 = (0 + 3) * 1;
                int in_x_4 = (0 + 4) * 1;
                int in_x_5 = (0 + 5) * 1;
                int in_x_6 = (0 + 6) * 1;
                int in_x_7 = (0 + 7) * 1;
                int in_x_8 = (0 + 8) * 1;
                int in_x_9 = (0 + 9) * 1;
                int in_x_10 = (0 + 10) * 1;
                int in_x_11 = (0 + 11) * 1;
                int in_x_12 = (0 + 12) * 1;
                int in_x_13 = (0 + 13) * 1;
                int in_x_14 = (0 + 14) * 1;
                int in_x_15 = (0 + 15) * 1;
                int in_x_16 = (0 + 16) * 1;
                int in_x_17 = (0 + 17) * 1;
                int in_x_18 = (0 + 18) * 1;
                int in_x_19 = (0 + 19) * 1;
                int in_x_20 = (0 + 20) * 1;
                int in_x_21 = (0 + 21) * 1;
                int in_x_22 = (0 + 22) * 1;
                int in_x_23 = (0 + 23) * 1;
                int in_x_24 = (0 + 24) * 1;
                int in_x_25 = (0 + 25) * 1;
                int in_x_26 = (0 + 26) * 1;
                int in_x_27 = (0 + 27) * 1;
                int _input_offset_3_0 = in_x_0;
                int _input_offset_3_1 = in_x_1;
                int _input_offset_3_2 = in_x_2;
                int _input_offset_3_3 = in_x_3;
                int _input_offset_3_4 = in_x_4;
                int _input_offset_3_5 = in_x_5;
                int _input_offset_3_6 = in_x_6;
                int _input_offset_3_7 = in_x_7;
                int _input_offset_3_8 = in_x_8;
                int _input_offset_3_9 = in_x_9;
                int _input_offset_3_10 = in_x_10;
                int _input_offset_3_11 = in_x_11;
                int _input_offset_3_12 = in_x_12;
                int _input_offset_3_13 = in_x_13;
                int _input_offset_3_14 = in_x_14;
                int _input_offset_3_15 = in_x_15;
                int _input_offset_3_16 = in_x_16;
                int _input_offset_3_17 = in_x_17;
                int _input_offset_3_18 = in_x_18;
                int _input_offset_3_19 = in_x_19;
                int _input_offset_3_20 = in_x_20;
                int _input_offset_3_21 = in_x_21;
                int _input_offset_3_22 = in_x_22;
                int _input_offset_3_23 = in_x_23;
                int _input_offset_3_24 = in_x_24;
                int _input_offset_3_25 = in_x_25;
                int _input_offset_3_26 = in_x_26;
                int _input_offset_3_27 = in_x_27;
                __m512 ___x56_0 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                __m512 ___x56_1 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                __m512 ___x56_2 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                __m512 ___x56_3 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                __m512 ___x56_4 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                __m512 ___x56_5 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                __m512 ___x56_6 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                __m512 ___x56_7 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                __m512 ___x56_8 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                __m512 ___x56_9 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                __m512 ___x56_10 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                __m512 ___x56_11 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                __m512 ___x56_12 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                __m512 ___x56_13 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                __m512 ___x56_14 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                __m512 ___x56_15 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                __m512 ___x56_16 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                __m512 ___x56_17 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                __m512 ___x56_18 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                __m512 ___x56_19 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                __m512 ___x56_20 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                __m512 ___x56_21 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                __m512 ___x56_22 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                __m512 ___x56_23 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                __m512 ___x56_24 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                __m512 ___x56_25 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                __m512 ___x56_26 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                __m512 ___x56_27 = _mm512_load_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                    __m512 ___x54_0 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 0 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_1 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 1 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_2 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 2 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_3 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 3 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_4 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 4 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_5 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 5 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_6 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 6 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_7 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 7 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_8 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 8 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_9 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 9 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_10 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 10 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_11 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 11 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_12 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 12 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_13 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 13 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_14 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 14 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_15 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 15 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_16 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 16 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_17 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 17 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_18 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 18 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_19 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 19 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_20 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 20 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_21 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 21 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_22 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 22 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_23 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 23 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_24 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 24 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_25 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 25 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_26 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 26 + 2)][_neuron_index_1_inner]);
                    __m512 ___x54_27 = _mm512_set1_ps(ensemble24grad[_neuron_index_0][0][(_neuron_index_2 + 2)][(0 + 27 + 2)][_neuron_index_1_inner]);
                    __m512 ___x55 = _mm512_load_ps(& ensemble24weights[0][i_outer][0][0][_neuron_index_1_inner][0]);
                    ___x56_0 = _mm512_fmadd_ps(___x54_0, ___x55, ___x56_0);
                    ___x56_1 = _mm512_fmadd_ps(___x54_1, ___x55, ___x56_1);
                    ___x56_2 = _mm512_fmadd_ps(___x54_2, ___x55, ___x56_2);
                    ___x56_3 = _mm512_fmadd_ps(___x54_3, ___x55, ___x56_3);
                    ___x56_4 = _mm512_fmadd_ps(___x54_4, ___x55, ___x56_4);
                    ___x56_5 = _mm512_fmadd_ps(___x54_5, ___x55, ___x56_5);
                    ___x56_6 = _mm512_fmadd_ps(___x54_6, ___x55, ___x56_6);
                    ___x56_7 = _mm512_fmadd_ps(___x54_7, ___x55, ___x56_7);
                    ___x56_8 = _mm512_fmadd_ps(___x54_8, ___x55, ___x56_8);
                    ___x56_9 = _mm512_fmadd_ps(___x54_9, ___x55, ___x56_9);
                    ___x56_10 = _mm512_fmadd_ps(___x54_10, ___x55, ___x56_10);
                    ___x56_11 = _mm512_fmadd_ps(___x54_11, ___x55, ___x56_11);
                    ___x56_12 = _mm512_fmadd_ps(___x54_12, ___x55, ___x56_12);
                    ___x56_13 = _mm512_fmadd_ps(___x54_13, ___x55, ___x56_13);
                    ___x56_14 = _mm512_fmadd_ps(___x54_14, ___x55, ___x56_14);
                    ___x56_15 = _mm512_fmadd_ps(___x54_15, ___x55, ___x56_15);
                    ___x56_16 = _mm512_fmadd_ps(___x54_16, ___x55, ___x56_16);
                    ___x56_17 = _mm512_fmadd_ps(___x54_17, ___x55, ___x56_17);
                    ___x56_18 = _mm512_fmadd_ps(___x54_18, ___x55, ___x56_18);
                    ___x56_19 = _mm512_fmadd_ps(___x54_19, ___x55, ___x56_19);
                    ___x56_20 = _mm512_fmadd_ps(___x54_20, ___x55, ___x56_20);
                    ___x56_21 = _mm512_fmadd_ps(___x54_21, ___x55, ___x56_21);
                    ___x56_22 = _mm512_fmadd_ps(___x54_22, ___x55, ___x56_22);
                    ___x56_23 = _mm512_fmadd_ps(___x54_23, ___x55, ___x56_23);
                    ___x56_24 = _mm512_fmadd_ps(___x54_24, ___x55, ___x56_24);
                    ___x56_25 = _mm512_fmadd_ps(___x54_25, ___x55, ___x56_25);
                    ___x56_26 = _mm512_fmadd_ps(___x54_26, ___x55, ___x56_26);
                    ___x56_27 = _mm512_fmadd_ps(___x54_27, ___x55, ___x56_27);
                }
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x56_0);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x56_1);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x56_2);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x56_3);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x56_4);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x56_5);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x56_6);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x56_7);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x56_8);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x56_9);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x56_10);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x56_11);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x56_12);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x56_13);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0], ___x56_14);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0], ___x56_15);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0], ___x56_16);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0], ___x56_17);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0], ___x56_18);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0], ___x56_19);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0], ___x56_20);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0], ___x56_21);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0], ___x56_22);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0], ___x56_23);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0], ___x56_24);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0], ___x56_25);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0], ___x56_26);
                _mm512_store_ps(& ensemble24grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0], ___x56_27);
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble23inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble23grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble23grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble23grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[121] += omp_get_wtime();
    times[122] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble22grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble22grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 6; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x50_0 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x50_1 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x50_2 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x50_3 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x50_4 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x50_5 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x50_6 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x50_7 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x50_8 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x50_9 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x50_10 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x50_11 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x50_12 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x50_13 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            __m512 ___x50_14 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0]);
                            __m512 ___x50_15 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0]);
                            __m512 ___x50_16 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0]);
                            __m512 ___x50_17 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0]);
                            __m512 ___x50_18 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0]);
                            __m512 ___x50_19 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0]);
                            __m512 ___x50_20 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0]);
                            __m512 ___x50_21 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0]);
                            __m512 ___x50_22 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0]);
                            __m512 ___x50_23 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0]);
                            __m512 ___x50_24 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0]);
                            __m512 ___x50_25 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0]);
                            __m512 ___x50_26 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0]);
                            __m512 ___x50_27 = _mm512_load_ps(& ensemble21inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x48 = _mm512_load_ps(& ensemble21grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x49_0 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x49_1 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x49_2 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x49_3 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x49_4 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x49_5 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x49_6 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x49_7 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x49_8 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x49_9 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x49_10 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x49_11 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x49_12 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x49_13 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x49_14 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                                __m512 ___x49_15 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                                __m512 ___x49_16 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                                __m512 ___x49_17 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                                __m512 ___x49_18 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                                __m512 ___x49_19 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                                __m512 ___x49_20 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                                __m512 ___x49_21 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                                __m512 ___x49_22 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                                __m512 ___x49_23 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                                __m512 ___x49_24 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                                __m512 ___x49_25 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                                __m512 ___x49_26 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                                __m512 ___x49_27 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                                ___x48 = _mm512_fmadd_ps(___x49_0, ___x50_0, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_1, ___x50_1, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_2, ___x50_2, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_3, ___x50_3, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_4, ___x50_4, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_5, ___x50_5, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_6, ___x50_6, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_7, ___x50_7, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_8, ___x50_8, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_9, ___x50_9, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_10, ___x50_10, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_11, ___x50_11, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_12, ___x50_12, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_13, ___x50_13, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_14, ___x50_14, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_15, ___x50_15, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_16, ___x50_16, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_17, ___x50_17, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_18, ___x50_18, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_19, ___x50_19, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_20, ___x50_20, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_21, ___x50_21, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_22, ___x50_22, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_23, ___x50_23, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_24, ___x50_24, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_25, ___x50_25, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_26, ___x50_26, ___x48);
                                ___x48 = _mm512_fmadd_ps(___x49_27, ___x50_27, ___x48);
                                _mm512_store_ps(& ensemble21grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x48);
                            }
                        }
                    }
                }
            }
        }
    }
    times[122] += omp_get_wtime();
    times[123] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 6; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 8; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    for (int j = 0; j < 3; j += 1) {
                        for (int k = 0; k < 3; k += 1) {
                            __m512 ___x46_0 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0]);
                            __m512 ___x46_1 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0]);
                            __m512 ___x46_2 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0]);
                            __m512 ___x46_3 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0]);
                            __m512 ___x46_4 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0]);
                            __m512 ___x46_5 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0]);
                            __m512 ___x46_6 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0]);
                            __m512 ___x46_7 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0]);
                            __m512 ___x46_8 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0]);
                            __m512 ___x46_9 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0]);
                            __m512 ___x46_10 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0]);
                            __m512 ___x46_11 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0]);
                            __m512 ___x46_12 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0]);
                            __m512 ___x46_13 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0]);
                            __m512 ___x46_14 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0]);
                            __m512 ___x46_15 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0]);
                            __m512 ___x46_16 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0]);
                            __m512 ___x46_17 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0]);
                            __m512 ___x46_18 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0]);
                            __m512 ___x46_19 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0]);
                            __m512 ___x46_20 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0]);
                            __m512 ___x46_21 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0]);
                            __m512 ___x46_22 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0]);
                            __m512 ___x46_23 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0]);
                            __m512 ___x46_24 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0]);
                            __m512 ___x46_25 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0]);
                            __m512 ___x46_26 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0]);
                            __m512 ___x46_27 = _mm512_load_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x45_0 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                                __m512 ___x45_1 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                                __m512 ___x45_2 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                                __m512 ___x45_3 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                                __m512 ___x45_4 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                                __m512 ___x45_5 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                                __m512 ___x45_6 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                                __m512 ___x45_7 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                                __m512 ___x45_8 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                                __m512 ___x45_9 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                                __m512 ___x45_10 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                                __m512 ___x45_11 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                                __m512 ___x45_12 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                                __m512 ___x45_13 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                                __m512 ___x45_14 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                                __m512 ___x45_15 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                                __m512 ___x45_16 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                                __m512 ___x45_17 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                                __m512 ___x45_18 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                                __m512 ___x45_19 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                                __m512 ___x45_20 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                                __m512 ___x45_21 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                                __m512 ___x45_22 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                                __m512 ___x45_23 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                                __m512 ___x45_24 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                                __m512 ___x45_25 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                                __m512 ___x45_26 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                                __m512 ___x45_27 = _mm512_set1_ps(ensemble21grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                                __m512 ___x47 = _mm512_load_ps(& ensemble21weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                ___x46_0 = _mm512_fmadd_ps(___x45_0, ___x47, ___x46_0);
                                ___x46_1 = _mm512_fmadd_ps(___x45_1, ___x47, ___x46_1);
                                ___x46_2 = _mm512_fmadd_ps(___x45_2, ___x47, ___x46_2);
                                ___x46_3 = _mm512_fmadd_ps(___x45_3, ___x47, ___x46_3);
                                ___x46_4 = _mm512_fmadd_ps(___x45_4, ___x47, ___x46_4);
                                ___x46_5 = _mm512_fmadd_ps(___x45_5, ___x47, ___x46_5);
                                ___x46_6 = _mm512_fmadd_ps(___x45_6, ___x47, ___x46_6);
                                ___x46_7 = _mm512_fmadd_ps(___x45_7, ___x47, ___x46_7);
                                ___x46_8 = _mm512_fmadd_ps(___x45_8, ___x47, ___x46_8);
                                ___x46_9 = _mm512_fmadd_ps(___x45_9, ___x47, ___x46_9);
                                ___x46_10 = _mm512_fmadd_ps(___x45_10, ___x47, ___x46_10);
                                ___x46_11 = _mm512_fmadd_ps(___x45_11, ___x47, ___x46_11);
                                ___x46_12 = _mm512_fmadd_ps(___x45_12, ___x47, ___x46_12);
                                ___x46_13 = _mm512_fmadd_ps(___x45_13, ___x47, ___x46_13);
                                ___x46_14 = _mm512_fmadd_ps(___x45_14, ___x47, ___x46_14);
                                ___x46_15 = _mm512_fmadd_ps(___x45_15, ___x47, ___x46_15);
                                ___x46_16 = _mm512_fmadd_ps(___x45_16, ___x47, ___x46_16);
                                ___x46_17 = _mm512_fmadd_ps(___x45_17, ___x47, ___x46_17);
                                ___x46_18 = _mm512_fmadd_ps(___x45_18, ___x47, ___x46_18);
                                ___x46_19 = _mm512_fmadd_ps(___x45_19, ___x47, ___x46_19);
                                ___x46_20 = _mm512_fmadd_ps(___x45_20, ___x47, ___x46_20);
                                ___x46_21 = _mm512_fmadd_ps(___x45_21, ___x47, ___x46_21);
                                ___x46_22 = _mm512_fmadd_ps(___x45_22, ___x47, ___x46_22);
                                ___x46_23 = _mm512_fmadd_ps(___x45_23, ___x47, ___x46_23);
                                ___x46_24 = _mm512_fmadd_ps(___x45_24, ___x47, ___x46_24);
                                ___x46_25 = _mm512_fmadd_ps(___x45_25, ___x47, ___x46_25);
                                ___x46_26 = _mm512_fmadd_ps(___x45_26, ___x47, ___x46_26);
                                ___x46_27 = _mm512_fmadd_ps(___x45_27, ___x47, ___x46_27);
                            }
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 0) * 1)][0], ___x46_0);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 1) * 1)][0], ___x46_1);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 2) * 1)][0], ___x46_2);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 3) * 1)][0], ___x46_3);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 4) * 1)][0], ___x46_4);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 5) * 1)][0], ___x46_5);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 6) * 1)][0], ___x46_6);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 7) * 1)][0], ___x46_7);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 8) * 1)][0], ___x46_8);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 9) * 1)][0], ___x46_9);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 10) * 1)][0], ___x46_10);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 11) * 1)][0], ___x46_11);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 12) * 1)][0], ___x46_12);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 13) * 1)][0], ___x46_13);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 14) * 1)][0], ___x46_14);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 15) * 1)][0], ___x46_15);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 16) * 1)][0], ___x46_16);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 17) * 1)][0], ___x46_17);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 18) * 1)][0], ___x46_18);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 19) * 1)][0], ___x46_19);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 20) * 1)][0], ___x46_20);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 21) * 1)][0], ___x46_21);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 22) * 1)][0], ___x46_22);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 23) * 1)][0], ___x46_23);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 24) * 1)][0], ___x46_24);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 25) * 1)][0], ___x46_25);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 26) * 1)][0], ___x46_26);
                            _mm512_store_ps(& ensemble21grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (0 + 27) * 1)][0], ___x46_27);
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble20inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] > 0.0) {
                            ensemble20grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble20grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                        } else {
                            ensemble20grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[123] += omp_get_wtime();
    times[124] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble19grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble19grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x40_0 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x40_1 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x40_2 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x40_3 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x40_4 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x40_5 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x40_6 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x40_7 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x40_8 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x40_9 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x40_10 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x40_11 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x40_12 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x40_13 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x40_14 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x40_15 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x40_16 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x40_17 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x40_18 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x40_19 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x40_20 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x40_21 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x40_22 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x40_23 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x40_24 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x40_25 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x40_26 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x40_27 = _mm512_load_ps(& ensemble18inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x39_0 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_1 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_2 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_3 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_4 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_5 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_6 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_7 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_8 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_9 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_10 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_11 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_12 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_13 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_14 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 14 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_15 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 15 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_16 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 16 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_17 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 17 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_18 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 18 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_19 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 19 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_20 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 20 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_21 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 21 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_22 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 22 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_23 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 23 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_24 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 24 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_25 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 25 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_26 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 26 + 1)][_neuron_index_1_inner]);
                        __m512 ___x39_27 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 27 + 1)][_neuron_index_1_inner]);
                        __m512 ___x41 = _mm512_load_ps(& ensemble18grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x41 = _mm512_fmadd_ps(___x39_0, ___x40_0, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_1, ___x40_1, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_2, ___x40_2, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_3, ___x40_3, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_4, ___x40_4, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_5, ___x40_5, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_6, ___x40_6, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_7, ___x40_7, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_8, ___x40_8, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_9, ___x40_9, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_10, ___x40_10, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_11, ___x40_11, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_12, ___x40_12, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_13, ___x40_13, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_14, ___x40_14, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_15, ___x40_15, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_16, ___x40_16, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_17, ___x40_17, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_18, ___x40_18, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_19, ___x40_19, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_20, ___x40_20, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_21, ___x40_21, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_22, ___x40_22, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_23, ___x40_23, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_24, ___x40_24, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_25, ___x40_25, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_26, ___x40_26, ___x41);
                        ___x41 = _mm512_fmadd_ps(___x39_27, ___x40_27, ___x41);
                        _mm512_store_ps(& ensemble18grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x41);
                    }
                }
            }
        }
    }
    times[124] += omp_get_wtime();
    times[125] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 6; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x38_0 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x38_1 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x38_2 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x38_3 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x38_4 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x38_5 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x38_6 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x38_7 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x38_8 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x38_9 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x38_10 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x38_11 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x38_12 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x38_13 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x38_14 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x38_15 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x38_16 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x38_17 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x38_18 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x38_19 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x38_20 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x38_21 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x38_22 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x38_23 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x38_24 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x38_25 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x38_26 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x38_27 = _mm512_load_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x36_0 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_1 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 1 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_2 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 2 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_3 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 3 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_4 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 4 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_5 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 5 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_6 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 6 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_7 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 7 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_8 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 8 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_9 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 9 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_10 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 10 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_11 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 11 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_12 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 12 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_13 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 13 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_14 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 14 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_15 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 15 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_16 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 16 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_17 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 17 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_18 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 18 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_19 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 19 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_20 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 20 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_21 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 21 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_22 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 22 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_23 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 23 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_24 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 24 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_25 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 25 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_26 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 26 + 1)][_neuron_index_1_inner]);
                        __m512 ___x36_27 = _mm512_set1_ps(ensemble18grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(0 + 27 + 1)][_neuron_index_1_inner]);
                        __m512 ___x37 = _mm512_load_ps(& ensemble18weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x38_0 = _mm512_fmadd_ps(___x36_0, ___x37, ___x38_0);
                        ___x38_1 = _mm512_fmadd_ps(___x36_1, ___x37, ___x38_1);
                        ___x38_2 = _mm512_fmadd_ps(___x36_2, ___x37, ___x38_2);
                        ___x38_3 = _mm512_fmadd_ps(___x36_3, ___x37, ___x38_3);
                        ___x38_4 = _mm512_fmadd_ps(___x36_4, ___x37, ___x38_4);
                        ___x38_5 = _mm512_fmadd_ps(___x36_5, ___x37, ___x38_5);
                        ___x38_6 = _mm512_fmadd_ps(___x36_6, ___x37, ___x38_6);
                        ___x38_7 = _mm512_fmadd_ps(___x36_7, ___x37, ___x38_7);
                        ___x38_8 = _mm512_fmadd_ps(___x36_8, ___x37, ___x38_8);
                        ___x38_9 = _mm512_fmadd_ps(___x36_9, ___x37, ___x38_9);
                        ___x38_10 = _mm512_fmadd_ps(___x36_10, ___x37, ___x38_10);
                        ___x38_11 = _mm512_fmadd_ps(___x36_11, ___x37, ___x38_11);
                        ___x38_12 = _mm512_fmadd_ps(___x36_12, ___x37, ___x38_12);
                        ___x38_13 = _mm512_fmadd_ps(___x36_13, ___x37, ___x38_13);
                        ___x38_14 = _mm512_fmadd_ps(___x36_14, ___x37, ___x38_14);
                        ___x38_15 = _mm512_fmadd_ps(___x36_15, ___x37, ___x38_15);
                        ___x38_16 = _mm512_fmadd_ps(___x36_16, ___x37, ___x38_16);
                        ___x38_17 = _mm512_fmadd_ps(___x36_17, ___x37, ___x38_17);
                        ___x38_18 = _mm512_fmadd_ps(___x36_18, ___x37, ___x38_18);
                        ___x38_19 = _mm512_fmadd_ps(___x36_19, ___x37, ___x38_19);
                        ___x38_20 = _mm512_fmadd_ps(___x36_20, ___x37, ___x38_20);
                        ___x38_21 = _mm512_fmadd_ps(___x36_21, ___x37, ___x38_21);
                        ___x38_22 = _mm512_fmadd_ps(___x36_22, ___x37, ___x38_22);
                        ___x38_23 = _mm512_fmadd_ps(___x36_23, ___x37, ___x38_23);
                        ___x38_24 = _mm512_fmadd_ps(___x36_24, ___x37, ___x38_24);
                        ___x38_25 = _mm512_fmadd_ps(___x36_25, ___x37, ___x38_25);
                        ___x38_26 = _mm512_fmadd_ps(___x36_26, ___x37, ___x38_26);
                        ___x38_27 = _mm512_fmadd_ps(___x36_27, ___x37, ___x38_27);
                    }
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x38_0);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x38_1);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x38_2);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x38_3);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x38_4);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x38_5);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x38_6);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x38_7);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x38_8);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x38_9);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x38_10);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x38_11);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x38_12);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x38_13);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0], ___x38_14);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0], ___x38_15);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0], ___x38_16);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0], ___x38_17);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0], ___x38_18);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0], ___x38_19);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0], ___x38_20);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0], ___x38_21);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0], ___x38_22);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0], ___x38_23);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0], ___x38_24);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0], ___x38_25);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0], ___x38_26);
                    _mm512_store_ps(& ensemble18grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0], ___x38_27);
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble17inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble17grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble17grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble17grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[125] += omp_get_wtime();
    times[126] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble16grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble16grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x31_0 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x31_1 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x31_2 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x31_3 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x31_4 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x31_5 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x31_6 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x31_7 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x31_8 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x31_9 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x31_10 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x31_11 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x31_12 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x31_13 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x31_14 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x31_15 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x31_16 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x31_17 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x31_18 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x31_19 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x31_20 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x31_21 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x31_22 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x31_23 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x31_24 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x31_25 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x31_26 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x31_27 = _mm512_load_ps(& ensemble15inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x30 = _mm512_load_ps(& ensemble15grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        __m512 ___x32_0 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x32_1 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x32_2 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x32_3 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x32_4 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x32_5 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x32_6 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x32_7 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x32_8 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x32_9 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x32_10 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x32_11 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x32_12 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x32_13 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x32_14 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                        __m512 ___x32_15 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                        __m512 ___x32_16 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                        __m512 ___x32_17 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                        __m512 ___x32_18 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                        __m512 ___x32_19 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                        __m512 ___x32_20 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                        __m512 ___x32_21 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                        __m512 ___x32_22 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                        __m512 ___x32_23 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                        __m512 ___x32_24 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                        __m512 ___x32_25 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                        __m512 ___x32_26 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                        __m512 ___x32_27 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                        ___x30 = _mm512_fmadd_ps(___x32_0, ___x31_0, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_1, ___x31_1, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_2, ___x31_2, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_3, ___x31_3, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_4, ___x31_4, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_5, ___x31_5, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_6, ___x31_6, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_7, ___x31_7, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_8, ___x31_8, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_9, ___x31_9, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_10, ___x31_10, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_11, ___x31_11, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_12, ___x31_12, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_13, ___x31_13, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_14, ___x31_14, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_15, ___x31_15, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_16, ___x31_16, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_17, ___x31_17, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_18, ___x31_18, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_19, ___x31_19, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_20, ___x31_20, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_21, ___x31_21, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_22, ___x31_22, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_23, ___x31_23, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_24, ___x31_24, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_25, ___x31_25, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_26, ___x31_26, ___x30);
                        ___x30 = _mm512_fmadd_ps(___x32_27, ___x31_27, ___x30);
                        _mm512_store_ps(& ensemble15grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x30);
                    }
                }
            }
        }
    }
    times[126] += omp_get_wtime();
    times[127] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 12; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    int in_x_0 = (0 + 0) * 1;
                    int in_x_1 = (0 + 1) * 1;
                    int in_x_2 = (0 + 2) * 1;
                    int in_x_3 = (0 + 3) * 1;
                    int in_x_4 = (0 + 4) * 1;
                    int in_x_5 = (0 + 5) * 1;
                    int in_x_6 = (0 + 6) * 1;
                    int in_x_7 = (0 + 7) * 1;
                    int in_x_8 = (0 + 8) * 1;
                    int in_x_9 = (0 + 9) * 1;
                    int in_x_10 = (0 + 10) * 1;
                    int in_x_11 = (0 + 11) * 1;
                    int in_x_12 = (0 + 12) * 1;
                    int in_x_13 = (0 + 13) * 1;
                    int in_x_14 = (0 + 14) * 1;
                    int in_x_15 = (0 + 15) * 1;
                    int in_x_16 = (0 + 16) * 1;
                    int in_x_17 = (0 + 17) * 1;
                    int in_x_18 = (0 + 18) * 1;
                    int in_x_19 = (0 + 19) * 1;
                    int in_x_20 = (0 + 20) * 1;
                    int in_x_21 = (0 + 21) * 1;
                    int in_x_22 = (0 + 22) * 1;
                    int in_x_23 = (0 + 23) * 1;
                    int in_x_24 = (0 + 24) * 1;
                    int in_x_25 = (0 + 25) * 1;
                    int in_x_26 = (0 + 26) * 1;
                    int in_x_27 = (0 + 27) * 1;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    __m512 ___x27_0 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0]);
                    __m512 ___x27_1 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0]);
                    __m512 ___x27_2 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0]);
                    __m512 ___x27_3 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0]);
                    __m512 ___x27_4 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0]);
                    __m512 ___x27_5 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0]);
                    __m512 ___x27_6 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0]);
                    __m512 ___x27_7 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0]);
                    __m512 ___x27_8 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0]);
                    __m512 ___x27_9 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0]);
                    __m512 ___x27_10 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0]);
                    __m512 ___x27_11 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0]);
                    __m512 ___x27_12 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0]);
                    __m512 ___x27_13 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0]);
                    __m512 ___x27_14 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0]);
                    __m512 ___x27_15 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0]);
                    __m512 ___x27_16 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0]);
                    __m512 ___x27_17 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0]);
                    __m512 ___x27_18 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0]);
                    __m512 ___x27_19 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0]);
                    __m512 ___x27_20 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0]);
                    __m512 ___x27_21 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0]);
                    __m512 ___x27_22 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0]);
                    __m512 ___x27_23 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0]);
                    __m512 ___x27_24 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0]);
                    __m512 ___x27_25 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0]);
                    __m512 ___x27_26 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0]);
                    __m512 ___x27_27 = _mm512_load_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0]);
                    for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        __m512 ___x28_0 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 0)][_neuron_index_1_inner]);
                        __m512 ___x28_1 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 1)][_neuron_index_1_inner]);
                        __m512 ___x28_2 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 2)][_neuron_index_1_inner]);
                        __m512 ___x28_3 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 3)][_neuron_index_1_inner]);
                        __m512 ___x28_4 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 4)][_neuron_index_1_inner]);
                        __m512 ___x28_5 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 5)][_neuron_index_1_inner]);
                        __m512 ___x28_6 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 6)][_neuron_index_1_inner]);
                        __m512 ___x28_7 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 7)][_neuron_index_1_inner]);
                        __m512 ___x28_8 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 8)][_neuron_index_1_inner]);
                        __m512 ___x28_9 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 9)][_neuron_index_1_inner]);
                        __m512 ___x28_10 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 10)][_neuron_index_1_inner]);
                        __m512 ___x28_11 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 11)][_neuron_index_1_inner]);
                        __m512 ___x28_12 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 12)][_neuron_index_1_inner]);
                        __m512 ___x28_13 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 13)][_neuron_index_1_inner]);
                        __m512 ___x28_14 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 14)][_neuron_index_1_inner]);
                        __m512 ___x28_15 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 15)][_neuron_index_1_inner]);
                        __m512 ___x28_16 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 16)][_neuron_index_1_inner]);
                        __m512 ___x28_17 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 17)][_neuron_index_1_inner]);
                        __m512 ___x28_18 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 18)][_neuron_index_1_inner]);
                        __m512 ___x28_19 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 19)][_neuron_index_1_inner]);
                        __m512 ___x28_20 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 20)][_neuron_index_1_inner]);
                        __m512 ___x28_21 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 21)][_neuron_index_1_inner]);
                        __m512 ___x28_22 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 22)][_neuron_index_1_inner]);
                        __m512 ___x28_23 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 23)][_neuron_index_1_inner]);
                        __m512 ___x28_24 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 24)][_neuron_index_1_inner]);
                        __m512 ___x28_25 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 25)][_neuron_index_1_inner]);
                        __m512 ___x28_26 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 26)][_neuron_index_1_inner]);
                        __m512 ___x28_27 = _mm512_set1_ps(ensemble15grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(0 + 27)][_neuron_index_1_inner]);
                        __m512 ___x29 = _mm512_load_ps(& ensemble15weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                        ___x27_0 = _mm512_fmadd_ps(___x28_0, ___x29, ___x27_0);
                        ___x27_1 = _mm512_fmadd_ps(___x28_1, ___x29, ___x27_1);
                        ___x27_2 = _mm512_fmadd_ps(___x28_2, ___x29, ___x27_2);
                        ___x27_3 = _mm512_fmadd_ps(___x28_3, ___x29, ___x27_3);
                        ___x27_4 = _mm512_fmadd_ps(___x28_4, ___x29, ___x27_4);
                        ___x27_5 = _mm512_fmadd_ps(___x28_5, ___x29, ___x27_5);
                        ___x27_6 = _mm512_fmadd_ps(___x28_6, ___x29, ___x27_6);
                        ___x27_7 = _mm512_fmadd_ps(___x28_7, ___x29, ___x27_7);
                        ___x27_8 = _mm512_fmadd_ps(___x28_8, ___x29, ___x27_8);
                        ___x27_9 = _mm512_fmadd_ps(___x28_9, ___x29, ___x27_9);
                        ___x27_10 = _mm512_fmadd_ps(___x28_10, ___x29, ___x27_10);
                        ___x27_11 = _mm512_fmadd_ps(___x28_11, ___x29, ___x27_11);
                        ___x27_12 = _mm512_fmadd_ps(___x28_12, ___x29, ___x27_12);
                        ___x27_13 = _mm512_fmadd_ps(___x28_13, ___x29, ___x27_13);
                        ___x27_14 = _mm512_fmadd_ps(___x28_14, ___x29, ___x27_14);
                        ___x27_15 = _mm512_fmadd_ps(___x28_15, ___x29, ___x27_15);
                        ___x27_16 = _mm512_fmadd_ps(___x28_16, ___x29, ___x27_16);
                        ___x27_17 = _mm512_fmadd_ps(___x28_17, ___x29, ___x27_17);
                        ___x27_18 = _mm512_fmadd_ps(___x28_18, ___x29, ___x27_18);
                        ___x27_19 = _mm512_fmadd_ps(___x28_19, ___x29, ___x27_19);
                        ___x27_20 = _mm512_fmadd_ps(___x28_20, ___x29, ___x27_20);
                        ___x27_21 = _mm512_fmadd_ps(___x28_21, ___x29, ___x27_21);
                        ___x27_22 = _mm512_fmadd_ps(___x28_22, ___x29, ___x27_22);
                        ___x27_23 = _mm512_fmadd_ps(___x28_23, ___x29, ___x27_23);
                        ___x27_24 = _mm512_fmadd_ps(___x28_24, ___x29, ___x27_24);
                        ___x27_25 = _mm512_fmadd_ps(___x28_25, ___x29, ___x27_25);
                        ___x27_26 = _mm512_fmadd_ps(___x28_26, ___x29, ___x27_26);
                        ___x27_27 = _mm512_fmadd_ps(___x28_27, ___x29, ___x27_27);
                    }
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 0) * 1)][0], ___x27_0);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 1) * 1)][0], ___x27_1);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 2) * 1)][0], ___x27_2);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 3) * 1)][0], ___x27_3);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 4) * 1)][0], ___x27_4);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 5) * 1)][0], ___x27_5);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 6) * 1)][0], ___x27_6);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 7) * 1)][0], ___x27_7);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 8) * 1)][0], ___x27_8);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 9) * 1)][0], ___x27_9);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 10) * 1)][0], ___x27_10);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 11) * 1)][0], ___x27_11);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 12) * 1)][0], ___x27_12);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 13) * 1)][0], ___x27_13);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 14) * 1)][0], ___x27_14);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 15) * 1)][0], ___x27_15);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 16) * 1)][0], ___x27_16);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 17) * 1)][0], ___x27_17);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 18) * 1)][0], ___x27_18);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 19) * 1)][0], ___x27_19);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 20) * 1)][0], ___x27_20);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 21) * 1)][0], ___x27_21);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 22) * 1)][0], ___x27_22);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 23) * 1)][0], ___x27_23);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 24) * 1)][0], ___x27_24);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 25) * 1)][0], ___x27_25);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 26) * 1)][0], ___x27_26);
                    _mm512_store_ps(& ensemble15grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (0 + 27) * 1)][0], ___x27_27);
                }
            }
        }
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 28; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 28; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        int in_y = _neuron_index_2 * 2 - 0;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3 * 2 - 0;
                        int _input_offset_3 = in_x;
                        long j = ensemble14mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble14mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble14grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 55)][MIN(MAX(k + _input_offset_3, 0), 55)][_input_offset_1_inner] += ensemble14grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner - 2 + 16) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner - 2 + 16) % 16;
                        int in_y = _neuron_index_2;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3;
                        int _input_offset_3 = in_x;
                        long index = ensemble13n[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / 2;
                        ensemble13grad_inputs[_neuron_index_0][((index + _input_offset_1_inner) / 16 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((index + _input_offset_1_inner) % 16)] += ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / pow(ensemble13sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], ensemble13beta[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner]);
                        for (int i = 0; i < 5; i += 1) {
                            ensemble13grad_inputs[_neuron_index_0][((i + _input_offset_1_inner) / 16 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((i + _input_offset_1_inner) % 16)] -= 2.0 / ensemble13n[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] * ensemble13alpha[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] * (ensemble13beta[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] * ensemble13grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner]) * ensemble13inputs[_neuron_index_0][((index + _input_offset_1_inner) / 16 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((index + _input_offset_1_inner) % 16)] * ensemble13inputs[_neuron_index_0][((i + _input_offset_1_inner) / 16 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((i + _input_offset_1_inner) % 16)] / pow(ensemble13sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], ensemble13beta[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + 1);
                        }
                        if (ensemble12inputs[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble12grad_inputs[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble12grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble12grad_inputs[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[127] += omp_get_wtime();
    times[128] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble11grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble11grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 4; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x21_0 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 0) * 1)][0]);
                                __m512 ___x21_1 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 1) * 1)][0]);
                                __m512 ___x21_2 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 2) * 1)][0]);
                                __m512 ___x21_3 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 3) * 1)][0]);
                                __m512 ___x21_4 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 4) * 1)][0]);
                                __m512 ___x21_5 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 5) * 1)][0]);
                                __m512 ___x21_6 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 6) * 1)][0]);
                                __m512 ___x21_7 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 7) * 1)][0]);
                                __m512 ___x21_8 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 8) * 1)][0]);
                                __m512 ___x21_9 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 9) * 1)][0]);
                                __m512 ___x21_10 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 10) * 1)][0]);
                                __m512 ___x21_11 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 11) * 1)][0]);
                                __m512 ___x21_12 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 12) * 1)][0]);
                                __m512 ___x21_13 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 13) * 1)][0]);
                                __m512 ___x21_14 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 14) * 1)][0]);
                                __m512 ___x21_15 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 15) * 1)][0]);
                                __m512 ___x21_16 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 16) * 1)][0]);
                                __m512 ___x21_17 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 17) * 1)][0]);
                                __m512 ___x21_18 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 18) * 1)][0]);
                                __m512 ___x21_19 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 19) * 1)][0]);
                                __m512 ___x21_20 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 20) * 1)][0]);
                                __m512 ___x21_21 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 21) * 1)][0]);
                                __m512 ___x21_22 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 22) * 1)][0]);
                                __m512 ___x21_23 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 23) * 1)][0]);
                                __m512 ___x21_24 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 24) * 1)][0]);
                                __m512 ___x21_25 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 25) * 1)][0]);
                                __m512 ___x21_26 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 26) * 1)][0]);
                                __m512 ___x21_27 = _mm512_load_ps(& ensemble10inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 27) * 1)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x22 = _mm512_load_ps(& ensemble10grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x23_0 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x23_1 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x23_2 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x23_3 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x23_4 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x23_5 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x23_6 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x23_7 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x23_8 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x23_9 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x23_10 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x23_11 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x23_12 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x23_13 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x23_14 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x23_15 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x23_16 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x23_17 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x23_18 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x23_19 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x23_20 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x23_21 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x23_22 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x23_23 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x23_24 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x23_25 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x23_26 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x23_27 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    ___x22 = _mm512_fmadd_ps(___x23_0, ___x21_0, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_1, ___x21_1, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_2, ___x21_2, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_3, ___x21_3, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_4, ___x21_4, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_5, ___x21_5, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_6, ___x21_6, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_7, ___x21_7, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_8, ___x21_8, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_9, ___x21_9, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_10, ___x21_10, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_11, ___x21_11, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_12, ___x21_12, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_13, ___x21_13, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_14, ___x21_14, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_15, ___x21_15, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_16, ___x21_16, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_17, ___x21_17, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_18, ___x21_18, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_19, ___x21_19, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_20, ___x21_20, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_21, ___x21_21, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_22, ___x21_22, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_23, ___x21_23, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_24, ___x21_24, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_25, ___x21_25, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_26, ___x21_26, ___x22);
                                    ___x22 = _mm512_fmadd_ps(___x23_27, ___x21_27, ___x22);
                                    _mm512_store_ps(& ensemble10grad_weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0], ___x22);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    times[128] += omp_get_wtime();
    times[129] -= omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 4; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 12; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        for (int j = 0; j < 3; j += 1) {
                            for (int k = 0; k < 3; k += 1) {
                                __m512 ___x18_0 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 0) * 1)][0]);
                                __m512 ___x18_1 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 1) * 1)][0]);
                                __m512 ___x18_2 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 2) * 1)][0]);
                                __m512 ___x18_3 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 3) * 1)][0]);
                                __m512 ___x18_4 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 4) * 1)][0]);
                                __m512 ___x18_5 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 5) * 1)][0]);
                                __m512 ___x18_6 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 6) * 1)][0]);
                                __m512 ___x18_7 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 7) * 1)][0]);
                                __m512 ___x18_8 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 8) * 1)][0]);
                                __m512 ___x18_9 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 9) * 1)][0]);
                                __m512 ___x18_10 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 10) * 1)][0]);
                                __m512 ___x18_11 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 11) * 1)][0]);
                                __m512 ___x18_12 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 12) * 1)][0]);
                                __m512 ___x18_13 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 13) * 1)][0]);
                                __m512 ___x18_14 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 14) * 1)][0]);
                                __m512 ___x18_15 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 15) * 1)][0]);
                                __m512 ___x18_16 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 16) * 1)][0]);
                                __m512 ___x18_17 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 17) * 1)][0]);
                                __m512 ___x18_18 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 18) * 1)][0]);
                                __m512 ___x18_19 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 19) * 1)][0]);
                                __m512 ___x18_20 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 20) * 1)][0]);
                                __m512 ___x18_21 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 21) * 1)][0]);
                                __m512 ___x18_22 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 22) * 1)][0]);
                                __m512 ___x18_23 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 23) * 1)][0]);
                                __m512 ___x18_24 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 24) * 1)][0]);
                                __m512 ___x18_25 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 25) * 1)][0]);
                                __m512 ___x18_26 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 26) * 1)][0]);
                                __m512 ___x18_27 = _mm512_load_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 27) * 1)][0]);
                                for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                    __m512 ___x19 = _mm512_load_ps(& ensemble10weights[_neuron_index_1_outer][i_outer][j][k][_neuron_index_1_inner][0]);
                                    __m512 ___x20_0 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                    __m512 ___x20_1 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                    __m512 ___x20_2 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                    __m512 ___x20_3 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                    __m512 ___x20_4 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                    __m512 ___x20_5 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                    __m512 ___x20_6 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                    __m512 ___x20_7 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                    __m512 ___x20_8 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                    __m512 ___x20_9 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                    __m512 ___x20_10 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                    __m512 ___x20_11 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                    __m512 ___x20_12 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                    __m512 ___x20_13 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                    __m512 ___x20_14 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                    __m512 ___x20_15 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                    __m512 ___x20_16 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                    __m512 ___x20_17 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                    __m512 ___x20_18 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                    __m512 ___x20_19 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                    __m512 ___x20_20 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                    __m512 ___x20_21 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                    __m512 ___x20_22 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                    __m512 ___x20_23 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                    __m512 ___x20_24 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                    __m512 ___x20_25 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                    __m512 ___x20_26 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                    __m512 ___x20_27 = _mm512_set1_ps(ensemble10grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                    ___x18_0 = _mm512_fmadd_ps(___x20_0, ___x19, ___x18_0);
                                    ___x18_1 = _mm512_fmadd_ps(___x20_1, ___x19, ___x18_1);
                                    ___x18_2 = _mm512_fmadd_ps(___x20_2, ___x19, ___x18_2);
                                    ___x18_3 = _mm512_fmadd_ps(___x20_3, ___x19, ___x18_3);
                                    ___x18_4 = _mm512_fmadd_ps(___x20_4, ___x19, ___x18_4);
                                    ___x18_5 = _mm512_fmadd_ps(___x20_5, ___x19, ___x18_5);
                                    ___x18_6 = _mm512_fmadd_ps(___x20_6, ___x19, ___x18_6);
                                    ___x18_7 = _mm512_fmadd_ps(___x20_7, ___x19, ___x18_7);
                                    ___x18_8 = _mm512_fmadd_ps(___x20_8, ___x19, ___x18_8);
                                    ___x18_9 = _mm512_fmadd_ps(___x20_9, ___x19, ___x18_9);
                                    ___x18_10 = _mm512_fmadd_ps(___x20_10, ___x19, ___x18_10);
                                    ___x18_11 = _mm512_fmadd_ps(___x20_11, ___x19, ___x18_11);
                                    ___x18_12 = _mm512_fmadd_ps(___x20_12, ___x19, ___x18_12);
                                    ___x18_13 = _mm512_fmadd_ps(___x20_13, ___x19, ___x18_13);
                                    ___x18_14 = _mm512_fmadd_ps(___x20_14, ___x19, ___x18_14);
                                    ___x18_15 = _mm512_fmadd_ps(___x20_15, ___x19, ___x18_15);
                                    ___x18_16 = _mm512_fmadd_ps(___x20_16, ___x19, ___x18_16);
                                    ___x18_17 = _mm512_fmadd_ps(___x20_17, ___x19, ___x18_17);
                                    ___x18_18 = _mm512_fmadd_ps(___x20_18, ___x19, ___x18_18);
                                    ___x18_19 = _mm512_fmadd_ps(___x20_19, ___x19, ___x18_19);
                                    ___x18_20 = _mm512_fmadd_ps(___x20_20, ___x19, ___x18_20);
                                    ___x18_21 = _mm512_fmadd_ps(___x20_21, ___x19, ___x18_21);
                                    ___x18_22 = _mm512_fmadd_ps(___x20_22, ___x19, ___x18_22);
                                    ___x18_23 = _mm512_fmadd_ps(___x20_23, ___x19, ___x18_23);
                                    ___x18_24 = _mm512_fmadd_ps(___x20_24, ___x19, ___x18_24);
                                    ___x18_25 = _mm512_fmadd_ps(___x20_25, ___x19, ___x18_25);
                                    ___x18_26 = _mm512_fmadd_ps(___x20_26, ___x19, ___x18_26);
                                    ___x18_27 = _mm512_fmadd_ps(___x20_27, ___x19, ___x18_27);
                                }
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 0) * 1)][0], ___x18_0);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 1) * 1)][0], ___x18_1);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 2) * 1)][0], ___x18_2);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 3) * 1)][0], ___x18_3);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 4) * 1)][0], ___x18_4);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 5) * 1)][0], ___x18_5);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 6) * 1)][0], ___x18_6);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 7) * 1)][0], ___x18_7);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 8) * 1)][0], ___x18_8);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 9) * 1)][0], ___x18_9);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 10) * 1)][0], ___x18_10);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 11) * 1)][0], ___x18_11);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 12) * 1)][0], ___x18_12);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 13) * 1)][0], ___x18_13);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 14) * 1)][0], ___x18_14);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 15) * 1)][0], ___x18_15);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 16) * 1)][0], ___x18_16);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 17) * 1)][0], ___x18_17);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 18) * 1)][0], ___x18_18);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 19) * 1)][0], ___x18_19);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 20) * 1)][0], ___x18_20);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 21) * 1)][0], ___x18_21);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 22) * 1)][0], ___x18_22);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 23) * 1)][0], ___x18_23);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 24) * 1)][0], ___x18_24);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 25) * 1)][0], ___x18_25);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 26) * 1)][0], ___x18_26);
                                _mm512_store_ps(& ensemble10grad_inputs[_neuron_index_0][i_outer][(j * 1 + _neuron_index_2 * 1)][(k * 1 + (_neuron_index_3 + 27) * 1)][0], ___x18_27);
                            }
                        }
                    }
                }
            }
        }
    }
    #pragma omp parallel for collapse(2)
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble9inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] > 0.0) {
                            ensemble9grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = ensemble9grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                        } else {
                            ensemble9grad_inputs[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[129] += omp_get_wtime();
    times[130] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble8grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble8grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1)][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int i_outer = 0; i_outer < 4; i_outer += 1) {
            for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        __m512 ___x13_0 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 0) * 1)][0]);
                        __m512 ___x13_1 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 1) * 1)][0]);
                        __m512 ___x13_2 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 2) * 1)][0]);
                        __m512 ___x13_3 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 3) * 1)][0]);
                        __m512 ___x13_4 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 4) * 1)][0]);
                        __m512 ___x13_5 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 5) * 1)][0]);
                        __m512 ___x13_6 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 6) * 1)][0]);
                        __m512 ___x13_7 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 7) * 1)][0]);
                        __m512 ___x13_8 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 8) * 1)][0]);
                        __m512 ___x13_9 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 9) * 1)][0]);
                        __m512 ___x13_10 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 10) * 1)][0]);
                        __m512 ___x13_11 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 11) * 1)][0]);
                        __m512 ___x13_12 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 12) * 1)][0]);
                        __m512 ___x13_13 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 13) * 1)][0]);
                        __m512 ___x13_14 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 14) * 1)][0]);
                        __m512 ___x13_15 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 15) * 1)][0]);
                        __m512 ___x13_16 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 16) * 1)][0]);
                        __m512 ___x13_17 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 17) * 1)][0]);
                        __m512 ___x13_18 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 18) * 1)][0]);
                        __m512 ___x13_19 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 19) * 1)][0]);
                        __m512 ___x13_20 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 20) * 1)][0]);
                        __m512 ___x13_21 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 21) * 1)][0]);
                        __m512 ___x13_22 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 22) * 1)][0]);
                        __m512 ___x13_23 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 23) * 1)][0]);
                        __m512 ___x13_24 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 24) * 1)][0]);
                        __m512 ___x13_25 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 25) * 1)][0]);
                        __m512 ___x13_26 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 26) * 1)][0]);
                        __m512 ___x13_27 = _mm512_load_ps(& ensemble7inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 27) * 1)][0]);
                        for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                            __m512 ___x12 = _mm512_load_ps(& ensemble7grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                            __m512 ___x14_0 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_1 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_2 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_3 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_4 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_5 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_6 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_7 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_8 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_9 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_10 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_11 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_12 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_13 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_14 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_15 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_16 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_17 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_18 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_19 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_20 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_21 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_22 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_23 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_24 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_25 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_26 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][_neuron_index_1_inner]);
                            __m512 ___x14_27 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][_neuron_index_1_inner]);
                            ___x12 = _mm512_fmadd_ps(___x14_0, ___x13_0, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_1, ___x13_1, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_2, ___x13_2, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_3, ___x13_3, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_4, ___x13_4, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_5, ___x13_5, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_6, ___x13_6, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_7, ___x13_7, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_8, ___x13_8, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_9, ___x13_9, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_10, ___x13_10, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_11, ___x13_11, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_12, ___x13_12, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_13, ___x13_13, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_14, ___x13_14, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_15, ___x13_15, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_16, ___x13_16, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_17, ___x13_17, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_18, ___x13_18, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_19, ___x13_19, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_20, ___x13_20, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_21, ___x13_21, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_22, ___x13_22, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_23, ___x13_23, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_24, ___x13_24, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_25, ___x13_25, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_26, ___x13_26, ___x12);
                            ___x12 = _mm512_fmadd_ps(___x14_27, ___x13_27, ___x12);
                            _mm512_store_ps(& ensemble7grad_weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0], ___x12);
                        }
                    }
                }
            }
        }
    }
    times[130] += omp_get_wtime();
    times[131] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
        for (int i_outer = 0; i_outer < 4; i_outer += 1) {
            for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
                for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                    int in_y = _neuron_index_2 * 1;
                    int _input_offset_2 = in_y;
                    for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 28) {
                        int in_x_0 = (_neuron_index_3 + 0) * 1;
                        int in_x_1 = (_neuron_index_3 + 1) * 1;
                        int in_x_2 = (_neuron_index_3 + 2) * 1;
                        int in_x_3 = (_neuron_index_3 + 3) * 1;
                        int in_x_4 = (_neuron_index_3 + 4) * 1;
                        int in_x_5 = (_neuron_index_3 + 5) * 1;
                        int in_x_6 = (_neuron_index_3 + 6) * 1;
                        int in_x_7 = (_neuron_index_3 + 7) * 1;
                        int in_x_8 = (_neuron_index_3 + 8) * 1;
                        int in_x_9 = (_neuron_index_3 + 9) * 1;
                        int in_x_10 = (_neuron_index_3 + 10) * 1;
                        int in_x_11 = (_neuron_index_3 + 11) * 1;
                        int in_x_12 = (_neuron_index_3 + 12) * 1;
                        int in_x_13 = (_neuron_index_3 + 13) * 1;
                        int in_x_14 = (_neuron_index_3 + 14) * 1;
                        int in_x_15 = (_neuron_index_3 + 15) * 1;
                        int in_x_16 = (_neuron_index_3 + 16) * 1;
                        int in_x_17 = (_neuron_index_3 + 17) * 1;
                        int in_x_18 = (_neuron_index_3 + 18) * 1;
                        int in_x_19 = (_neuron_index_3 + 19) * 1;
                        int in_x_20 = (_neuron_index_3 + 20) * 1;
                        int in_x_21 = (_neuron_index_3 + 21) * 1;
                        int in_x_22 = (_neuron_index_3 + 22) * 1;
                        int in_x_23 = (_neuron_index_3 + 23) * 1;
                        int in_x_24 = (_neuron_index_3 + 24) * 1;
                        int in_x_25 = (_neuron_index_3 + 25) * 1;
                        int in_x_26 = (_neuron_index_3 + 26) * 1;
                        int in_x_27 = (_neuron_index_3 + 27) * 1;
                        int _input_offset_3_0 = in_x_0;
                        int _input_offset_3_1 = in_x_1;
                        int _input_offset_3_2 = in_x_2;
                        int _input_offset_3_3 = in_x_3;
                        int _input_offset_3_4 = in_x_4;
                        int _input_offset_3_5 = in_x_5;
                        int _input_offset_3_6 = in_x_6;
                        int _input_offset_3_7 = in_x_7;
                        int _input_offset_3_8 = in_x_8;
                        int _input_offset_3_9 = in_x_9;
                        int _input_offset_3_10 = in_x_10;
                        int _input_offset_3_11 = in_x_11;
                        int _input_offset_3_12 = in_x_12;
                        int _input_offset_3_13 = in_x_13;
                        int _input_offset_3_14 = in_x_14;
                        int _input_offset_3_15 = in_x_15;
                        int _input_offset_3_16 = in_x_16;
                        int _input_offset_3_17 = in_x_17;
                        int _input_offset_3_18 = in_x_18;
                        int _input_offset_3_19 = in_x_19;
                        int _input_offset_3_20 = in_x_20;
                        int _input_offset_3_21 = in_x_21;
                        int _input_offset_3_22 = in_x_22;
                        int _input_offset_3_23 = in_x_23;
                        int _input_offset_3_24 = in_x_24;
                        int _input_offset_3_25 = in_x_25;
                        int _input_offset_3_26 = in_x_26;
                        int _input_offset_3_27 = in_x_27;
                        __m512 ___x10_0 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 0) * 1)][0]);
                        __m512 ___x10_1 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 1) * 1)][0]);
                        __m512 ___x10_2 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 2) * 1)][0]);
                        __m512 ___x10_3 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 3) * 1)][0]);
                        __m512 ___x10_4 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 4) * 1)][0]);
                        __m512 ___x10_5 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 5) * 1)][0]);
                        __m512 ___x10_6 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 6) * 1)][0]);
                        __m512 ___x10_7 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 7) * 1)][0]);
                        __m512 ___x10_8 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 8) * 1)][0]);
                        __m512 ___x10_9 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 9) * 1)][0]);
                        __m512 ___x10_10 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 10) * 1)][0]);
                        __m512 ___x10_11 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 11) * 1)][0]);
                        __m512 ___x10_12 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 12) * 1)][0]);
                        __m512 ___x10_13 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 13) * 1)][0]);
                        __m512 ___x10_14 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 14) * 1)][0]);
                        __m512 ___x10_15 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 15) * 1)][0]);
                        __m512 ___x10_16 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 16) * 1)][0]);
                        __m512 ___x10_17 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 17) * 1)][0]);
                        __m512 ___x10_18 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 18) * 1)][0]);
                        __m512 ___x10_19 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 19) * 1)][0]);
                        __m512 ___x10_20 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 20) * 1)][0]);
                        __m512 ___x10_21 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 21) * 1)][0]);
                        __m512 ___x10_22 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 22) * 1)][0]);
                        __m512 ___x10_23 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 23) * 1)][0]);
                        __m512 ___x10_24 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 24) * 1)][0]);
                        __m512 ___x10_25 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 25) * 1)][0]);
                        __m512 ___x10_26 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 26) * 1)][0]);
                        __m512 ___x10_27 = _mm512_load_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 27) * 1)][0]);
                        for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                            __m512 ___x9 = _mm512_load_ps(& ensemble7weights[_neuron_index_1_outer][i_outer][0][0][_neuron_index_1_inner][0]);
                            __m512 ___x11_0 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 0 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_1 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 1 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_2 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 2 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_3 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 3 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_4 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 4 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_5 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 5 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_6 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 6 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_7 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 7 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_8 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 8 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_9 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 9 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_10 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 10 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_11 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 11 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_12 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 12 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_13 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 13 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_14 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 14 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_15 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 15 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_16 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 16 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_17 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 17 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_18 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 18 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_19 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 19 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_20 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 20 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_21 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 21 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_22 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 22 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_23 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 23 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_24 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 24 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_25 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 25 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_26 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 26 + 1)][_neuron_index_1_inner]);
                            __m512 ___x11_27 = _mm512_set1_ps(ensemble7grad[_neuron_index_0][_neuron_index_1_outer][(_neuron_index_2 + 1)][(_neuron_index_3 + 27 + 1)][_neuron_index_1_inner]);
                            ___x10_0 = _mm512_fmadd_ps(___x11_0, ___x9, ___x10_0);
                            ___x10_1 = _mm512_fmadd_ps(___x11_1, ___x9, ___x10_1);
                            ___x10_2 = _mm512_fmadd_ps(___x11_2, ___x9, ___x10_2);
                            ___x10_3 = _mm512_fmadd_ps(___x11_3, ___x9, ___x10_3);
                            ___x10_4 = _mm512_fmadd_ps(___x11_4, ___x9, ___x10_4);
                            ___x10_5 = _mm512_fmadd_ps(___x11_5, ___x9, ___x10_5);
                            ___x10_6 = _mm512_fmadd_ps(___x11_6, ___x9, ___x10_6);
                            ___x10_7 = _mm512_fmadd_ps(___x11_7, ___x9, ___x10_7);
                            ___x10_8 = _mm512_fmadd_ps(___x11_8, ___x9, ___x10_8);
                            ___x10_9 = _mm512_fmadd_ps(___x11_9, ___x9, ___x10_9);
                            ___x10_10 = _mm512_fmadd_ps(___x11_10, ___x9, ___x10_10);
                            ___x10_11 = _mm512_fmadd_ps(___x11_11, ___x9, ___x10_11);
                            ___x10_12 = _mm512_fmadd_ps(___x11_12, ___x9, ___x10_12);
                            ___x10_13 = _mm512_fmadd_ps(___x11_13, ___x9, ___x10_13);
                            ___x10_14 = _mm512_fmadd_ps(___x11_14, ___x9, ___x10_14);
                            ___x10_15 = _mm512_fmadd_ps(___x11_15, ___x9, ___x10_15);
                            ___x10_16 = _mm512_fmadd_ps(___x11_16, ___x9, ___x10_16);
                            ___x10_17 = _mm512_fmadd_ps(___x11_17, ___x9, ___x10_17);
                            ___x10_18 = _mm512_fmadd_ps(___x11_18, ___x9, ___x10_18);
                            ___x10_19 = _mm512_fmadd_ps(___x11_19, ___x9, ___x10_19);
                            ___x10_20 = _mm512_fmadd_ps(___x11_20, ___x9, ___x10_20);
                            ___x10_21 = _mm512_fmadd_ps(___x11_21, ___x9, ___x10_21);
                            ___x10_22 = _mm512_fmadd_ps(___x11_22, ___x9, ___x10_22);
                            ___x10_23 = _mm512_fmadd_ps(___x11_23, ___x9, ___x10_23);
                            ___x10_24 = _mm512_fmadd_ps(___x11_24, ___x9, ___x10_24);
                            ___x10_25 = _mm512_fmadd_ps(___x11_25, ___x9, ___x10_25);
                            ___x10_26 = _mm512_fmadd_ps(___x11_26, ___x9, ___x10_26);
                            ___x10_27 = _mm512_fmadd_ps(___x11_27, ___x9, ___x10_27);
                        }
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 0) * 1)][0], ___x10_0);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 1) * 1)][0], ___x10_1);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 2) * 1)][0], ___x10_2);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 3) * 1)][0], ___x10_3);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 4) * 1)][0], ___x10_4);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 5) * 1)][0], ___x10_5);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 6) * 1)][0], ___x10_6);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 7) * 1)][0], ___x10_7);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 8) * 1)][0], ___x10_8);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 9) * 1)][0], ___x10_9);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 10) * 1)][0], ___x10_10);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 11) * 1)][0], ___x10_11);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 12) * 1)][0], ___x10_12);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 13) * 1)][0], ___x10_13);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 14) * 1)][0], ___x10_14);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 15) * 1)][0], ___x10_15);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 16) * 1)][0], ___x10_16);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 17) * 1)][0], ___x10_17);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 18) * 1)][0], ___x10_18);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 19) * 1)][0], ___x10_19);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 20) * 1)][0], ___x10_20);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 21) * 1)][0], ___x10_21);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 22) * 1)][0], ___x10_22);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 23) * 1)][0], ___x10_23);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 24) * 1)][0], ___x10_24);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 25) * 1)][0], ___x10_25);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 26) * 1)][0], ___x10_26);
                        _mm512_store_ps(& ensemble7grad_inputs[_neuron_index_0][i_outer][(0 * 1 + _neuron_index_2 * 1)][(0 * 1 + (_neuron_index_3 + 27) * 1)][0], ___x10_27);
                    }
                }
            }
        }
        for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 56; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 56; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        int _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner - 2 + 16) / 16;
                        int _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner - 2 + 16) % 16;
                        int in_y = _neuron_index_2;
                        int _input_offset_2 = in_y;
                        int in_x = _neuron_index_3;
                        int _input_offset_3 = in_x;
                        long index = ensemble6n[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / 2;
                        ensemble6grad_inputs[_neuron_index_0][((index + _input_offset_1_inner) / 16 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((index + _input_offset_1_inner) % 16)] += ensemble6grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] / pow(ensemble6sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], ensemble6beta[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner]);
                        for (int i = 0; i < 5; i += 1) {
                            ensemble6grad_inputs[_neuron_index_0][((i + _input_offset_1_inner) / 16 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((i + _input_offset_1_inner) % 16)] -= 2.0 / ensemble6n[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] * ensemble6alpha[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] * (ensemble6beta[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] * ensemble6grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner]) * ensemble6inputs[_neuron_index_0][((index + _input_offset_1_inner) / 16 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((index + _input_offset_1_inner) % 16)] * ensemble6inputs[_neuron_index_0][((i + _input_offset_1_inner) / 16 + _input_offset_1_outer)][_input_offset_2][_input_offset_3][((i + _input_offset_1_inner) % 16)] / pow(ensemble6sum_value[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner], ensemble6beta[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] + 1);
                        }
                        _input_offset_1_outer = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) / 16;
                        _input_offset_1_inner = (_neuron_index_1_outer * 16 + _neuron_index_1_inner) % 16;
                        in_y = _neuron_index_2 * 2 - 0;
                        in_x = _neuron_index_3 * 2 - 0;
                        long j = ensemble5mask_j[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        long k = ensemble5mask_k[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        ensemble5grad_inputs[_neuron_index_0][_input_offset_1_outer][MIN(MAX(j + _input_offset_2, 0), 111)][MIN(MAX(k + _input_offset_3, 0), 111)][_input_offset_1_inner] += ensemble5grad[_neuron_index_0][(_neuron_index_1_outer + 1)][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
            for (int _neuron_index_2 = 0; _neuron_index_2 < 112; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 112; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        if (ensemble4inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] > 0.0) {
                            ensemble4grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = ensemble4grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                        } else {
                            ensemble4grad_inputs[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner] = 0.0;
                        };
                    }
                }
            }
        }
    }
    times[131] += omp_get_wtime();
    times[132] -= omp_get_wtime();
    #pragma omp parallel for
    for (int _neuron_index_1_outer = 0; _neuron_index_1_outer < 4; _neuron_index_1_outer += 1) {
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 112; _neuron_index_2 += 1) {
                for (int _neuron_index_3 = 0; _neuron_index_3 < 112; _neuron_index_3 += 1) {
                    for (int _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                        ensemble3grad_bias[_neuron_index_1_outer][0][_neuron_index_1_inner] += ensemble3grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][_neuron_index_3][_neuron_index_1_inner];
                    }
                }
            }
        }
        for (int _neuron_index_0 = 0; _neuron_index_0 < 128; _neuron_index_0 += 1) {
            for (int _neuron_index_2 = 0; _neuron_index_2 < 112; _neuron_index_2 += 1) {
                int in_y = _neuron_index_2 * 2;
                int _input_offset_2 = in_y;
                for (int _neuron_index_3 = 0; _neuron_index_3 < 112; _neuron_index_3 += 28) {
                    int in_x_0 = (_neuron_index_3 + 0) * 2;
                    int in_x_1 = (_neuron_index_3 + 1) * 2;
                    int in_x_2 = (_neuron_index_3 + 2) * 2;
                    int in_x_3 = (_neuron_index_3 + 3) * 2;
                    int in_x_4 = (_neuron_index_3 + 4) * 2;
                    int in_x_5 = (_neuron_index_3 + 5) * 2;
                    int in_x_6 = (_neuron_index_3 + 6) * 2;
                    int in_x_7 = (_neuron_index_3 + 7) * 2;
                    int in_x_8 = (_neuron_index_3 + 8) * 2;
                    int in_x_9 = (_neuron_index_3 + 9) * 2;
                    int in_x_10 = (_neuron_index_3 + 10) * 2;
                    int in_x_11 = (_neuron_index_3 + 11) * 2;
                    int in_x_12 = (_neuron_index_3 + 12) * 2;
                    int in_x_13 = (_neuron_index_3 + 13) * 2;
                    int in_x_14 = (_neuron_index_3 + 14) * 2;
                    int in_x_15 = (_neuron_index_3 + 15) * 2;
                    int in_x_16 = (_neuron_index_3 + 16) * 2;
                    int in_x_17 = (_neuron_index_3 + 17) * 2;
                    int in_x_18 = (_neuron_index_3 + 18) * 2;
                    int in_x_19 = (_neuron_index_3 + 19) * 2;
                    int in_x_20 = (_neuron_index_3 + 20) * 2;
                    int in_x_21 = (_neuron_index_3 + 21) * 2;
                    int in_x_22 = (_neuron_index_3 + 22) * 2;
                    int in_x_23 = (_neuron_index_3 + 23) * 2;
                    int in_x_24 = (_neuron_index_3 + 24) * 2;
                    int in_x_25 = (_neuron_index_3 + 25) * 2;
                    int in_x_26 = (_neuron_index_3 + 26) * 2;
                    int in_x_27 = (_neuron_index_3 + 27) * 2;
                    int _input_offset_3_0 = in_x_0;
                    int _input_offset_3_1 = in_x_1;
                    int _input_offset_3_2 = in_x_2;
                    int _input_offset_3_3 = in_x_3;
                    int _input_offset_3_4 = in_x_4;
                    int _input_offset_3_5 = in_x_5;
                    int _input_offset_3_6 = in_x_6;
                    int _input_offset_3_7 = in_x_7;
                    int _input_offset_3_8 = in_x_8;
                    int _input_offset_3_9 = in_x_9;
                    int _input_offset_3_10 = in_x_10;
                    int _input_offset_3_11 = in_x_11;
                    int _input_offset_3_12 = in_x_12;
                    int _input_offset_3_13 = in_x_13;
                    int _input_offset_3_14 = in_x_14;
                    int _input_offset_3_15 = in_x_15;
                    int _input_offset_3_16 = in_x_16;
                    int _input_offset_3_17 = in_x_17;
                    int _input_offset_3_18 = in_x_18;
                    int _input_offset_3_19 = in_x_19;
                    int _input_offset_3_20 = in_x_20;
                    int _input_offset_3_21 = in_x_21;
                    int _input_offset_3_22 = in_x_22;
                    int _input_offset_3_23 = in_x_23;
                    int _input_offset_3_24 = in_x_24;
                    int _input_offset_3_25 = in_x_25;
                    int _input_offset_3_26 = in_x_26;
                    int _input_offset_3_27 = in_x_27;
                    for (int j = 0; j < 7; j += 1) {
                        for (int k = 0; k < 7; k += 1) {
                            __m512 ___x4_0 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 0) * 2)][0]);
                            __m512 ___x4_1 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 1) * 2)][0]);
                            __m512 ___x4_2 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 2) * 2)][0]);
                            __m512 ___x4_3 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 3) * 2)][0]);
                            __m512 ___x4_4 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 4) * 2)][0]);
                            __m512 ___x4_5 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 5) * 2)][0]);
                            __m512 ___x4_6 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 6) * 2)][0]);
                            __m512 ___x4_7 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 7) * 2)][0]);
                            __m512 ___x4_8 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 8) * 2)][0]);
                            __m512 ___x4_9 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 9) * 2)][0]);
                            __m512 ___x4_10 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 10) * 2)][0]);
                            __m512 ___x4_11 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 11) * 2)][0]);
                            __m512 ___x4_12 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 12) * 2)][0]);
                            __m512 ___x4_13 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 13) * 2)][0]);
                            __m512 ___x4_14 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 14) * 2)][0]);
                            __m512 ___x4_15 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 15) * 2)][0]);
                            __m512 ___x4_16 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 16) * 2)][0]);
                            __m512 ___x4_17 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 17) * 2)][0]);
                            __m512 ___x4_18 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 18) * 2)][0]);
                            __m512 ___x4_19 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 19) * 2)][0]);
                            __m512 ___x4_20 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 20) * 2)][0]);
                            __m512 ___x4_21 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 21) * 2)][0]);
                            __m512 ___x4_22 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 22) * 2)][0]);
                            __m512 ___x4_23 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 23) * 2)][0]);
                            __m512 ___x4_24 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 24) * 2)][0]);
                            __m512 ___x4_25 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 25) * 2)][0]);
                            __m512 ___x4_26 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 26) * 2)][0]);
                            __m512 ___x4_27 = _mm512_load_ps(& ensemble2inputs[_neuron_index_0][0][(j * 1 + _neuron_index_2 * 2)][(k * 1 + (_neuron_index_3 + 27) * 2)][0]);
                            for (long _neuron_index_1_inner = 0; _neuron_index_1_inner < 16; _neuron_index_1_inner += 1) {
                                __m512 ___x3 = _mm512_load_ps(& ensemble2grad_weights[_neuron_index_1_outer][0][j][k][_neuron_index_1_inner][0]);
                                __m512 ___x5_0 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 0)][_neuron_index_1_inner]);
                                __m512 ___x5_1 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 1)][_neuron_index_1_inner]);
                                __m512 ___x5_2 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 2)][_neuron_index_1_inner]);
                                __m512 ___x5_3 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 3)][_neuron_index_1_inner]);
                                __m512 ___x5_4 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 4)][_neuron_index_1_inner]);
                                __m512 ___x5_5 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 5)][_neuron_index_1_inner]);
                                __m512 ___x5_6 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 6)][_neuron_index_1_inner]);
                                __m512 ___x5_7 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 7)][_neuron_index_1_inner]);
                                __m512 ___x5_8 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 8)][_neuron_index_1_inner]);
                                __m512 ___x5_9 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 9)][_neuron_index_1_inner]);
                                __m512 ___x5_10 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 10)][_neuron_index_1_inner]);
                                __m512 ___x5_11 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 11)][_neuron_index_1_inner]);
                                __m512 ___x5_12 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 12)][_neuron_index_1_inner]);
                                __m512 ___x5_13 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 13)][_neuron_index_1_inner]);
                                __m512 ___x5_14 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 14)][_neuron_index_1_inner]);
                                __m512 ___x5_15 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 15)][_neuron_index_1_inner]);
                                __m512 ___x5_16 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 16)][_neuron_index_1_inner]);
                                __m512 ___x5_17 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 17)][_neuron_index_1_inner]);
                                __m512 ___x5_18 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 18)][_neuron_index_1_inner]);
                                __m512 ___x5_19 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 19)][_neuron_index_1_inner]);
                                __m512 ___x5_20 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 20)][_neuron_index_1_inner]);
                                __m512 ___x5_21 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 21)][_neuron_index_1_inner]);
                                __m512 ___x5_22 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 22)][_neuron_index_1_inner]);
                                __m512 ___x5_23 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 23)][_neuron_index_1_inner]);
                                __m512 ___x5_24 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 24)][_neuron_index_1_inner]);
                                __m512 ___x5_25 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 25)][_neuron_index_1_inner]);
                                __m512 ___x5_26 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 26)][_neuron_index_1_inner]);
                                __m512 ___x5_27 = _mm512_set1_ps(ensemble2grad[_neuron_index_0][_neuron_index_1_outer][_neuron_index_2][(_neuron_index_3 + 27)][_neuron_index_1_inner]);
                                ___x3 = _mm512_fmadd_ps(___x5_0, ___x4_0, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_1, ___x4_1, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_2, ___x4_2, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_3, ___x4_3, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_4, ___x4_4, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_5, ___x4_5, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_6, ___x4_6, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_7, ___x4_7, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_8, ___x4_8, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_9, ___x4_9, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_10, ___x4_10, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_11, ___x4_11, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_12, ___x4_12, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_13, ___x4_13, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_14, ___x4_14, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_15, ___x4_15, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_16, ___x4_16, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_17, ___x4_17, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_18, ___x4_18, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_19, ___x4_19, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_20, ___x4_20, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_21, ___x4_21, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_22, ___x4_22, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_23, ___x4_23, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_24, ___x4_24, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_25, ___x4_25, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_26, ___x4_26, ___x3);
                                ___x3 = _mm512_fmadd_ps(___x5_27, ___x4_27, ___x3);
                                _mm512_store_ps(& ensemble2grad_weights[_neuron_index_1_outer][0][j][k][_neuron_index_1_inner][0], ___x3);
                            }
                        }
                    }
                }
            }
        }
    }
    times[132] += omp_get_wtime();
    printf("	times[%d] = %g\n", 0, times[0]);
    printf("	times[%d] = %g\n", 1, times[1]);
    printf("	times[%d] = %g\n", 2, times[2]);
    printf("	times[%d] = %g\n", 3, times[3]);
    printf("	times[%d] = %g\n", 4, times[4]);
    printf("	times[%d] = %g\n", 5, times[5]);
    printf("	times[%d] = %g\n", 6, times[6]);
    printf("	times[%d] = %g\n", 7, times[7]);
    printf("	times[%d] = %g\n", 8, times[8]);
    printf("	times[%d] = %g\n", 9, times[9]);
    printf("	times[%d] = %g\n", 10, times[10]);
    printf("	times[%d] = %g\n", 11, times[11]);
    printf("	times[%d] = %g\n", 12, times[12]);
    printf("	times[%d] = %g\n", 13, times[13]);
    printf("	times[%d] = %g\n", 14, times[14]);
    printf("	times[%d] = %g\n", 15, times[15]);
    printf("	times[%d] = %g\n", 16, times[16]);
    printf("	times[%d] = %g\n", 17, times[17]);
    printf("	times[%d] = %g\n", 18, times[18]);
    printf("	times[%d] = %g\n", 19, times[19]);
    printf("	times[%d] = %g\n", 20, times[20]);
    printf("	times[%d] = %g\n", 21, times[21]);
    printf("	times[%d] = %g\n", 22, times[22]);
    printf("	times[%d] = %g\n", 23, times[23]);
    printf("	times[%d] = %g\n", 24, times[24]);
    printf("	times[%d] = %g\n", 25, times[25]);
    printf("	times[%d] = %g\n", 26, times[26]);
    printf("	times[%d] = %g\n", 27, times[27]);
    printf("	times[%d] = %g\n", 28, times[28]);
    printf("	times[%d] = %g\n", 29, times[29]);
    printf("	times[%d] = %g\n", 30, times[30]);
    printf("	times[%d] = %g\n", 31, times[31]);
    printf("	times[%d] = %g\n", 32, times[32]);
    printf("	times[%d] = %g\n", 33, times[33]);
    printf("	times[%d] = %g\n", 34, times[34]);
    printf("	times[%d] = %g\n", 35, times[35]);
    printf("	times[%d] = %g\n", 36, times[36]);
    printf("	times[%d] = %g\n", 37, times[37]);
    printf("	times[%d] = %g\n", 38, times[38]);
    printf("	times[%d] = %g\n", 39, times[39]);
    printf("	times[%d] = %g\n", 40, times[40]);
    printf("	times[%d] = %g\n", 41, times[41]);
    printf("	times[%d] = %g\n", 42, times[42]);
    printf("	times[%d] = %g\n", 43, times[43]);
    printf("	times[%d] = %g\n", 44, times[44]);
    printf("	times[%d] = %g\n", 45, times[45]);
    printf("	times[%d] = %g\n", 46, times[46]);
    printf("	times[%d] = %g\n", 47, times[47]);
    printf("	times[%d] = %g\n", 48, times[48]);
    printf("	times[%d] = %g\n", 49, times[49]);
    printf("	times[%d] = %g\n", 50, times[50]);
    printf("	times[%d] = %g\n", 51, times[51]);
    printf("	times[%d] = %g\n", 52, times[52]);
    printf("	times[%d] = %g\n", 53, times[53]);
    printf("	times[%d] = %g\n", 54, times[54]);
    printf("	times[%d] = %g\n", 55, times[55]);
    printf("	times[%d] = %g\n", 56, times[56]);
    printf("	times[%d] = %g\n", 57, times[57]);
    printf("	times[%d] = %g\n", 58, times[58]);
    printf("	times[%d] = %g\n", 59, times[59]);
    printf("	times[%d] = %g\n", 60, times[60]);
    printf("	times[%d] = %g\n", 61, times[61]);
    printf("	times[%d] = %g\n", 62, times[62]);
    printf("	times[%d] = %g\n", 63, times[63]);
    printf("	times[%d] = %g\n", 64, times[64]);
    printf("	times[%d] = %g\n", 65, times[65]);
    printf("	times[%d] = %g\n", 66, times[66]);
    printf("	times[%d] = %g\n", 67, times[67]);
    printf("	times[%d] = %g\n", 68, times[68]);
    printf("	times[%d] = %g\n", 69, times[69]);
    printf("	times[%d] = %g\n", 70, times[70]);
    printf("	times[%d] = %g\n", 71, times[71]);
    printf("	times[%d] = %g\n", 72, times[72]);
    printf("	times[%d] = %g\n", 73, times[73]);
    printf("	times[%d] = %g\n", 74, times[74]);
    printf("	times[%d] = %g\n", 75, times[75]);
    printf("	times[%d] = %g\n", 76, times[76]);
    printf("	times[%d] = %g\n", 77, times[77]);
    printf("	times[%d] = %g\n", 78, times[78]);
    printf("	times[%d] = %g\n", 79, times[79]);
    printf("	times[%d] = %g\n", 80, times[80]);
    printf("	times[%d] = %g\n", 81, times[81]);
    printf("	times[%d] = %g\n", 82, times[82]);
    printf("	times[%d] = %g\n", 83, times[83]);
    printf("	times[%d] = %g\n", 84, times[84]);
    printf("	times[%d] = %g\n", 85, times[85]);
    printf("	times[%d] = %g\n", 86, times[86]);
    printf("	times[%d] = %g\n", 87, times[87]);
    printf("	times[%d] = %g\n", 88, times[88]);
    printf("	times[%d] = %g\n", 89, times[89]);
    printf("	times[%d] = %g\n", 90, times[90]);
    printf("	times[%d] = %g\n", 91, times[91]);
    printf("	times[%d] = %g\n", 92, times[92]);
    printf("	times[%d] = %g\n", 93, times[93]);
    printf("	times[%d] = %g\n", 94, times[94]);
    printf("	times[%d] = %g\n", 95, times[95]);
    printf("	times[%d] = %g\n", 96, times[96]);
    printf("	times[%d] = %g\n", 97, times[97]);
    printf("	times[%d] = %g\n", 98, times[98]);
    printf("	times[%d] = %g\n", 99, times[99]);
    printf("	times[%d] = %g\n", 100, times[100]);
    printf("	times[%d] = %g\n", 101, times[101]);
    printf("	times[%d] = %g\n", 102, times[102]);
    printf("	times[%d] = %g\n", 103, times[103]);
    printf("	times[%d] = %g\n", 104, times[104]);
    printf("	times[%d] = %g\n", 105, times[105]);
    printf("	times[%d] = %g\n", 106, times[106]);
    printf("	times[%d] = %g\n", 107, times[107]);
    printf("	times[%d] = %g\n", 108, times[108]);
    printf("	times[%d] = %g\n", 109, times[109]);
    printf("	times[%d] = %g\n", 110, times[110]);
    printf("	times[%d] = %g\n", 111, times[111]);
    printf("	times[%d] = %g\n", 112, times[112]);
    printf("	times[%d] = %g\n", 113, times[113]);
    printf("	times[%d] = %g\n", 114, times[114]);
    printf("	times[%d] = %g\n", 115, times[115]);
    printf("	times[%d] = %g\n", 116, times[116]);
    printf("	times[%d] = %g\n", 117, times[117]);
    printf("	times[%d] = %g\n", 118, times[118]);
    printf("	times[%d] = %g\n", 119, times[119]);
    printf("	times[%d] = %g\n", 120, times[120]);
    printf("	times[%d] = %g\n", 121, times[121]);
    printf("	times[%d] = %g\n", 122, times[122]);
    printf("	times[%d] = %g\n", 123, times[123]);
    printf("	times[%d] = %g\n", 124, times[124]);
    printf("	times[%d] = %g\n", 125, times[125]);
    printf("	times[%d] = %g\n", 126, times[126]);
    printf("	times[%d] = %g\n", 127, times[127]);
    printf("	times[%d] = %g\n", 128, times[128]);
    printf("	times[%d] = %g\n", 129, times[129]);
    printf("	times[%d] = %g\n", 130, times[130]);
    printf("	times[%d] = %g\n", 131, times[131]);
    printf("	times[%d] = %g\n", 132, times[132]);
};
